
(* Why3 driver for CVC3 *)

prelude "%%% this is a prelude for CVC3 "

printer "cvc3"
filename "%f-%t-%g.cvc"

(* 'fail' must be before 'valid'; otherwise it is ignored *)
fail "Parse Error: \\(.*\\)" "\\1"
valid "Valid\\."
unknown "Unknown\\." ""
outofmemory "Out of memory\\|std::bad_alloc\\|GNU MP: Cannot allocate memory"
timeout "self-timeout"
time "why3cpulimit time : %s s"

transformation "inline_trivial"
transformation "eliminate_builtin"
transformation "eliminate_definition"
transformation "eliminate_inductive"
transformation "eliminate_algebraic"
transformation "eliminate_literal"
transformation "eliminate_epsilon"

transformation "simplify_formula"
(*transformation "simplify_trivial_quantification"*)

transformation "discriminate"
transformation "encoding_smt"

theory BuiltIn
  syntax type int   "INT"
  syntax type real  "REAL"
  syntax predicate (=)  "(%1 = %2)"

  meta "encoding:kept" type int
end

theory int.Int

  prelude "%%% this is a prelude for CVC3 integer arithmetic"

  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(%1 + %2)"
  syntax function (-)  "(%1 - %2)"
  syntax function (*)  "(%1 * %2)"
  syntax function (-_) "(- %1)"

  syntax predicate (<=) "(%1 <= %2)"
  syntax predicate (<)  "(%1 < %2)"
  syntax predicate (>=) "(%1 >= %2)"
  syntax predicate (>)  "(%1 > %2)"

  remove prop MulComm.Comm
  remove prop MulAssoc.Assoc
  remove prop Unit_def_l
  remove prop Unit_def_r
  remove prop Inv_def_l
  remove prop Inv_def_r
  remove prop Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop ZeroLessOne

end


theory real.Real

  prelude "%%% this is a prelude for CVC3 real arithmetic"

  prelude "div_by_zero: (REAL) -> REAL;"

  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(%1 + %2)"
  syntax function (-)  "(%1 - %2)"
  syntax function (*)  "(%1 * %2)"
  syntax function (/)  "(IF (%2 = 0) THEN (div_by_zero(%1)) ELSE (%1 / %2) ENDIF)"
  syntax function (-_) "(- %1)"
  syntax function inv  "(IF (%1 = 0) THEN (div_by_zero(1)) ELSE (1 / %1) ENDIF)"

  syntax predicate (<=) "(%1 <= %2)"
  syntax predicate (<)  "(%1 < %2)"
  syntax predicate (>=) "(%1 >= %2)"
  syntax predicate (>)  "(%1 > %2)"

  remove prop MulComm.Comm
  remove prop MulAssoc.Assoc
  remove prop Unit_def_l
  remove prop Unit_def_r
  remove prop Inv_def_l
  remove prop Inv_def_r
  remove prop Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm
  remove prop Unitary
  remove prop Inverse
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop ZeroLessOne

  meta "encoding:kept" type real

end

theory real.FromInt

  syntax function from_int "%1"

  remove prop Zero
  remove prop One
  remove prop Add
  remove prop Sub
  remove prop Mul
  remove prop Neg

end

theory Bool
  syntax type     bool  "BITVECTOR(1)"
  syntax function True  "0bin1"
  syntax function False "0bin0"

  meta "encoding:kept" type bool
end

theory bool.Bool
  syntax function andb  "(%1 & %2)"
  syntax function orb   "(%1 | %2)"
  syntax function xorb  "(BVXOR(%1,%2))"
  syntax function notb  "(~ %1)"
end

theory HighOrd
  syntax type (->) "(ARRAY %1 OF %2)"
  syntax function (@) "(%1[%2])"

  meta "encoding:lskept" function (@)
end

theory map.Map
  syntax function get "(%1[%2])"
  syntax function set "(%1 WITH [%2] := %3)"

  meta "encoding:lskept" function get
  meta "encoding:lskept" function set
end

import "discrimination.gen"
