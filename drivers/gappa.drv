
(* Why driver for Gappa *)

prelude "# this is a prelude for Gappa"

printer "gappa" 
filename "%f-%t-%g.gappa"

valid 0
unknown "no contradiction was found\\|some enclosures were not satisfied" "Unknown"

transformation "simplify_recursive_definition"
transformation "inline_trivial"

transformation "eliminate_builtin"
transformation "eliminate_inductive"
transformation "eliminate_algebraic"
transformation "eliminate_if"
transformation "eliminate_let"
transformation "simplify_formula"
transformation "simplify_trivial_quantification"
transformation "introduce_premises"

theory BuiltIn
  syntax type int   "int"
  syntax type real  "real"
  syntax logic (=)  "(%1 = %2)"
end

theory int.Int

  prelude "# this is a prelude for Gappa integer arithmetic"

  syntax logic zero "0"
  syntax logic one  "1"

  syntax logic (+)  "(%1 + %2)"
  syntax logic (-)  "(%1 - %2)"
  syntax logic (*)  "(%1 * %2)"
  syntax logic (-_) "(-%1)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Total
  remove prop Antisymm

end

theory real.Real

  prelude "# this is a prelude for Gappa real arithmetic"

  syntax logic zero "0.0"
  syntax logic one  "1.0"

  syntax logic (+)  "(%1 + %2)"
  syntax logic (-)  "(%1 - %2)"
  syntax logic (*)  "(%1 * %2)"
  syntax logic (/)  "(%1 / %2)"
  syntax logic (-_) "(-%1)"
  syntax logic inv  "(1.0 / %1)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Total
  remove prop Antisymm
  remove prop Inverse

end

theory real.Abs

  syntax logic abs  "| %1 |"

end

(*
Local Variables: 
mode: why
compile-command: "make -C .. bench"
End: 
*)
