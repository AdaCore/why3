
printer "coq"
filename "%f_%t_%g.v"

valid 0
unknown "Error: \\(.*\\)$" "\\1"
fail "Syntax error: \\(.*\\)$" "\\1"
time "why3cpulimit time : %s s"

prelude "(* This file is generated by Why3's Coq driver *)"
prelude "(* Beware! Only edit allowed sections below    *)"

(* Ã€ discuter *)
transformation "simplify_recursive_definition"
transformation "inline_trivial"

transformation "eliminate_builtin"
transformation "eliminate_recursion"

transformation "eliminate_if"

transformation "simplify_formula"
transformation "simplify_trivial_quantification_in_goal"


theory BuiltIn

  prelude "Require Import ZArith."
  prelude "Require Import Rbase."

  syntax type   int   "Z"
  syntax type   real  "R"
  syntax logic  (=)   "(%1 = %2)"
end

theory bool.Bool

  syntax type bool   "bool"

  syntax logic True  "true"
  syntax logic False "false"

  syntax logic andb  "(andb %1 %2)"
  syntax logic orb   "(orb %1 %2)"
  syntax logic xorb  "(xorb %1 %2)"
  syntax logic notb  "(negb %1)"

end


theory int.Int

  syntax logic zero "0%Z"
  syntax logic one  "1%Z"

  syntax logic (+)  "(%1 + %2)%Z"
  syntax logic (-)  "(%1 - %2)%Z"
  syntax logic (*)  "(%1 * %2)%Z"
  syntax logic (-_) "(-%1)%Z"

  syntax logic (<=) "(%1 <= %2)%Z"
  syntax logic (<)  "(%1 <  %2)%Z"
  syntax logic (>=) "(%1 >= %2)%Z"
  syntax logic (>)  "(%1 >  %2)%Z"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop CompatOrderMult

end

theory int.Abs

  syntax logic abs "(Zabs %1)"

end

theory int.MinMax

  syntax logic min "(Zmin %1 %2)"
  syntax logic max "(Zmax %1 %2)"

end

theory int.EuclideanDivision

  prelude "Require Import Zdiv."

  syntax logic div "(Zdiv %1 %2)"
  syntax logic mod "(Zmod %1 %2)"

end

theory int.ComputerDivision

  prelude "Require Import ZOdiv."

  syntax logic div "(ZOdiv %1 %2)"
  syntax logic mod "(ZOmod %1 %2)"

end


theory real.Real

  syntax logic zero "0%R"
  syntax logic one  "1%R"

  syntax logic (+)  "(%1 + %2)%R"
  syntax logic (-)  "(%1 - %2)%R"
  syntax logic (-_) "(-%1)%R"
  syntax logic (*)  "(%1 * %2)%R"
  syntax logic (/)  "(Rdiv %1 %2)%R"
  syntax logic inv  "(Rinv %1)"

  syntax logic (<=) "(%1 <= %2)%R"
  syntax logic (<)  "(%1 <  %2)%R"
  syntax logic (>=) "(%1 >= %2)%R"
  syntax logic (>)  "(%1 >  %2)%R"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Inverse
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop CompatOrderMult

end

theory real.RealInfix

  syntax logic (+.)  "(%1 + %2)%R"
  syntax logic (-.)  "(%1 - %2)%R"
  syntax logic (-._) "(-%1)%R"
  syntax logic ( *.)  "(%1 * %2)%R"
  syntax logic (/.)  "(Rdiv %1 %2)%R"

  syntax logic (<=.) "(%1 <= %2)%R"
  syntax logic (<.)  "(%1 <  %2)%R"
  syntax logic (>=.) "(%1 >= %2)%R"
  syntax logic (>.)  "(%1 >  %2)%R"

end

theory real.Abs

  prelude "Require Import Rbasic_fun."

  syntax logic abs "(Rabs %1)"

end

theory real.FromInt

  syntax logic from_int "(IZR %1)"

end

theory real.Square

  prelude "Require Import R_sqrt."

  syntax logic sqr  "(Rsqr %1)"
  syntax logic sqrt "(sqrt %1)"  (* and not Rsqrt *)

end


theory real.ExpLog

  prelude "Require Import Rtrigo_def."
  prelude "Require Import Rpower."

  syntax logic exp "(exp %1)"
  syntax logic log "(ln %1)"

end


theory real.Power

  prelude "Require Import Rpower."

  (* no power: R -> R -> R in Coq ? (only powerRZ: R -> Z -> R) *)
end

theory real.Trigonometry

  prelude "Require Import Rtrigo."
  prelude "Require Import AltSeries. (* for def of pi *)"

  syntax logic cos "(Rtrigo_def.cos %1)"
  syntax logic sin "(Rtrigo_def.sin %1)"

  syntax logic pi "PI"

  syntax logic tan "(Rtrigo.tan %1)"
  (* syntax logic atan "atan not defined in Coq ?" *)

end
