(* Why driver for SMTLIB2 syntax *)

prelude ";;; this is a prelude for smt-lib v2"

printer "smtv2"
filename "%f-%t-%g.smt2"

valid "^unsat"
invalid "^sat"
unknown "^\\(unknown\\|Fail\\)" ""
outofmemory "(error \".*out of memory\")\\|Cannot allocate memory"
timeout "interrupted by timeout"
time "why3cpulimit time : %s s"

(* Ã€ discuter *)
transformation "inline_trivial"

transformation "eliminate_builtin"
transformation "eliminate_recursion"
transformation "eliminate_inductive"
transformation "eliminate_algebraic"
transformation "eliminate_epsilon"

transformation "simplify_formula"

(* remove pointless quantifiers from the goal *)
transformation "introduce_premises"

(* For some reason this is commented out in all drivers except gappa
and mathematica. Why? *)
(* transformation "simplify_trivial_quantification" *)

transformation "discriminate"
transformation "encoding_smt"

theory BuiltIn
  syntax type int   "Int"
  syntax type real  "Real"
  syntax predicate (=)  "(= %1 %2)"

  meta "encoding : kept" type int
end

theory algebra.Field
  remove prop add_div
  remove prop sub_div
  remove prop neg_div
  remove prop assoc_mul_div
  remove prop assoc_div_mul
  remove prop assoc_div_div
end

theory algebra.OrderedUnitaryCommutativeRing
  remove prop CompatOrderAdd
  remove prop CompatOrderMult
end

theory algebra.OrderedField
  remove prop CompatOrderAdd
  remove prop CompatOrderMult
end

theory int.Int
  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function ( * )  "(* %1 %2)"
  syntax function (-_) "(- %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc
  remove prop CommutativeGroup.Unit_def_l
  remove prop CommutativeGroup.Unit_def_r
  remove prop CommutativeGroup.Inv_def_l
  remove prop CommutativeGroup.Inv_def_r
  remove prop Assoc.Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop ZeroLessOne
end

theory int.Abs
  syntax function abs "(abs %1)"
  remove prop Abs_le
  remove prop Abs_pos
end

theory int.MinMax
   syntax function min "(ite (< %1 %2) %1 %2)"
   syntax function max "(ite (< %1 %2) %2 %1)"

   remove prop Max_l
   remove prop Min_r
   remove prop Max_comm
   remove prop Min_comm
   remove prop Max_assoc
   remove prop Min_assoc
end

theory int.EuclideanDivision
   syntax function div "(div %1 %2)"
   syntax function mod "(mod %1 %2)"

   remove prop Div_mod
   remove prop Div_bound
   remove prop Mod_bound
   remove prop Mod_1
   remove prop Div_1
   remove prop Div_inf
   remove prop Div_inf_neg
   remove prop Mod_0
   remove prop Div_1_left
   remove prop Div_minus1_left
   remove prop Mod_1_left
   remove prop Mod_minus1_left
   remove prop Div_mult
   remove prop Mod_mult
end

theory int.Div2
   remove prop div2
end

theory int.ComputerDivision
   (* really, you should use bitvectors here, but... *)
end

theory real.Real
  meta "encoding : kept" type real

  syntax function zero "0.0"
  syntax function one  "1.0"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function ( * )  "(* %1 %2)"
  syntax function (/)  "(/ %1 %2)"
  syntax function (-_) "(- %1)"
  syntax function inv  "(/ 1.0 %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop CommutativeGroup.Assoc
  remove prop CommutativeGroup.Unit_def_l
  remove prop CommutativeGroup.Unit_def_r
  remove prop CommutativeGroup.Inv_def_l
  remove prop CommutativeGroup.Inv_def_r
  remove prop CommutativeGroup.Comm.Comm
  remove prop Assoc.Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm.Comm
  remove prop Unitary
  remove prop NonTrivialRing
  remove prop Inverse
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop ZeroLessOne
end

theory real.Truncate
  syntax function truncate "(ite (>= %1 0.0)
                                 (to_int %1)
                                 (- (to_int (- %1))))"
  syntax function floor "(to_int %1)"
  syntax function ceil "(- 1 (to_int (- 1.0 %1)))"

  remove prop Truncate_int
  remove prop Truncate_down_pos
  remove prop Truncate_up_neg
  remove prop Real_of_truncate
  remove prop Truncate_monotonic
  remove prop Truncate_monotonic_int1
  remove prop Truncate_monotonic_int2
  remove prop Floor_int
  remove prop Ceil_int
  remove prop Floor_down
  remove prop Ceil_up
  remove prop Floor_monotonic
  remove prop Ceil_monotonic
end

theory real.MinMax
   syntax function min "(ite (< %1 %2) %1 %2)"
   syntax function max "(ite (< %1 %2) %2 %1)"

   remove prop Max_l
   remove prop Min_r
   remove prop Max_comm
   remove prop Min_comm
   remove prop Max_assoc
   remove prop Min_assoc
end

theory real.FromInt
  syntax function from_int "(to_real %1)"

  remove prop Zero
  remove prop One
  remove prop Add
  remove prop Sub
  remove prop Mul
  remove prop Neg
  remove prop Monotonic
end

theory real.Abs
  syntax function abs "(ite (>= %1 0.0) %1 (- %1))"

  remove prop Abs_le
  remove prop Abs_pos
  (*** remove prop Abs_zero *)
  remove prop Abs_sum
  remove prop Abs_prod
  remove prop triangular_inequality
end

theory bool.Bool
   meta "encoding : kept" type bool
   meta "eliminate_algebraic" "no_inversion"
   (* meta "eliminate_algebraic" "no_selector" *)

   syntax type     bool  "Bool"
   syntax function True  "true"
   syntax function False "false"

   syntax function andb  "(and %1 %2)"
   syntax function orb   "(or %1 %2)"
   syntax function xorb  "(xor %1 %2)"
   syntax function notb  "(not %1)"
   syntax function implb "(=> %1 %2)"
end

theory bool.Ite
  syntax function ite "(ite %1 %2 %3)"
  meta "encoding : lskept" function ite
end

theory map.Map
  syntax type map "(Array %1 %2)"
  meta "encoding : lskept" function get
  meta "encoding : lskept" function set
  meta "encoding : lskept" function const

  syntax function get   "(select %1 %2)"
  syntax function set   "(store %1 %2 %3)"
(*  syntax function const "(const[%t0] %1)" *)
end

theory bitvec.BV64
  syntax type t "(_ BitVec 64)"

  syntax function zero "#x00000000"
  syntax function ones "#xFFFFFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"

  syntax function lsr "(bvlshr %1 %2)"
  syntax function lsl "(bvshl %1 %2)"
  syntax function asr "(bvashr %1 %2)"
  syntax function of_int "((_ int2bv 64) %1)"
  syntax function to_int "(bv2nat %1)"
  remove prop to_int_of_int
  remove prop to_int_extensionality
  remove prop to_int_bounds
  syntax predicate eq "(= %1 %2)"
  remove prop Extensionality

  remove prop to_int_add
  remove prop to_int_sub
  remove prop to_int_neg
  remove prop to_int_mul
  remove prop to_int_udiv
  remove prop to_int_urem
  remove prop to_int_lsr
  remove prop to_int_lsl

  remove prop nth_ext
  remove prop Nth_zero
  remove prop Nth_ones
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Nth_rotate_left
  remove prop Nth_rotate_right
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_nth_low
  remove prop Lsl_nth_high

  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"

  syntax function nth
    "(not (= (bvand (bvlshr %1 %2) (_ bv1 64))
             (_ bv0 64)))"

  syntax function rotate_left "(bvor (bvshl %1 (bvurem %2 (_ bv64 64))) (bvlshr %1 (bvsub (_ bv64 64) (bvurem %2 (_ bv64 64)))))"
  syntax function rotate_right "(bvor (bvlshr %1 (bvurem %2 (_ bv64 64))) (bvshl %1 (bvsub (_ bv64 64) (bvurem %2 (_ bv64 64)))))"
end

theory bitvec.BV32
  syntax type t "(_ BitVec 32)"

  syntax function zero "#x00000000"
  syntax function ones "#xFFFFFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"

  syntax function lsr "(bvlshr %1 %2)"
  syntax function lsl "(bvshl %1 %2)"
  syntax function asr "(bvashr %1 %2)"
  syntax function of_int "((_ int2bv 32) %1)"
  syntax function to_int "(bv2nat %1)"
  remove prop to_int_of_int
  remove prop to_int_extensionality
  remove prop to_int_bounds
  syntax predicate eq "(= %1 %2)"
  remove prop Extensionality

  remove prop to_int_add
  remove prop to_int_sub
  remove prop to_int_neg
  remove prop to_int_mul
  remove prop to_int_udiv
  remove prop to_int_urem
  remove prop to_int_lsr
  remove prop to_int_lsl

  remove prop nth_ext
  remove prop Nth_zero
  remove prop Nth_ones
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Nth_rotate_left
  remove prop Nth_rotate_right
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_nth_low
  remove prop Lsl_nth_high

  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"

  syntax function nth
    "(not (= (bvand (bvlshr %1 %2) (_ bv1 32))
             (_ bv0 32)))"

  syntax function rotate_left "(bvor (bvshl %1 (bvurem %2 (_ bv32 32))) (bvlshr %1 (bvsub (_ bv32 32) (bvurem %2 (_ bv32 32)))))"
  syntax function rotate_right "(bvor (bvlshr %1 (bvurem %2 (_ bv32 32))) (bvshl %1 (bvsub (_ bv32 32) (bvurem %2 (_ bv32 32)))))"
end

theory bitvec.BV16
  syntax type t "(_ BitVec 16)"

  syntax function zero "#x00000000"
  syntax function ones "#xFFFFFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"

  syntax function lsr "(bvlshr %1 %2)"
  syntax function lsl "(bvshl %1 %2)"
  syntax function asr "(bvashr %1 %2)"
  syntax function of_int "((_ int2bv 16) %1)"
  syntax function to_int "(bv2nat %1)"
  remove prop to_int_of_int
  remove prop to_int_extensionality
  remove prop to_int_bounds
  syntax predicate eq "(= %1 %2)"
  remove prop Extensionality

  remove prop to_int_add
  remove prop to_int_sub
  remove prop to_int_neg
  remove prop to_int_mul
  remove prop to_int_udiv
  remove prop to_int_urem
  remove prop to_int_lsr
  remove prop to_int_lsl

  remove prop nth_ext
  remove prop Nth_zero
  remove prop Nth_ones
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Nth_rotate_left
  remove prop Nth_rotate_right
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_nth_low
  remove prop Lsl_nth_high

  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"

  syntax function nth
    "(not (= (bvand (bvlshr %1 %2) (_ bv1 16))
             (_ bv0 16)))"

  syntax function rotate_left "(bvor (bvshl %1 (bvurem %2 (_ bv16 16))) (bvlshr %1 (bvsub (_ bv16 16) (bvurem %2 (_ bv16 16)))))"
  syntax function rotate_right "(bvor (bvlshr %1 (bvurem %2 (_ bv16 16))) (bvshl %1 (bvsub (_ bv16 16) (bvurem %2 (_ bv16 16)))))"
end

theory bitvec.BV8
  syntax type t "(_ BitVec 8)"

  syntax function zero "#x00000000"
  syntax function ones "#xFFFFFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"

  syntax function lsr "(bvlshr %1 %2)"
  syntax function lsl "(bvshl %1 %2)"
  syntax function asr "(bvashr %1 %2)"
  syntax function of_int "((_ int2bv 8) %1)"
  syntax function to_int "(bv2nat %1)"
  remove prop to_int_of_int
  remove prop to_int_extensionality
  remove prop to_int_bounds
  syntax predicate eq "(= %1 %2)"
  remove prop Extensionality

  remove prop to_int_add
  remove prop to_int_sub
  remove prop to_int_neg
  remove prop to_int_mul
  remove prop to_int_udiv
  remove prop to_int_urem
  remove prop to_int_lsr
  remove prop to_int_lsl

  remove prop nth_ext
  remove prop Nth_zero
  remove prop Nth_ones
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Nth_rotate_left
  remove prop Nth_rotate_right
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_nth_low
  remove prop Lsl_nth_high

  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"

  syntax function nth
    "(not (= (bvand (bvlshr %1 %2) (_ bv1 8))
             (_ bv0 8)))"

  syntax function rotate_left "(bvor (bvshl %1 (bvurem %2 (_ bv8 8))) (bvlshr %1 (bvsub (_ bv8 8) (bvurem %2 (_ bv8 8)))))"
  syntax function rotate_right "(bvor (bvlshr %1 (bvurem %2 (_ bv8 8))) (bvshl %1 (bvsub (_ bv8 8) (bvurem %2 (_ bv8 8)))))"
end

theory bitvec.BVConverter_32_64
  syntax function toBig "((_ zero_extend 32) %1)"
  syntax function toSmall "((_ extract 31 0) %1)"
end

theory bitvec.BVConverter_16_64
  syntax function toBig "((_ zero_extend 48) %1)"
  syntax function toSmall "((_ extract 15 0) %1)"
end

theory bitvec.BVConverter_8_64
  syntax function toBig "((_ zero_extend 56) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"
end

theory bitvec.BVConverter_16_32
  syntax function toBig "((_ zero_extend 16) %1)"
  syntax function toSmall "((_ extract 15 0) %1)"
end

theory bitvec.BVConverter_8_32
  syntax function toBig "((_ zero_extend 24) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"
end

theory bitvec.BVConverter_8_16
  syntax function toBig "((_ zero_extend 8) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"
end
