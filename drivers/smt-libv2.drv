(* Why3 driver for SMT-LIB2 syntax, excluding bit-vectors *)

prelude ";;; generated by SMT-LIB2 driver"

(*

Note: we do not insert any command "set-logic" because its
interpretation is specific to provers

prelude "(set-logic AUFNIRA)"

    A  : Array
    UF : Uninterpreted Function
    DT : Datatypes (not needed at the end ...)
    NIRA : NonLinear Integer Reals Arithmetic

*)

printer "smtv2"
filename "%f-%t-%g.smt2"
unknown "^\\(unknown\\|sat\\|Fail\\)$" ""
time "why3cpulimit time : %s s"
valid "^unsat$"


theory BuiltIn
  syntax type int   "Int"
  syntax type real  "Real"
  syntax predicate (=)  "(= %1 %2)"

  meta "encoding : kept" type int
end

theory int.Int

  prelude ";;; SMT-LIB2: integer arithmetic"

  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function ( * )  "(* %1 %2)"
  syntax function (-_) "(- %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc
  remove prop CommutativeGroup.Unit_def_l
  remove prop CommutativeGroup.Unit_def_r
  remove prop CommutativeGroup.Inv_def_l
  remove prop CommutativeGroup.Inv_def_r
  remove prop Assoc.Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop ZeroLessOne

end

theory real.Real

  prelude ";;; SMT-LIB2: real arithmetic"

  syntax function zero "0.0"
  syntax function one  "1.0"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function ( * )  "(* %1 %2)"
  syntax function (/)  "(/ %1 %2)"
  syntax function (-_) "(- %1)"
  syntax function inv  "(/ 1.0 %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc
  remove prop CommutativeGroup.Unit_def_l
  remove prop CommutativeGroup.Unit_def_r
  remove prop CommutativeGroup.Inv_def_l
  remove prop CommutativeGroup.Inv_def_r
  remove prop Assoc.Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Inverse
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop ZeroLessOne

  meta "encoding : kept" type real

end

theory Bool
   syntax type     bool  "Bool"
   syntax function True  "true"
   syntax function False "false"
   meta "encoding : kept" type bool
end

theory bool.Bool
   syntax function andb  "(and %1 %2)"
   syntax function orb   "(or %1 %2)"
   syntax function xorb  "(xor %1 %2)"
   syntax function notb  "(not %1)"
   syntax function implb "(=> %1 %2)"
end

theory bool.Ite
  syntax function ite "(ite %1 %2 %3)"
  meta "encoding : lskept" function ite
end

(* not uniformly interpreted by provers
theory real.Truncate
  syntax function floor "(to_int %1)"
  remove prop Floor_down
  remove prop Floor_monotonic
end
*)

theory map.Map
  syntax type map "(Array %1 %2)"
  meta "encoding : lskept" function get
  meta "encoding : lskept" function set
  meta "encoding : lskept" function const

  syntax function get   "(select %1 %2)"
  syntax function set   "(store %1 %2 %3)"
(*  syntax function const "(const[%t0] %1)" *)
end

theory bitvec.BVConverter_32_64
  syntax function toBig "((_ zero_extend 32) %1)"
  syntax function toSmall "((_ extract 31 0) %1)"
end

theory bitvec.BVConverter_16_64
  syntax function toBig "((_ zero_extend 48) %1)"
  syntax function toSmall "((_ extract 15 0) %1)"
end

theory bitvec.BVConverter_8_64
  syntax function toBig "((_ zero_extend 56) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"
end

theory bitvec.BVConverter_16_32
  syntax function toBig "((_ zero_extend 16) %1)"
  syntax function toSmall "((_ extract 15 0) %1)"
end

theory bitvec.BVConverter_8_32
  syntax function toBig "((_ zero_extend 24) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"
end

theory bitvec.BVConverter_8_16
  syntax function toBig "((_ zero_extend 8) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"
end

theory bv.BV32
  syntax type t "(_ BitVec 32)"

  syntax function zero "#x00000000"
  syntax function ones "#xFFFFFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"
  syntax function sdiv "(bvsdiv %1 %2)"
  syntax function srem "(bvsrem %1 %2)"
  syntax function smod "(bvsmod %1 %2)"

  syntax function rotate_left "((_ rotate_left 1) %1)"
  syntax function rotate_right "((_ rotate_right 1) %1)"

  syntax function lsr "(bvlshr %1 ((_ int2bv 32) %2))"
  syntax function lsl "(bvshl %1 ((_ int2bv 32) %2))"
  syntax function asr "(bvashr %1 ((_ int2bv 32) %2))"
  syntax function lsr_bv "(bvlshr %1 %2)"
  syntax function lsl_bv "(bvshl %1 %2)"
  syntax function asr_bv "(bvashr %1 %2)"
  syntax converter of_int_const "((_ int2bv 32) %1)"
  syntax predicate eq "(= %1 %2)"
  remove prop Extensionality

  syntax predicate slt "(bvslt %1 %2)"
  syntax predicate sle "(bvsle %1 %2)"
  syntax predicate sgt "(bvsgt %1 %2)"
  syntax predicate sge "(bvsge %1 %2)"
  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"
end

theory bv.BV64
  syntax type t "(_ BitVec 64)"

  syntax function zero "#x0000000000000000"
  syntax function ones "#xFFFFFFFFFFFFFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"
  syntax function sdiv "(bvsdiv %1 %2)"
  syntax function srem "(bvsrem %1 %2)"
  syntax function smod "(bvsmod %1 %2)"

  syntax function rotate_left "((_ rotate_left 1) %1)"
  syntax function rotate_right "((_ rotate_right 1) %1)"

  syntax function lsr "(bvlshr %1 ((_ int2bv 64) %2))"
  syntax function lsl "(bvshl %1 ((_ int2bv 64) %2))"
  syntax function asr "(bvashr %1 ((_ int2bv 64) %2))"
  syntax function lsr_bv "(bvlshr %1 %2)"
  syntax function lsl_bv "(bvshl %1 %2)"
  syntax function asr_bv "(bvashr %1 %2)"
  syntax converter of_int_const "((_ int2bv 64) %1)"
  syntax predicate eq "(= %1 %2)"

  syntax predicate slt "(bvslt %1 %2)"
  syntax predicate sle "(bvsle %1 %2)"
  syntax predicate sgt "(bvsgt %1 %2)"
  syntax predicate sge "(bvsge %1 %2)"
  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"
end

theory bv.BV16
  syntax type t "(_ BitVec 16)"

  syntax function zero "#x0000"
  syntax function ones "#xFFFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"
  syntax function sdiv "(bvsdiv %1 %2)"
  syntax function srem "(bvsrem %1 %2)"
  syntax function smod "(bvsmod %1 %2)"

  syntax function rotate_left "((_ rotate_left 1) %1)"
  syntax function rotate_right "((_ rotate_right 1) %1)"

  syntax function lsr "(bvlshr %1 ((_ int2bv 16) %2))"
  syntax function lsl "(bvshl %1 ((_ int2bv 16) %2))"
  syntax function asr "(bvashr %1 ((_ int2bv 16) %2))"
  syntax function lsr_bv "(bvlshr %1 %2)"
  syntax function lsl_bv "(bvshl %1 %2)"
  syntax function asr_bv "(bvashr %1 %2)"
  syntax converter of_int_const "((_ int2bv 16) %1)"
  syntax predicate eq "(= %1 %2)"

  syntax predicate slt "(bvslt %1 %2)"
  syntax predicate sle "(bvsle %1 %2)"
  syntax predicate sgt "(bvsgt %1 %2)"
  syntax predicate sge "(bvsge %1 %2)"
  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"
end

theory bv.BV8
  syntax type t "(_ BitVec 8)"

  syntax function zero "#x00"
  syntax function ones "#xFF"
  syntax function bw_and "(bvand %1 %2)"
  syntax function bw_or "(bvor %1 %2)"
  syntax function bw_xor "(bvxor %1 %2)"
  syntax function bw_not "(bvnot %1)"

  syntax function add "(bvadd %1 %2)"
  syntax function sub "(bvsub %1 %2)"
  syntax function neg "(bvneg %1)"
  syntax function mul "(bvmul %1 %2)"
  syntax function udiv "(bvudiv %1 %2)"
  syntax function urem "(bvurem %1 %2)"
  syntax function sdiv "(bvsdiv %1 %2)"
  syntax function srem "(bvsrem %1 %2)"
  syntax function smod "(bvsmod %1 %2)"

  syntax function rotate_left "((_ rotate_left 1) %1)"
  syntax function rotate_right "((_ rotate_right 1) %1)"

  syntax function lsr "(bvlshr %1 ((_ int2bv 8) %2))"
  syntax function lsl "(bvshl %1 ((_ int2bv 8) %2))"
  syntax function asr "(bvashr %1 ((_ int2bv 8) %2))"
  syntax function lsr_bv "(bvlshr %1 %2)"
  syntax function lsl_bv "(bvshl %1 %2)"
  syntax function asr_bv "(bvashr %1 %2)"
  syntax converter of_int_const "((_ int2bv 8) %1)"
  syntax predicate eq "(= %1 %2)"

  syntax predicate slt "(bvslt %1 %2)"
  syntax predicate sle "(bvsle %1 %2)"
  syntax predicate sgt "(bvsgt %1 %2)"
  syntax predicate sge "(bvsge %1 %2)"
  syntax predicate ult "(bvult %1 %2)"
  syntax predicate ule "(bvule %1 %2)"
  syntax predicate ugt "(bvugt %1 %2)"
  syntax predicate uge "(bvuge %1 %2)"
end

theory bv.BVConverter_32_64
  syntax function toBig "((_ zero_extend 32) %1)"
  syntax function toSmall "((_ extract 31 0) %1)"

  remove prop back_from_bigBV
end

theory bv.BVConverter_16_64
  syntax function toBig "((_ zero_extend 48) %1)"
  syntax function toSmall "((_ extract 15 0) %1)"

  remove prop back_from_bigBV
end

theory bv.BVConverter_8_64
  syntax function toBig "((_ zero_extend 56) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"

  remove prop back_from_bigBV
end

theory bv.BVConverter_16_32
  syntax function toBig "((_ zero_extend 16) %1)"
  syntax function toSmall "((_ extract 15 0) %1)"

  remove prop back_from_bigBV
end

theory bv.BVConverter_8_32
  syntax function toBig "((_ zero_extend 24) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"

  remove prop back_from_bigBV
end

theory bv.BVConverter_8_16
  syntax function toBig "((_ zero_extend 8) %1)"
  syntax function toSmall "((_ extract 7 0) %1)"

  remove prop back_from_bigBV
end

theory bitvec.Pow2int

  remove prop Power_0
  remove prop Power_s
  remove prop Power_1
  remove prop Power_sum
  remove prop pow2pos
  remove prop Div_mult_inst
  remove prop Div_double
  remove prop Div_pow
  remove prop Div_double_neg
  remove prop Div_pow2
  remove prop Div_div_pow
  remove prop Mod_pow2_gen
  remove prop pow2_0
  remove prop pow2_1
  remove prop pow2_2
  remove prop pow2_3
  remove prop pow2_4
  remove prop pow2_5
  remove prop pow2_6
  remove prop pow2_7
  remove prop pow2_8
  remove prop pow2_9
  remove prop pow2_10
  remove prop pow2_11
  remove prop pow2_12
  remove prop pow2_13
  remove prop pow2_14
  remove prop pow2_15
  remove prop pow2_16
  remove prop pow2_17
  remove prop pow2_18
  remove prop pow2_19
  remove prop pow2_20
  remove prop pow2_21
  remove prop pow2_22
  remove prop pow2_23
  remove prop pow2_24
  remove prop pow2_25
  remove prop pow2_26
  remove prop pow2_27
  remove prop pow2_28
  remove prop pow2_29
  remove prop pow2_30
  remove prop pow2_31
  remove prop pow2_32
  remove prop pow2_33
  remove prop pow2_34
  remove prop pow2_35
  remove prop pow2_36
  remove prop pow2_37
  remove prop pow2_38
  remove prop pow2_39
  remove prop pow2_40
  remove prop pow2_41
  remove prop pow2_42
  remove prop pow2_43
  remove prop pow2_44
  remove prop pow2_45
  remove prop pow2_46
  remove prop pow2_47
  remove prop pow2_48
  remove prop pow2_49
  remove prop pow2_50
  remove prop pow2_51
  remove prop pow2_52
  remove prop pow2_53
  remove prop pow2_54
  remove prop pow2_55
  remove prop pow2_56
  remove prop pow2_57
  remove prop pow2_58
  remove prop pow2_59
  remove prop pow2_60
  remove prop pow2_61
  remove prop pow2_62
  remove prop pow2_63
  remove prop pow2_64
end
