(* Why3 driver for SMT-LIB2 syntax, excluding bit-vectors *)

prelude ";;; generated by SMT-LIB2 driver"

(*

Note: we do not insert any command "set-logic" because its
interpretation is specific to provers

prelude "(set-logic AUFNIRA)"

    A  : Array
    UF : Uninterpreted Function
    DT : Datatypes (not needed at the end ...)
    NIRA : NonLinear Integer Reals Arithmetic

*)

printer "smtv2"
filename "%f-%t-%g.smt2"

invalid "^sat$"
unknown "^\\(unknown\\|Fail\\)$" ""
time "why3cpulimit time : %s s"
valid "^unsat$"

theory BuiltIn
  syntax type int   "Int"
  syntax type real  "Real"
  syntax predicate (=)  "(= %1 %2)"
  meta "encoding:ignore_polymorphism_ls" predicate (=)
  meta "encoding : kept" type int
end

theory algebra.OrderedUnitaryCommutativeRing
  remove allprops
end

theory algebra.Field
  remove allprops
end

theory algebra.OrderedField
  remove allprops
end

theory int.Int

  prelude ";;; SMT-LIB2: integer arithmetic"

  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function ( * )  "(* %1 %2)"
  syntax function (-_) "(- %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove allprops
end

theory int.Abs
  syntax function abs "(abs %1)"

  remove allprops
end

theory int.MinMax
  syntax function min "(ite (< %1 %2) %1 %2)"
  syntax function max "(ite (< %1 %2) %2 %1)"

  remove allprops
end

theory int.EuclideanDivision
  syntax function div "(div %1 %2)"
  syntax function mod "(mod %1 %2)"

  remove allprops
end

theory int.Div2
  remove allprops
end

theory int.ComputerDivision
   (* really, you should use bitvectors here, but... *)
end

theory real.Real

  prelude ";;; SMT-LIB2: real arithmetic"

  meta "encoding : kept" type real

  syntax function zero "0.0"
  syntax function one  "1.0"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function ( * )  "(* %1 %2)"
  syntax function (/)  "(/ %1 %2)"
  syntax function (-_) "(- %1)"
  syntax function inv  "(/ 1.0 %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove allprops
end

theory real.Abs
  syntax function abs "(ite (>= %1 0.0) %1 (- %1))"

  remove allprops
end

theory real.MinMax
  syntax function min "(ite (< %1 %2) %1 %2)"
  syntax function max "(ite (< %1 %2) %2 %1)"

  remove allprops
end

theory real.FromInt
  syntax function from_int "(to_real %1)"

  remove allprops
end

theory real.Truncate
  syntax function truncate "(ite (>= %1 0.0)
                                 (to_int %1)
                                 (- (to_int (- %1))))"
  syntax function floor "(to_int %1)"
  syntax function ceil "(- 1 (to_int (- 1.0 %1)))"

  remove allprops
end

theory Bool
   meta "encoding : kept" type bool
   meta "eliminate_algebraic" "no_inversion"

   syntax type     bool  "Bool"
   syntax function True  "true"
   syntax function False "false"

   remove allprops
end

theory bool.Bool
   syntax function andb  "(and %1 %2)"
   syntax function orb   "(or %1 %2)"
   syntax function xorb  "(xor %1 %2)"
   syntax function notb  "(not %1)"
   syntax function implb "(=> %1 %2)"

   remove allprops
end

theory bool.Ite
  syntax function ite "(ite %1 %2 %3)"
  meta "encoding : lskept" function ite
  meta "encoding:ignore_polymorphism_ls" function ite

  remove allprops
end

theory map.Map
  syntax type map "(Array %1 %2)"
  meta "encoding:ignore_polymorphism_ts" type map

  syntax function get   "(select %1 %2)"
  syntax function set   "(store %1 %2 %3)"
  meta "encoding : lskept" function get
  meta "encoding : lskept" function set
  meta "encoding:ignore_polymorphism_ls" function get
  meta "encoding:ignore_polymorphism_ls" function ([])
  meta "encoding:ignore_polymorphism_ls" function set
  meta "encoding:ignore_polymorphism_ls" function ([<-])

  meta "encoding:ignore_polymorphism_pr" prop Select_eq
  meta "encoding:ignore_polymorphism_pr" prop Select_neq

  remove allprops
end

theory map.Const
  meta "encoding : lskept" function const
(*  syntax function const "(const[%t0] %1)" *)

end
