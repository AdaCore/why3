(* Why driver for SMTLIB2 syntax *)

prelude ";;; this is a prelude for CVC4"
prelude "(set-logic AUFBVNIRA)"
(** A    : Array
    UF   : Uninterpreted Function
    BV   : Bitvectors
    NIRA : NonLinear Integer Reals Arithmetic

    Note that this logic is a CVC4 extension and not part of SMTLIB2.
*)

printer "smtv2"
filename "%f-%t-%g.smt2"

valid "^unsat"
invalid "^sat"
unknown "^\\(unknown\\|Fail\\)" ""
outofmemory "(error \".*out of memory\")\\|Cannot allocate memory"
timeout "interrupted by timeout"
time "why3cpulimit time : %s s"

transformation "inline_trivial"

transformation "eliminate_builtin"
transformation "eliminate_recursion"
transformation "eliminate_inductive"
transformation "eliminate_algebraic"
transformation "eliminate_epsilon"

transformation "simplify_formula"

(* remove pointless quantifiers from the goal *)
transformation "introduce_premises"

(* For some reason this is commented out in all drivers except gappa
and mathematica. Why? *)
(* transformation "simplify_trivial_quantification" *)

transformation "discriminate"
transformation "encoding_smt"

theory BuiltIn
  syntax type int   "Int"
  syntax type real  "Real"
  syntax predicate (=)  "(= %1 %2)"

  meta "encoding : kept" type int
end

theory algebra.Field
  remove prop add_div
  remove prop sub_div
  remove prop neg_div
  remove prop assoc_mul_div
  remove prop assoc_div_mul
  remove prop assoc_div_div
end

theory algebra.OrderedUnitaryCommutativeRing
  remove prop CompatOrderAdd
  remove prop CompatOrderMult
end

theory algebra.OrderedField
  remove prop CompatOrderAdd
  remove prop CompatOrderMult
end

theory int.Int
  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function (*)  "(* %1 %2)"
  syntax function (-_) "(- %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc
  remove prop CommutativeGroup.Unit_def_l
  remove prop CommutativeGroup.Unit_def_r
  remove prop CommutativeGroup.Inv_def_l
  remove prop CommutativeGroup.Inv_def_r
  remove prop Assoc.Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop ZeroLessOne
end

theory int.Abs
  syntax function abs "(abs %1)"
  remove prop Abs_le
  remove prop Abs_pos
end

theory int.MinMax
   syntax function min "(ite (< %1 %2) %1 %2)"
   syntax function max "(ite (< %1 %2) %2 %1)"

   remove prop Max_is_ge
   remove prop Max_is_some
   remove prop Min_is_le
   remove prop Min_is_some
   remove prop Max_x
   remove prop Max_y
   remove prop Min_x
   remove prop Min_y
   remove prop Max_sym
   remove prop Min_sym
end

theory int.EuclideanDivision
   syntax function div "(div %1 %2)"
   syntax function mod "(mod %1 %2)"

   remove prop Div_mod
   remove prop Div_bound
   remove prop Mod_bound
   remove prop Mod_1
   remove prop Div_1
   remove prop Div_inf
   remove prop Div_inf_neg
   remove prop Mod_0
   remove prop Div_1_left
   remove prop Div_minus1_left
   remove prop Mod_1_left
   remove prop Mod_minus1_left
   remove prop Div_mult
   remove prop Mod_mult
end

theory int.Div2
   remove prop div2
end

theory int.ComputerDivision
   (* really, you should use bitvectors here, but... *)
end

theory real.Real
  meta "encoding : kept" type real

  syntax function zero "0.0"
  syntax function one  "1.0"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function (*)  "(* %1 %2)"
  syntax function (/)  "(/ %1 %2)"
  syntax function (-_) "(- %1)"
  syntax function inv  "(/ 1.0 %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop CommutativeGroup.Assoc
  remove prop CommutativeGroup.Unit_def_l
  remove prop CommutativeGroup.Unit_def_r
  remove prop CommutativeGroup.Inv_def_l
  remove prop CommutativeGroup.Inv_def_r
  remove prop CommutativeGroup.Comm.Comm
  remove prop Assoc.Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm.Comm
  remove prop Unitary
  remove prop NonTrivialRing
  remove prop Inverse
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop ZeroLessOne
end

theory real.Truncate
  syntax function truncate "(ite (>= %1 0.0)
                                 (to_int %1)
                                 (- (to_int (- %1))))"
  syntax function floor "(to_int %1)"
  syntax function ceil "(- 1 (to_int (- 1.0 %1))))"

  remove prop Truncate_int
  remove prop Truncate_down_pos
  remove prop Truncate_up_neg
  remove prop Real_of_truncate
  remove prop Truncate_monotonic
  remove prop Truncate_monotonic_int1
  remove prop Truncate_monotonic_int2
  remove prop Floor_int
  remove prop Ceil_int
  remove prop Floor_down
  remove prop Ceil_up
  remove prop Floor_monotonic
  remove prop Ceil_monotonic
end

theory real.MinMax
   syntax function min "(ite (< %1 %2) %1 %2)"
   syntax function max "(ite (< %1 %2) %2 %1)"

   remove prop Max_is_ge
   remove prop Max_is_some
   remove prop Min_is_le
   remove prop Min_is_some
   remove prop Max_x
   remove prop Max_y
   remove prop Min_x
   remove prop Min_y
   remove prop Max_sym
   remove prop Min_sym
end

theory real.FromInt
  syntax function from_int "(to_real %1)"

  remove prop Zero
  remove prop One
  remove prop Add
  remove prop Sub
  remove prop Mul
  remove prop Neg
  remove prop Monotonic
end

theory real.Abs
  syntax function abs "(ite (>= 0.0 %1) %1 (- %1))"

  remove prop Abs_le
  remove prop Abs_pos
  (*** remove prop Abs_zero *)
  remove prop Abs_sum
  remove prop Abs_prod
  remove prop triangular_inequality
end

theory bool.Bool
   meta "encoding : kept" type bool
   meta "eliminate_algebraic" "no_inversion"
   (* meta "eliminate_algebraic" "no_selector" *)

   syntax type     bool  "Bool"
   syntax function True  "true"
   syntax function False "false"

   syntax function andb  "(and %1 %2)"
   syntax function orb   "(or %1 %2)"
   syntax function xorb  "(xor %1 %2)"
   syntax function notb  "(not %1)"
   syntax function implb "(=> %1 %2)"
end

theory bool.Ite
  syntax function ite "(ite %1 %2 %3)"
  meta "encoding : lskept" function ite
end

theory map.Map
  syntax type map "(Array %1 %2)"
  meta "encoding : lskept" function get
  meta "encoding : lskept" function set
  meta "encoding : lskept" function const

  syntax function get   "(select %1 %2)"
  syntax function set   "(store %1 %2 %3)"
(*  syntax function const "(const[%t0] %1)" *)
end
