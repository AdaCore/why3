(* Why driver for SMT syntax *)

prelude "%%% this is a prelude for CVC3 "

printer "cvc3"
filename "%f-%t-%g.cvc"

valid "Valid."
unknown "Unknown." ""
time "why3cpulimit time : %s s"

(* À discuter *)
transformation "simplify_recursive_definition"
transformation "inline_trivial"

transformation "eliminate_builtin"
transformation "eliminate_definition"
transformation "eliminate_inductive"
transformation "eliminate_algebraic_smt"

transformation "simplify_formula"
(*transformation "simplify_trivial_quantification"*)

transformation "encoding_smt"

theory BuiltIn
  syntax type int   "INT"
  syntax type real  "REAL"
  syntax logic (=)  "(%1 = %2)"

  meta "encoding : kept" type int
end

theory int.Int

  prelude "%%% this is a prelude for CVC3 integer arithmetic"

  syntax logic zero "0"
  syntax logic one  "1"

  syntax logic (+)  "(%1 + %2)"
  syntax logic (-)  "(%1 - %2)"
  syntax logic (*)  "(%1 * %2)"
  syntax logic (-_) "(- %1)"

  syntax logic (<=) "(%1 <= %2)"
  syntax logic (<)  "(%1 < %2)"
  syntax logic (>=) "(%1 >= %2)"
  syntax logic (>)  "(%1 > %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd

end


theory real.Real

  prelude "%%% this is a prelude for CVC3 real arithmetic"

  syntax logic zero "0"
  syntax logic one  "1"


  syntax logic (+)  "(%1 + %2)"
  syntax logic (-)  "(%1 - %2)"
  syntax logic (*)  "(%1 * %2)"
  syntax logic (/)  "(%1 / %2)"
  syntax logic (-_) "(- %1)"
  syntax logic inv  "(1 / %1)"

  syntax logic (<=) "(%1 <= %2)"
  syntax logic (<)  "(%1 < %2)"
  syntax logic (>=) "(%1 >= %2)"
  syntax logic (>)  "(%1 > %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Inverse
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd

  meta "encoding : kept" type real

end

(*
(* L'encodage des types sommes bloquent cette théorie builtin *)
theory bool.Bool
   syntax type bool   "BITVECTOR(1)"
   syntax logic True  "0bin1"
   syntax logic False "0bin0"
   syntax logic andb  "(%1 & %2)"
   syntax logic orb   "(%1 | %2)"
   syntax logic xorb  "(BVXOR(%1,%2))"
   syntax logic notb  "(~ %1)"
   meta cloned "encoding_decorate : kept" type bool
end
*)

(*
theory int.EuclideanDivision
   syntax logic div "(div %1 %2)"
   syntax logic mod "(mod %1 %2)"
   remove prop Mod_bound
   remove prop Div_mod
   remove prop Mod_1
   remove prop Div_1
end
*)


theory map.Map
  syntax type map "(ARRAY %1 OF %2)"
  meta "encoding : lskept" logic get
  meta "encoding : lskept" logic set

  syntax logic get "(%1[%2])"
  syntax logic set "(%1 WITH [%2] := %3)"
end

(*
Local Variables:
mode: why
compile-command: "unset LANG; make -C .. bench"
End:
*)
