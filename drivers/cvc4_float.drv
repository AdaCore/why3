(** Why3 driver for CVC4 >= 1.4 *)

prelude ";; produced by cvc4_14.drv ;;"
prelude "(set-logic ALL_SUPPORTED)"
(*
    A  : Array
    UF : Uninterpreted Function
    BV : BitVectors
    DT : Datatypes
    NIRA : NonLinear Integer Reals Arithmetic
*)
prelude "(set-info :source |VC generated by SPARK 2014|)"
prelude "(set-info :smt-lib-version 2.0)"
prelude "(set-info :category industrial)"
prelude "(set-info :status unknown)"

import "smt-libv2.drv"
import "smt-libv2-bv.gen"
import "discrimination.gen"

transformation "inline_trivial"
transformation "eliminate_builtin"
transformation "detect_polymorphism"
transformation "eliminate_inductive"
transformation "eliminate_algebraic_if_poly"
transformation "eliminate_epsilon"

transformation "simplify_formula"
(*transformation "simplify_trivial_quantification"*)

transformation "discriminate_if_poly"
transformation "encoding_smt_if_poly"

(* remove pointless quantifiers from the goal *)
transformation "introduce_premises"

(** Error messages specific to CVC4 *)

outofmemory "(error \".*out of memory\")\\|Cannot allocate memory"
timeout "interrupted by timeout"
steps "smt::SmtEngine::resourceUnitsUsed, \\([0-9]+.?[0-9]*\\)" 1
(**
Unfortunately, there is no specific output message when CVC4 reaches its resource limit
steplimitexceeded "??"
*)

(** Extra theories supported by CVC4 *)

(* Disabled:
   CVC4 seems less efficient with its built-in implementation than
   with the axiomatic version
*)
(*
theory int.EuclideanDivision
   syntax function div "(div %1 %2)"
   syntax function mod "(mod %1 %2)"
   remove prop Mod_bound
   remove prop Div_mod
   remove prop Mod_1
   remove prop Div_1
end
*)

import "cvc4_bv.gen"
import "smt-libv2-floats.gen"

(**********************************************************************
 ***                       gnat2why theories                        ***
 **********************************************************************)

theory "ada__model".Finite_Float_Literal
  remove prop l_real
  remove prop l_is_finite
end

theory _gnatprove_standard_th.Integer
   syntax function bool_eq "(= %1 %2)"
   syntax function bool_ne "(not (= %1 %2))"
   syntax function bool_lt "(< %1 %2)"
   syntax function bool_le "(<= %1 %2)"
   syntax function bool_gt "(> %1 %2)"
   syntax function bool_ge "(>= %1 %2)"

   remove prop bool_eq_axiom
   remove prop bool_ne_axiom
   remove prop bool_lt_axiom
   remove prop bool_int__le_axiom
   remove prop bool_gt_axiom
   remove prop bool_ge_axiom
end

theory _gnatprove_standard_th.Boolean_Func
   syntax function bool_eq "(= %1 %2)"
end

theory ada__model.Finite_Float_Literal
  remove prop l_bin
end

theory ada__model_th.Discrete_Base_Theory
  syntax function bool_eq "(= %1 %2)"
end

theory _gnatprove_standard.BVAda
   syntax function bool_eq "(= %1 %2)"
   syntax function bool_ne "(not (= %1 %2))"
   syntax function bool_lt "(bvult %1 %2)"
   syntax function bool_le "(bvule %1 %2)"
   syntax function bool_gt "(bvugt %1 %2)"
   syntax function bool_ge "(bvuge %1 %2)"

   remove prop Power_0
   remove prop Power_1
   remove prop Power_s
   remove prop Power_s_alt
   remove prop Power_sum
   remove prop Power_mult
   remove prop Power_mult2

   remove prop bv_min_to_uint
   remove prop bv_max_to_uint
end

(*
Local Variables:
mode: why
compile-command: "unset LANG; make -C .. bench"
End:
*)
