
(* Why driver for Alt-Ergo *)

prelude "(* this is a prelude for Alt-Ergo*)"

printer "alt-ergo"
filename "%f-%t-%s.why"
call_on_file  "alt-ergo %s"

valid "Valid"
invalid "Invalid"
unknown "I don't know" "Unknown"
fail "typing error:\\(.*\\)$" "Failure : File generation error : \\1"

(* Ã€ discuter *)
transformations
  "simplify_recursive_definition"
  "compile_match"
  "eliminate_definition"
  "eliminate_algebraic"
  "eliminate_let"
  "inline_trivial"
  "split_goal_pos_neg_goal" (*"split_goal_pos_neg_all"*)
end


theory BuiltIn
  syntax type int "int"
  syntax type real "real"

  syntax logic (_=_) "(%1 = %2)"

  syntax logic (_<>_) "(%1 <> %2)"

end


theory int.Int

  prelude "(* this is a prelude for Alt-Ergo arithmetic *)"

  syntax logic zero "0"

  syntax logic (_+_) "(%1 + %2)"
  syntax logic (_-_) "(%1 - %2)"
  syntax logic (_*_) "(%1 * %2)"
  syntax logic (-_)  "(-%1)"

  syntax logic (_<=_) "(%1 <= %2)"
  syntax logic (_<_) "(%1 <  %2)"
  syntax logic (_>=_) "(%1 >= %2)"
  syntax logic (_>_) "(%1 >  %2)"

  remove prop CommutativeGroup.Comm.Comm
  remove prop CommutativeGroup.Assoc.Assoc
  remove prop CommutativeGroup.Unit_def
  remove prop CommutativeGroup.Inv_def
  remove prop Assoc.Assoc
  remove prop Mul_distr
  remove prop Comm.Comm
  remove prop Unitary

end

theory bool.Bool
  syntax type  bool  "bool"
  syntax logic True  "true"
  syntax logic False "false"
end

theory unit.Unit
  syntax type  unit "unit"
  syntax logic Unit "void"
end

theory algebra.AC
  tag cloned logic op "AC"
  remove cloned prop Comm.Comm
  remove cloned prop Assoc.Assoc
end

(*
Local Variables: 
mode: why
compile-command: "make -C ../.. bench"
End: 
*)
