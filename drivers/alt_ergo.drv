(* Driver for the most recent version of Alt-Ergo *)

import "alt_ergo_bare.drv"

theory BuiltIn
  meta "eliminate_algebraic" "keep_enums"
  meta "eliminate_algebraic" "keep_recs"
end


theory int.EuclideanDivision

  (* protection against wrongs semantics for negative arguments *)

  prelude "logic safe_div: int, int -> int"
  prelude "axiom safe_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_div(x,y) = x / y"

  prelude "logic safe_mod: int, int -> int"
  prelude "axiom safe_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_mod(x,y) = x % y"

  syntax function div "safe_div(%1,%2)"
  syntax function mod "safe_mod(%1,%2)"

end

theory int.ComputerDivision

  (* protection against wrongs semantics for negative arguments *)

  prelude "logic safe_div: int, int -> int"
  prelude "axiom safe_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_div(x,y) = x / y"

  prelude "logic safe_mod: int, int -> int"
  prelude "axiom safe_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_mod(x,y) = x % y"

  syntax function div "safe_div(%1,%2)"
  syntax function mod "safe_mod(%1,%2)"

end

theory map.Map
  syntax type  map "(%1,%2) farray"

  syntax function get "(%1[%2])"
  syntax function set "(%1[%2 <- %3])"

  remove prop Select_eq
  remove prop Select_neq
end

(*
Local Variables:
mode: why
compile-command: "make -C .. bench"
End:
*)
