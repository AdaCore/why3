
(* OCaml driver
   Generic part, for both 32-bit and 64-bit architectures *)

printer "ocaml"

theory BuiltIn
  syntax type int "Why3__BigInt.t"
  syntax predicate  (=)   "(%1 = %2)"
end

theory HighOrd
  syntax type func "(%1 -> %2)"
  syntax type pred "(%1 -> bool)"
  syntax function (@) "(%1 %2)"
end

theory option.Option
  syntax type     option "(%1 option)"
  syntax function None   "None"
  syntax function Some   "(Some %1)"
end

(* bool *)

theory Bool
  syntax type     bool  "bool"
  syntax function True  "true"
  syntax function False "false"
end

theory bool.Ite
  syntax function ite "(if %1 then %2 else %3)"
end

theory bool.Bool
  syntax function andb  "(%1 && %2)"
  syntax function orb   "(%1 || %2)"
  syntax function xorb  "(%1 <> %2)"
  syntax function notb  "(not %1)"
  syntax function implb "(not %1 || %2)"
end

(* int *)

theory int.Int
  syntax constant zero "Why3__BigInt.zero"
  syntax constant one  "Why3__BigInt.one"

  syntax predicate (<)  "(Why3__BigInt.lt %1 %2)"
  syntax predicate (<=) "(Why3__BigInt.le %1 %2)"
  syntax predicate (>)  "(Why3__BigInt.gt %1 %2)"
  syntax predicate (>=) "(Why3__BigInt.ge %1 %2)"

  syntax function (+)   "(Why3__BigInt.add %1 %2)"
  syntax function (-)   "(Why3__BigInt.sub %1 %2)"
  syntax function ( * ) "(Why3__BigInt.mul %1 %2)"
  syntax function (-_)  "(Why3__BigInt.minus %1)"
end

theory int.Abs
  syntax function abs "(Why3__BigInt.abs %1)"
end

theory int.MinMax
  syntax function min "(Why3__BigInt.min %1 %2)"
  syntax function max "(Why3__BigInt.max %1 %2)"
end

theory int.Lex2
  syntax predicate lt_nat "(Why3__BigInt.lt_nat %1 %2)"
  syntax predicate lex    "(Why3__BigInt.lex %1 %2)"
end

theory int.EuclideanDivision
  syntax function div "(Why3__BigInt.euclidean_div %1 %2)"
  syntax function mod "(Why3__BigInt.euclidean_mod %1 %2)"
end

theory int.ComputerDivision
  syntax function div "(Why3__BigInt.computer_div %1 %2)"
  syntax function mod "(Why3__BigInt.computer_mod %1 %2)"
end

theory int.Power
  syntax function power "(Why3__BigInt.power %1 %2)"
end

theory int.Fact
  syntax function fact "(Why3__IntAux.fact %1)"
end

theory int.Fibonacci
  syntax function fib "(Why3__IntAux.fib %1)"
end

(* TODO number.Gcd *)

(* list *)

theory list.List
  syntax type     list "%1 list"
  syntax function Nil  "[]"
  syntax function Cons "(%1 :: %2)"
end

theory list.Mem
  syntax predicate mem "(List.mem %1 %2)"
end

theory list.Append
  syntax function (++) "(List.append %1 %2)"
end

theory list.Reverse
  syntax function reverse "(List.rev %1)"
end

theory list.RevAppend
  syntax function rev_append "(List.rev_append %1 %2)"
end

theory list.Combine
  syntax function combine "(List.combine %1 %2)"
end

(* WhyML *)

module ref.Ref
  syntax type     ref      "(%1 Pervasives.ref)"
  syntax function contents "%1.Pervasives.contents"
  syntax val      ref      "Pervasives.ref"
  syntax val      (!_)     "Pervasives.(!)"
  syntax val      (:=)     "Pervasives.(:=)"
end

module stack.Stack
  syntax type      t        "(%1 Stack.t)"
  syntax val       create   "Stack.create"
  syntax val       push     "Stack.push"
  syntax exception Empty    "Stack.Empty"
  syntax val       pop      "Stack.pop"
  syntax val       top      "Stack.top"
  syntax val       safe_pop "Stack.pop"
  syntax val       safe_top "Stack.top"
  syntax val       clear    "Stack.clear"
  syntax val       copy     "Stack.copy"
  syntax val       is_empty "Stack.is_empty"
  syntax val       length   "Why3__IntAux.stack_length"
end

module queue.Queue
  syntax type      t         "(%1 Queue.t)"
  syntax val       create    "Queue.create"
  syntax val       push      "Queue.push"
  syntax exception Empty     "Queue.Empty"
  syntax val       pop       "Queue.pop"
  syntax val       peek      "Queue.peek"
  syntax val       safe_pop  "Queue.pop"
  syntax val       safe_peek "Queue.peek"
  syntax val       clear     "Queue.clear"
  syntax val       copy      "Queue.copy"
  syntax val       is_empty  "Queue.is_empty"
  syntax val       length    "Why3__IntAux.queue_length"
  syntax val       transfer  "Queue.transfer"
end

module array.Array
  syntax type array "(%1 Why3__Array.t)"

  syntax function ([]) "(Why3__Array.get %1 %2)"

  syntax exception OutOfBounds "Why3__Array.OutOfBounds"

  syntax val ([])          "Why3__Array.get"
  syntax val ([]<-)        "Why3__Array.set"
  syntax val length        "Why3__Array.length"
  syntax val defensive_get "Why3__Array.defensive_get"
  syntax val defensive_set "Why3__Array.defensive_set"
  syntax val make          "Why3__Array.make"
  syntax val append        "Why3__Array.append"
  syntax val sub           "Why3__Array.sub"
  syntax val copy          "Why3__Array.copy"
  syntax val fill          "Why3__Array.fill"
  syntax val blit          "Why3__Array.blit"
end

module mach.int.Int
  syntax val ( / ) "Why3__BigInt.computer_div"
  syntax val ( % ) "Why3__BigInt.computer_mod"
end

module mach.int.Int31
  (* even on a 64-bit machine, it is safe to use type int for 31-bit integers *)
  syntax val       of_int   "Why3__BigInt.to_int"
  syntax converter of_int   "%1"

  syntax function to_int "(Why3__BigInt.of_int %1)"

  syntax type     int31     "int"
  syntax val      ( + )     "( + )"
  syntax val      ( - )     "( - )"
  syntax val      (-_)      "( ~- )"
  syntax val      ( * )     "( * )"
  syntax val      ( / )     "( / )"
  syntax val      ( % )     "(mod)"
  syntax val      eq        "(=)"
  syntax val      ne        "(<>)"
  syntax val      (<=)      "(<=)"
  syntax val      (<)       "(<)"
  syntax val      (>=)      "(>=)"
  syntax val      (>)       "(>)"
end

module mach.int.UInt64
  (* no OCaml library for unsigned 64-bit integers => we use BigInt *)
  syntax val       of_int   "(fun x -> x)"
  syntax converter of_int   "(Why3__BigInt.of_string \"%1\")"

  syntax function to_int "%1"

  syntax type     uint64    "Why3__BigInt.t"
  syntax val      ( + )     "Why3__BigInt.add"
  syntax val      ( - )     "Why3__BigInt.sub"
  syntax val      (-_)      "Why3__BigInt.minus"
  syntax val      ( * )     "Why3__BigInt.mul"
  syntax val      ( / )     "Why3__BigInt.computer_div"
  syntax val      ( % )     "Why3__BigInt.computer_mod"
  syntax val      eq        "(=)"
  syntax val      ne        "(<>)"
  syntax val      (<=)      "(<=)"
  syntax val      (<)       "(<)"
  syntax val      (>=)      "(>=)"
  syntax val      (>)       "(>)"
end

module mach.array.Array31
  syntax type array  "(%1 array)"

  syntax val  make   "Array.make"
  syntax val  ([])   "Array.get"
  syntax val  ([]<-) "Array.set"
  syntax val  length "Array.length"
  syntax val  append "Array.append"
  syntax val  sub    "Array.sub"
  syntax val  copy   "Array.copy"
  syntax val  fill   "Array.fill"
  syntax val  blit   "Array.blit"
  syntax val  self_blit "Array.blit"
end


module string.Char
  syntax type char "Pervasives.char"
  syntax val chr "Why3__BigInt.chr"
  syntax val code "Why3__BigInt.code"
  syntax function uppercase "Char.uppercase"
  syntax function lowercase "Char.lowercase"
end


module io.StdIO
  syntax val print_char "Pervasives.print_char"
  syntax val print_int "Why3__BigInt.print"
  syntax val print_newline "Pervasives.print_newline"
end

module null.Null

  syntax type t           "%1"
  syntax val  create_null "(fun () -> Obj.magic (ref 0))"
  syntax val  eq_null     "(==)"
  syntax val  create      "(fun x -> x)"
  syntax val  get         "(fun x -> x)"

end

module random.Random

  syntax val random_int    "Why3__BigInt.random_int"

end
