
(* OCaml driver
   Generic part, for both 32-bit and 64-bit architectures *)

printer "ocaml"

theory BuiltIn
  syntax type int "Z.t"
  syntax predicate  (=)   "(%1 = %2)"
end

import "ocaml-no-arith.drv"

(* int *)

module int.Int
  syntax constant zero "Z.zero"
  syntax constant one  "Z.one"

  syntax predicate (<)  "(Z.lt  %1 %2)"
  syntax predicate (<=) "(Z.leq %1 %2)"
  syntax predicate (>)  "(Z.gt  %1 %2)"
  syntax predicate (>=) "(Z.geq %1 %2)"
  syntax val (=)  "(Z.equal %1 %2)"

  syntax function (+)   "(Z.add %1 %2)"
  syntax function (-)   "(Z.sub %1 %2)"
  syntax function ( * ) "(Z.mul %1 %2)"
  syntax function (-_)  "(Z.neg %1)"
end

theory int.Abs
  syntax function abs "(Z.abs %1)"
end

theory int.MinMax
  syntax function min "(Z.min %1 %2)"
  syntax function max "(Z.max %1 %2)"
end

(* TODO
theory int.Lex2
  prelude "open Why3extract"
  syntax predicate lt_nat "(Why3__BigInt.lt_nat %1 %2)"
  syntax predicate lex    "(Why3__BigInt.lex %1 %2)"
end
*)

theory int.EuclideanDivision
  syntax function div "(Z.ediv %1 %2)"
  syntax function mod "(Z.erem %1 %2)"
end

theory int.ComputerDivision
  syntax function div "(Z.div %1 %2)"
  syntax function mod "(Z.rem %1 %2)"
end

(* TODO Z.pow has type t -> int -> t, not t -> t -> t
theory int.Power
  syntax function power "(Z.pow %1 %2)"
end

theory int.Fact
  prelude "open Why3extract"
  syntax function fact "(Why3__IntAux.fact %1)"
end

theory int.Fibonacci
  prelude "open Why3extract"
  syntax function fib "(Why3__IntAux.fib %1)"
end
*)

(* WhyML *)

module stack.Stack
  syntax type      t        "(%1 Stack.t)"
  syntax val       create   "Stack.create"
  syntax val       push     "Stack.push"
  syntax exception Empty    "Stack.Empty"
  syntax val       pop      "Stack.pop"
  syntax val       top      "Stack.top"
  syntax val       safe_pop "Stack.pop"
  syntax val       safe_top "Stack.top"
  syntax val       clear    "Stack.clear"
  syntax val       copy     "Stack.copy"
  syntax val       is_empty "Stack.is_empty"
  syntax val       length   "(Z.of_int (Stack.length %1))"
end

module queue.Queue
  syntax type      t         "(%1 Queue.t)"
  syntax val       create    "Queue.create"
  syntax val       push      "Queue.push"
  syntax exception Empty     "Queue.Empty"
  syntax val       pop       "Queue.pop"
  syntax val       peek      "Queue.peek"
  syntax val       safe_pop  "Queue.pop"
  syntax val       safe_peek "Queue.peek"
  syntax val       clear     "Queue.clear"
  syntax val       copy      "Queue.copy"
  syntax val       is_empty  "Queue.is_empty"
  syntax val       length    "(Z.of_int (Queue.length %1))"
  syntax val       transfer  "Queue.transfer"
end

module array.Array
  syntax type array "(%1 Array.t)"

  syntax function ([]) "(Array.get %1 %2)"

  syntax exception OutOfBounds "Why3__Array.OutOfBounds"

  syntax val ([])          "Why3__Array.get"
  syntax val ([]<-)        "Why3__Array.set"
  syntax val length        "Why3__Array.length"
  syntax val defensive_get "Why3__Array.defensive_get"
  syntax val defensive_set "Why3__Array.defensive_set"
  syntax val make          "Why3__Array.make"
  syntax val append        "Why3__Array.append"
  syntax val sub           "Why3__Array.sub"
  syntax val copy          "Why3__Array.copy"
  syntax val fill          "Why3__Array.fill"
  syntax val blit          "Why3__Array.blit"
end

module matrix.Matrix
  prelude "open Why3extract"
  syntax type matrix "(%1 Why3__Matrix.t)"

(* FIXME syntax function get "(Why3__Matrix.get %1 %2)" *)

  syntax exception OutOfBounds "Why3__Matrix.OutOfBounds"

  syntax val get           "Why3__Matrix.get"
  syntax val set           "Why3__Matrix.set"
  syntax val rows          "Why3__Matrix.rows"
  syntax val columns       "Why3__Matrix.columns"
  syntax val defensive_get "Why3__Matrix.defensive_get"
  syntax val defensive_set "Why3__Matrix.defensive_set"
  syntax val make          "Why3__Matrix.make"
  syntax val copy          "Why3__Matrix.copy"
end

module mach.int.Int
  syntax val ( / ) "Z.div %1 %2"
  syntax val ( % ) "Z.rem %1 %2"
end

module mach.int.Int31
  (* even on a 64-bit machine, it is safe to use type int for 31-bit integers *)
  syntax val       of_int   "Why3extract.Why3__BigInt.to_int"
  syntax converter of_int   "%1"

  syntax function to_int "(Why3extract.Why3__BigInt.of_int %1)"

  syntax type     int31     "int"
  syntax val      ( + )     "( + )"
  syntax val      ( - )     "( - )"
  syntax val      (-_)      "( ~- )"
  syntax val      ( * )     "( * )"
  syntax val      ( / )     "( / )"
  syntax val      ( % )     "(mod)"
  syntax val      eq        "(=)"
  syntax val      ne        "(<>)"
  syntax val      (<=)      "(<=)"
  syntax val      (<)       "(<)"
  syntax val      (>=)      "(>=)"
  syntax val      (>)       "(>)"
end

module mach.int.UInt64
  (* no OCaml library for unsigned 64-bit integers => we use BigInt *)
  prelude "open Why3extract"
  syntax val       of_int   "(fun x -> x)"
  syntax converter of_int   "(Why3__BigInt.of_string \"%1\")"

  syntax function to_int "%1"

  syntax type     uint64    "Why3__BigInt.t"
  syntax val      ( + )     "Why3__BigInt.add"
  syntax val      ( - )     "Why3__BigInt.sub"
  syntax val      (-_)      "Why3__BigInt.minus"
  syntax val      ( * )     "Why3__BigInt.mul"
  syntax val      ( / )     "Why3__BigInt.computer_div"
  syntax val      ( % )     "Why3__BigInt.computer_mod"
  syntax val      eq        "(=)"
  syntax val      ne        "(<>)"
  syntax val      (<=)      "(<=)"
  syntax val      (<)       "(<)"
  syntax val      (>=)      "(>=)"
  syntax val      (>)       "(>)"
end

module mach.array.Array31
  syntax type array  "(%1 array)"

  syntax val  make   "Array.make"
  syntax val  ([])   "Array.get"
  syntax val  ([]<-) "Array.set"
  syntax val  length "Array.length"
  syntax val  append "Array.append"
  syntax val  sub    "Array.sub"
  syntax val  copy   "Array.copy"
  syntax val  fill   "Array.fill"
  syntax val  blit   "Array.blit"
  syntax val  self_blit "Array.blit"
end


module string.Char
  prelude "open Why3extract"
  syntax type char "Pervasives.char"
  syntax val chr "Why3__BigInt.chr"
  syntax val code "Why3__BigInt.code"
  syntax function uppercase "Char.uppercase"
  syntax function lowercase "Char.lowercase"
end


module io.StdIO
  prelude "open Why3extract"
  syntax val print_char "Pervasives.print_char"
  syntax val print_int "Why3__BigInt.print"
  syntax val print_newline "Pervasives.print_newline"
end

module random.Random
  prelude "open Why3extract"
  syntax val random_int    "Why3__BigInt.random_int"
end
