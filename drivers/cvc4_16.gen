(** Why3 driver for CVC4 >= 1.6 (with floating point support) *)

prelude "(set-info :smt-lib-version 2.6)"
prelude "(set-logic AUFBVFPDTSNIRA)"
(*
    A    : Array
    UF   : Uninterpreted Function
    BV   : BitVectors
    FP   : FloatingPoint
    DT   : Datatypes
    NIRA : NonLinear Integer+Real Arithmetic
*)

import "smt-libv2.gen"
import "smtlib-strings.gen"
printer "smtv2.6"
import "smt-libv2-bv.gen"
import "cvc4_bv.gen"
import "smt-libv2-floats.gen"
import "discrimination.gen"

transformation "inline_trivial"
transformation "eliminate_builtin"
transformation "detect_polymorphism"
transformation "eliminate_definition_if_poly"
transformation "eliminate_inductive"
transformation "eliminate_algebraic_if_poly"
transformation "eliminate_literal"
transformation "eliminate_epsilon"
transformation "simplify_formula"

(* Prepare for counter-example query: get rid of some quantifiers
   (makes it possible to query model values of the variables in
   premises) and introduce counter-example projections.  Note: does
   nothing if meta get_counterexmp is not set *)
transformation "prepare_for_counterexmp"

transformation "discriminate_if_poly"
transformation "encoding_smt_if_poly"

(** Error messages specific to CVC4 *)

outofmemory "(error \".*out of memory\")\\|Cannot allocate memory"
timeout "interrupted by timeout"
steps "smt::SmtEngine::resourceUnitsUsed, \\([0-9]+.?[0-9]*\\)" 1
(**
Unfortunately, there is no specific output message when CVC4 reaches its resource limit
steplimitexceeded "??"
*)


(** Extra theories supported by CVC4 *)

(* CVC4 division seems to be the Euclidean one, not the Computer one *)
theory int.EuclideanDivision
  syntax function div "(div %1 %2)"
  syntax function mod "(mod %1 %2)"
  remove prop Mod_bound
  remove prop Div_mod
  remove prop Mod_1
  remove prop Div_1
end

(*
theory int.ComputerDivision
  syntax function div "(div %1 %2)"
  syntax function mod "(mod %1 %2)"
  remove prop Mod_bound
  remove prop Div_mod
  remove prop Mod_1
  remove prop Div_1
end
*)

theory string.String

  syntax predicate lt        "(str.< %1 %2)"
  syntax predicate le        "(str.<= %1 %2)"

  syntax function replaceall "(str.replaceall %1 %2 %3)"

end

theory string.RegExpr

  syntax type re             "RegLan"

  syntax function to_re      "(str.to.re %1)"
  syntax predicate in_re     "(str.in.re %1 %2)"

  syntax function concat     "(re.++ %1 %2)"
  syntax function union      "(re.union %1 %2)"
  syntax function inter      "(re.inter %1 %2)"
  syntax function star       "(re.* %1)"
  syntax function plus       "(re.+ %1)"

  syntax function none       "re.nostr"
  syntax function allchar    "re.allchar"

  syntax function opt        "(re.opt %1)"
  syntax function range      "(re.range %1 %2)"
  syntax function power      "(re.loop %2 %1 %1)"
  syntax function loop       "(re.loop %3 %1 %2)"

end