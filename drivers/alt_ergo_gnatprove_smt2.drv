(* Why3 driver for Alt-Ergo with SMT-lib V2 input format, including polymorphism *)

prelude ";;; this is a prelude for Alt-Ergo, Dolmen frontend"
prelude "(set-logic ALL)"
prelude "(set-info :smt-lib-version 2.6)"

import "smt-libv2.gen"
filename "%f-%t-%g.psmt2"
printer "smtv2.6par"

valid "^; File \".*\", line [0-9]+, characters [0-9]+-[0-9]+: ?Valid"
unknown "^; File \".*\", line [0-9]+, characters [0-9]+-[0-9]+: ?I don't know" ""
steplimitexceeded "^\\[Error\\]; Fatal Error: Steps limit reached"

steps "^; File \".*\", line [0-9]+, characters [0-9]+-[0-9]+:.*(\\([0-9]+.?[0-9]*\\) steps)" 1
steps "^\\[Error\\]; Fatal Error: Steps limit reached: \\([0-9]+.?[0-9]*\\)" 1

(* valid "^unsat" *)
(* unknown "^\\(unknown\\|sat\\|Fail\\)" "" *)
time "why3cpulimit time : %s s"

(* Performed introductions depending on whether counterexamples are
   requested, as said by the meta "get_counterexmp". When this meta
   set, this transformation introduces the model variables that are
   still embedded in the goal. When it is not set, it removes all
   these unused-ce-related variables, even in the context.  *)
transformation "counterexamples_dependent_intros"

transformation "monomorphise_goal"
transformation "inline_trivial"
transformation "eliminate_builtin"
transformation "remove_unused"
transformation "eliminate_recursion"
transformation "eliminate_inductive"
transformation "eliminate_epsilon"
transformation "eliminate_algebraic"
transformation "eliminate_literal"
transformation "split_premise_right"
transformation "simplify_formula"

theory ieee_float.GenericFloat
 remove prop abs_special
 remove prop le_special
 remove prop lt_special
 remove prop eq_special
 remove prop add_special
 remove prop sub_special
 remove prop mul_special
 remove prop div_special
 remove prop neg_special
 remove prop fma_finite
 remove prop fma_special
 remove prop sqrt_finite
 remove prop sqrt_special
end

theory ieee_float.Float32
 remove prop round_bound
end

theory ieee_float.Float64
 remove prop round_bound
end

theory real.Square
 remove allprops
end

theory int.ComputerDivision
  remove prop Div_sign_neg
end

theory int.Power

  remove prop Power_0
  remove prop Power_s
  remove prop Power_s_alt
  remove prop Power_1
  remove prop Power_sum
  remove prop Power_mult
  remove prop Power_comm1
  remove prop Power_comm2
  remove prop Unit_def_l
  remove prop Unit_def_r
  remove prop Power_non_neg
  remove prop Power_pos
  remove prop Power_monotonic
  remove prop Assoc
end

theory for_drivers.ComputerOfEuclideanDivision

  remove prop cdiv_cases

end

theory _gnatprove_standard.Array__1
   remove prop get_proj
end
