
(* test file *)

theory A
  type t
  logic c : t
end

theory B
  namespace S type t end
  logic d : S.t
  logic f : S.t -> S.t
  logic p : S.t -> prop
  axiom Ax : forall x:S.t. p(x) or p(f(x))
end

theory Int
  type int
end

theory Eq 

  logic eq : 'a, 'a -> prop 

  (* This part is just a definition of the equality *)

  (* This theory define eq but of course these axioms should not be send
   to provers *)
 
  axiom refl : forall x:'a. eq(x,x) 
  axiom sym  : forall x,y:'a. eq(x,y) -> eq(y,x)
  axiom trans : forall x,y,z:'a. eq(x,y) -> eq(y,z) -> eq(x,z)
  (* This one can't be written in first order logic. *)
  type t
  type u
  logic f : t -> u
  axiom congru : forall x,y:t. eq(x,y) -> eq(f(x),f(y))

end

(*
theory Test

  use Eq
  use import L : List
  axiom a : forall x : 'a. not Eq.eq(nil, cons(nil, nil))

end
*)
