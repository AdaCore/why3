
(* test file *)

theory A
  type t
  logic c:t
end

theory B
  use import A
  logic d : t
  logic p : t -> prop
end

theory C
  use B
  use T : B.A 
  logic e : T.t
  axiom test : B.p(T.c)
end

theory Int
  type int
end

theory List

  type 'a list

  logic nil  : 'a list

  logic cons : 'a, 'a list -> 'a list

  logic is_nil : 'a list -> prop

  use import Int 
  
  logic length : 'a list -> int

end

theory Eq 

  logic eq : 'a, 'a -> prop 

  (* This part is just a definition of the equality *)

  (* This theory define eq but of course these axioms should not be send
   to provers *)
 
  axiom refl : forall x:'a. eq(x,x) 
  axiom sym  : forall x,y:'a. eq(x,y) -> eq(y,x)
  axiom trans : forall x,y,z:'a. eq(x,y) -> eq(y,z) -> eq(x,z)
  (* This one can't be written in first order logic. *)
  type t
  type u
  logic f : t -> u
  axiom congru : forall x,y:t. eq(x,y) -> eq(f(x),f(y))

end

theory Test

  use Eq
  use import L : List
  axiom a : forall x : 'a. not Eq.eq(nil, cons(nil, nil))

end