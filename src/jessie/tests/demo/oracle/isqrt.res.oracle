[kernel] preprocessing with "gcc -C -E -I.  tests/demo/isqrt.c"
[jessie3] creating logic symbol 739 (sqr)
[jessie3] processing function isqrt
[jessie3] found 1 logic decl(s)
[jessie3] made 1 theory(ies)
[jessie3] made 1 function(s)
[jessie3] running theory 1:
[jessie3] theory Global_logic_declarations
            (* use why3.BuiltIn *)
            
            (* use int.Int *)
            
            (* use real.Real *)
            
            function sqr (x:int) : int = x * x
            end
[jessie3] Alt-Ergo 0.95.1, CVC3 2.2, CVC3 2.4.1, Z3 3.2, Z3 4.3.1
[jessie3] running theory 1:
[jessie3] theory C_Functions
            (* use why3.BuiltIn *)
            
            (* use why3.Bool *)
            
            (* use why3.Unit *)
            
            (* use why3.Prelude *)
            
            (* use int.Int *)
            
            (* use real.Real *)
            
            (* use Global_logic_declarations *)
            
            (* use ref.Ref *)
            
            (* use mach_int.Int32 *)
            
            goal WP_parameter_isqrt :
              forall x:int32.
               to_int x >= 0 ->
                in_bounds 0 &&
                 (forall o:int32.
                   to_int o = 0 ->
                    in_bounds 0 &&
                     (forall o1:int32.
                       to_int o1 = 0 ->
                        in_bounds 0 &&
                         (forall o2:int32.
                           to_int o2 = 0 ->
                            (forall count:int32.
                              count = o2 ->
                               in_bounds 1 &&
                                (forall o3:int32.
                                  to_int o3 = 1 ->
                                   (forall sum:int32.
                                     sum = o3 ->
                                      ((to_int count >= 0 /\
                                         to_int x >= sqr (to_int count + 0)) /\
                                        to_int sum = sqr (to_int count + 1)) /\
                                       (forall sum1:int32, count1:int32.
                                         (to_int count1 >= 0 /\
                                           to_int x >= sqr (to_int count1 + 0)) /\
                                          to_int sum1 = sqr (to_int count1 + 1) ->
                                          (forall result:bool.
                                            (if result = True then to_int sum1 <=
                                                                    to_int x
                                             else to_int sum1 > to_int x) ->
                                             (if result = True then in_bounds 1 &&
                                                                     (forall o4:int32.
                                                                       to_int o4 = 1 ->
                                                                        in_bounds
                                                                         (to_int count1 +
                                                                           to_int o4) &&
                                                                         (forall o5:
                                                                           int32.
                                                                           to_int o5 =
                                                                            (to_int
                                                                              count1 +
                                                                              to_int o4) ->
                                                                            (forall count2:
                                                                              int32.
                                                                              count2 =
                                                                              o5 ->
                                                                              in_bounds
                                                                              1 &&
                                                                              (forall o6:
                                                                              int32.
                                                                              to_int o6 =
                                                                              1 ->
                                                                              in_bounds
                                                                              2 &&
                                                                              (forall o7:
                                                                              int32.
                                                                              to_int o7 =
                                                                              2 ->
                                                                              in_bounds
                                                                              (to_int
                                                                              o7 *
                                                                              to_int
                                                                              count2) &&
                                                                              (forall o8:
                                                                              int32.
                                                                              to_int o8 =
                                                                              (to_int
                                                                              o7 *
                                                                              to_int
                                                                              count2) ->
                                                                              in_bounds
                                                                              (to_int
                                                                              o8 +
                                                                              to_int o6) &&
                                                                              (forall o9:
                                                                              int32.
                                                                              to_int o9 =
                                                                              (to_int
                                                                              o8 +
                                                                              to_int o6) ->
                                                                              in_bounds
                                                                              (to_int
                                                                              sum1 +
                                                                              to_int o9) &&
                                                                              (forall o10:
                                                                              int32.
                                                                              to_int
                                                                              o10 =
                                                                              (to_int
                                                                              sum1 +
                                                                              to_int o9) ->
                                                                              (forall sum2:
                                                                              int32.
                                                                              sum2 =
                                                                              o10 ->
                                                                              ((to_int
                                                                              count2 >=
                                                                              0 /\
                                                                              to_int x >=
                                                                              sqr
                                                                              (to_int
                                                                              count2 +
                                                                              0)) /\
                                                                              to_int
                                                                              sum2 =
                                                                              sqr
                                                                              (to_int
                                                                              count2 +
                                                                              1)) /\
                                                                              0 <=
                                                                              (to_int x -
                                                                              to_int
                                                                              count1) /\
                                                                              (to_int x -
                                                                              to_int
                                                                              count2) <
                                                                              (to_int x -
                                                                              to_int
                                                                              count1))))))))))
                                             else (to_int count1 >= 0 /\
                                                    sqr (to_int count1 + 0) <= to_int x) /\
                                                   to_int x < sqr (to_int count1 + 1))))))))))
            end
[jessie3] Alt-Ergo 0.95.1, CVC3 2.2, CVC3 2.4.1, Z3 3.2, Z3 4.3.1
[jessie3] Task 1: Unknown, Unknown, Timeout, Timeout, Timeout
