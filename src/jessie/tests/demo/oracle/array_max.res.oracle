[jessie3] Loading Why3 configuration...
[jessie3] Why3 environment loaded.
[jessie3] Loading Why3 theories...
[jessie3] Loading Why3 modules...
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/demo/array_max.c (with preprocessing)
[jessie3] Loading prover drivers...
[jessie3] Translating to Why3...
[jessie3] processing function max
[jessie3] created program function max (67)
[jessie3] found 0 logic decl(s)
[jessie3] made 0 theory(ies)
[jessie3] made 1 function(s)
[jessie3] Running provers...
[jessie3] running theory 1:
[jessie3] theory C_Functions
            (* use why3.BuiltIn.BuiltIn *)
            
            (* use why3.Bool.Bool *)
            
            (* use why3.Unit.Unit *)
            
            (* use why3.Prelude.Prelude *)
            
            (* use int.Int *)
            
            (* use real.Real *)
            
            (* use map.Map *)
            
            (* use ref.Ref *)
            
            (* use mach.bv.BVCheck32 *)
            
            goal WP_parameter_max :
              forall a:map int t, len:t.
               to_uint len > 0 ->
                (0 <= 0 /\ 0 < two_power_size) &&
                 (to_uint (of_int 0) = 0 ->
                   (0 <= 0 /\ 0 < two_power_size) &&
                    (to_uint (of_int 0) = 0 ->
                      (0 <= 0 /\ 0 < two_power_size) && (let o = of_int 0 in
                       to_uint o = 0 ->
                        (forall x:t.
                          x = o ->
                           (0 <= 1 /\ 1 < two_power_size) && (let o1 = of_int 1 in
                            to_uint o1 = 1 ->
                             (0 <= (to_uint len - to_uint o1) /\
                               (to_uint len - to_uint o1) < two_power_size) &&
                              (let o2 = sub len o1 in
                              to_uint o2 = (to_uint len - to_uint o1) ->
                               (forall y:t.
                                 y = o2 ->
                                  ((0 <= to_uint x /\ to_uint x <= to_uint y) /\
                                    to_uint y < to_uint len) /\
                                   (forall y1:t, x1:t.
                                     (0 <= to_uint x1 /\ to_uint x1 <= to_uint y1) /\
                                      to_uint y1 < to_uint len ->
                                      (forall result:bool.
                                        match result with
                                         | True -> not to_uint x1 = to_uint y1
                                         | False -> to_uint x1 = to_uint y1
                                         end /\
                                         match result with
                                         | True -> not eq x1 y1
                                         | False -> eq x1 y1
                                         end ->
                                         (if result = True then let o3 = get a
                                                                          (to_uint y1) in
                                         let o4 = get a (to_uint x1) in
                                         forall result1:bool.
                                          match result1 with
                                           | True -> to_uint o4 <= to_uint o3
                                           | False -> to_uint o4 > to_uint o3
                                           end /\
                                           match result1 with
                                           | True -> ule o4 o3
                                           | False -> not ule o4 o3
                                           end ->
                                           (if result1 = True then (0 <= 1 /\
                                                                     1 < two_power_size) &&
                                                                    (let o5 = of_int 1 in
                                                                    to_uint o5 = 1 ->
                                                                     (0 <=
                                                                       (to_uint x1 +
                                                                         to_uint o5) /\
                                                                       (to_uint x1 +
                                                                         to_uint o5) <
                                                                        two_power_size) &&
                                                                      (let o6 = 
                                                                      add x1 o5 in
                                                                      to_uint o6 =
                                                                       (to_uint x1 +
                                                                         to_uint o5) ->
                                                                       (forall x2:t.
                                                                         x2 = o6 ->
                                                                          ((0 <=
                                                                             to_uint x2 /\
                                                                             to_uint x2 <=
                                                                              to_uint
                                                                              y1) /\
                                                                            to_uint y1 <
                                                                             to_uint
                                                                              len) /\
                                                                           0 <=
                                                                            (to_uint y1 -
                                                                              to_uint
                                                                              x1) /\
                                                                            (to_uint y1 -
                                                                              to_uint
                                                                              x2) <
                                                                             (to_uint
                                                                              y1 -
                                                                              to_uint
                                                                              x1))))
                                           else (0 <= 1 /\ 1 < two_power_size) &&
                                                 (let o5 = of_int 1 in
                                                 to_uint o5 = 1 ->
                                                  (0 <= (to_uint y1 - to_uint o5) /\
                                                    (to_uint y1 - to_uint o5) <
                                                     two_power_size) &&
                                                   (let o6 = sub y1 o5 in
                                                   to_uint o6 =
                                                    (to_uint y1 - to_uint o5) ->
                                                    (forall y2:t.
                                                      y2 = o6 ->
                                                       ((0 <= to_uint x1 /\
                                                          to_uint x1 <= to_uint y2) /\
                                                         to_uint y2 < to_uint len) /\
                                                        0 <= (to_uint y1 - to_uint x1) /\
                                                         (to_uint y2 - to_uint x1) <
                                                          (to_uint y1 - to_uint x1)))))
                                         else 0 <= to_uint x1 /\
                                               to_uint x1 < to_uint len))))))))))
            end
[jessie3] Provers: Alt-Ergo 0.99.1, CVC4 1.4, CVC3 2.4.1, Z3 3.2, Z3 4.3.2
[jessie3] Task 1 (WP_parameter max): Valid, Timeout, Valid, Timeout, Timeout
