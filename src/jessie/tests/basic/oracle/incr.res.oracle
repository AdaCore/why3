[jessie3] Loading Why3 configuration...
[jessie3] Why3 environment loaded.
[jessie3] Loading Why3 theories...
[jessie3] Loading Why3 modules...
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/basic/incr.c (with preprocessing)
[jessie3] Loading prover drivers...
[jessie3] Translating to Why3...
[jessie3] processing function f
[jessie3] created program function f (67)
[jessie3] processing function h
[jessie3] created program function h (73)
[jessie3] found 0 logic decl(s)
[jessie3] made 0 theory(ies)
[jessie3] made 3 function(s)
[jessie3] Running provers...
[jessie3] running theory 1:
[jessie3] theory C_Functions
            (* use why3.BuiltIn.BuiltIn *)
            
            (* use why3.Bool.Bool *)
            
            (* use why3.Unit.Unit *)
            
            (* use why3.Prelude.Prelude *)
            
            (* use int.Int *)
            
            (* use real.Real *)
            
            (* use map.Map *)
            
            (* use ref.Ref *)
            
            (* use mach.bv.BVCheck32 *)
            
            goal WP_parameter_f :
              forall x:t.
               to_uint x <= 1000000 ->
                (0 <= 0 /\ 0 < two_power_size) &&
                 (to_uint (of_int 0) = 0 ->
                   (0 <= 1 /\ 1 < two_power_size) && (let o = of_int 1 in
                    to_uint o = 1 ->
                     (0 <= (to_uint x + to_uint o) /\
                       (to_uint x + to_uint o) < two_power_size) &&
                      (let o1 = add x o in
                      to_uint o1 = (to_uint x + to_uint o) ->
                       (forall us_retres:t.
                         us_retres = o1 -> to_uint us_retres = (to_uint x + 1)))))
            
            goal WP_parameter_h :
              forall x:t.
               forall g:t.
                (0 <= to_uint x /\ to_uint x <= 1000000) /\
                 0 <= to_uint g /\ to_uint g <= 1000000 ->
                 (0 <= (to_uint g + to_uint x) /\
                   (to_uint g + to_uint x) < two_power_size) && (let o = add g x in
                  to_uint o = (to_uint g + to_uint x) ->
                   (forall g1:t. g1 = o -> to_uint g1 = (to_uint g + to_uint x)))
            end
[jessie3] Provers: Alt-Ergo 0.99.1, CVC4 1.4, CVC3 2.4.1, Z3 3.2, Z3 4.3.2
[jessie3] Task 1 (WP_parameter f): Valid, Timeout, Valid, Timeout, Timeout
[jessie3] Task 2 (WP_parameter h): Valid, Timeout, Valid, Timeout, Valid
