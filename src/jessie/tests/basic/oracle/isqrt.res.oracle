[kernel] preprocessing with "gcc -C -E -I.  tests/basic/isqrt.c"
[jessie3] user error: WARNING: Variable Frama_C_bzero not translated
[jessie3] user error: WARNING: Variable Frama_C_copy_block not translated
[jessie3] creating logic symbol 739 (sqr)
[jessie3] processing function isqrt
[jessie3] found 1 logic decl(s)
[jessie3] made 1 theory(ies)
[jessie3] made 1 function(s)
[jessie3] running theory 1:
[jessie3] theory Global_logic_declarations
            (* use why3.BuiltIn *)
            
            (* use int.Int *)
            
            (* use real.Real *)
            
            function sqr (x:int) : int = x * x
            end
[jessie3] Alt-Ergo 0.94, Alt-Ergo 0.95, CVC3 2.2, CVC3 2.4.1, Z3 3.2, Z3 4.2
[jessie3] running theory 1:
[jessie3] theory C_Functions
            (* use why3.BuiltIn *)
            
            (* use why3.Bool *)
            
            (* use why3.Unit *)
            
            (* use why3.Prelude *)
            
            (* use int.Int *)
            
            (* use real.Real *)
            
            (* use Global_logic_declarations *)
            
            (* use ref.Ref *)
            
            goal WP_parameter_isqrt :
              forall x:int.
               x >= 0 ->
                (forall count:int.
                  count = 0 ->
                   (forall sum:int.
                     sum = 1 ->
                      ((count >= 0 /\ x >= sqr count) /\ sum = sqr (count + 1)) /\
                       (forall sum1:int, count1:int.
                         (count1 >= 0 /\ x >= sqr count1) /\ sum1 = sqr (count1 + 1) ->
                          (if sum1 <= x then forall count2:int.
                                              count2 = (count1 + 1) ->
                                               (forall sum2:int.
                                                 sum2 = (sum1 + ((2 * count2) + 1)) ->
                                                  ((count2 >= 0 /\ x >= sqr count2) /\
                                                    sum2 = sqr (count2 + 1)) /\
                                                   0 <= (x - count1) /\
                                                    (x - count2) < (x - count1))
                          else (count1 >= 0 /\ sqr count1 <= x) /\ x < sqr (count1 + 1)))))
            end
[jessie3] Alt-Ergo 0.94, Alt-Ergo 0.95, CVC3 2.2, CVC3 2.4.1, Z3 3.2, Z3 4.2
[jessie3] Task 1: Valid, Valid, Valid, Valid, Valid, Valid
