
module Test
	use import array.Array
	use import ref.Ref
	use import ref.Refint
	use import int.Int

	
	let init1(x:int): array int
	requires { x >= 3 }
	ensures { forall i: int. 0 <= i < x -> result[i] = 8 }
	=
		let a = make x 0 in
		let k = ref 0 in
		while (!k < x) do
		variant { x - !k }
		a[!k] <- 8;
		incr k;
		done; a
	
	let init2(x:int): array int
	requires { x >= 0 }
	ensures { forall i: int. 0 <= i < x -> result[i] = i }
	=
		let a = make x 0 in
		let k = ref 0 in
		while (!k < x) do
		variant { x - !k }
		a[!k] <- !k;
		incr k;
		done; a
	
	let init3(x:int): array int
	requires { x >= 10 }
	ensures { forall i: int. 0 <= i < 3 -> result[i] = 8 }
	=
		let a = make x 0 in
		let k = ref 0 in
		while (!k < 3) do
		variant { 3 - !k }
		a[!k] <- 8;
		incr k;
		done; a
	
	(*let init4(x:int): array int
	requires { x >= 0 }
	ensures { forall i: int. 0 <= i < x -> result[i] = i * i }
	=
		let a = make x 0 in
		let k = ref 0 in
		while (!k < x) do
		variant { x - !k }
		a[!k] <- !k * !k;
		incr k;
		done; a*)
	
	
	let init5 (x:int) (y:int) (d:int) (b:int) (c:int) : array int
	requires { x > y >= 0 }
	ensures { forall i: int. (0 <= i < y -> result[i] = d) /\ (y <= i < x -> result[i] = b) }
	=
		let a = make x c in
		let k = ref 0 in
		while (!k < x) do
	(*invariant { forall i: int. (i < !k -> (0 <= i < y -> a[i] = d) /\ (y <= i < x -> a[i] = b)) }*)
		variant { x - !k }

		if !k >= y then
			a[!k] <- b
		else
			a[!k] <- d;
		incr k;
		done; a
	
	let init6 (x:int) (y:int) (d:int) (b:int) (c:int) : array int
	requires { x > y >= 0 }
	ensures { forall i: int. (0 <= i < y -> result[i] = 0) /\ (y <= i < x -> result[i] = 1) }
	=
		let a = make x 3 in
		let k = ref 0 in
		while (!k < x) do
	(*invariant { forall i: int. (i < !k -> (0 <= i < y -> a[i] = d) /\ (y <= i < x -> a[i] = b)) }*)
		variant { x - !k }

		if !k >= y then
			a[!k] <- 1
		else
			a[!k] <- 0;
		incr k;
		done; a
end
