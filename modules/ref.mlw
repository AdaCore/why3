(* References *)

module Ref

  type ref 'a = {| mutable contents : 'a |}

  function (!) (x: ref 'a) : 'a = x.contents

  (* parameter ref : v:'a -> {} ref 'a { result = {| contents = v |} } *)
  let ref (v: 'a) = {} {| contents = v |} { result = {| contents = v |} }

  (* parameter (!) : r:ref 'a -> {} 'a reads r { result = !r } *)
  let (!) (r:ref 'a) = {} r.contents { result = !r }

  (* parameter (:=) : r:ref 'a -> v:'a -> {} unit writes r { !r = v } *)
  let (:=) (r:ref 'a) (v:'a) = {} r.contents <- v { !r = v }

end

module Refint

  use export int.Int
  use export module Ref

  (* parameter incr : r:ref int -> {} unit writes r { !r = old !r + 1 } *)
  let incr (r: ref int) = {} r := !r + 1 { !r = old !r + 1 }

  (* parameter decr : r:ref int -> {} unit writes r { !r = old !r - 1 } *)
  let decr (r: ref int) = {} r := !r - 1 { !r = old !r - 1 }

  let (+=) (r: ref int) (v: int) = {} r := !r + v { !r = old !r + v }

end

(*
Local Variables:
compile-command: "unset LANG; make -C .. modules/ref"
End:
*)
