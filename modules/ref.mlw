
(* References.

   A mutable variable, or ``reference'' in ML terminology, is simply a
   record with a single mutable field 'contents'.

   Creation, access, and assignment are provided as 'ref', prefix '!', and
   infix ':=', respectively.
*)

module Ref

  type ref 'a = {| mutable contents : 'a |}

  function (!) (x: ref 'a) : 'a = x.contents

  let ref (v: 'a) = {} {| contents = v |} { result = {| contents = v |} }

  let (!) (r:ref 'a) = {} r.contents { result = !r }

  let (:=) (r:ref 'a) (v:'a) = {} r.contents <- v { !r = v }

end

(* Module Refint adds a few operations specific to integer references. *)

module Refint

  use export int.Int
  use export module Ref

  let incr (r: ref int) = {} r := !r + 1 { !r = old !r + 1 }
  let decr (r: ref int) = {} r := !r - 1 { !r = old !r - 1 }

  let (+=)   (r: ref int) (v: int) = {} r := !r + v { !r = old !r + v }
  let (-=)   (r: ref int) (v: int) = {} r := !r - v { !r = old !r - v }
  let ( *= ) (r: ref int) (v: int) = {} r := !r * v { !r = old !r * v }

end

(*
Local Variables:
compile-command: "unset LANG; make -C .. modules/ref"
End:
*)
