
(** {1 Polymorphic mutable queues} *)

module Queue

  use import list.List
  use import list.Append
  use import list.Length

  type t 'a model { mutable elts: list 'a }

  val create () : t 'a ensures { result.elts = Nil }

  val push (x: 'a) (q: t 'a) : unit writes {q}
    ensures { q.elts = old q.elts ++ Cons x Nil }

  exception Empty

  val pop (q: t 'a) : 'a writes {q}
    ensures { match old q.elts with Nil -> false
      | Cons x t -> result = x /\ q.elts = t end }
    raises  { Empty -> q.elts = old q.elts = Nil }

  val peek (q: t 'a) : 'a reads {q}
    ensures { match q.elts with Nil -> false
      | Cons x _ -> result = x end }
    raises  { Empty -> q.elts = Nil }

  val clear (q: t 'a) : unit writes {q} ensures { q.elts = Nil }

  val copy (q: t 'a) : t 'a reads {q} ensures { result = q }

  val is_empty (q: t 'a) : bool reads {q}
    ensures { result = True <-> q.elts = Nil }

  val length (q: t 'a) : int reads {q} ensures { result = length q.elts }

end

