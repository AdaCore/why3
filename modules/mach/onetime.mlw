
(** {2 One-time integers} *)

module OneTime

  use import int.Int

  type t model { v: int; mutable ghost valid: bool }

  val to_int (x: t) : int
    ensures { result = x.v }

  val zero (): t
    ensures { result.valid }
    ensures { result.v = 0 }
  (* FIXME: should be a constant?

     val function zero : t
       ensures { result.valid }
       ensures { result.v = 0 }
   *)

  val succ (x: t) : t
    requires { x.valid }
    writes   { x.valid }
    ensures  { result.valid /\ not x.valid }
    ensures  { result.v = x.v + 1 }

  val pred (x: t) : t
    requires { x.valid }
    writes   { x.valid }
    ensures  { result.valid /\ not x.valid }
    ensures  { result.v = x.v - 1 }

  val lt (x y: t) : bool
    ensures { result <-> x.v < y.v }
  val le (x y: t) : bool
    ensures { result <-> x.v <= y.v }
  val gt (x y: t) : bool
    ensures { result <-> x.v > y.v }
  val ge (x y: t) : bool
    ensures { result <-> x.v >= y.v }
  val eq (x y: t) : bool
    ensures { result <-> x.v = y.v }
  val ne (x y: t) : bool
    ensures { result <-> x.v <> y.v }

  use mach.peano.Peano as P

  val to_peano (x: t) : P.t
    ensures { result.P.v = x.v }

  val transfer (x: t) : t
    requires { x.valid }
    writes   { x.valid }
    ensures  { result.valid /\ not x.valid }
    ensures  { result.v = x.v }

  val neg (x: t) : t
    requires { x.valid }
    writes   { x.valid }
    ensures  { result.valid /\ not x.valid }
    ensures  { result.v = - x.v }

  val abs (x: t) : t
    requires { x.valid }
    writes   { x.valid }
    ensures  { result.valid /\ not x.valid }
    ensures  { result.v = if x.v >= 0 then x.v else - x.v }

  val add (x y: t) : t
    requires { x.valid /\ y.valid }
    writes   { x.valid, y.valid }
    ensures  { result.valid /\ not x.valid /\ not y.valid }
    ensures  { result.v = x.v + y.v }

  val sub (x y: t) : t
    requires { x.valid /\ y.valid }
    writes   { x.valid, y.valid }
    ensures  { result.valid /\ not x.valid /\ not y.valid }
    ensures  { result.v = x.v - y.v }

  val split (x: t) (p: P.t) : (t, t)
    requires { x.valid }
    requires { 0 <= p.P.v <= x.v \/ x.v <= p.P.v <= 0 }
    writes   { x.valid }
    ensures  { not x.valid }
    returns  { a, b -> a.valid /\ b.valid /\ a.v = x.v - b.v /\ b.v = p.P.v }

end
