
(** {1 A lightweight memory model dedicated to extraction to C code} *)

module C

  use mach.int.Unsigned
  use mach.int.Int32
  use mach.int.UInt32GMP as UInt32
  use array.Array
  use map.Map
  use int.Int
  predicate in_us_bounds (n:int) = 0 <= n <= UInt32.max_uint32
  predicate in_bounds (n:int) = min_int32 <= n <= max_int32
  use ref.Ref

  type zone

  constant null_zone : zone

  (** The pointer type *)
  type ptr 'a = abstract {
    mutable data : array 'a ;
    offset : int ;
    mutable min : int ;
    mutable max : int ;
    zone : zone ;
  }

  let ghost function plength (p:ptr 'a) : int
  = p.data.length

  let ghost function pelts (p:ptr 'a) : int -> 'a
  = p.data.elts

  (** the NULL pointer *)
  val null () : ptr 'a
    ensures { result.zone = null_zone }

  val predicate is_not_null (p:ptr 'a) : bool
    ensures { result <-> p.zone <> null_zone }

  (** pointer incrementation *)
  val incr (p:ptr 'a) (ofs:int32) : ptr 'a
    requires { p.min <= p.offset + ofs <= p.max }
    ensures { result.offset = p.offset + ofs }
    ensures { plength result = plength p }
    ensures { pelts result = pelts p }
    ensures { result.data = p.data }
    ensures { result.min = p.min }
    ensures { result.max = p.max }
    ensures { result.zone = p.zone }
    alias { p.data with result.data }

  (** pointer dereference *)
  val get (p:ptr 'a) : 'a
    requires { p.min <= p.offset < p.max }
    ensures { result = (pelts p)[p.offset] }

  (** pointer dereference with offset *)
  let get_ofs (p:ptr 'a) (ofs:int32) : 'a
    requires { p.min <= p.offset + ofs < p.max }
    ensures { result = (pelts p)[p.offset + ofs] }
  = get (incr p ofs)

  (** pointer assignment *)
  val set (p:ptr 'a) (v:'a) : unit
    requires { p.min <= p.offset < p.max }
    ensures { pelts p = Map.set (pelts (old p)) p.offset v }
    writes { p.data.elts }

  (** pointer assignment with offset *)
  let set_ofs (p:ptr 'a) (ofs:int32) (v:'a) : unit
    requires { p.min <= p.offset + ofs < p.max }
    ensures { pelts p = Map.set (pelts (old p))
              (p.offset + ofs) v }
    ensures { (pelts p)[p.offset + ofs] = v }
    writes { p.data.elts }
 =
    set (incr p ofs) v

  predicate valid_ptr_shift (p:ptr 'a) (i:int) =
    p.min <= p.offset + i < p.max

  predicate valid (p:ptr 'a) (sz:int) =
    in_bounds sz /\ 0 <= sz /\ 0 <= p.min <= p.offset
    /\ p.offset + sz <= p.max <= plength p

  let lemma valid_itv_to_shift (p:ptr 'a) (sz:int)
    requires { valid p sz }
    ensures { forall i. 0 <= i < sz -> valid_ptr_shift p i }
  = ()


  (** {2 basic C functions for memory handling} *)

  val malloc (sz:UInt32.uint32) : ptr 'a
    requires { 0 <= sz }
    ensures { result.zone <> null_zone -> plength result = sz }
    ensures { result.offset = 0 }
    ensures { result.min = 0 }
    ensures { result.max = plength result }

  val partial c_assert (e:bool) : unit
    ensures { e }

  let partial salloc sz
    requires { 0 <= sz }
    ensures { plength result = sz }
    ensures { result.offset = 0 }
    ensures { result.min = 0 }
    ensures { result.max = sz }
  = let p = malloc sz in
    c_assert (is_not_null p);
    p

  val free (p:ptr 'a) : unit
    requires { p.offset = 0 }
    requires { p.min = 0 }
    requires { p.max = plength p }
    writes { p }
    writes { p.data }

  let sfree p
    requires { p.offset = 0 }
    requires { p.min = 0 }
    requires { p.max = plength p }
    writes { p }
    writes { p.data }
  = free p

  val realloc (p:ptr 'a) (sz:int32) : ptr 'a
    requires { 0 <= sz }
    requires { p.offset = 0 }
    requires { p.min = 0 }
    requires { p.max = plength p }
    requires { plength p > 0 }
    writes { p }
    writes { p.data }
    ensures { result.zone <> null_zone -> result.min = 0 }
    ensures { result.zone <> null_zone -> result.max = plength result }
    ensures { result.offset = 0 }
    ensures { result.zone <> null_zone -> plength result = sz }
    ensures { result.zone <> null_zone ->
                forall i:int. 0 <= i < plength (old p) /\ i < sz ->
                  (pelts result)[i] = (pelts (old p))[i] }
    ensures { result.zone = null_zone -> p = old p }

  val incr_split (p:ptr 'a) (i:int32) : ptr 'a
    requires { 0 <= i }
    requires { p.min <= p.offset + i <= p.max }
    writes   { p.max }
    writes   { p.data }
    ensures  { result.offset = p.offset + i }
    ensures  { p.max = p.offset + i }
    ensures  { result.min = p.offset + i }
    ensures  { result.max = old p.max }
    ensures  { result.zone = p.zone }
    ensures  { pelts p = old pelts p }
    ensures  { plength p = old plength p }
    ensures  { pelts result = old pelts p }
    ensures  { plength result = old plength p }
    (* NOT alias result.data old p.data *)

  val join (p1 p2: ptr 'a) : unit
    requires { p1.zone = p2.zone }
    requires { p1.max = p2.min }
    writes   { p1.max }
    writes   { p1.data.elts }
    writes   { p2 }
    writes   { p2.data }
    ensures  { p1.max = old p2.max }
    ensures  { plength p1 = old plength p1 }
    ensures  { forall i. old p1.min <= i < old p1.max ->
                         (pelts p1)[i] = old (pelts p1)[i] }
    ensures  { forall i. old p2.min <= i < old p2.max ->
                         (pelts p1)[i] = old (pelts p2)[i] }

  val decr_split (p:ptr 'a) (i:int32) : ptr 'a
    requires { 0 <= i }
    requires { p.min <= p.offset - i <= p.max }
    writes   { p.min }
    writes   { p.data }
    ensures  { result.offset = p.offset - i }
    ensures  { p.min = p.offset - i }
    ensures  { result.min = old p.min }
    ensures  { result.max = p.offset - i }
    ensures  { result.zone = p.zone }
    ensures  { pelts p = old pelts p }
    ensures  { plength p = old plength p }
    ensures  { pelts result = old pelts p }
    ensures  { plength result = old plength p }
    (* NOT alias result.data old p.data *)

  val join_r (p1 p2: ptr 'a) : unit
    requires { p1.zone = p2.zone }
    requires { p1.max = p2.min }
    writes   { p1 }
    writes   { p1.data }
    writes   { p2.min }
    writes   { p2.data.elts }
    ensures  { p2.min = old p1.min }
    ensures  { plength p2 = old plength p2 }
    ensures  { forall i. old p1.min <= i < old p1.max ->
                         (pelts p2)[i] = old (pelts p1)[i] }
    ensures  { forall i. old p2.min <= i < old p2.max ->
                         (pelts p2)[i] = old (pelts p2)[i] }

  (** {2 Printing} *)

  val print_space () : unit
  val print_newline () : unit

  val print_uint32 (n:UInt32.uint32):unit

end
