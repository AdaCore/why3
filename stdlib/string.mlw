module String

  use int.Int

  (** indexes for strings start at `0` *)

  (** type string is built-in *)

  (** UC refers to the code points from 0x00000 to 0x2FFFF (Unicode
  characters in Planes 0-2) *) (* CHECK *)

  constant empty : string = ""
  (** the empty string. *)

  function concat string string : string
  (** `concat s1 s2` returns the concatenation of `s1` and `s2`.  *)

  function length string : int
  (** `length s` returns the length of the string `s`. *)
  (* `length s` returns the number of UC characters in `s`. *)
  (* CHECK *)

  predicate lt string string
  (** `lt s1 s2` returns `True` iff `s1` is smaller than `s2` in the
  lexicographic order of UC *) (* CHECK UC *)

  predicate le string string
  (** `le s1 s2` returns `True` iff `s1` is smaller or equal to `s2`
  in the lexicographic order of UC *) (* CHECK UC *)

  function ([]) string int : string
  (** `s[i]` returns the `empty` string if either `i < 0` or `i >=
  length s`. Returns the string of size `1` with the content of
  position `i` in string `s`. *)

  function substring string int int : string
  (** `substring s i x` returns the `empty` string if `i < 0` or `i >=
  length s'. Otherwise, it returns the substring of `s` starting at
  `i` and of size `min x (length s - i)`. *)

  predicate prefixof string string
  (** `prefixof s1 s2` is `True` iff `s1` is a prefix of `s2`. *)

  predicate suffixof string string
  (** `suffixof s1 s2` is `True` iff `s1` is a suffix of `s2`. *)

  predicate contains string string
  (** `contains s1 s2` is `True` iff `s1` contains `s2`. *)

  function indexof string string int : int
  (** `indexof s1 s2 i` is:
        - `i`, if `0 <= i <= length s1` and `s2 = empty`;
        - the first occurence of `s2` in `s1` after `i`, if
          `0 <= i < length s1`, 't <> empty` and `s2` occurs in `s1`
          after `i`;
        - `-1`, if `i < 0`, `i >= length s1`, or if `0 <= i < length s1` and
          `s2` does not occur in `s1` after `i`.  *)

  function replace string string string : string
  (** `replace s1 s2 s3` is:
         - `s1`, if `s2` does not occur in `s1` or `s3 = empty`;
         - `concat s1 s3`, if `s2 = empty`;
         - the string obtained by replacing the first occurrence of s2
           (if any) by s3 in s1. *)

  (* NOT IN SMT-LIB unsound check example *)
  function replaceall string string string : string
  (** `replace s1 s2 s3`, TODO *)


end
