####################################################################
#                                                                  #
#  The Why3 Verification Platform   /   The Why3 Development Team  #
#  Copyright 2010-2014   --   INRIA - CNRS - Paris-Sud University  #
#                                                                  #
#  This software is distributed under the terms of the GNU Lesser  #
#  General Public License version 2.1, with the special exception  #
#  on linking described in file LICENSE.                           #
#                                                                  #
####################################################################

#
# autoconf input for Objective Caml programs
# Copyright (C) 2001 Jean-Christophe Filli√¢tre
#   from a first script by Georges Mariano
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure, or
#                 "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     "opt" if a native compiler was found; "byte" otherwise
#   OCAMLDEP      "ocamldep" or "ocamldep.opt"
#   OCAMLLEX      "ocamllex" or "ocamllex.opt"
#   OCAMLYACC     "ocamlyacc"
#   OCAMLDOC      "ocamldoc" or "ocamldoc.opt"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWEB      "ocamlweb" (not mandatory)


# check for one particular file of the sources
# ADAPT THE FOLLOWING LINE TO YOUR SOURCES!

AC_INIT(src/)

# verbosemake

AC_ARG_ENABLE(verbose-make,
    [  --enable-verbose-make   verbose makefile commands],,
    enable_verbose_make=no)

# LOCAL_CONF

AC_ARG_ENABLE(local,
    [  --enable-local          use Why3 in the build directory (no installation)],,
    enable_local=no)

# RELOCATABLE INSTALLATION

AC_ARG_ENABLE(relocation,
    [  --enable-relocation     allow for later relocation of Why3 installation],,
    enable_relocation=no)

# NATIVE

AC_ARG_ENABLE(native-code,
    [  --enable-native-code    use the native-code compiler if available],,
    enable_native_code=yes)

# Zarith

AC_ARG_ENABLE(zarith,
    [  --enable-zarith         use extra arbitrary-precision lib Zarith],,
    enable_zarith=yes)


# IDE

AC_ARG_ENABLE(ide,
    [  --enable-ide            enable Why3 IDE],,
    enable_ide=yes)

# Bench

AC_ARG_ENABLE(bench,
    [  --enable-bench          enable Why3 benchmarking tool],,
    enable_bench=yes)

# Coq tactic and libraries

AC_ARG_ENABLE(coq-tactic,
    [  --enable-coq-tactic     enable Coq "why3" tactic],,
    enable_coq_tactic=yes)

AC_ARG_ENABLE(coq-libs,
    [  --enable-coq-libs       enable Coq realizations],,
    enable_coq_libs=yes)

# PVS libraries

AC_ARG_ENABLE(pvs-libs,
    [  --enable-pvs-libs       enable PVS realizations],,
    enable_pvs_libs=yes)

# Isabelle libraries

AC_ARG_ENABLE(isabelle-libs,
    [  --enable-isabelle-libs       enable Isabelle realizations],,
    enable_isabelle_libs=yes)

# hypothesis selection

AC_ARG_ENABLE(hypothesis-selection,
    [  --enable-hypothesis-selection    enable hypothesis selection support],,
    enable_hypothesis_selection=yes)

# documentation

AC_ARG_ENABLE(doc,
    [  --enable-doc            build documentation],,
    enable_doc=yes)

AC_ARG_ENABLE(html-doc,
    [  --enable-html-doc       build HTML documentation],,
    enable_html_doc=yes)

# Experimental Jessie3 Frama-C plugin, disabled by default

AC_ARG_ENABLE(frama-c,
    [  --enable-frama-c        enable Frama-C plugin],,
    [enable_frama_c=no
     reason_frama_c=" (disabled by default)"])

# profiling

AC_ARG_ENABLE(profiling,
    [  --enable-profiling      enable profiling],,
    enable_profiling=no)

# either relocation or local, not both
if test "$enable_relocation" = yes ; then
if test "$enable_local" = yes ; then
    AC_MSG_ERROR(cannot use --enable-relocation and --enable-local at the same time.)
fi
fi

# Check for arch/OS

AC_MSG_CHECKING(executable suffix)
if uname -s | grep -q CYGWIN ; then
  EXE=.exe
  STRIP='echo "no strip "'
  CPULIMIT=cpulimit-win
  AC_MSG_RESULT(.exe <Cygwin>)
else
if uname -s | grep -q MINGW ; then
  EXE=.exe
  STRIP=strip
  CPULIMIT=cpulimit-win
  AC_MSG_RESULT(.exe <MinGW>)
else
  EXE=
  STRIP=strip
  CPULIMIT=cpulimit
  AC_MSG_RESULT(<none>)
fi
fi

AC_PROG_CC()

# Check for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $OCAMLVERSION"

case "$OCAMLVERSION" in
  0.*|1.*|2.*|3.0*|3.10*|3.11|3.11.0*|3.11.1*)
        AC_MSG_ERROR(You need Objective Caml 3.11.2 or higher);;
esac

# Ocaml library path
# old way: OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d ' ' | tr -d '\\r'`
OCAMLLIB=`$OCAMLC -where | tr -d '\\r'`
echo "ocaml library path is $OCAMLLIB"

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

# checking for native-code
if test "$enable_native_code" != yes || test "$OCAMLBEST" = byte ; then
    enable_native_code=no
    OCAMLBEST=byte
    OCAMLOPT=no
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLC=$OCAMLCDOTOPT
	fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVER" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
   AC_MSG_ERROR(Cannot find ocamldep.)
else
   AC_CHECK_PROG(OCAMLDEPDOTOPT,ocamldep.opt,ocamldep.opt,no)
   if test "$OCAMLDEPDOTOPT" != no ; then
      OCAMLDEP=$OCAMLDEPDOTOPT
   fi
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
	AC_MSG_ERROR(Cannot find ocamllex.)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
	OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

AC_CHECK_PROG(OCAMLDOC,ocamldoc,ocamldoc,true)
if test "$OCAMLDOC" = true ; then
    AC_MSG_WARN(Cannot find ocamldoc)
else
    AC_CHECK_PROG(OCAMLDOCOPT,ocamldoc.opt,ocamldoc.opt,no)
    if test "$OCAMLDOCOPT" != no ; then
	OCAMLDOC=$OCAMLDOCOPT
    fi
fi

AC_CHECK_PROG(CAMLP5O,camlp5o,camlp5o,no)

## Where are the library we need
# we look for ocamlfind; if not present, we just don't use it to find
# libraries
AC_CHECK_PROG(USEOCAMLFIND,ocamlfind,yes,no)

if test "$USEOCAMLFIND" = yes; then
   OCAMLFINDLIB=$(ocamlfind printconf stdlib)
   OCAMLFIND=$(which ocamlfind)
   if test "$OCAMLFINDLIB" != "$OCAMLLIB"; then
   USEOCAMLFIND=no;
   echo "but your ocamlfind is not compatible with your ocamlc:"
   echo "ocamlfind : $OCAMLFINDLIB, ocamlc : $OCAMLLIB"
   fi
fi

#if ocamlfind is used it gives the install path for ocaml library
if test "$USEOCAMLFIND" = yes; then
   OCAMLINSTALLLIB=$(ocamlfind printconf destdir)
else
   OCAMLINSTALLLIB=$OCAMLLIB
fi


# checking for rubber
if test "$enable_doc" = yes ; then
   AC_CHECK_PROG(RUBBER,rubber,rubber,no)
   if test "$RUBBER" = no ; then
      enable_doc=no
      enable_html_doc=no
      reason_doc=" (rubber not found)"
      AC_MSG_WARN([Cannot find rubber, documentation disabled.])
   fi
else
   enable_html_doc=no
fi

# checking for hevea (note that the pdf documentation DOES NOT use hevea.sty)
if test "$enable_html_doc" = yes ; then
   AC_CHECK_PROG(HEVEA,hevea,hevea,no)
   if test "$HEVEA" = no ; then
      enable_html_doc=no
      reason_html_doc=" (hevea not found)"
      AC_MSG_WARN([Cannot find hevea, HTML documentation disabled.])
   fi
fi

# checking for hacha
if test "$enable_html_doc" = yes ; then
   AC_CHECK_PROG(HACHA,hacha,hacha,no)
   if test "$HACHA" = no ; then
      enable_html_doc=no
      reason_html_doc=" (hacha not found)"
      AC_MSG_WARN([Cannot find hacha, HTML documentation disabled.])
   fi
fi

# checking for emacs
AC_CHECK_PROG(EMACS,emacs,emacs,no)

# checking for Zarith
if test "$enable_zarith" = yes; then
   if test "$USEOCAMLFIND" = yes; then
      BIGINTINCLUDE=$(ocamlfind query zarith)
   fi
   if test -n "$BIGINTINCLUDE"; then
      echo "ocamlfind found zarith in $BIGINTINCLUDE"
      BIGINTINCLUDE="-I $BIGINTINCLUDE"
   else
      AC_CHECK_FILE($OCAMLLIB/zarith/zarith.cma,,enable_zarith=no)
      if test "$enable_zarith" = no; then
         AC_MSG_WARN([Lib Zarith not found, using Nums instead.])
         reason_zarith=" (zarith not found)"
      else
         BIGINTINCLUDE="-I +zarith"
      fi
   fi
fi

if test "$enable_zarith" = yes; then
   BIGINTLIB=zarith
else
   BIGINTLIB=nums
fi


# checking for lablgtk2
if test "$enable_ide" = yes ; then
   if test "$USEOCAMLFIND" = yes; then
      LABLGTK2LIB=$(ocamlfind query lablgtk2)
   fi
   if test -n "$LABLGTK2LIB";then
      echo "ocamlfind found lablgtk2 in $LABLGTK2LIB"
   else
      LABLGTK2LIB="+lablgtk2"
      AC_CHECK_FILE($OCAMLLIB/lablgtk2/lablgtk.cma,,enable_ide=no)
      if test "$enable_ide" = no; then
         AC_MSG_WARN([Lib lablgtk2 not found, IDE disabled.])
         reason_ide=" (lablgtk2 not found)"
      fi
   fi
fi

# checking for lablgtksourceview2
if test "$enable_ide" = yes ; then
   if test "$USEOCAMLFIND" = yes; then
      LABLGTKSV2LIB=$(ocamlfind query lablgtk2.sourceview2)
      if test -z "$LABLGTKSV2LIB"; then
         LABLGTKSV2LIB=$(ocamlfind query lablgtksourceview2)
      fi
   fi
   if test -n "$LABLGTKSV2LIB";then
      echo "ocamlfind found lablgtksourceview2 in $LABLGTKSV2LIB"
   else
      AC_CHECK_FILE($OCAMLLIB/lablgtk2/lablgtksourceview2.cma,,enable_ide=no)
      if test "$enable_ide" = no; then
         AC_MSG_WARN([Lib lablgtksourceview2 not found, IDE disabled.])
         reason_ide=" (lablgtksourceview2 not found)"
      fi
   fi
fi

dnl # checking for sqlite3
dnl if test "$enable_ide" = yes ; then
dnl    if test "$USEOCAMLFIND" = yes; then
dnl       SQLITE3LIB=$(ocamlfind query sqlite3)
dnl    fi
dnl    if test -n "$SQLITE3LIB";then
dnl       echo "ocamlfind found sqlite3 in $SQLITE3LIB"
dnl    else
dnl       SQLITE3LIB="+sqlite3"
dnl       AC_CHECK_FILE($OCAMLLIB/sqlite3/sqlite3.cma,,enable_ide=no)
dnl       if test "$enable_ide" = no; then
dnl         AC_MSG_WARN(Lib sqlite3 not found, IDE disabled.)
dnl    	reason_ide=" (sqlite3 not found)"
dnl       fi
dnl    fi
dnl fi

# checking for sqlite3
if test "$enable_bench" = yes ; then
   if test "$USEOCAMLFIND" = yes; then
      SQLITE3LIB=$(ocamlfind query sqlite3)
   fi
   if test -n "$SQLITE3LIB"; then
      echo "ocamlfind found sqlite3 in $SQLITE3LIB"
   else
      SQLITE3LIB="+sqlite3"
      AC_CHECK_FILE($OCAMLLIB/sqlite3/sqlite3.cma,,enable_bench=no)
      if test "$enable_bench" = no; then
        reason_bench=" (sqlite3 not found)"
        AC_MSG_WARN([Lib sqlite3 not found, why3bench disabled.])
      fi
   fi
fi

dnl AC_CHECK_PROG(enable_ide,lablgtk2,yes,no) not always available (Win32)

dnl AC_CHECK_PROG(OCAMLWEB,ocamlweb,ocamlweb,true)

# Coq

enable_coq_fp_libs=yes

coq_compat_version=

if test "$enable_coq_tactic" = no -a "$enable_coq_libs" = no; then
    enable_coq_support=no
    AC_MSG_WARN(coq support disabled)
    reason_coq_support=" (disabled by user)"
else
    AC_CHECK_PROG(COQC,coqc,coqc,no)
    if test "$COQC" = no ; then
        enable_coq_support=no
        AC_MSG_WARN(Cannot find coqc.)
        reason_coq_support=" (coqc not found)"
    else
        COQLIB=`$COQC -where | sed -e 's|\\\|/|g' -e 's| |\\ |g'`
        AC_MSG_CHECKING(Coq version)
        COQVERSION=`$COQC -v | sed -n -e 's|.*version* *\([[^ ]]*\) .*$|\1|p' `

        case $COQVERSION in
          8.4*|trunk)
	        enable_coq_support=yes
                coq_compat_version=".8.4"
                AC_MSG_RESULT($COQVERSION)
                ;;
          *)
                enable_coq_support=no
	        AC_MSG_WARN(You need Coq 8.4 or later; Coq discarded)
                reason_coq_support=" (version is $COQVERSION but need version 8.4 or higher)"
                ;;
        esac
    fi
fi

if test "$enable_coq_support" = no; then
   enable_coq_tactic=no
   enable_coq_libs=no
   COMPILETIMECOQ=
else
   COMPILETIMECOQ="\\\"Coq\\\", \\\"$COQVERSION\\\"; "
fi

if test "$enable_coq_tactic" = yes; then
   AC_CHECK_FILE($COQLIB/kernel/term.cmi,,enable_coq_tactic=no)
   if test "$enable_coq_tactic" = no; then
      reason_coq_tactic=" ($COQLIB/kernel/term.cmi not found)"
   fi
fi

if test "$enable_coq_tactic" = yes -a "$CAMLP5O" = no; then
   enable_coq_tactic=no
   reason_coq_tactic=" (camlp5o not found)"
fi

# coq-tactic currently disabled
dnl enable_coq_tactic=no
dnl reason_coq_tactic=" (not yet implemented)"

if test "$enable_coq_libs" = yes; then
   AC_CHECK_PROG(COQDEP,coqdep,coqdep,no)
   if test "$COQDEP" = no ; then
      enable_coq_libs=no
      AC_MSG_WARN(Cannot find coqdep.)
      reason_coq_libs=" (coqdep not found)"
   fi
fi

if test "$enable_coq_libs" = yes; then
   AC_MSG_CHECKING([for Flocq])
   AS_IF(
     [ echo "Require Import Flocq_version BinNat." \
            "Goal (20200 <= Flocq_version)%N. easy. Qed." > conftest.v
       "$COQC" conftest.v > conftest.err ],
     [ AC_MSG_RESULT(yes) ],
     [ AC_MSG_RESULT(no)
       enable_coq_fp_libs=no
       AC_MSG_WARN(Cannot find Flocq.)
       reason_coq_fp_libs=" (Flocq >= 2.2 not found)" ])
   rm -f conftest.v conftest.vo conftest.err
fi

# PVS

if test "$enable_pvs_libs" = no; then
    enable_pvs_support=no
    AC_MSG_WARN(PVS support disabled)
    reason_pvs_support=" (disabled by user)"
else
    AC_CHECK_PROG(PVS,pvs,pvs,no)
    if test "$PVS" = no ; then
        enable_pvs_support=no
        AC_MSG_WARN(Cannot find pvs.)
        reason_pvs_support=" (pvs not found)"
    else
        PVSLIB=`$PVS -where`
        AC_MSG_CHECKING(PVS version)
        PVSVERSION=`$PVS -version | sed -n -e 's|.*Version* *\([[^ ]]*\)$|\1|p' `

        case $PVSVERSION in
          6.*)
	        enable_pvs_support=yes
                AC_MSG_RESULT($PVSVERSION)
                ;;
          *)
                AC_MSG_RESULT($PVSVERSION)
                enable_pvs_support=no
	        AC_MSG_WARN(You need PVS 6.0 or higher; PVS discarded)
                reason_pvs_support=" (need version 6.0 or higher)"
                ;;
        esac
    fi
fi

if test "$enable_pvs_support" = no; then
   enable_pvs_libs=no
   COMPILETIMEPVS=
else
   COMPILETIMEPVS="\\\"PVS\\\", \\\"$PVSVERSION\\\"; "
fi

# Isabelle

if test "$enable_isabelle_libs" = no; then
    enable_isabelle_support=no
    AC_MSG_WARN(Isabelle support disabled)
    reason_isabelle_support=" (disabled by user)"
else
    AC_CHECK_PROG(ISABELLE,isabelle,isabelle,no)
    if test "$ISABELLE" = no ; then
        enable_isabelle_support=no
        AC_MSG_WARN(Cannot find isabelle.)
        reason_isabelle_support=" (isabelle not found)"
    else
        AC_MSG_CHECKING(Isabelle version)
        ISABELLEVERSION=`$ISABELLE version | sed -n -e 's|Isabelle\([[^:]]*\).*$|\1|p' `

        case $ISABELLEVERSION in
          2013-2)
	        enable_isabelle_support=yes
                AC_MSG_RESULT($ISABELLEVERSION)
                ;;
          *)
                AC_MSG_RESULT($ISABELLEVERSION)
                enable_isabelle_support=no
	        AC_MSG_WARN(You need Isabelle2013-2; Isabelle discarded)
                reason_isabelle_support=" (need version 2013-2)"
                ;;
        esac
    fi
fi

if test "$enable_isabelle_support" = no; then
   enable_isabelle_libs=no
fi

if test "$enable_pvs_libs" = yes; then
   AC_MSG_CHECKING([for NASA PVS library])
   enable_pvs_libs=no
   reason_pvs_libs=" (no NASA PVS library in PVS_LIBRARY_PATH)"
   for dir in  `echo $PVS_LIBRARY_PATH | tr ':' ' '`; do
       if test -f $dir/nasalib-version; then
          enable_pvs_libs=yes
          reason_pvs_libs=""
       fi
   done
   AC_MSG_RESULT($enable_pvs_libs)
fi

# hypothesis_selection

if test "$enable_hypothesis_selection" = yes; then
   if test "$USEOCAMLFIND" = yes; then
     OCAMLGRAPHLIB=$(ocamlfind query ocamlgraph)
   fi
   if test -n "$OCAMLGRAPHLIB"; then
     echo "ocamlfind found ocamlgraph in $OCAMLGRAPHLIB"
   else
     OCAMLGRAPHLIB="+ocamlgraph"
     AC_CHECK_FILE($OCAMLLIB/ocamlgraph/,,enable_hypothesis_selection=no)
     if test "$enable_hypothesis_selection" = no; then
       reason_hypothesis_selection=" (ocamlgraph not found)"
       AC_MSG_WARN([Lib ocamlgraph not found, hypothesis selection disabled.])
     fi
   fi
fi

#check frama-c
if test "$enable_frama_c" = yes ; then
   AC_CHECK_PROG(FRAMAC,frama-c,frama-c,no)
   if test "$FRAMAC" = no ; then
        AC_MSG_WARN(Cannot find Frama-C.)
        enable_frama_c="no"
        reason_frama_c=" (frama-c not found)"
   else
      AC_MSG_CHECKING(Frama-C version)
      FRAMAC_VERSION=`$FRAMAC -version | sed -n -e 's|Version: *\(.*\)$|\1|p'`
      AC_MSG_RESULT($FRAMAC_VERSION)
      case $FRAMAC_VERSION in
         Neon-*) ;;
         *) AC_MSG_WARN(Version Neon required.)
            enable_frama_c=no
            reason_frama_c=" (version Neon required)"
            ;;
      esac
      FRAMAC_SHARE=`$FRAMAC -print-path`
      FRAMAC_LIBDIR=`$FRAMAC -print-libpath`
   fi
fi

if test "$enable_local" = no; then
   LOCALDIR=''
else
   LOCALDIR="${PWD}"
fi

#For the META
if test "$enable_hypothesis_selection" = yes; then
   META_OCAMLGRAPH="ocamlgraph"
else
   META_OCAMLGRAPH=""
fi

#Viewer for ps and pdf
dnl AC_CHECK_PROGS(PSVIEWER,gv evince)
dnl AC_CHECK_PROGS(PDFVIEWER,xpdf acroread evince)

. ./Version

BUILDDATE="$(date)"

# substitutions to perform
AC_SUBST(VERSION)
AC_SUBST(BUILDDATE)

AC_SUBST(enable_verbose_make)

AC_SUBST(EXE)
AC_SUBST(STRIP)
AC_SUBST(CPULIMIT)

AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLDOC)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLINSTALLLIB)
dnl AC_SUBST(OCAMLV)
dnl AC_SUBST(FORPACK)
AC_SUBST(OCAMLGRAPHLIB)
dnl AC_SUBST(OCAMLWEB)

AC_SUBST(enable_profiling)

AC_SUBST(CAMLP5O)

AC_SUBST(enable_ide)
AC_SUBST(LABLGTK2LIB)
AC_SUBST(SQLITE3LIB)
AC_SUBST(enable_bench)
AC_SUBST(META_OCAMLGRAPH)

AC_SUBST(enable_zarith)
AC_SUBST(BIGINTINCLUDE)
AC_SUBST(BIGINTLIB)

AC_SUBST(enable_coq_tactic)
AC_SUBST(enable_coq_libs)
AC_SUBST(enable_coq_fp_libs)
AC_SUBST(coq_compat_version)

AC_SUBST(COQC)
AC_SUBST(COQDEP)
AC_SUBST(COQLIB)
AC_SUBST(COQVERSION)
AC_SUBST(COMPILETIMECOQ)

AC_SUBST(enable_pvs_libs)
AC_SUBST(PVS)
AC_SUBST(PVSVERSION)
AC_SUBST(COMPILETIMEPVS)

AC_SUBST(enable_isabelle_libs)
AC_SUBST(ISABELLE)
AC_SUBST(ISABELLEVERSION)

AC_SUBST(enable_hypothesis_selection)

AC_SUBST(enable_doc)
AC_SUBST(enable_html_doc)

AC_SUBST(RUBBER)
AC_SUBST(HEVEA)
AC_SUBST(HACHA)
AC_SUBST(EMACS)

AC_SUBST(enable_frama_c)

AC_SUBST(FRAMAC)
AC_SUBST(FRAMAC_VERSION)
AC_SUBST(FRAMAC_SHARE)
AC_SUBST(FRAMAC_LIBDIR)

AC_SUBST(enable_local)
AC_SUBST(LOCALDIR)

AC_SUBST(enable_relocation)

dnl AC_SUBST(PSVIEWER)
dnl AC_SUBST(PDFVIEWER)

# Finally create the Makefile from Makefile.in
dnl AC_OUTPUT(Makefile)
AC_CONFIG_FILES(Makefile src/config.sh doc/version.tex)
AC_CONFIG_FILES(lib/why3/META)
AC_CONFIG_FILES(src/jessie/Makefile)
AC_CONFIG_COMMANDS([chmod],
chmod a-w Makefile src/config.sh doc/version.tex;
chmod a-w lib/why3/META;
chmod a-w src/jessie/Makefile;
chmod u+x src/config.sh)

AC_OUTPUT


# Summary

echo
echo "                 Summary"
echo "-----------------------------------------"
echo "Verbose make            : $enable_verbose_make"
echo "OCaml compiler          : yes"
echo "    Version             : $OCAMLVERSION"
echo "    Library path        : $OCAMLLIB"
echo "    Native compilation  : $enable_native_code"
echo "    Profiling           : $enable_profiling"
echo "Zarith                  : $enable_zarith$reason_zarith"
echo "IDE                     : $enable_ide$reason_ide"
echo "Bench tool              : $enable_bench$reason_bench"
echo "Documentation           : $enable_doc$reason_doc"
if test "$enable_doc" = yes ; then
   echo "    HTML                : $enable_html_doc$reason_html_doc"
fi
echo "Coq support             : $enable_coq_support$reason_coq_support"
if test "$enable_coq_support" = yes ; then
   echo "    Version             : $COQVERSION"
   echo "    Library path        : $COQLIB"
   echo "    \"why3\" tactic       : $enable_coq_tactic$reason_coq_tactic"
   echo "    Realization support : $enable_coq_libs$reason_coq_libs"
   if test "$enable_coq_libs" = yes ; then
      echo "        FP arithmetic   : $enable_coq_fp_libs$reason_coq_fp_libs"
   fi
fi
echo "PVS support             : $enable_pvs_support$reason_pvs_support"
if test "$enable_pvs_support" = yes ; then
   echo "    Version             : $PVSVERSION"
   echo "    Library path        : $PVSLIB"
   echo "    Realization support : $enable_pvs_libs$reason_pvs_libs"
fi
echo "Isabelle support        : $enable_isabelle_support$reason_isabelle_support"
if test "$enable_isabelle_support" = yes ; then
   echo "    Version             : $ISABELLEVERSION"
   echo "    Realization support : $enable_isabelle_libs$reason_isabelle_libs"
fi
echo "Frama-C support         : $enable_frama_c$reason_frama_c"
if test "$enable_frama_c" = yes ; then
   echo "    Version             : $FRAMAC_VERSION"
   echo "    Share path          : $FRAMAC_SHARE"
   echo "    Library path        : $FRAMAC_LIBDIR"
fi
echo "Hypothesis selection    : $enable_hypothesis_selection$reason_hypothesis_selection"
if test "$enable_local" = yes ; then
   echo "Installable             : no"
else
   echo "Installable             : yes"
   echo "    Binary path         : $bindir"
   echo "    Lib path            : $libdir/why3"
   echo "    Data path           : $datarootdir/why3"
   echo "    Ocaml Library       : $OCAMLINSTALLLIB/why3"
   echo "    Relocatable         : $enable_relocation"
fi
