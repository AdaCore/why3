
module MaxArray

  use int.Int

  use array.Array

  let cfg compute_max (a:array int) : (max: int, ghost ind:int)
    requires { a.length > 0 }
    ensures { forall i. 0 <= i < a.length -> a[ind] >= a[i] }
  =
  (* simulation of the C code: (from ACSL Manual, section 2.4.2 Loop invariants)

   i = 0;
   goto L;
   do {
      if (t[i] > m) { L: m = t[i]; }
      /*@ invariant
        @  0 <= i < n && m == \max(0,i,\lambda integer k; t[k]);
        @*/
      i++;
      }
    while (i < n);
    return m;

  *)

  var i m:int;
  ghost var ind:int;
  {
  i <- 0;
  goto L
  }
  L {
    m <- a[i];
    ind <- i;
    goto L1
    }
  L1 {
    invariant I { 0 <= i < a.length /\
                  0 <= ind < a.length /\
                  m = a[ind] /\
                  forall j. 0 <= j <= i -> a[ind] >= a[j] };
                  (* (yes, j <= i, not j < i !) *)
    i <- i+1;
    switch (i < a.length)
    | True -> goto L2
    | False -> (m,ind)
    end
    }
  L2 {
    switch (a[i] > m)
    | True -> goto L
    | False -> goto L1
    end
    }

end
