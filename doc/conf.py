#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Why3 documentation build configuration file, created by
# sphinx-quickstart on Fri Mar  1 17:36:15 2019.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.mathjax',
    'sphinxcontrib.bibtex',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Why3'
copyright = '2019, The Why3 Development Team'
author = 'The Why3 Development Team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The full version, including alpha/beta/rc tags.
release = '1.3.0'
# The short X.Y version.
version = release

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
#html_theme_options = {
#    'logo': 'logo-why.png',
#    'logo_name': True,
#}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Why3doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Why3.tex', 'Why3 Documentation',
     'The Why3 Development Team', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'why3', 'Why3 Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Why3', 'Why3 Documentation',
     author, 'Why3', 'One line description of project.',
     'Miscellaneous'),
]

highlight_language = 'none'
numfig = True
default_role = 'literal'

rst_prolog = '''
.. |whypath| replace:: ``why3-{v}``

.. |apiurl| replace:: http://why3.lri.fr/api-{v}/
'''.format(v=version)

from pygments.lexer import RegexLexer, words
from pygments.token import Text, Comment, Operator, Keyword, Name, String, Number, Punctuation, Error

class WhyMLLexer(RegexLexer):
    name = 'WhyML'
    aliases = 'whyml'

    keywords = (
        'abstract', 'absurd', 'alias', 'any', 'assert', 'assume', 'as', 'at', 'axiom',
        'break', 'by', 'check', 'clone', 'coinductive', 'constant', 'continue',
        'diverges', 'do', 'done', 'downto',
        'else', 'end', 'ensures', 'exception', 'exists', 'export',
        'false', 'for', 'forall', 'fun', 'function', 'ghost', 'goal',
        'if', 'import', 'in', 'inductive', 'invariant', 'label', 'lemma', 'let', 'loop',
        'match', 'meta', 'module', 'mutable', 'not', 'old', 'predicate', 'private', 'pure',
        'raise', 'raises', 'reads', 'rec', 'ref', 'requires', 'return', 'returns',
        'scope', 'so', 'then', 'theory', 'to', 'true', 'try', 'type', 'use', 'val', 'variant',
        'while', 'with', 'writes',
    )

    tokens = {
        'root': [
            (r'\s+', Text),
            (r'\(\*\)', Operator),
            (r'\(\*', Comment, 'comment'),
            (words(keywords, suffix=r'\b'), Keyword),
            (r'[-~!%^&*+=|?<>/\\]', Operator),
            (r'[][{};:.,()]', Punctuation),
            (r"[^\W\d][\w']*", Name),
            (r'\bresult\b', Name.Builtin.Pseudo),

            (r'-?\d\d*(.\d*)?([eE][+-]?\d\d*)', Number.Float),
            (r'-?0[xX][\da-fA-F][\da-fA-F]*(.[\da-fA-F]*)?([pP][+-]?\d\d*)', Number.Float),
            (r'0[xX][\da-fA-F][\da-fA-F_]*', Number.Hex),
            (r'0[oO][0-7][0-7_]*', Number.Oct),
            (r'0[bB][01][01_]*', Number.Bin),
            (r'\d[\d_]*', Number.Integer),

            (r"'", Keyword),
            (r'"', String.Double, 'string'),
            (r'\[@[^]]*\]', Comment),
        ],
        'comment': [
            (r'[^(*)]+', Comment),
            (r'\(\*', Comment, '#push'),
            (r'\*\)', Comment, '#pop'),
            (r'[(*)]', Comment),
        ],
        'string': [
            (r'[^\\"]+', String.Double),
            (r'\\[\\"\'ntbr]', String.Escape),
            (r'\\[0-9]{3}', String.Escape),
            (r'\\x[0-9a-fA-F]{2}', String.Escape),
            (r'\\\n', String.Double),
            (r'"', String.Double, '#pop'),
        ],
    }

from sphinx.highlighting import lexers

lexers['whyml'] = WhyMLLexer(startinline=True)
