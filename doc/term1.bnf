\begin{syntax}
  term ::= integer            ; integer constant
    | real                    ; real constant
    | "true" | "false"        ; Boolean constant
    | "()"                    ; empty tuple
    | qualifier "(" term ")"        ; qualified term
    | qualifier "begin" term "end"  ; \textit{idem}
    | qualid                  ; qualified identifier
    | bang-op term            ; bang operator
    | "{" term-field+ "}"     ; record
    | "{" term "with" term-field+ "}"
                              ; record update
    | term "." lqualid        ; record field access
    | term "[" term "]"       ; collection access
    | term "[" term "<-" term "]"  ; collection update
    | term "[" term ".." term "]"  ; collection slice
    | term "[" term ".." "]"  ; right-open slice
    | term "[" ".." term "]"  ; left-open slice
    | term term+              ; application
    | prefix-op term          ; prefix operator
    | term infix-op-4 term    ; infix operator 4
    | term infix-op-3 term    ; infix operator 3
    | term infix-op-2 term    ; infix operator 2
    | term "at" uident        ; past value
    | "old" term              ; initial value
    | term infix-op-1 term    ; infix operator 1
    | ...                     ; continued in Fig.~\ref{fig:bnf:term2}
  \
  term-field ::= lqualid "=" term ";" ; field \texttt{=} value
  \
  lqualid ::= qualifier lident    ; qualified \textsl{lident}
  \
  uqualid ::= qualifier uident    ; qualified \textsl{uident}
  \
  qualid ::= qualifier (lident-ext | uident)  ; qualified identifier
  \
  qualifier ::= (uident ".")*       ; qualifier prefix
  \
  lident-ext ::= lident             ; lowercase identifier
               | "(" ident-op ")"   ; operator identifier
  \
  ident-op ::=  op-char-1234+     ;   infix or bang operator
              | op-char-1234+ "_" ;   prefix or bang operator
              | "[]"              ;   collection access
              | "[<-]"            ;   collection update
              | "[]<-"            ;   in-place update
              | "[_.._]"          ;   collection slice
              | "[_..]"           ;   right-open slice
              | "[.._]"           ;   left-open slice %
\end{syntax}
