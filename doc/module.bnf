\begin{syntax}
  module ::= "module" uident label* mdecl* "end"
  \
  mdecl ::= decl                                ; theory declaration
    | "type" mtype-decl ("with" mtype-decl)*    ; mutable types
    | "type" lident ("'" lident)* invariant+    ; added invariant
    | "let" "ghost"? lident label* pgm-defn     ;
    | "let" "rec" rec-defn                      ;
    | "val" "ghost"? lident label* pgm-decl     ;
    | "exception" lident label* type?           ;
    | "namespace" "import"? uident mdecl* "end" ;
  \
  mtype-decl ::= lident label* ("'" lident label*)* ;
                              mtype-defn            ;
  \
  mtype-defn ::=                                    ; abstract type
    | "=" type                                      ; alias type
    | "=" "|"? type-case ("|" type-case)* invariant* ; algebraic type
    | "=" "{" mrecord-field (";" mrecord-field)* "}" ; record type
          invariant*
  \
  mrecord-field ::= "ghost"? "mutable"? lident label* ":" type
  \
  pgm-defn ::= fun-body ;
    | "=" "fun" binder+ spec* "->" spec* expr ;
  \
  pgm-decl ::= ":" type                                  ; global variable
    | param (spec* param)+ ":" type spec*  ; abstract function
  \
\end{syntax}
