\begin{syntax}
  term ::= ...                ; see Fig.~\ref{fig:bnf:term1} and \ref{fig:bnf:term2}
    | "if" term "then" term "else" term     ; conditional
    | "match" term "with" term-case+ "end"  ; pattern matching
    | "let" pattern "=" term "in" term      ; let-binding
    | "let" symbol param+ "=" term "in" term    ; mapping definition
    | "fun" param+ "->" term               ; unnamed mapping
  \
  term-case ::= "|" pattern "->" term
  \
  pattern ::= "_"           ; catch-all
    | "()"                  ; empty tuple
    | "(" pattern ")"       ; parentheses
    | "{" (lqualid "=" pattern ";")+ "}"  ; record pattern
    | bound-var             ; variable
    | uqualid pattern*      ; constructor
    | "ghost" pattern       ; ghost sub-pattern
    | pattern "as" "ghost"? bound-var ; named sub-pattern
    | pattern "," pattern   ; tuple pattern
    | pattern "|" pattern   ; ``or'' pattern
  \
  symbol ::= lident-ext attribute*  ; user-defined symbol
  \
  param ::=
      type-arg              ; unnamed typed
    | param-name            ; (un)named untyped
    | "(" "ghost"? type ")" ; unnamed typed
    | "(" "ghost"? param-name ")" ; (un)named untyped
    | "(" "ghost"? param-name+ ":" type ")" ; multi-variable typed
  \
  param-name ::= "_"        ; unnamed parameter
    | bound-var             ; named parameter %
\end{syntax}

%    | lqualid               ; unnamed sort-typed
%    | "'" lident            ; unnamed variable-typed
%    | "(" type ("," type)+ ")" ; unnamed tuple-typed
%    | "{" type "}"          ; unnamed snapshot-typed
%    | "(" "ghost"? type ")" ; unnamed typed
%    | "(" "ghost"? (bound-var | "_")+ (":" type)? ")" ; multi-variable param %
