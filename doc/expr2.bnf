\begin{syntax}
  expr ::= ...                ; see Fig.~\ref{fig:bnf:expr1}
    | "if" expr "then" expr ("else" expr)?  ; conditional
    | "match" expr "with" expr-case+ "end"  ; pattern matching
    | expr ";" expr                         ; sequence
    | "let" pattern "=" expr "in" expr      ; let-binding
    | "let" fun-defn "in" expr              ; function definition
    | "let" "rec" rec-defn "in" expr        ; recursive definition
    | "fun" binder+ spec* "->" spec* expr   ; unnamed function
  \
  prototype ::= lident-ext attribute* binder+
  \
  expr-case ::= "|" pattern "->" expr
  \
  rec-defn ::= fun-defn ("with" fun-defn)* ;
  \
  fun-defn ::= "ghost"? kind? lident-ext attribute* fun-body ;
  \
  kind ::= "function" | "predicate" | "lemma" ;
  \
  fun-body ::= binder+ (":" ret-type)? spec* "=" spec* expr %
\end{syntax}
