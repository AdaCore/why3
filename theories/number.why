
(* number theory *)

theory Divisibility

  use export int.Int

  predicate divides (d:int) (n:int) = exists q:int. n = q * d

  lemma divides_refl : forall n:int. divides n n
  lemma divides_1    : forall n:int. divides 1 n
  lemma divides_0    : forall n:int. divides n 0

  lemma divides_left : forall a b c : int. divides a b -> divides (c*a) (c*b)
  lemma divides_right: forall a b c : int. divides a b -> divides (a*c) (b*c)

  lemma divides_oppr: forall a b : int. divides a b -> divides a (-b)
  lemma divides_oppl: forall a b : int. divides a b -> divides (-a) b
  lemma divides_oppr_rev: forall a b : int. divides (-a) b -> divides a b
  lemma divides_oppl_rev: forall a b : int. divides a (-b) -> divides a b

  lemma divides_plusr:
    forall a b c : int. divides a b -> divides a c -> divides a (b + c)
  lemma divides_minusr:
    forall a b c : int. divides a b -> divides a c -> divides a (b - c)
  lemma divides_multl:
    forall a b c : int. divides a b -> divides a (c * b)
  lemma divides_multr:
    forall a b c : int. divides a b -> divides a (b * c)

  lemma divides_factorl: forall a b : int. divides a (b * a)
  lemma divides_factorr: forall a b : int. divides a (a * b)

  lemma divides1 : forall x : int. divides x 1 -> x = 1 \/ x = -1

  lemma divides_antisym :
    forall a b : int. divides a b -> divides b a -> a = b \/ a = -b

  lemma divides_trans :
    forall a b c : int. divides a b -> divides b c -> divides a c

  use import int.Abs

  lemma divides_bounds :
    forall a b : int. divides a b -> b <> 0 -> abs a <= abs b

  use import int.EuclideanDivision

  lemma mod_divides :
    forall a b : int. b <> 0 -> mod a b = 0 -> divides b a
  lemma divides_mod :
    forall a b : int. b <> 0 -> divides b a -> mod a b = 0

end

theory Gcd

  use export int.Int
  use import Divisibility

  function gcd int int : int

  axiom gcd_nonneg : forall a b : int. 0 <= gcd a b
  axiom gcd_def1   : forall a b : int. divides (gcd a b) a
  axiom gcd_def2   : forall a b : int. divides (gcd a b) b
  axiom gcd_def3   :
    forall a b x : int. divides x a -> divides x b -> divides x (gcd a b)

  (* TODO: lemmas *)

  clone algebra.AC with type t = int, function op = gcd

end

theory Prime

  use export int.Int
  use import Divisibility
  use import Gcd

  predicate rel_prime (a b : int) = gcd a b = 1

  predicate prime (p : int) =
    2 <= p && forall n:int. 1 <= n < p -> rel_prime n p

  lemma prime_divisors :
    forall p : int. prime p ->
    forall d : int. divides d p -> d = 1 \/ d = -1 \/ d = p \/ d = -p

  lemma not_prime_1 : not (prime 1)
  lemma prime_2     : prime 2
  lemma prime_3     : prime 3

  lemma prime_alt_def :
    forall p : int.
    prime p <-> 2 <= p /\ forall n : int. 1<n<p -> not (divides n p)

end

(*
Local Variables:
compile-command: "make -C .. theories/number"
End:
*)
