(* IEEE 754 floating point *)


theory Rounding

  type mode

  function rne : mode
  function rna : mode
  function rtp : mode
  function rtn : mode
  function rtz : mode

end

theory IEEE_Float
   use export Rounding

   type t

   constant bits_in_exponent    : int
   constant bits_in_significand : int
   constant rounding_mode       : mode

   function from_real (x:real) : t
   function to_real (x:t)      : real

   function fp_abs (x:t) : t
   (* absolute value, no rounding mode *)

   function fp_neg (x:t) : t
   (* absolute value, no rounding mode *)

   function fp_add (x:t) (y:t) : t

   function fp_sub (x:t) (y:t) : t

   function fp_mul (x:t) (y:t) : t

   function fp_div (x:t) (y:t) : t

   function fp_fma (x:t) (y:t) (z:t) : t
   (* fused multiplication and addition: x*y+z *)

   function fp_sqrt (x:t) : t

   function fp_rem (x:t) (y:t) : t
   (* x-y*n, where n in Z is nearest to x/y *)

   function roundToIntegral (x:t) : t
   (* round to integral *)

   function fp_min (x:t) (y:t) : t
   function fp_max (x:t) (y:t) : t

   (*** comparison operators ***)

   predicate fp_eq  t t
   predicate fp_neq (x:t) (y:t) = not (fp_eq x y)
   predicate fp_leq t t
   predicate fp_lt  t t
   predicate fp_geq t t
   predicate fp_gt  t t

   (*** classification of numbers ***)

   predicate isNormal    t
   predicate isSubnormal t
   predicate isSignMinus t
   predicate isZero      t
   predicate isInfinite  t
   predicate isNaN       t

   (*** some constants ***)
   function fp_constant_zero : t

end

theory Single_RNE
   use export Rounding

   type single

   constant be : int = 8
   constant sb : int = 24
   constant rm : mode = rne

   clone export IEEE_Float with
      type t = single,
      constant bits_in_exponent = be,
      constant bits_in_significand = sb,
      constant rounding_mode = rm
end

theory Double_RNE
   use export Rounding

   type double

   constant be : int = 11
   constant sb : int = 53
   constant rm : mode = rne

   clone export IEEE_Float with
      type t = double,
      constant bits_in_exponent = be,
      constant bits_in_significand = sb,
      constant rounding_mode = rm
end
