
(* graph theory *)

theory Path
  use import list.Mem

  type graph

  type vertex

  logic edge graph vertex vertex

  inductive path graph vertex vertex =
  | Path_empty :
      forall g : graph, v : vertex. path g v v
  | Path_append:
      forall g : graph, v1 v2 src dst : vertex.
      path g src v1 -> edge g v1 v2 -> path g v2 dst -> 
      path g src dst

end

(*
  inductive simple_path graph vertex (list vertex) vertex =
  | Path_empty : 
      forall g:graph, v:vertex. simple_path g v (Nil : list vertex) v
  | Path_cons  : 
      forall g:graph, src v dst : vertex, l : list vertex.
      simple_path g v l dst -> edge g src v -> not mem v l ->
      simple_path g src (Cons v l) dst

  logic simple_cycle(g : graph, v : vertex) =
    exists l : list vertex. l <> Nil and simple_path g v l v

*)
