

theory Real 
  logic (< )(real, real)
  logic (<=)(real, real)
  logic (> )(real, real)
  logic (>=)(real, real)
  
  (* TODO : they are total order relations *)

  logic zero : real = 0.0
  logic one  : real = 1.0
  
  clone export algebra.Field with 
     type t = real, logic zero = zero, logic one = one
end 

theory Abs

  use import Real

  logic abs(real) : real

  axiom Pos: forall x:real. x >= 0.0 -> abs(x) = x
  axiom Neg: forall x:real. x <= 0.0 -> abs(x) = -x

end

theory MinMax

  use import Real

  logic min(real,real) : real
  logic max(real,real) : real

  axiom Max_is_ge   : forall x,y:real. max(x,y) >= x and max(x,y) >= y
  axiom Max_is_some : forall x,y:real. max(x,y) = x or max(x,y) = y
  axiom Min_is_le   : forall x,y:real. min(x,y) <= x and min(x,y) <= y
  axiom Min_is_some : forall x,y:real. min(x,y) = x or min(x,y) = y

end

theory FromInt

  use int.Int
  use import Real

  logic from_int(int) : real

  axiom Zero: from_int(0) = 0.0
  axiom One: from_int(1) = 1.0

  axiom Add: 
    forall x,y:int. from_int(Int.(+)(x,y)) = from_int(x) + from_int(y)
  axiom Sub: 
    forall x,y:int. from_int(Int.(-)(x,y)) = from_int(x) - from_int(y)
  axiom Mul: 
    forall x,y:int. from_int(Int.(*)(x,y)) = from_int(x) * from_int(y)
  axiom Neg: 
    forall x,y:int. from_int(Int.(-_)(x)) = - from_int(x)

end

theory Truncate

  (* TODO: truncate, floor, ceil *)

end

theory Square

  use import Real

  logic sqr(x:real):real = x * x

  logic sqrt(real):real

  axiom Sqrt_positive: 
    forall x:real. x >= 0.0 -> sqrt(x) >= 0.0

  axiom Sqrt_square:  
    forall x:real. x >= 0.0 -> sqr(sqrt(x)) = x

  axiom Square_sqrt: 
    forall x:real. x >= 0.0 -> sqrt(x*x) = x

end

theory ExpLog

  use import Real

  logic exp(real) : real
  axiom Exp_zero : exp(0.0) = 1.0
  axiom Exp_sum : forall x,y:real. exp(x+y) = exp(x)*exp(y)

  logic log(real) : real
  axiom Log_one : log(1.0) = 0.0
  axiom Log_mul : 
    forall x,y:real. x > 0.0 and y > 0.0 -> log(x*y) = log(x)+log(y)

  axiom Log_exp: forall x:real. log(exp(x)) = x

  axiom Exp_log: forall x:real. x > 0.0 -> exp(log(x)) = x

  logic log10(x:real) : real = log(x)/log(10.0)

end

theory Power 

  use import Real
  use import Square
  use import ExpLog

  logic pow(real,real) : real

  axiom Pow_zero_y:
    forall y:real. y <> 0.0 -> pow(0.0,y) = 0.0

  axiom Pow_x_zero:
    forall x:real. x <> 0.0 -> pow(x,0.0) = 1.0

  axiom Pow_x_one:
    forall x:real. pow(x,1.0) = x

  axiom Pow_one_y:
    forall y:real. pow(1.0,y) = 1.0

  axiom Pow_x_two:
    forall x:real. pow(x,2.0) = sqr(x)

  axiom Pow_half:
    forall x:real. x > 0.0 -> pow(x,0.5) = sqrt(x)  

  axiom Pow_exp_log:
    forall x:real. x > 0.0 -> pow(x,y) = exp(y*log(x))

end

theory Trigonometry

  (* sin, cos, tan, atan *)

end

theory Hyperbolic

 (* cosh, sinh, tanh *)

end

theory Polar

  (* atan2, hypot *)
 
end

