theory Prelude
       type deco
       type undeco
       type ty
       function sort ty undeco : deco
end

theory Builtin
       use import Prelude
       type t
       function tty : ty
       function d2t deco : t
       function t2u t : undeco
       axiom Conv1 : forall x:t [sort tty (t2u x)]. d2t (sort tty (t2u x)) = x
       axiom Conv2 : forall x:undeco [t2u (d2t (sort tty x))].
         t2u (d2t (sort tty x)) = x
end


theory Bridge
       type t
       type tb
       function tb2t tb : t
       function t2tb t : tb
       axiom Conv1 : forall x:t [t2tb x]. tb2t (t2tb x) = x
       axiom Conv2 : forall x:tb [t2tb (tb2t x)]. t2tb (tb2t x) = x
end


theory Prelude_mono
       function sort int int : int
       function int : int
       axiom Conv_int : forall x1 x2 : int. sort int x1 = sort int x2 <-> x1 = x2

       (* logic used only to cast real constant *)
       function real_to_int real : int
end

