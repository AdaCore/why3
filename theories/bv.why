(** {1 Bit Vectors} *)

(** {2 Powers of two } *)
theory Pow2int

  use import int.Int

  function pow2 (i:int) : int

  axiom Power_0 : pow2 0 = 1

  axiom Power_s : forall n: int. n >= 0 -> pow2 (n+1) = 2 * pow2 n

  lemma Power_1 : pow2 1 = 2

  lemma Power_sum :
    forall n m: int. n >= 0 /\ m >= 0 -> pow2 (n+m) = pow2 n * pow2 m

  lemma pow2pos: forall i:int. i >= 0 -> pow2 i > 0

  lemma pow2_0: pow2 0   =                  0x1
  lemma pow2_1: pow2 1   =                  0x2
  lemma pow2_2: pow2 2   =                  0x4
  lemma pow2_3: pow2 3   =                  0x8
  lemma pow2_4: pow2 4   =                 0x10
  lemma pow2_5: pow2 5   =                 0x20
  lemma pow2_6: pow2 6   =                 0x40
  lemma pow2_7: pow2 7   =                 0x80
  lemma pow2_8: pow2 8   =                0x100
  lemma pow2_9: pow2 9   =                0x200
  lemma pow2_10: pow2 10 =                0x400
  lemma pow2_11: pow2 11 =                0x800
  lemma pow2_12: pow2 12 =               0x1000
  lemma pow2_13: pow2 13 =               0x2000
  lemma pow2_14: pow2 14 =               0x4000
  lemma pow2_15: pow2 15 =               0x8000
  lemma pow2_16: pow2 16 =              0x10000
  lemma pow2_17: pow2 17 =              0x20000
  lemma pow2_18: pow2 18 =              0x40000
  lemma pow2_19: pow2 19 =              0x80000
  lemma pow2_20: pow2 20 =             0x100000
  lemma pow2_21: pow2 21 =             0x200000
  lemma pow2_22: pow2 22 =             0x400000
  lemma pow2_23: pow2 23 =             0x800000
  lemma pow2_24: pow2 24 =            0x1000000
  lemma pow2_25: pow2 25 =            0x2000000
  lemma pow2_26: pow2 26 =            0x4000000
  lemma pow2_27: pow2 27 =            0x8000000
  lemma pow2_28: pow2 28 =           0x10000000
  lemma pow2_29: pow2 29 =           0x20000000
  lemma pow2_30: pow2 30 =           0x40000000
  lemma pow2_31: pow2 31 =           0x80000000
  lemma pow2_32: pow2 32 =          0x100000000
  lemma pow2_33: pow2 33 =          0x200000000
  lemma pow2_34: pow2 34 =          0x400000000
  lemma pow2_35: pow2 35 =          0x800000000
  lemma pow2_36: pow2 36 =         0x1000000000
  lemma pow2_37: pow2 37 =         0x2000000000
  lemma pow2_38: pow2 38 =         0x4000000000
  lemma pow2_39: pow2 39 =         0x8000000000
  lemma pow2_40: pow2 40 =        0x10000000000
  lemma pow2_41: pow2 41 =        0x20000000000
  lemma pow2_42: pow2 42 =        0x40000000000
  lemma pow2_43: pow2 43 =        0x80000000000
  lemma pow2_44: pow2 44 =       0x100000000000
  lemma pow2_45: pow2 45 =       0x200000000000
  lemma pow2_46: pow2 46 =       0x400000000000
  lemma pow2_47: pow2 47 =       0x800000000000
  lemma pow2_48: pow2 48 =      0x1000000000000
  lemma pow2_49: pow2 49 =      0x2000000000000
  lemma pow2_50: pow2 50 =      0x4000000000000
  lemma pow2_51: pow2 51 =      0x8000000000000
  lemma pow2_52: pow2 52 =     0x10000000000000
  lemma pow2_53: pow2 53 =     0x20000000000000
  lemma pow2_54: pow2 54 =     0x40000000000000
  lemma pow2_55: pow2 55 =     0x80000000000000
  lemma pow2_56: pow2 56 =    0x100000000000000
  lemma pow2_57: pow2 57 =    0x200000000000000
  lemma pow2_58: pow2 58 =    0x400000000000000
  lemma pow2_59: pow2 59 =    0x800000000000000
  lemma pow2_60: pow2 60 =   0x1000000000000000
  lemma pow2_61: pow2 61 =   0x2000000000000000
  lemma pow2_62: pow2 62 =   0x4000000000000000
  lemma pow2_63: pow2 63 =   0x8000000000000000
  lemma pow2_64: pow2 64 =  0x10000000000000000

  (*** use import int.EuclideanDivision

   lemma Div_pow: forall x i:int.
     i > 0 -> pow2 (i-1) <= x < pow2 i -> div x (pow2 (i-1)) = 1

   lemma Div_div_pow: forall x i j:int.
     i > 0 /\ j > 0 -> div (div x (pow2 i)) (pow2 j) = div x (pow2 (i+j))

   lemma Mod_pow2_gen: forall x i k :int.
     0 <= k < i -> mod (div (x + pow2 i) (pow2 k)) 2 = mod (div x (pow2 k)) 2
   *)

end

(** {2 Generic theory of Bit Vectors (arbitrary length)} *)

theory BV_Gen

  use export bool.Bool
  use import int.Int

  constant size_int : int
  axiom size_int_pos : size_int > 0

  type t

  (** [nth b n] is the n-th bit of x (0 <= n < size). bit 0 is
      the least significant bit *)
  function nth t int : bool

  constant zero : t
  axiom Nth_zero:
    forall n:int. 0 <= n < size_int -> nth zero n = False

  constant ones : t
  axiom Nth_ones:
    forall n. 0 <= n < size_int -> nth ones n = True

  predicate eq (v1 v2 : t) =
    forall n. 0 <= n < size_int -> nth v1 n = nth v2 n

  axiom Extensionality: forall x y : t [eq x y]. eq x y -> x = y

  (** Bitwise operators *)

  function bw_and (v1 v2 : t) : t
  axiom Nth_bw_and:
    forall v1 v2:t, n:int. 0 <= n < size_int ->
      nth (bw_and v1 v2) n = andb (nth v1 n) (nth v2 n)

  function bw_or (v1 v2 : t) : t
  axiom Nth_bw_or:
    forall v1 v2:t, n:int. 0 <= n < size_int ->
      nth (bw_or v1 v2) n = orb (nth v1 n) (nth v2 n)

  function bw_xor (v1 v2 : t) : t
  axiom Nth_bw_xor:
    forall v1 v2:t, n:int. 0 <= n < size_int ->
      nth (bw_xor v1 v2) n = xorb (nth v1 n) (nth v2 n)

  function bw_not (v : t) : t
  axiom Nth_bw_not:
    forall v:t, n:int. 0 <= n < size_int ->
      nth (bw_not v) n = notb (nth v n)

  function lsr t int : t

  axiom Lsr_nth_low:
    forall b:t,n s:int. 0 <= s < size_int -> 0 <= n < size_int -> n+s < size_int ->
      nth (lsr b s) n = nth b (n+s)

  axiom Lsr_nth_high:
    forall b:t,n s:int. 0 <= s < size_int -> 0 <= n < size_int -> n+s >= size_int ->
      nth (lsr b s) n = False

  function asr t int : t

  axiom Asr_nth_low:
    forall b:t,n s:int. 0 <= s < size_int -> 0 <= n < size_int -> 0 <= n+s < size_int ->
      nth (asr b s) n = nth b (n+s)

  axiom Asr_nth_high:
    forall b:t,n s:int. 0 <= s < size_int -> 0 <= n < size_int -> n+s >= size_int ->
      nth (asr b s) n = nth b (size_int-1)

  function lsl t int : t

  axiom Lsl_nth_high:
    forall b:t,n s:int. 0 <= s < size_int -> 0 <= n < size_int -> 0 <= n-s < size_int -> nth (lsl b s) n = nth b (n-s)

  axiom Lsl_nth_low:
    forall b:t,n s:int. 0 <= s < size_int -> 0 <= n < size_int -> n-s < 0 -> nth (lsl b s) n = False

  use import Pow2int
  use import int.EuclideanDivision

  constant max_int : int

  function to_int t : int
  function to_uint t : int
  function of_int int : t

  constant size : t = of_int size_int

  constant two_power_size : int = Int.(+) max_int 1

  axiom to_uint_extensionality :
    forall v,v':t. to_uint v = to_uint v' -> v = v'

  axiom to_int_extensionality:
    forall v,v':t. to_int v = to_int v' -> v = v'

  predicate uint_in_range (i : int) = (Int.(<=) 0 i) /\ (Int.(<=) i max_int)

  axiom to_uint_bounds :
    forall v:t. uint_in_range (to_uint v)

  axiom to_uint_of_int :
    forall i. uint_in_range i -> to_uint (of_int i) = i

  predicate ult (x y : t) =
    Int.(<) (to_uint x) (to_uint y)

  predicate ule (x y : t) =
    Int.(<=) (to_uint x) (to_uint y)

  predicate ugt (x y : t) =
    Int.(>) (to_uint x) (to_uint y)

  predicate uge (x y : t) =
    Int.(>=) (to_uint x) (to_uint y)

  predicate slt (v1 v2 : t) =
    Int.(<) (to_int v1) (to_int v2)

  predicate sle (v1 v2 : t) =
    Int.(<=) (to_int v1) (to_int v2)

  predicate sgt (v1 v2 : t) =
    Int.(>) (to_int v1) (to_int v2)

  predicate sge (v1 v2 : t) =
    Int.(>=) (to_int v1) (to_int v2)

  function nth_bv t t: bool

  axiom Nth_bv_is_nth:
    forall x i: t.
      nth_bv x i = nth x (to_uint i)

  axiom Of_int_zero:
    zero = of_int 0

  axiom Of_int_ones:
    ones = of_int max_int

  (** Arithmetic operators *)

  function add (v1 v2 : t) : t
  axiom to_uint_add:
    forall v1 v2. to_uint (add v1 v2) =  mod (Int.(+) (to_uint v1) (to_uint v2)) two_power_size

  function sub (v1 v2 : t) : t
  axiom to_uint_sub:
    forall v1 v2. to_uint (sub v1 v2) = mod (Int.(-) (to_uint v1) (to_uint v2)) two_power_size

  function neg (v1 : t) : t
  axiom to_uint_neg:
    forall v. to_uint (neg v) = mod (Int.(-_) (to_uint v)) two_power_size

  function mul (v1 v2 : t) : t
  axiom to_uint_mul:
    forall v1 v2. to_uint (mul v1 v2) = mod (Int.( * ) (to_uint v1) (to_uint v2)) two_power_size

  function udiv (v1 v2 : t) : t
  axiom to_uint_udiv:
    forall v1 v2. to_uint (udiv v1 v2) = div (to_uint v1) (to_uint v2)

  function urem (v1 v2 : t) : t
  axiom to_uint_urem:
    forall v1 v2. to_uint (urem v1 v2) = mod (to_uint v1) (to_uint v2)

  function rotate_right (v n : t) : t

  function rotate_left (v n : t) : t

  axiom Nth_rotate_left :
    forall v n i. ult i size -> ult n (sub ones size) ->
      nth_bv v i = nth_bv (rotate_left v n) (urem (add i n) size)

  axiom Nth_rotate_right :
    forall v n i. ult i size -> ult n (sub ones size) ->
      nth_bv (rotate_right v n) i = nth_bv v (urem (add i n) size)

  (** logical shift right *)
  function lsr_bv t t : t

  axiom lsr_bv_is_lsr:
    forall x n.
      lsr_bv x n = lsr x (to_uint n)

  axiom to_uint_lsr:
    forall v n : t.
      to_uint (lsr_bv v n) = div (to_uint v) (pow2 ( to_uint n ))

  (** arithmetic shift right *)
  function asr_bv t t : t

  axiom asr_bv_is_asr:
    forall x n.
      asr_bv x n = asr x (to_uint n)

  (** logical shift left *)
  function lsl_bv t t : t

  axiom lsl_bv_is_lsl:
    forall x n.
      lsl_bv x n = lsl x (to_uint n)

  axiom to_uint_lsl:
    forall v n : t.
         to_uint (lsl_bv v n) = mod (Int.( * ) (to_uint v) (pow2 (to_uint n))) two_power_size

  axiom two_power_size_val :
    two_power_size = pow2 size_int
end

(** {2 Bit Vectors of common sizes, 8/16/32/64} *)

theory BV64
  constant size_int : int = 64
  constant max_int : int = 0xFFFF_FFFF_FFFF_FFFF

  clone export BV_Gen with
    constant size_int = size_int,
    constant max_int = max_int
end

theory BV32
  constant size_int : int = 32
  constant max_int : int = 0xFFFF_FFFF

  clone export BV_Gen with
    constant size_int = size_int,
    constant max_int = max_int
end

theory BV16
  constant size_int : int = 16
  constant max_int : int = 0xFFFF

  clone export BV_Gen with
    constant size_int = size_int,
    constant max_int = max_int
end

theory BV8
  constant size_int : int = 8
  constant max_int : int = 0xFF

  clone export BV_Gen with
    constant size_int = size_int,
    constant max_int = max_int
end

(** {2 Generic Converter} *)

theory BVConverter_Gen

  type bigBV
  type smallBV

  constant pow2_smallSize : int

  predicate in_small_range bigBV

  function to_uint_small smallBV : int
  function to_uint_big bigBV : int

  function toBig smallBV : bigBV
  function toSmall bigBV : smallBV
end

(** {2 Converters of common sizes} *)

theory BVConverter_32_64
  use BV32
  use BV64

  predicate in_range (b : BV64.t) = BV64.ule b (BV64.of_int BV32.max_int)

  clone export BVConverter_Gen with
    type bigBV = BV64.t,
    type smallBV = BV32.t,
    predicate in_small_range = in_range,
    constant pow2_smallSize = BV32.two_power_size,
    function to_uint_small = BV32.to_uint,
    function to_uint_big = BV64.to_uint
end

theory BVConverter_16_64
  use BV16
  use BV64

  predicate in_range (b : BV64.t) = BV64.ule b (BV64.of_int BV16.max_int)

  clone export BVConverter_Gen with
    type bigBV = BV64.t,
    type smallBV = BV16.t,
    predicate in_small_range = in_range,
    constant pow2_smallSize = BV16.two_power_size,
    function to_uint_small = BV16.to_uint,
    function to_uint_big = BV64.to_uint
end

theory BVConverter_8_64
  use BV8
  use BV64

  predicate in_range (b : BV64.t) = BV64.ule b (BV64.of_int BV8.max_int)

  clone export BVConverter_Gen with
    type bigBV = BV64.t,
    type smallBV = BV8.t,
    predicate in_small_range = in_range,
    constant pow2_smallSize =  BV8.two_power_size,
    function to_uint_small = BV8.to_uint,
    function to_uint_big = BV64.to_uint
end

theory BVConverter_16_32
  use BV16
  use BV32

  predicate in_range (b : BV32.t) = BV32.ule b (BV32.of_int BV16.max_int)

  clone export BVConverter_Gen with
    type bigBV = BV32.t,
    type smallBV = BV16.t,
    predicate in_small_range = in_range,
    constant pow2_smallSize = BV16.two_power_size,
    function to_uint_small = BV16.to_uint,
    function to_uint_big = BV32.to_uint
end

theory BVConverter_8_32
  use BV8
  use BV32

  predicate in_range (b : BV32.t) = BV32.ule b (BV32.of_int BV8.max_int)

  clone export BVConverter_Gen with
    type bigBV = BV32.t,
    type smallBV = BV8.t,
    predicate in_small_range = in_range,
    constant pow2_smallSize = BV8.two_power_size,
    function to_uint_small = BV8.to_uint,
    function to_uint_big = BV32.to_uint
end

theory BVConverter_8_16
  use BV8
  use BV16

  predicate in_range (b : BV16.t) = BV16.ule b (BV16.of_int BV8.max_int)

  clone export BVConverter_Gen with
    type bigBV = BV16.t,
    type smallBV = BV8.t,
    predicate in_small_range = in_range,
    constant pow2_smallSize = BV8.two_power_size,
    function to_uint_small = BV8.to_uint,
    function to_uint_big = BV16.to_uint
end
