
theory PreOrder

  type t	
  logic le(t,t)
  axiom Refl : forall x:t. le(x,x)
  axiom Trans : forall x,y,z:t. le(x,y) and le(y,z) -> le(x,z)

end	

theory Equiv

  type t

  logic eq(t,t)

  clone export PreOrder with type t = t, logic le = eq

  axiom Symm : forall x,y:t. eq(x,y) -> eq(y,x)

end

theory TotalOrder

  type t

  clone import Equiv with type t = t
  clone import PreOrder with type t = t

  axiom Totality: forall x,y:t. eq(x,y) or le(x,y) or le(y,x)

  logic lt(x:t,y:t) = le(x,y) and not eq(x,y)

  lemma Lt_antirefl: forall x:t. not lt(x,x)
  lemma Lt_trans: forall x,y,z:t. lt(x,y) and lt(y,z) -> lt(x,z)
  lemma Le_lt_trans: forall x,y,z:t. le(x,y) and lt(y,z) -> lt(x,z)
  lemma Lt_le_trans: forall x,y,z:t. lt(x,y) and le(y,z) -> lt(x,z)

end    

theory MinMax
 
  clone export TotalOrder

  logic min(t,t) : t
  logic max(t,t) : t

end	


(*
Local Variables: 
compile-command: "make -C .. test"
End: 
*)


