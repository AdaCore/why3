

(* definition of IEEE-754 rounding modes *)
theory Rounding

  type mode = NearestTiesToEven | ToZero | Up | Down | NearTiesToAway
    (** nearest ties to even, to zero, upward, downward, nearest ties to away *)

end


(* handling of IEEE-754 special values +\infty, -\infty, NaN, +0, -0 *)
theory SpecialValues

  type class = Finite | Infinite | NaN

  type sign = Neg | Pos

  use import real.Real

  inductive same_sign_real sign real =
    | Neg_case: forall x:real. x < 0.0 -> same_sign_real Neg x
    | Pos_case: forall x:real. x > 0.0 -> same_sign_real Pos x

end

theory GenFloat

  use import Rounding
  use import real.Real
  use import real.Abs
  use import real.FromInt
  use int.Int

  type t

  function round mode real : real
  function round_logic mode real : t

  function value t : real
  function exact t : real
  function model t : real

  function round_error (x : t) : real = abs (value x - exact x)
  function total_error (x : t) : real = abs (value x - model x)

  function max : real

  predicate no_overflow (m:mode) (x:real) = abs (round m x) <= max

  axiom Bounded_real_no_overflow :
    forall m:mode, x:real. abs x <= max -> no_overflow m x

  axiom Round_monotonic :
    forall m:mode, x y:real. x <= y -> round m x <= round m y

  axiom Round_idempotent :
    forall m1 m2:mode, x:real. round m1 (round m2 x) = round m2 x

  axiom Round_value :
    forall m:mode, x:t. round m (value x) = value x

  axiom Bounded_value :
    forall x:t. abs (value x) <= max

  function max_representable_integer : int

  axiom Exact_rounding_for_integers:
    forall m:mode,i:int.
      Int.(<=) (Int.(-_) max_representable_integer) i /\
      Int.(<=) i max_representable_integer ->
        round m (from_int i) = from_int i

  (* rounding up and down *)
  axiom Round_down_le:
    forall x:real. round Down x <= x
  axiom Round_up_ge:
    forall x:real. round Up x >= x
  axiom Round_down_neg:
    forall x:real. round Down (-x) = - round Up x
  axiom Round_up_neg:
    forall x:real. round Up (-x) = - round Down x

end

theory GenFloatFull

  use import GenFloat
  use import SpecialValues

  (* special values *)
  function class t : class
  function sign t  : sign

end

theory Single

  type single

  function max_single : real = 0x1.FFFFFEp127
  function max_int : int = 16777216 (* 2^24 *)

  clone export GenFloat with
    type t = single,
    function max = max_single,
    function max_representable_integer = max_int

end



theory Double

  type double

  function max_double : real = 0x1.FFFFFFFFFFFFFp1023
  function max_int : int = 9007199254740992 (* 2^23 *)

  clone export GenFloat with
    type t = double,
    function max = max_double,
    function max_representable_integer = max_int

end

theory Test

  use import Rounding
  use Single
  use Double

  lemma Round_single_01: Single.round NearestTiesToEven 0.1 = 0x1.99999ap-4

  lemma Round_double_01: Double.round NearestTiesToEven 0.1 = 0x1.999999999999ap-4

end

