
theory List

  type list 'a = Nil | Cons 'a (list 'a)

end

theory Length
  use import int.Int
  use import List

  logic length (l : list 'a) : int = 
    match l with
    | Nil      -> 0
    | Cons _ r -> 1 + length(r)
    end

  lemma Length_nonnegative : forall l:list 'a. length(l) >= 0

end

theory Mem
  use export List
 
  logic mem (x: 'a) (l : list 'a) = match l with
    | Nil      -> false
    | Cons y r -> x = y or mem x r
    end

end

theory Permut
  (* TODO *)
end

theory Induction
  use import List

  logic p (list 'a)

  axiom Induction : 
    p (Nil : list 'a) ->
    (forall x:'a. forall l:list 'a. p l -> p (Cons x l)) ->
    forall l:list 'a. p l

end

theory Map
  use import List
 
  type a
  type b 
  logic f a : b

  logic map(l : list a) : list b = 
    match l with
    | Nil      -> Nil
    | Cons x r -> Cons (f x) (map r)
    end

end

theory Fold
  (* TODO (a la Map) *)
end
