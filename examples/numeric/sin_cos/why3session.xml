<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.12" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="2" name="CVC5" version="1.0.5" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="3" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sin_cos.mlw"/>
<theory name="SinCosSingle" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x +. to_real y in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_error) +. ((eps *. abs t) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.160335" steps="984"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.050963" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.053774" steps="108"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.072606" steps="91"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.042200" steps="85"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.057183" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.073165" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.074337" steps="223"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x -. to_real y in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_error) +. ((eps *. abs t) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_single_error_propagation" arg2="with" arg3="x --. y">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.169438" steps="985"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.068625" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.066154" steps="108"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.064062" steps="91"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.073161" steps="85"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.060954" steps="154"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.088218" steps="225"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.073007" steps="223"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_square_plus_sine_square" proved="true">
 <proof prover="3"><result status="valid" time="0.020668" steps="7321"/></proof>
 </goal>
 <goal name="cos_and_sine_example&#39;vc" expl="VC for cos_and_sine_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_and_sine_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real a in
let t2 = sin t1 in
let t3 = cos t1 in
let t4 = 1.0 +. eps in
let t5 = t2 *. t2 in
let t6 = t3 *. t3 in
let t7 =
  eps +. (((cos_error +. cos_error) +. (cos_error *. cos_error)) *. t4)
in
let t8 =
  eps +. (((sin_error +. sin_error) +. (sin_error *. sin_error)) *. t4)
in
abs (to_real result -. (t6 +. t5))
&lt;=. ((((t7 +. t8) +. eps) *. (abs t6 +. abs t5))
     +. (((t4 +. t8) *. eta) +. ((t4 +. t7) *. eta)))">
   <goal name="cos_and_sine_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((cos (to_real a) *. cos (to_real a))
     +. (sin (to_real a) *. sin (to_real a))))
&lt;=. (((((eps
         +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
             *. (1.0 +. eps)))
        +. (eps
            +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. (abs (cos (to_real a) *. cos (to_real a))
          +. abs (sin (to_real a) *. sin (to_real a))))
     +. ((((1.0 +. eps)
           +. (eps
               +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
                   *. (1.0 +. eps))))
          *. eta)
         +. (((1.0 +. eps)
              +. (eps
                  +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
    <goal name="cos_and_sine_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="cos_approx a **. cos_approx a,sin_approx a **. sin_approx a">
     <goal name="cos_and_sine_example&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (cos_approx a **. cos_approx a)
 -. (cos (to_real a) *. cos (to_real a)))
&lt;=. (((eps
       +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
           *. (1.0 +. eps)))
      *. abs (cos (to_real a) *. cos (to_real a)))
     +. ((((((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a)))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (cos_approx a **. cos_approx a)
 -. (cos (to_real a) *. cos (to_real a)))
&lt;=. (((eps
       +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (cos (to_real a)) *. abs (cos (to_real a))))
     +. ((((((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a)))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="cos_approx a,cos_approx a">
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.071049" steps="131"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.067110" steps="131"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.064359" steps="108"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057759" steps="108"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.078763" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076842" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.061152" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.060935" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057363" steps="98"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.077642" steps="228"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.063816" steps="145"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx a **. sin_approx a)
 -. (sin (to_real a) *. sin (to_real a)))
&lt;=. (((eps
       +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
           *. (1.0 +. eps)))
      *. abs (sin (to_real a) *. sin (to_real a)))
     +. ((((((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a)))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx a **. sin_approx a)
 -. (sin (to_real a) *. sin (to_real a)))
&lt;=. (((eps
       +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (sin (to_real a)) *. abs (sin (to_real a))))
     +. ((((((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a)))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="sin_approx a,sin_approx a">
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076506" steps="130"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076877" steps="130"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.061556" steps="108"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057853" steps="108"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.047584" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.064438" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.051237" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052205" steps="98"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.046812" steps="98"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.077895" steps="228"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.067829" steps="145"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.056226" steps="110"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.052611" steps="110"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.045342" steps="98"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.042634" steps="98"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.052654" steps="98"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.053651" steps="98"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.054773" steps="98"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_and_sine_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.148989" steps="429"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.365089" steps="17982"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real theta1 in
let t7 = to_real twopoint5 in
let t8 = 1.0 +. eps in
let t9 = t +. to_real theta2 in
let t10 = to_real zeropointfive *. sin t in
let t11 = eps +. (sin_error *. t8) in
let t12 = t7 *. sin t9 in
let t13 = t8 +. t11 in
abs (to_real result -. (t10 +. t12))
&lt;=. ((((t11 +. t11) +. eps) *. (abs t10 +. abs t12))
     +. ((t13 *. eta)
         +. (t13
             *. (((t8 *. ((eps *. abs t9) *. (1.0 +. sin_error))) *. abs t7)
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
    <goal name="kinematics&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.048143" steps="104"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.070368" steps="125"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.058085" steps="104"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.068677" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.062122" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.054753" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052433" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.064868" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.059660" steps="98"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.069967" steps="186"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.058427" steps="142"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.068206" steps="104"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="theta1 ++. theta2">
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.240511" steps="1685"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.059747" steps="131"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.074141" steps="124"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.064697" steps="104"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.074210" steps="98"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.076526" steps="164"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.101801" steps="168"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.082466" steps="104"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063352" steps="108"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.045645" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.050981" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.045520" steps="98"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.051505" steps="106"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.045147" steps="98"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.162311" steps="336"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.107118" steps="234"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.083005" steps="108"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.079015" steps="107"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.057530" steps="99"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.050543" steps="99"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.072884" steps="98"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.057299" steps="114"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.051883" steps="98"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.229039" steps="488"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.232481" steps="512"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real phi in
let t13 = to_real theta in
let t14 = sin t in
let t15 = cos t in
let t16 = cos t13 in
let t17 = 1.0 +. eps in
let t18 = to_real ny *. sin t13 in
let t19 = eps +. (cos_error *. t17) in
let t20 = eps +. (sin_error *. t17) in
let t21 = (to_real nz *. t16) *. t14 in
let t22 = (to_real nx *. t16) *. t15 in
let t23 = eps +. (((t19 +. cos_error) +. (t19 *. cos_error)) *. t17) in
let t24 = eps +. (((t19 +. sin_error) +. (t19 *. sin_error)) *. t17) in
let t25 = (t23 +. t20) +. eps in
abs (to_real result -. ((t22 +. t18) +. t21))
&lt;=. ((((t25 +. t24) +. eps) *. ((abs t22 +. abs t18) +. abs t21))
     +. (((t17 +. t24)
          *. (((t17 +. t20)
               *. (((t17 *. (eta +. (eta *. cos_error))) *. abs t15) +. eta))
              +. ((t17 +. t23) *. eta)))
         +. ((t17 +. t25)
             *. (((t17 *. (eta +. (eta *. sin_error))) *. abs t14) +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx,cos_approx theta">
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.049794" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.049992" steps="147"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.052516" steps="123"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.063748" steps="124"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.068627" steps="113"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.055857" steps="113"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.067290" steps="113"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.062480" steps="113"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.056254" steps="113"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.119288" steps="496"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.066750" steps="181"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.080661" steps="139"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.079655" steps="132"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.068388" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.052158" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.049349" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.043794" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.055691" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.053265" steps="113"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.254506" steps="639"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.121755" steps="294"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="ny,sin_approx theta">
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.061445" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.088701" steps="139"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.062214" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.081427" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.071441" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.059053" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.078259" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.064626" steps="113"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.052754" steps="113"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.113300" steps="459"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.086108" steps="181"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.068883" steps="133"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.068449" steps="132"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.081469" steps="113"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.076903" steps="113"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.063853" steps="126"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.070467" steps="113"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.063629" steps="113"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.565583" steps="663"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz,cos_approx theta">
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.039766" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.056689" steps="147"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.088570" steps="123"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.070712" steps="124"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.053307" steps="113"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.073276" steps="113"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.078532" steps="113"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.055680" steps="113"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.044121" steps="113"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.132742" steps="496"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.090397" steps="181"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.082109" steps="139"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.084386" steps="132"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.066808" steps="123"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.054367" steps="113"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.056904" steps="113"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052843" steps="113"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052748" steps="113"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.048520" steps="113"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.331264" steps="692"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.209545" steps="303"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.067801" steps="197"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.085272" steps="133"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.072502" steps="116"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.056426" steps="116"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.100016" steps="136"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.092661" steps="124"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.050120" steps="113"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.115437" steps="13732"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.130962" steps="13736"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SinCosDouble" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x +. to_real y in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_error) +. ((eps *. abs t) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.159291" steps="1024"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.058519" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.077492" steps="110"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.075677" steps="93"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.052204" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.052712" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.083892" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.072199" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x -. to_real y in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_error) +. ((eps *. abs t) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_double_error_propagation" arg2="with" arg3="x --. y">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.152941" steps="1034"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.074563" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.063710" steps="110"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.070315" steps="93"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.063245" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.064563" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.083198" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.061477" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_square_plus_sine_square" proved="true">
 <proof prover="0"><result status="valid" time="0.017598" steps="7463"/></proof>
 </goal>
 <goal name="cos_and_sine_example&#39;vc" expl="VC for cos_and_sine_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_and_sine_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real a in
let t2 = sin t1 in
let t3 = cos t1 in
let t4 = 1.0 +. eps in
let t5 = t2 *. t2 in
let t6 = t3 *. t3 in
let t7 =
  eps +. (((cos_error +. cos_error) +. (cos_error *. cos_error)) *. t4)
in
let t8 =
  eps +. (((sin_error +. sin_error) +. (sin_error *. sin_error)) *. t4)
in
abs (to_real result -. (t6 +. t5))
&lt;=. ((((t7 +. t8) +. eps) *. (abs t6 +. abs t5))
     +. (((t4 +. t8) *. eta) +. ((t4 +. t7) *. eta)))">
   <goal name="cos_and_sine_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((cos (to_real a) *. cos (to_real a))
     +. (sin (to_real a) *. sin (to_real a))))
&lt;=. (((((eps
         +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
             *. (1.0 +. eps)))
        +. (eps
            +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. (abs (cos (to_real a) *. cos (to_real a))
          +. abs (sin (to_real a) *. sin (to_real a))))
     +. ((((1.0 +. eps)
           +. (eps
               +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
                   *. (1.0 +. eps))))
          *. eta)
         +. (((1.0 +. eps)
              +. (eps
                  +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
    <goal name="cos_and_sine_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="cos_approx a **. cos_approx a,sin_approx a **. sin_approx a">
     <goal name="cos_and_sine_example&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (cos_approx a **. cos_approx a)
 -. (cos (to_real a) *. cos (to_real a)))
&lt;=. (((eps
       +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
           *. (1.0 +. eps)))
      *. abs (cos (to_real a) *. cos (to_real a)))
     +. ((((((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a)))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (cos_approx a **. cos_approx a)
 -. (cos (to_real a) *. cos (to_real a)))
&lt;=. (((eps
       +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (cos (to_real a)) *. abs (cos (to_real a))))
     +. ((((((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a)))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="cos_approx a,cos_approx a">
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.060507" steps="132"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.053351" steps="132"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.071024" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.062639" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.047245" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.041461" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.056449" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.054148" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.049835" steps="100"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.062216" steps="229"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.060056" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx a **. sin_approx a)
 -. (sin (to_real a) *. sin (to_real a)))
&lt;=. (((eps
       +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
           *. (1.0 +. eps)))
      *. abs (sin (to_real a) *. sin (to_real a)))
     +. ((((((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a)))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx a **. sin_approx a)
 -. (sin (to_real a) *. sin (to_real a)))
&lt;=. (((eps
       +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (sin (to_real a)) *. abs (sin (to_real a))))
     +. ((((((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a)))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="sin_approx a,sin_approx a">
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.046194" steps="132"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.049636" steps="132"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.046779" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057497" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052519" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.068718" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.053939" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.051136" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.049076" steps="100"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.071709" steps="229"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.059117" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.063454" steps="111"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.071920" steps="111"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.058000" steps="101"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.073567" steps="101"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.075711" steps="100"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.068783" steps="100"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.071704" steps="100"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_and_sine_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.146876" steps="431"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.044968" steps="18573"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real theta1 in
let t7 = to_real twopoint5 in
let t8 = 1.0 +. eps in
let t9 = t +. to_real theta2 in
let t10 = to_real zeropointfive *. sin t in
let t11 = eps +. (sin_error *. t8) in
let t12 = t7 *. sin t9 in
let t13 = t8 +. t11 in
abs (to_real result -. (t10 +. t12))
&lt;=. ((((t11 +. t11) +. eps) *. (abs t10 +. abs t12))
     +. ((t13 *. eta)
         +. (t13
             *. (((t8 *. ((eps *. abs t9) *. (1.0 +. sin_error))) *. abs t7)
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
    <goal name="kinematics&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.043685" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.049806" steps="128"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.066302" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.075431" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063806" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.053980" steps="102"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.067012" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.067862" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063848" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.097071" steps="192"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.068153" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057537" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="theta1 ++. theta2">
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.229085" steps="1730"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.065090" steps="135"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.058628" steps="129"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.082368" steps="108"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.077064" steps="102"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.091147" steps="172"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.107175" steps="171"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.075385" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.055736" steps="111"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.051402" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.050762" steps="102"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.044605" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.049978" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.044151" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.155510" steps="342"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.107541" steps="236"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.071084" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.087311" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.067636" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.052863" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.054437" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.052118" steps="119"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.041508" steps="102"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.282228" steps="491"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.268489" steps="504"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real phi in
let t13 = to_real theta in
let t14 = sin t in
let t15 = cos t in
let t16 = cos t13 in
let t17 = 1.0 +. eps in
let t18 = to_real ny *. sin t13 in
let t19 = eps +. (cos_error *. t17) in
let t20 = eps +. (sin_error *. t17) in
let t21 = (to_real nz *. t16) *. t14 in
let t22 = (to_real nx *. t16) *. t15 in
let t23 = eps +. (((t19 +. cos_error) +. (t19 *. cos_error)) *. t17) in
let t24 = eps +. (((t19 +. sin_error) +. (t19 *. sin_error)) *. t17) in
let t25 = (t23 +. t20) +. eps in
abs (to_real result -. ((t22 +. t18) +. t21))
&lt;=. ((((t25 +. t24) +. eps) *. ((abs t22 +. abs t18) +. abs t21))
     +. (((t17 +. t24)
          *. (((t17 +. t20)
               *. (((t17 *. (eta +. (eta *. cos_error))) *. abs t15) +. eta))
              +. ((t17 +. t23) *. eta)))
         +. ((t17 +. t25)
             *. (((t17 *. (eta +. (eta *. sin_error))) *. abs t14) +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx,cos_approx theta">
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.045079" steps="123"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.054885" steps="151"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.076321" steps="126"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.075197" steps="127"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.060641" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.067343" steps="117"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.069952" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.070157" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.048747" steps="117"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.103928" steps="498"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.066731" steps="184"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.072038" steps="142"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.083918" steps="136"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.075400" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.050575" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.055884" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.062885" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.074199" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.049201" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.260695" steps="654"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.141244" steps="301"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="ny,sin_approx theta">
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.077520" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.087870" steps="142"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.074086" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.088804" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.079556" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.046313" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.068528" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.074982" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.056921" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.118482" steps="462"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.077386" steps="184"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.076395" steps="135"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.074835" steps="136"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.059254" steps="119"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.064444" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.077503" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.071526" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.053493" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.718535" steps="700"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz,cos_approx theta">
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.051197" steps="123"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.059773" steps="151"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.057225" steps="126"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.064608" steps="127"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.054088" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.084994" steps="117"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.078587" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.062459" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.054061" steps="117"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.162641" steps="498"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.076120" steps="184"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.077703" steps="142"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.062970" steps="136"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.060799" steps="126"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076362" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057378" steps="117"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.073555" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.061187" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076423" steps="117"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.369877" steps="696"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.157510" steps="307"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.095634" steps="201"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.091470" steps="135"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.069022" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.075785" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.110133" steps="140"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.061147" steps="130"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.060434" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.246200" steps="13772"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.366507" steps="13776"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
