<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.5.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sin_cos.mlw"/>
<theory name="SinCosSingle" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.209762" steps="2149"/></proof>
  </goal>
  <goal name="sin_simple_example&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x +. to_real y in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_rel_error)
     +. (((eps *. abs t) *. (1.0 +. sin_rel_error)) +. sin_cst_error))">
   <goal name="sin_simple_example&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_rel_error)
     +. (((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_rel_error))
         +. sin_cst_error))">
    <goal name="sin_simple_example&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_rel_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_rel_error))
         +. sin_cst_error))">
     <goal name="sin_simple_example&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="sin_simple_example&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.251422" steps="2321"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.040538" steps="127"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.047764" steps="122"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.085835" steps="101"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.047581" steps="94"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.049239" steps="164"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.080391" steps="232"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.081960" steps="216"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.159310" steps="2353"/></proof>
  </goal>
  <goal name="cos_simple_example&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x -. to_real y in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_rel_error)
     +. (((eps *. abs t) *. (1.0 +. cos_rel_error)) +. cos_cst_error))">
   <goal name="cos_simple_example&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_rel_error)
     +. (((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_rel_error))
         +. cos_cst_error))">
    <goal name="cos_simple_example&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_rel_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_rel_error))
         +. cos_cst_error))">
     <goal name="cos_simple_example&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_single_error_propagation" arg2="with" arg3="x --. y">
      <goal name="cos_simple_example&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.368139" steps="2461"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.074739" steps="127"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.073720" steps="122"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.066931" steps="101"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.071820" steps="94"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.081889" steps="163"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.078047" steps="237"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.077294" steps="218"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_square_plus_sine_square" proved="true">
 <proof prover="0"><result status="valid" time="1.733453" steps="19033"/></proof>
 </goal>
 <goal name="cos_and_sine_example&#39;vc" expl="VC for cos_and_sine_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_and_sine_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.045441" steps="97"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.047311" steps="101"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.044742" steps="106"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.052045" steps="112"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real a1 in
let t2 = sin t1 in
let t3 = cos t1 in
let t4 = 1.0 +. eps in
let t5 = t2 *. t2 in
let t6 = t3 *. t3 in
let t7 =
  eps
  +. (((cos_rel_error +. cos_rel_error) +. (cos_rel_error *. cos_rel_error))
      *. t4)
in
let t8 =
  eps
  +. (((sin_rel_error +. sin_rel_error) +. (sin_rel_error *. sin_rel_error))
      *. t4)
in
let t9 =
  (t4 *. (cos_cst_error +. (cos_cst_error *. cos_rel_error))) *. abs t3
in
let t10 =
  (t4 *. (sin_cst_error +. (sin_cst_error *. sin_rel_error))) *. abs t2
in
abs (to_real result -. (t6 +. t5))
&lt;=. ((((t7 +. t8) +. eps) *. (abs t6 +. abs t5))
     +. (((t4 +. t8)
          *. (((t9 +. t9) +. (t4 *. (cos_cst_error *. cos_cst_error))) +. eta))
         +. ((t4 +. t7)
             *. (((t10 +. t10) +. (t4 *. (sin_cst_error *. sin_cst_error)))
                 +. eta))))">
   <goal name="cos_and_sine_example&#39;vc.4.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((cos (to_real a1) *. cos (to_real a1))
     +. (sin (to_real a1) *. sin (to_real a1))))
&lt;=. (((((eps
         +. (((cos_rel_error +. cos_rel_error)
              +. (cos_rel_error *. cos_rel_error))
             *. (1.0 +. eps)))
        +. (eps
            +. (((sin_rel_error +. sin_rel_error)
                 +. (sin_rel_error *. sin_rel_error))
                *. (1.0 +. eps))))
       +. eps)
      *. (abs (cos (to_real a1) *. cos (to_real a1))
          +. abs (sin (to_real a1) *. sin (to_real a1))))
     +. ((((1.0 +. eps)
           +. (eps
               +. (((sin_rel_error +. sin_rel_error)
                    +. (sin_rel_error *. sin_rel_error))
                   *. (1.0 +. eps))))
          *. ((((((1.0 +. eps)
                  *. (cos_cst_error +. (cos_cst_error *. cos_rel_error)))
                 *. abs (cos (to_real a1)))
                +. (((1.0 +. eps)
                     *. (cos_cst_error +. (cos_cst_error *. cos_rel_error)))
                    *. abs (cos (to_real a1))))
               +. ((1.0 +. eps) *. (cos_cst_error *. cos_cst_error)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. (((cos_rel_error +. cos_rel_error)
                       +. (cos_rel_error *. cos_rel_error))
                      *. (1.0 +. eps))))
             *. ((((((1.0 +. eps)
                     *. (sin_cst_error +. (sin_cst_error *. sin_rel_error)))
                    *. abs (sin (to_real a1)))
                   +. (((1.0 +. eps)
                        *. (sin_cst_error +. (sin_cst_error *. sin_rel_error)))
                       *. abs (sin (to_real a1))))
                  +. ((1.0 +. eps) *. (sin_cst_error *. sin_cst_error)))
                 +. eta))))">
    <goal name="cos_and_sine_example&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="o **. o1,o2 **. o3">
     <goal name="cos_and_sine_example&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (cos (to_real a1) *. cos (to_real a1)))
&lt;=. (((eps
       +. (((cos_rel_error +. cos_rel_error)
            +. (cos_rel_error *. cos_rel_error))
           *. (1.0 +. eps)))
      *. abs (cos (to_real a1) *. cos (to_real a1)))
     +. ((((((cos_cst_error +. (cos_cst_error *. cos_rel_error))
             *. abs (cos (to_real a1)))
            +. ((cos_cst_error +. (cos_cst_error *. cos_rel_error))
                *. abs (cos (to_real a1))))
           +. (cos_cst_error *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (cos (to_real a1) *. cos (to_real a1)))
&lt;=. (((eps
       +. (((cos_rel_error +. cos_rel_error)
            +. (cos_rel_error *. cos_rel_error))
           *. (1.0 +. eps)))
      *. (abs (cos (to_real a1)) *. abs (cos (to_real a1))))
     +. ((((((cos_cst_error +. (cos_cst_error *. cos_rel_error))
             *. abs (cos (to_real a1)))
            +. ((cos_cst_error +. (cos_cst_error *. cos_rel_error))
                *. abs (cos (to_real a1))))
           +. (cos_cst_error *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o,o1">
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.036152" steps="10548"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.114889" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.039112" steps="119"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.018751" steps="10540"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.111721" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076395" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.014932" steps="10536"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.034146" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.072786" steps="18018"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.073136" steps="261"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.086757" steps="268"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o2 **. o3) -. (sin (to_real a1) *. sin (to_real a1)))
&lt;=. (((eps
       +. (((sin_rel_error +. sin_rel_error)
            +. (sin_rel_error *. sin_rel_error))
           *. (1.0 +. eps)))
      *. abs (sin (to_real a1) *. sin (to_real a1)))
     +. ((((((sin_cst_error +. (sin_cst_error *. sin_rel_error))
             *. abs (sin (to_real a1)))
            +. ((sin_cst_error +. (sin_cst_error *. sin_rel_error))
                *. abs (sin (to_real a1))))
           +. (sin_cst_error *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o2 **. o3) -. (sin (to_real a1) *. sin (to_real a1)))
&lt;=. (((eps
       +. (((sin_rel_error +. sin_rel_error)
            +. (sin_rel_error *. sin_rel_error))
           *. (1.0 +. eps)))
      *. (abs (sin (to_real a1)) *. abs (sin (to_real a1))))
     +. ((((((sin_cst_error +. (sin_cst_error *. sin_rel_error))
             *. abs (sin (to_real a1)))
            +. ((sin_cst_error +. (sin_cst_error *. sin_rel_error))
                *. abs (sin (to_real a1))))
           +. (sin_cst_error *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o2,o3">
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.141142" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016823" steps="10548"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.040269" steps="119"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.090239" steps="18028"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.069534" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.081974" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.094151" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.026493" steps="10536"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.040792" steps="10532"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.130829" steps="261"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.024458" steps="33373"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.011809" steps="10556"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.027921" steps="121"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.4" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.024280" steps="109"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.5" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.034468" steps="109"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.066037" steps="134"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.039987" steps="134"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.8" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.035108" steps="109"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_and_sine_example&#39;vc.4.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.106679" steps="12343"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="4.760954" steps="448016"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.181619" steps="2144"/></proof>
  </goal>
  <goal name="kinematics&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.053556" steps="110"/></proof>
  </goal>
  <goal name="kinematics&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real o in
let t3 = to_real o2 in
let t4 = to_real theta11 in
let t5 = 1.0 +. eps in
let t6 = t4 +. to_real theta21 in
let t7 = t *. sin t4 in
let t8 = eps +. (sin_rel_error *. t5) in
let t9 = t3 *. sin t6 in
let t10 = t5 +. t8 in
abs (to_real result -. (t7 +. t9))
&lt;=. ((((t8 +. t8) +. eps) *. (abs t7 +. abs t9))
     +. ((t10 *. (((t5 *. sin_cst_error) *. abs t) +. eta))
         +. (t10
             *. (((t5
                   *. (((eps *. abs t6) *. (1.0 +. sin_rel_error))
                       +. sin_cst_error))
                  *. abs t3)
                 +. eta))))">
   <goal name="kinematics&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real o *. sin (to_real theta11))
     +. (to_real o2 *. sin (to_real theta11 +. to_real theta21))))
&lt;=. (((((eps +. (sin_rel_error *. (1.0 +. eps)))
        +. (eps +. (sin_rel_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real o *. sin (to_real theta11))
          +. abs (to_real o2 *. sin (to_real theta11 +. to_real theta21))))
     +. ((((1.0 +. eps) +. (eps +. (sin_rel_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. sin_cst_error) *. abs (to_real o)) +. eta))
         +. (((1.0 +. eps) +. (eps +. (sin_rel_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. (((eps *. abs (to_real theta11 +. to_real theta21))
                        *. (1.0 +. sin_rel_error))
                       +. sin_cst_error))
                  *. abs (to_real o2))
                 +. eta))))">
    <goal name="kinematics&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="o **. o1,o2 **. o3">
     <goal name="kinematics&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (to_real o *. sin (to_real theta11)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_error) +. (0.0 *. sin_rel_error)) *. (1.0 +. eps)))
      *. abs (to_real o *. sin (to_real theta11)))
     +. ((((((sin_cst_error +. (sin_cst_error *. 0.0)) *. abs (to_real o))
            +. ((0.0 +. (0.0 *. sin_rel_error))
                *. abs (sin (to_real theta11))))
           +. (0.0 *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (to_real o *. sin (to_real theta11)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_error) +. (0.0 *. sin_rel_error)) *. (1.0 +. eps)))
      *. (abs (to_real o) *. abs (sin (to_real theta11))))
     +. ((((((sin_cst_error +. (sin_cst_error *. 0.0)) *. abs (to_real o))
            +. ((0.0 +. (0.0 *. sin_rel_error))
                *. abs (sin (to_real theta11))))
           +. (0.0 *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o,o1">
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.079219" steps="11624"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.112553" steps="11604"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.091629" steps="18006"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.038131" steps="122"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.028359" steps="113"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.097638" steps="17978"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.022905" steps="10520"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.023323" steps="10520"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.104364" steps="11599"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.053087" steps="206"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.024829" steps="10807"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (o2 **. o3)
 -. (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_error) +. (0.0 *. sin_rel_error)) *. (1.0 +. eps)))
      *. abs (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
     +. (((((((((eps *. abs (to_real theta11 +. to_real theta21))
                *. (1.0 +. sin_rel_error))
               +. sin_cst_error)
              +. ((((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_error))
                   +. sin_cst_error)
                  *. 0.0))
             *. abs (to_real o2))
            +. ((0.0 +. (0.0 *. sin_rel_error))
                *. abs (sin (to_real theta11 +. to_real theta21))))
           +. (0.0
               *. (((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_error))
                   +. sin_cst_error)))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (o2 **. o3)
 -. (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_error) +. (0.0 *. sin_rel_error)) *. (1.0 +. eps)))
      *. (abs (to_real o2) *. abs (sin (to_real theta11 +. to_real theta21))))
     +. (((((((((eps *. abs (to_real theta11 +. to_real theta21))
                *. (1.0 +. sin_rel_error))
               +. sin_cst_error)
              +. ((((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_error))
                   +. sin_cst_error)
                  *. 0.0))
             *. abs (to_real o2))
            +. ((0.0 +. (0.0 *. sin_rel_error))
                *. abs (sin (to_real theta11 +. to_real theta21))))
           +. (0.0
               *. (((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_error))
                   +. sin_cst_error)))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o2,o3">
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.084353" steps="11624"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real o3 -. sin (to_real theta11 +. to_real theta21))
&lt;=. ((abs (sin (to_real theta11 +. to_real theta21)) *. sin_rel_error)
     +. (((eps *. abs (to_real theta11 +. to_real theta21))
          *. (1.0 +. sin_rel_error))
         +. sin_cst_error))">
         <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs (to_real o3 -. sin (to_real theta11 +. to_real theta21))
&lt;=. ((sin_rel_error *. abs (sin (to_real theta11 +. to_real theta21)))
     +. ((((eps *. abs (to_real theta11 +. to_real theta21)) +. 0.0)
          *. (1.0 +. sin_rel_error))
         +. sin_cst_error))">
          <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="theta11 ++. theta21">
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta11 ++. theta21) -. (to_real theta11 +. to_real theta21))
&lt;=. (eps *. abs (to_real theta11 +. to_real theta21))">
            <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.655776" steps="5666"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.066771" steps="18121"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.027044" steps="10598"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.085584" steps="12370"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.031447" steps="113"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="4"><result status="valid" time="0.059027" steps="18223"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.033852" steps="10667"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.071429" steps="18006"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.035811" steps="122"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.076137" steps="11601"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.091312" steps="17978"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.094701" steps="17983"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.048644" steps="121"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.031213" steps="10516"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.105759" steps="357"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.079466" steps="11940"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.066709" steps="18013"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.088492" steps="18017"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.034307" steps="113"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.038996" steps="76062"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.045147" steps="76102"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.063785" steps="130"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.028420" steps="10516"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.027602" steps="11207"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.441362" steps="588"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.042532" steps="101"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.042097" steps="106"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.052484" steps="112"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.045798" steps="118"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.037076" steps="124"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real nz1 in
let t2 = to_real ny1 in
let t3 = to_real nx1 in
let t4 = to_real phi1 in
let t5 = to_real theta1 in
let t6 = sin t4 in
let t7 = cos t4 in
let t8 = cos t5 in
let t9 = 1.0 +. eps in
let t10 = t9 *. cos_cst_error in
let t11 = t1 *. t8 in
let t12 = t2 *. sin t5 in
let t13 = t3 *. t8 in
let t14 = eps +. (cos_rel_error *. t9) in
let t15 = eps +. (sin_rel_error *. t9) in
let t16 = t11 *. t6 in
let t17 = t13 *. t7 in
let t18 = (t10 *. abs t1) +. eta in
let t19 = (t10 *. abs t3) +. eta in
let t20 =
  eps +. (((t14 +. cos_rel_error) +. (t14 *. cos_rel_error)) *. t9)
in
let t21 =
  eps +. (((t14 +. sin_rel_error) +. (t14 *. sin_rel_error)) *. t9)
in
let t22 = (t20 +. t15) +. eps in
abs (to_real result -. ((t17 +. t12) +. t16))
&lt;=. ((((t22 +. t21) +. eps) *. ((abs t17 +. abs t12) +. abs t16))
     +. (((t9 +. t21)
          *. (((t9 +. t15)
               *. (((((t9 *. (cos_cst_error +. (cos_cst_error *. t14)))
                      *. abs t13)
                     +. ((t9 *. (t19 +. (t19 *. cos_rel_error))) *. abs t7))
                    +. (t9 *. (t19 *. cos_cst_error)))
                   +. eta))
              +. ((t9 +. t20) *. (((t9 *. sin_cst_error) *. abs t2) +. eta))))
         +. ((t9 +. t22)
             *. (((((t9 *. (sin_cst_error +. (sin_cst_error *. t14)))
                    *. abs t11)
                   +. ((t9 *. (t18 +. (t18 *. sin_rel_error))) *. abs t6))
                  +. (t9 *. (t18 *. sin_cst_error)))
                 +. eta))))">
   <goal name="raytracer&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
      +. (to_real ny1 *. sin (to_real theta1)))
     +. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. cos_rel_error)
                +. ((eps +. (cos_rel_error *. (1.0 +. eps))) *. cos_rel_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_rel_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. sin_rel_error)
                 +. ((eps +. (cos_rel_error *. (1.0 +. eps)))
                     *. sin_rel_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
           +. abs (to_real ny1 *. sin (to_real theta1)))
          +. abs
             ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_rel_error *. (1.0 +. eps)))
                     +. sin_rel_error)
                    +. ((eps +. (cos_rel_error *. (1.0 +. eps)))
                        *. sin_rel_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_rel_error *. (1.0 +. eps))))
               *. ((((((1.0 +. eps)
                       *. (cos_cst_error
                           +. (cos_cst_error
                               *. (eps +. (cos_rel_error *. (1.0 +. eps))))))
                      *. abs (to_real nx1 *. cos (to_real theta1)))
                     +. (((1.0 +. eps)
                          *. (((((1.0 +. eps) *. cos_cst_error)
                                *. abs (to_real nx1))
                               +. eta)
                              +. (((((1.0 +. eps) *. cos_cst_error)
                                    *. abs (to_real nx1))
                                   +. eta)
                                  *. cos_rel_error)))
                         *. abs (cos (to_real phi1))))
                    +. ((1.0 +. eps)
                        *. (((((1.0 +. eps) *. cos_cst_error)
                              *. abs (to_real nx1))
                             +. eta)
                            *. cos_cst_error)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_rel_error *. (1.0 +. eps)))
                             +. cos_rel_error)
                            +. ((eps +. (cos_rel_error *. (1.0 +. eps)))
                                *. cos_rel_error))
                           *. (1.0 +. eps))))
                  *. ((((1.0 +. eps) *. sin_cst_error) *. abs (to_real ny1))
                      +. eta))))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_rel_error *. (1.0 +. eps)))
                          +. cos_rel_error)
                         +. ((eps +. (cos_rel_error *. (1.0 +. eps)))
                             *. cos_rel_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_rel_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((((1.0 +. eps)
                     *. (sin_cst_error
                         +. (sin_cst_error
                             *. (eps +. (cos_rel_error *. (1.0 +. eps))))))
                    *. abs (to_real nz1 *. cos (to_real theta1)))
                   +. (((1.0 +. eps)
                        *. (((((1.0 +. eps) *. cos_cst_error)
                              *. abs (to_real nz1))
                             +. eta)
                            +. (((((1.0 +. eps) *. cos_cst_error)
                                  *. abs (to_real nz1))
                                 +. eta)
                                *. sin_rel_error)))
                       *. abs (sin (to_real phi1))))
                  +. ((1.0 +. eps)
                      *. (((((1.0 +. eps) *. cos_cst_error)
                            *. abs (to_real nz1))
                           +. eta)
                          *. sin_cst_error)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="((nx1 **. o) **. o1) ++. (ny1 **. o2),(nz1 **. o3) **. o4">
     <goal name="raytracer&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (((nx1 **. o) **. o1) ++. (ny1 **. o2))
 -. (((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
     +. (to_real ny1 *. sin (to_real theta1))))
&lt;=. (((((eps
         +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. cos_rel_error)
              +. ((eps +. (cos_rel_error *. (1.0 +. eps))) *. cos_rel_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_rel_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
          +. abs (to_real ny1 *. sin (to_real theta1))))
     +. ((((1.0 +. eps) +. (eps +. (sin_rel_error *. (1.0 +. eps))))
          *. ((((((1.0 +. eps)
                  *. (cos_cst_error
                      +. (cos_cst_error
                          *. (eps +. (cos_rel_error *. (1.0 +. eps))))))
                 *. abs (to_real nx1 *. cos (to_real theta1)))
                +. (((1.0 +. eps)
                     *. (((((1.0 +. eps) *. cos_cst_error)
                           *. abs (to_real nx1))
                          +. eta)
                         +. (((((1.0 +. eps) *. cos_cst_error)
                               *. abs (to_real nx1))
                              +. eta)
                             *. cos_rel_error)))
                    *. abs (cos (to_real phi1))))
               +. ((1.0 +. eps)
                   *. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1))
                        +. eta)
                       *. cos_cst_error)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_rel_error *. (1.0 +. eps)))
                        +. cos_rel_error)
                       +. ((eps +. (cos_rel_error *. (1.0 +. eps)))
                           *. cos_rel_error))
                      *. (1.0 +. eps))))
             *. ((((1.0 +. eps) *. sin_cst_error) *. abs (to_real ny1))
                 +. eta))))">
      <goal name="raytracer&#39;vc.5.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(nx1 **. o) **. o1,ny1 **. o2">
       <goal name="raytracer&#39;vc.5.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx1 **. o) **. o1)
 -. ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. cos_rel_error)
            +. ((eps +. (cos_rel_error *. (1.0 +. eps))) *. cos_rel_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
     +. ((((((cos_cst_error
              +. (cos_cst_error *. (eps +. (cos_rel_error *. (1.0 +. eps)))))
             *. abs (to_real nx1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1))
                  +. eta)
                 +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1))
                      +. eta)
                     *. cos_rel_error))
                *. abs (cos (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1)) +. eta)
               *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx1 **. o) **. o1)
 -. ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. cos_rel_error)
            +. ((eps +. (cos_rel_error *. (1.0 +. eps))) *. cos_rel_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx1 *. cos (to_real theta1))
          *. abs (cos (to_real phi1))))
     +. ((((((cos_cst_error
              +. (cos_cst_error *. (eps +. (cos_rel_error *. (1.0 +. eps)))))
             *. abs (to_real nx1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1))
                  +. eta)
                 +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1))
                      +. eta)
                     *. cos_rel_error))
                *. abs (cos (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nx1)) +. eta)
               *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx1 **. o,o1">
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs (to_real (nx1 **. o) -. (to_real nx1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_error) +. (0.0 *. cos_rel_error)) *. (1.0 +. eps)))
      *. abs (to_real nx1 *. cos (to_real theta1)))
     +. ((((((cos_cst_error +. (cos_cst_error *. 0.0)) *. abs (to_real nx1))
            +. ((0.0 +. (0.0 *. cos_rel_error)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (nx1 **. o) -. (to_real nx1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_error) +. (0.0 *. cos_rel_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx1) *. abs (cos (to_real theta1))))
     +. ((((((cos_cst_error +. (cos_cst_error *. 0.0)) *. abs (to_real nx1))
            +. ((0.0 +. (0.0 *. cos_rel_error)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx1,o">
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.038836" steps="10709"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.055738" steps="18293"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.024968" steps="10683"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.082511" steps="11851"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.083959" steps="11851"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.040134" steps="10663"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.135367" steps="11851"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.075380" steps="11854"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.033286" steps="10659"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.160214" steps="517"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.108392" steps="12108"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.063579" steps="18293"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.056201" steps="140"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.025415" steps="10669"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.057252" steps="77929"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.030736" steps="10663"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.034830" steps="128"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.018999" steps="10663"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.070782" steps="11849"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="1.174492" steps="1923"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.115830" steps="12281"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (ny1 **. o2) -. (to_real ny1 *. sin (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_error) +. (0.0 *. sin_rel_error)) *. (1.0 +. eps)))
      *. abs (to_real ny1 *. sin (to_real theta1)))
     +. ((((((sin_cst_error +. (sin_cst_error *. 0.0)) *. abs (to_real ny1))
            +. ((0.0 +. (0.0 *. sin_rel_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.5.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (ny1 **. o2) -. (to_real ny1 *. sin (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_error) +. (0.0 *. sin_rel_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny1) *. abs (sin (to_real theta1))))
     +. ((((((sin_cst_error +. (sin_cst_error *. 0.0)) *. abs (to_real ny1))
            +. ((0.0 +. (0.0 *. sin_rel_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="ny1,o2">
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.033226" steps="128"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.037134" steps="150"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.029037" steps="10683"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.032768" steps="131"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.031379" steps="10663"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.023131" steps="10663"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.080397" steps="11851"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.039287" steps="122"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.138101" steps="11849"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.162351" steps="488"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.058695" steps="267"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.029848" steps="141"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015628" steps="10687"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.053696" steps="122"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.040748" steps="77929"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.291184" steps="371"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.050013" steps="128"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.091776" steps="11849"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.104020" steps="12631"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz1 **. o3) **. o4)
 -. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. sin_rel_error)
            +. ((eps +. (cos_rel_error *. (1.0 +. eps))) *. sin_rel_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
     +. ((((((sin_cst_error
              +. (sin_cst_error *. (eps +. (cos_rel_error *. (1.0 +. eps)))))
             *. abs (to_real nz1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nz1))
                  +. eta)
                 +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nz1))
                      +. eta)
                     *. sin_rel_error))
                *. abs (sin (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nz1)) +. eta)
               *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.5.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz1 **. o3) **. o4)
 -. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_error *. (1.0 +. eps))) +. sin_rel_error)
            +. ((eps +. (cos_rel_error *. (1.0 +. eps))) *. sin_rel_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz1 *. cos (to_real theta1))
          *. abs (sin (to_real phi1))))
     +. ((((((sin_cst_error
              +. (sin_cst_error *. (eps +. (cos_rel_error *. (1.0 +. eps)))))
             *. abs (to_real nz1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nz1))
                  +. eta)
                 +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nz1))
                      +. eta)
                     *. sin_rel_error))
                *. abs (sin (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_cst_error) *. abs (to_real nz1)) +. eta)
               *. sin_cst_error))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.5.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz1 **. o3,o4">
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (nz1 **. o3) -. (to_real nz1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_error) +. (0.0 *. cos_rel_error)) *. (1.0 +. eps)))
      *. abs (to_real nz1 *. cos (to_real theta1)))
     +. ((((((cos_cst_error +. (cos_cst_error *. 0.0)) *. abs (to_real nz1))
            +. ((0.0 +. (0.0 *. cos_rel_error)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs (to_real (nz1 **. o3) -. (to_real nz1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_error) +. (0.0 *. cos_rel_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz1) *. abs (cos (to_real theta1))))
     +. ((((((cos_cst_error +. (cos_cst_error *. 0.0)) *. abs (to_real nz1))
            +. ((0.0 +. (0.0 *. cos_rel_error)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_cst_error))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz1,o3">
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.067323" steps="11874"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.022256" steps="10675"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.060990" steps="18325"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.023181" steps="10667"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.026961" steps="10663"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.095185" steps="11854"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.039278" steps="122"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.082314" steps="11854"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.032668" steps="122"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="0.162969" steps="517"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.068230" steps="18678"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.068895" steps="11854"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.021554" steps="10687"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.053905" steps="131"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.049847" steps="77929"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.028943" steps="122"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.053065" steps="128"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.070731" steps="18293"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.023757" steps="122"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="1.098711" steps="2002"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.5.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.027915" steps="35195"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.051280" steps="206"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.064602" steps="141"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.4" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.055706" steps="125"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.5" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.032333" steps="125"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.730916" steps="654"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.261843" steps="355"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015286" steps="10659"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.5.0.1" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.071216" steps="20650"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.037274" steps="90899"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SinCosDouble" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x +. to_real y in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_error) +. ((eps *. abs t) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.179873" steps="998"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.047253" steps="120"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.052739" steps="111"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.077448" steps="93"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.053871" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.059795" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.088968" steps="228"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.086495" steps="224"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x -. to_real y in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_error) +. ((eps *. abs t) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_double_error_propagation" arg2="with" arg3="x --. y">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.136803" steps="995"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.051569" steps="120"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.051393" steps="111"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.076817" steps="93"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.044804" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.065090" steps="155"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.068322" steps="228"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.070442" steps="224"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_square_plus_sine_square" proved="true">
 <proof prover="0"><result status="valid" time="1.512208" steps="21838"/></proof>
 </goal>
 <goal name="cos_and_sine_example&#39;vc" expl="VC for cos_and_sine_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_and_sine_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real a in
let t2 = sin t1 in
let t3 = cos t1 in
let t4 = 1.0 +. eps in
let t5 = t2 *. t2 in
let t6 = t3 *. t3 in
let t7 =
  eps +. (((cos_error +. cos_error) +. (cos_error *. cos_error)) *. t4)
in
let t8 =
  eps +. (((sin_error +. sin_error) +. (sin_error *. sin_error)) *. t4)
in
abs (to_real result -. (t6 +. t5))
&lt;=. ((((t7 +. t8) +. eps) *. (abs t6 +. abs t5))
     +. (((t4 +. t8) *. eta) +. ((t4 +. t7) *. eta)))">
   <goal name="cos_and_sine_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((cos (to_real a) *. cos (to_real a))
     +. (sin (to_real a) *. sin (to_real a))))
&lt;=. (((((eps
         +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
             *. (1.0 +. eps)))
        +. (eps
            +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. (abs (cos (to_real a) *. cos (to_real a))
          +. abs (sin (to_real a) *. sin (to_real a))))
     +. ((((1.0 +. eps)
           +. (eps
               +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
                   *. (1.0 +. eps))))
          *. eta)
         +. (((1.0 +. eps)
              +. (eps
                  +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
    <goal name="cos_and_sine_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="cos_approx a **. cos_approx a,sin_approx a **. sin_approx a">
     <goal name="cos_and_sine_example&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (cos_approx a **. cos_approx a)
 -. (cos (to_real a) *. cos (to_real a)))
&lt;=. (((eps
       +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
           *. (1.0 +. eps)))
      *. abs (cos (to_real a) *. cos (to_real a)))
     +. ((((((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a)))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (cos_approx a **. cos_approx a)
 -. (cos (to_real a) *. cos (to_real a)))
&lt;=. (((eps
       +. (((cos_error +. cos_error) +. (cos_error *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (cos (to_real a)) *. abs (cos (to_real a))))
     +. ((((((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a)))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="cos_approx a,cos_approx a">
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.055092" steps="133"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.049108" steps="133"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.052990" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.060081" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.054682" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.045040" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.043758" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.056152" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.048208" steps="100"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.070271" steps="229"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.059632" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx a **. sin_approx a)
 -. (sin (to_real a) *. sin (to_real a)))
&lt;=. (((eps
       +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
           *. (1.0 +. eps)))
      *. abs (sin (to_real a) *. sin (to_real a)))
     +. ((((((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a)))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx a **. sin_approx a)
 -. (sin (to_real a) *. sin (to_real a)))
&lt;=. (((eps
       +. (((sin_error +. sin_error) +. (sin_error *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (sin (to_real a)) *. abs (sin (to_real a))))
     +. ((((((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a)))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real a))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="sin_approx a,sin_approx a">
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.069461" steps="133"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.062429" steps="133"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.071209" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.065527" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.080825" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.046158" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.052254" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.069083" steps="100"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.049881" steps="100"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.090307" steps="229"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.065915" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.057953" steps="111"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.061370" steps="111"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.052953" steps="101"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.047105" steps="101"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.056058" steps="100"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.049824" steps="100"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.045252" steps="100"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_and_sine_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.141314" steps="431"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.966753" steps="18624"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real theta1 in
let t7 = to_real twopoint5 in
let t8 = 1.0 +. eps in
let t9 = t +. to_real theta2 in
let t10 = to_real zeropointfive *. sin t in
let t11 = eps +. (sin_error *. t8) in
let t12 = t7 *. sin t9 in
let t13 = t8 +. t11 in
abs (to_real result -. (t10 +. t12))
&lt;=. ((((t11 +. t11) +. eps) *. (abs t10 +. abs t12))
     +. ((t13 *. eta)
         +. (t13
             *. (((t8 *. ((eps *. abs t9) *. (1.0 +. sin_error))) *. abs t7)
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
    <goal name="kinematics&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.045536" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.048826" steps="126"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.053090" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.058781" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.054493" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.052988" steps="102"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.077557" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.080305" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.053223" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.072712" steps="192"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.056816" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.064920" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="theta1 ++. theta2">
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="0"><result status="valid" time="0.292452" steps="1786"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.085950" steps="135"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.081733" steps="127"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.064086" steps="108"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.079483" steps="102"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.068181" steps="174"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.074318" steps="171"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.053219" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.065009" steps="111"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.071835" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.055276" steps="102"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.079500" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.075506" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.048960" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.137973" steps="335"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.140482" steps="237"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.044645" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.090216" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.062432" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.052574" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.052537" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.040741" steps="119"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.048033" steps="102"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.256851" steps="496"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.240263" steps="497"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real phi in
let t13 = to_real theta in
let t14 = sin t in
let t15 = cos t in
let t16 = cos t13 in
let t17 = 1.0 +. eps in
let t18 = to_real ny *. sin t13 in
let t19 = eps +. (cos_error *. t17) in
let t20 = eps +. (sin_error *. t17) in
let t21 = (to_real nz *. t16) *. t14 in
let t22 = (to_real nx *. t16) *. t15 in
let t23 = eps +. (((t19 +. cos_error) +. (t19 *. cos_error)) *. t17) in
let t24 = eps +. (((t19 +. sin_error) +. (t19 *. sin_error)) *. t17) in
let t25 = (t23 +. t20) +. eps in
abs (to_real result -. ((t22 +. t18) +. t21))
&lt;=. ((((t25 +. t24) +. eps) *. ((abs t22 +. abs t18) +. abs t21))
     +. (((t17 +. t24)
          *. (((t17 +. t20)
               *. (((t17 *. (eta +. (eta *. cos_error))) *. abs t15) +. eta))
              +. ((t17 +. t23) *. eta)))
         +. ((t17 +. t25)
             *. (((t17 *. (eta +. (eta *. sin_error))) *. abs t14) +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx,cos_approx theta">
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.053546" steps="123"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.055950" steps="151"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.071445" steps="126"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.076705" steps="127"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.055880" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.085670" steps="117"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.069204" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.052666" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.060174" steps="117"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="0"><result status="valid" time="0.140004" steps="498"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.084740" steps="186"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.051503" steps="140"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.079611" steps="135"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.055332" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.051899" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.072276" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.053229" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.054842" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.045125" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.290031" steps="667"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.129905" steps="298"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="ny,sin_approx theta">
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.090923" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.098462" steps="140"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.067896" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.076248" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.079653" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.075911" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.065047" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.076903" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.066711" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.111196" steps="462"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.066126" steps="186"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.071481" steps="136"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.060315" steps="135"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.056568" steps="119"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.066082" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.058619" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.044573" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.052833" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.552456" steps="650"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz,cos_approx theta">
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.048742" steps="123"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.079956" steps="151"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.059713" steps="126"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.070550" steps="127"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.045926" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.059869" steps="117"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.057522" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.074169" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.082900" steps="117"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.170202" steps="498"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.114314" steps="186"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.061598" steps="140"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.086196" steps="135"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.077232" steps="126"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.065624" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.061638" steps="117"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.094638" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.056096" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.089092" steps="117"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.342446" steps="700"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.191632" steps="307"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.117466" steps="201"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.059961" steps="136"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.087272" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.078185" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.105637" steps="140"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.087294" steps="130"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.051790" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1" memlimit="2000"><result status="valid" time="0.228982" steps="12842"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1" memlimit="2000"><result status="valid" time="0.294572" steps="12846"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
