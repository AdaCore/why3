<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.5.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sin_cos.mlw"/>
<theory name="SinCosSingle" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.209762" steps="2149"/></proof>
  </goal>
  <goal name="sin_simple_example&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real a +. to_real b in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_rel_err)
     +. (((eps *. abs t) *. (1.0 +. sin_rel_err)) +. sin_abs_err))">
   <goal name="sin_simple_example&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real a +. to_real b))
&lt;=. ((abs (sin (to_real a +. to_real b)) *. sin_rel_err)
     +. (((eps *. abs (to_real a +. to_real b)) *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
    <goal name="sin_simple_example&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real a +. to_real b))
&lt;=. ((sin_rel_err *. abs (sin (to_real a +. to_real b)))
     +. ((((eps *. abs (to_real a +. to_real b)) +. 0.0)
          *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
     <goal name="sin_simple_example&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="a ++. b">
      <goal name="sin_simple_example&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
       <goal name="sin_simple_example&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.216871" steps="2417"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.067766" steps="17863"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.015122" steps="10468"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.071636" steps="12103"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.070474" steps="17720"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.018506" steps="10545"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.082936" steps="11577"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.077517" steps="11591"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.159310" steps="2353"/></proof>
  </goal>
  <goal name="cos_simple_example&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real a -. to_real b in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_rel_err)
     +. (((eps *. abs t) *. (1.0 +. cos_rel_err)) +. cos_abs_err))">
   <goal name="cos_simple_example&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real a -. to_real b))
&lt;=. ((abs (cos (to_real a -. to_real b)) *. cos_rel_err)
     +. (((eps *. abs (to_real a -. to_real b)) *. (1.0 +. cos_rel_err))
         +. cos_abs_err))">
    <goal name="cos_simple_example&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real a -. to_real b))
&lt;=. ((cos_rel_err *. abs (cos (to_real a -. to_real b)))
     +. ((((eps *. abs (to_real a -. to_real b)) +. 0.0)
          *. (1.0 +. cos_rel_err))
         +. cos_abs_err))">
     <goal name="cos_simple_example&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_single_error_propagation" arg2="with" arg3="a --. b">
      <goal name="cos_simple_example&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (a --. b) -. (to_real a -. to_real b))
&lt;=. (eps *. abs (to_real a -. to_real b))">
       <goal name="cos_simple_example&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.217912" steps="2413"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.032566" steps="10541"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.067996" steps="11432"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.042200" steps="101"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.062637" steps="17736"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.020326" steps="10553"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.071208" steps="11595"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.066590" steps="11609"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_square_plus_sine_square" proved="true">
 <proof prover="0"><result status="valid" time="1.733453" steps="19033"/></proof>
 </goal>
 <goal name="cos_and_sine_example&#39;vc" expl="VC for cos_and_sine_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_and_sine_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.045441" steps="97"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.047311" steps="101"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.044742" steps="106"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.052045" steps="112"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real a1 in
let t2 = sin t1 in
let t3 = cos t1 in
let t4 = 1.0 +. eps in
let t5 = t2 *. t2 in
let t6 = t3 *. t3 in
let t7 =
  eps
  +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err)) *. t4)
in
let t8 =
  eps
  +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err)) *. t4)
in
let t9 = (t4 *. (cos_abs_err +. (cos_abs_err *. cos_rel_err))) *. abs t3 in
let t10 = (t4 *. (sin_abs_err +. (sin_abs_err *. sin_rel_err))) *. abs t2 in
abs (to_real result -. (t6 +. t5))
&lt;=. ((((t7 +. t8) +. eps) *. (abs t6 +. abs t5))
     +. (((t4 +. t8)
          *. (((t9 +. t9) +. (t4 *. (cos_abs_err *. cos_abs_err))) +. eta))
         +. ((t4 +. t7)
             *. (((t10 +. t10) +. (t4 *. (sin_abs_err *. sin_abs_err)))
                 +. eta))))">
   <goal name="cos_and_sine_example&#39;vc.4.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((cos (to_real a1) *. cos (to_real a1))
     +. (sin (to_real a1) *. sin (to_real a1))))
&lt;=. (((((eps
         +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err))
             *. (1.0 +. eps)))
        +. (eps
            +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err))
                *. (1.0 +. eps))))
       +. eps)
      *. (abs (cos (to_real a1) *. cos (to_real a1))
          +. abs (sin (to_real a1) *. sin (to_real a1))))
     +. ((((1.0 +. eps)
           +. (eps
               +. (((sin_rel_err +. sin_rel_err)
                    +. (sin_rel_err *. sin_rel_err))
                   *. (1.0 +. eps))))
          *. ((((((1.0 +. eps)
                  *. (cos_abs_err +. (cos_abs_err *. cos_rel_err)))
                 *. abs (cos (to_real a1)))
                +. (((1.0 +. eps)
                     *. (cos_abs_err +. (cos_abs_err *. cos_rel_err)))
                    *. abs (cos (to_real a1))))
               +. ((1.0 +. eps) *. (cos_abs_err *. cos_abs_err)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. (((cos_rel_err +. cos_rel_err)
                       +. (cos_rel_err *. cos_rel_err))
                      *. (1.0 +. eps))))
             *. ((((((1.0 +. eps)
                     *. (sin_abs_err +. (sin_abs_err *. sin_rel_err)))
                    *. abs (sin (to_real a1)))
                   +. (((1.0 +. eps)
                        *. (sin_abs_err +. (sin_abs_err *. sin_rel_err)))
                       *. abs (sin (to_real a1))))
                  +. ((1.0 +. eps) *. (sin_abs_err *. sin_abs_err)))
                 +. eta))))">
    <goal name="cos_and_sine_example&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="o **. o1,o2 **. o3">
     <goal name="cos_and_sine_example&#39;vc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (cos (to_real a1) *. cos (to_real a1)))
&lt;=. (((eps
       +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err))
           *. (1.0 +. eps)))
      *. abs (cos (to_real a1) *. cos (to_real a1)))
     +. ((((((cos_abs_err +. (cos_abs_err *. cos_rel_err))
             *. abs (cos (to_real a1)))
            +. ((cos_abs_err +. (cos_abs_err *. cos_rel_err))
                *. abs (cos (to_real a1))))
           +. (cos_abs_err *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (cos (to_real a1) *. cos (to_real a1)))
&lt;=. (((eps
       +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err))
           *. (1.0 +. eps)))
      *. (abs (cos (to_real a1)) *. abs (cos (to_real a1))))
     +. ((((((cos_abs_err +. (cos_abs_err *. cos_rel_err))
             *. abs (cos (to_real a1)))
            +. ((cos_abs_err +. (cos_abs_err *. cos_rel_err))
                *. abs (cos (to_real a1))))
           +. (cos_abs_err *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o,o1">
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.059666" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.072358" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.027751" steps="119"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.107382" steps="11644"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.130248" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.066933" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.076559" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.129792" steps="11647"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.084081" steps="11642"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.4.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.149597" steps="261"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.093713" steps="18386"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o2 **. o3) -. (sin (to_real a1) *. sin (to_real a1)))
&lt;=. (((eps
       +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err))
           *. (1.0 +. eps)))
      *. abs (sin (to_real a1) *. sin (to_real a1)))
     +. ((((((sin_abs_err +. (sin_abs_err *. sin_rel_err))
             *. abs (sin (to_real a1)))
            +. ((sin_abs_err +. (sin_abs_err *. sin_rel_err))
                *. abs (sin (to_real a1))))
           +. (sin_abs_err *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o2 **. o3) -. (sin (to_real a1) *. sin (to_real a1)))
&lt;=. (((eps
       +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err))
           *. (1.0 +. eps)))
      *. (abs (sin (to_real a1)) *. abs (sin (to_real a1))))
     +. ((((((sin_abs_err +. (sin_abs_err *. sin_rel_err))
             *. abs (sin (to_real a1)))
            +. ((sin_abs_err +. (sin_abs_err *. sin_rel_err))
                *. abs (sin (to_real a1))))
           +. (sin_abs_err *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o2,o3">
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.093756" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.057470" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.029520" steps="10540"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.024389" steps="10540"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.019155" steps="10536"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.091267" steps="18023"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.025722" steps="10536"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.036449" steps="109"/></proof>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.027527" steps="10532"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.4.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.079634" steps="261"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.034195" steps="33373"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.038840" steps="121"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.030066" steps="121"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.4" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.045340" steps="109"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.5" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.029902" steps="109"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.071305" steps="134"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.040495" steps="134"/></proof>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.0.0.8" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.068448" steps="18018"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_and_sine_example&#39;vc.4.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.018387" steps="11311"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="4.960024" steps="448016"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.181619" steps="2144"/></proof>
  </goal>
  <goal name="kinematics&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.053556" steps="110"/></proof>
  </goal>
  <goal name="kinematics&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real o in
let t3 = to_real o2 in
let t4 = to_real theta11 in
let t5 = 1.0 +. eps in
let t6 = t4 +. to_real theta21 in
let t7 = t *. sin t4 in
let t8 = eps +. (sin_rel_err *. t5) in
let t9 = t3 *. sin t6 in
let t10 = t5 +. t8 in
abs (to_real result -. (t7 +. t9))
&lt;=. ((((t8 +. t8) +. eps) *. (abs t7 +. abs t9))
     +. ((t10 *. (((t5 *. sin_abs_err) *. abs t) +. eta))
         +. (t10
             *. (((t5
                   *. (((eps *. abs t6) *. (1.0 +. sin_rel_err))
                       +. sin_abs_err))
                  *. abs t3)
                 +. eta))))">
   <goal name="kinematics&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real o *. sin (to_real theta11))
     +. (to_real o2 *. sin (to_real theta11 +. to_real theta21))))
&lt;=. (((((eps +. (sin_rel_err *. (1.0 +. eps)))
        +. (eps +. (sin_rel_err *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real o *. sin (to_real theta11))
          +. abs (to_real o2 *. sin (to_real theta11 +. to_real theta21))))
     +. ((((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. sin_abs_err) *. abs (to_real o)) +. eta))
         +. (((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. (((eps *. abs (to_real theta11 +. to_real theta21))
                        *. (1.0 +. sin_rel_err))
                       +. sin_abs_err))
                  *. abs (to_real o2))
                 +. eta))))">
    <goal name="kinematics&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="o **. o1,o2 **. o3">
     <goal name="kinematics&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (to_real o *. sin (to_real theta11)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real o *. sin (to_real theta11)))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real o))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta11))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (to_real o *. sin (to_real theta11)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real o) *. abs (sin (to_real theta11))))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real o))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta11))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o,o1">
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.080603" steps="11624"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.040544" steps="10550"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.028081" steps="118"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.033378" steps="122"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.090321" steps="17983"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.028611" steps="113"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.029605" steps="113"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.025625" steps="10520"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.090268" steps="17973"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.045600" steps="206"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.076853" steps="11856"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (o2 **. o3)
 -. (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
     +. (((((((((eps *. abs (to_real theta11 +. to_real theta21))
                *. (1.0 +. sin_rel_err))
               +. sin_abs_err)
              +. ((((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)
                  *. 0.0))
             *. abs (to_real o2))
            +. ((0.0 +. (0.0 *. sin_rel_err))
                *. abs (sin (to_real theta11 +. to_real theta21))))
           +. (0.0
               *. (((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (o2 **. o3)
 -. (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real o2) *. abs (sin (to_real theta11 +. to_real theta21))))
     +. (((((((((eps *. abs (to_real theta11 +. to_real theta21))
                *. (1.0 +. sin_rel_err))
               +. sin_abs_err)
              +. ((((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)
                  *. 0.0))
             *. abs (to_real o2))
            +. ((0.0 +. (0.0 *. sin_rel_err))
                *. abs (sin (to_real theta11 +. to_real theta21))))
           +. (0.0
               *. (((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="o2,o3">
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.031412" steps="10564"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real o3 -. sin (to_real theta11 +. to_real theta21))
&lt;=. ((abs (sin (to_real theta11 +. to_real theta21)) *. sin_rel_err)
     +. (((eps *. abs (to_real theta11 +. to_real theta21))
          *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
         <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs (to_real o3 -. sin (to_real theta11 +. to_real theta21))
&lt;=. ((sin_rel_err *. abs (sin (to_real theta11 +. to_real theta21)))
     +. ((((eps *. abs (to_real theta11 +. to_real theta21)) +. 0.0)
          *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
          <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="theta11 ++. theta21">
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta11 ++. theta21) -. (to_real theta11 +. to_real theta21))
&lt;=. (eps *. abs (to_real theta11 +. to_real theta21))">
            <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.405167" steps="5665"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.077686" steps="11715"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.024293" steps="10598"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.147496" steps="12370"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.024259" steps="10520"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.081504" steps="11783"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.024474" steps="10667"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.020274" steps="10538"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.033344" steps="122"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.073286" steps="11601"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.023418" steps="10520"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.058714" steps="17983"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.028717" steps="121"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.035351" steps="10516"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.108125" steps="357"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.056771" steps="18476"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.024272" steps="10542"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.066259" steps="18017"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.082360" steps="12112"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.080987" steps="18404"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.054755" steps="116"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.050793" steps="130"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.042359" steps="113"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.075377" steps="18623"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.409799" steps="583"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.042532" steps="101"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.042097" steps="106"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.052484" steps="112"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.045798" steps="118"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.037076" steps="124"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real nz1 in
let t2 = to_real ny1 in
let t3 = to_real nx1 in
let t5 = to_real phi1 in
let t6 = to_real theta1 in
let t7 = sin t5 in
let t8 = cos t5 in
let t9 = cos t6 in
let t10 = 1.0 +. eps in
let t11 = t10 *. cos_abs_err in
let t12 = t *. t9 in
let t13 = t2 *. sin t6 in
let t14 = t3 *. t9 in
let t15 = eps +. (cos_rel_err *. t10) in
let t16 = eps +. (sin_rel_err *. t10) in
let t17 = t12 *. t7 in
let t18 = t14 *. t8 in
let t19 = (t11 *. abs t) +. eta in
let t20 = (t11 *. abs t3) +. eta in
let t21 = eps +. (((t15 +. cos_rel_err) +. (t15 *. cos_rel_err)) *. t10) in
let t22 = eps +. (((t15 +. sin_rel_err) +. (t15 *. sin_rel_err)) *. t10) in
let t23 = (t21 +. t16) +. eps in
abs (to_real result -. ((t18 +. t13) +. t17))
&lt;=. ((((t23 +. t22) +. eps) *. ((abs t18 +. abs t13) +. abs t17))
     +. (((t10 +. t22)
          *. (((t10 +. t16)
               *. (((((t10 *. (cos_abs_err +. (cos_abs_err *. t15)))
                      *. abs t14)
                     +. ((t10 *. (t20 +. (t20 *. cos_rel_err))) *. abs t8))
                    +. (t10 *. (t20 *. cos_abs_err)))
                   +. eta))
              +. ((t10 +. t21) *. (((t10 *. sin_abs_err) *. abs t2) +. eta))))
         +. ((t10 +. t23)
             *. (((((t10 *. (sin_abs_err +. (sin_abs_err *. t15))) *. abs t12)
                   +. ((t10 *. (t19 +. (t19 *. sin_rel_err))) *. abs t7))
                  +. (t10 *. (t19 *. sin_abs_err)))
                 +. eta))))">
   <goal name="raytracer&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
      +. (to_real ny1 *. sin (to_real theta1)))
     +. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
                +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
               *. (1.0 +. eps)))
          +. (eps +. (sin_rel_err *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
                 +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
           +. abs (to_real ny1 *. sin (to_real theta1)))
          +. abs
             ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
                    +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
               *. ((((((1.0 +. eps)
                       *. (cos_abs_err
                           +. (cos_abs_err
                               *. (eps +. (cos_rel_err *. (1.0 +. eps))))))
                      *. abs (to_real nx1 *. cos (to_real theta1)))
                     +. (((1.0 +. eps)
                          *. (((((1.0 +. eps) *. cos_abs_err)
                                *. abs (to_real nx1))
                               +. eta)
                              +. (((((1.0 +. eps) *. cos_abs_err)
                                    *. abs (to_real nx1))
                                   +. eta)
                                  *. cos_rel_err)))
                         *. abs (cos (to_real phi1))))
                    +. ((1.0 +. eps)
                        *. (((((1.0 +. eps) *. cos_abs_err)
                              *. abs (to_real nx1))
                             +. eta)
                            *. cos_abs_err)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_rel_err *. (1.0 +. eps)))
                             +. cos_rel_err)
                            +. ((eps +. (cos_rel_err *. (1.0 +. eps)))
                                *. cos_rel_err))
                           *. (1.0 +. eps))))
                  *. ((((1.0 +. eps) *. sin_abs_err) *. abs (to_real ny1))
                      +. eta))))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_rel_err *. (1.0 +. eps)))
                          +. cos_rel_err)
                         +. ((eps +. (cos_rel_err *. (1.0 +. eps)))
                             *. cos_rel_err))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_rel_err *. (1.0 +. eps))))
                  +. eps))
             *. ((((((1.0 +. eps)
                     *. (sin_abs_err
                         +. (sin_abs_err
                             *. (eps +. (cos_rel_err *. (1.0 +. eps))))))
                    *. abs (to_real nz1 *. cos (to_real theta1)))
                   +. (((1.0 +. eps)
                        *. (((((1.0 +. eps) *. cos_abs_err)
                              *. abs (to_real nz1))
                             +. eta)
                            +. (((((1.0 +. eps) *. cos_abs_err)
                                  *. abs (to_real nz1))
                                 +. eta)
                                *. sin_rel_err)))
                       *. abs (sin (to_real phi1))))
                  +. ((1.0 +. eps)
                      *. (((((1.0 +. eps) *. cos_abs_err)
                            *. abs (to_real nz1))
                           +. eta)
                          *. sin_abs_err)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="((nx1 **. o) **. o1) ++. (ny1 **. o2),(nz1 **. o3) **. o4">
     <goal name="raytracer&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (((nx1 **. o) **. o1) ++. (ny1 **. o2))
 -. (((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
     +. (to_real ny1 *. sin (to_real theta1))))
&lt;=. (((((eps
         +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
              +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
             *. (1.0 +. eps)))
        +. (eps +. (sin_rel_err *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
          +. abs (to_real ny1 *. sin (to_real theta1))))
     +. ((((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
          *. ((((((1.0 +. eps)
                  *. (cos_abs_err
                      +. (cos_abs_err
                          *. (eps +. (cos_rel_err *. (1.0 +. eps))))))
                 *. abs (to_real nx1 *. cos (to_real theta1)))
                +. (((1.0 +. eps)
                     *. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                          +. eta)
                         +. (((((1.0 +. eps) *. cos_abs_err)
                               *. abs (to_real nx1))
                              +. eta)
                             *. cos_rel_err)))
                    *. abs (cos (to_real phi1))))
               +. ((1.0 +. eps)
                   *. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                        +. eta)
                       *. cos_abs_err)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
                       +. ((eps +. (cos_rel_err *. (1.0 +. eps)))
                           *. cos_rel_err))
                      *. (1.0 +. eps))))
             *. ((((1.0 +. eps) *. sin_abs_err) *. abs (to_real ny1)) +. eta))))">
      <goal name="raytracer&#39;vc.5.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(nx1 **. o) **. o1,ny1 **. o2">
       <goal name="raytracer&#39;vc.5.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx1 **. o) **. o1)
 -. ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
           *. (1.0 +. eps)))
      *. abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
     +. ((((((cos_abs_err
              +. (cos_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nx1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                      +. eta)
                     *. cos_rel_err))
                *. abs (cos (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
               *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx1 **. o) **. o1)
 -. ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
           *. (1.0 +. eps)))
      *. (abs (to_real nx1 *. cos (to_real theta1))
          *. abs (cos (to_real phi1))))
     +. ((((((cos_abs_err
              +. (cos_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nx1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                      +. eta)
                     *. cos_rel_err))
                *. abs (cos (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
               *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx1 **. o,o1">
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs (to_real (nx1 **. o) -. (to_real nx1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real nx1 *. cos (to_real theta1)))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nx1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (nx1 **. o) -. (to_real nx1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real nx1) *. abs (cos (to_real theta1))))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nx1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx1,o">
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.041153" steps="128"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.053345" steps="155"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.105305" steps="18325"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.077621" steps="11851"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.083519" steps="11851"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.030757" steps="122"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.018185" steps="10663"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.024196" steps="10663"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.024618" steps="122"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.167729" steps="531"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.031727" steps="10950"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.058358" steps="18293"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.019992" steps="10687"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.027447" steps="131"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.036545" steps="122"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.096764" steps="11854"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.039003" steps="128"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.060286" steps="122"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.053884" steps="122"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="1.915585" steps="1923"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.068559" steps="18882"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (ny1 **. o2) -. (to_real ny1 *. sin (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real ny1 *. sin (to_real theta1)))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real ny1))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta1))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.5.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (ny1 **. o2) -. (to_real ny1 *. sin (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real ny1) *. abs (sin (to_real theta1))))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real ny1))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta1))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="ny1,o2">
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.067491" steps="18365"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.018825" steps="10693"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.012286" steps="10683"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.014267" steps="10669"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.068249" steps="11851"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.035298" steps="122"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.080008" steps="18298"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.019528" steps="10663"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.033830" steps="122"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.090274" steps="488"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.011829" steps="10952"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.060601" steps="141"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.064134" steps="18332"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.047532" steps="122"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.037622" steps="77929"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.262812" steps="371"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.032549" steps="128"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.024262" steps="10659"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.017430" steps="11668"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz1 **. o3) **. o4)
 -. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
           *. (1.0 +. eps)))
      *. abs ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
     +. ((((((sin_abs_err
              +. (sin_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nz1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1))
                      +. eta)
                     *. sin_rel_err))
                *. abs (sin (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
               *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.5.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz1 **. o3) **. o4)
 -. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
           *. (1.0 +. eps)))
      *. (abs (to_real nz1 *. cos (to_real theta1))
          *. abs (sin (to_real phi1))))
     +. ((((((sin_abs_err
              +. (sin_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nz1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1))
                      +. eta)
                     *. sin_rel_err))
                *. abs (sin (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
               *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.5.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz1 **. o3,o4">
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (nz1 **. o3) -. (to_real nz1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real nz1 *. cos (to_real theta1)))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nz1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs (to_real (nz1 **. o3) -. (to_real nz1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real nz1) *. abs (cos (to_real theta1))))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nz1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz1,o3">
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.082123" steps="11874"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.056314" steps="18293"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.036227" steps="130"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.070579" steps="11851"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.054115" steps="122"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.026803" steps="10663"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.067872" steps="11851"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.071235" steps="11854"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.029051" steps="122"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="0.171378" steps="517"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.066904" steps="18678"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.069091" steps="11854"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.036589" steps="140"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.044865" steps="10669"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.041749" steps="122"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.011155" steps="10663"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.041643" steps="128"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016473" steps="10663"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.064095" steps="18288"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="2.182889" steps="2124"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.5.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.138323" steps="12291"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.107881" steps="19470"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.028049" steps="10691"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.4" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.048450" steps="125"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.5" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.064626" steps="125"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="2.065992" steps="654"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.258131" steps="355"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.111498" steps="11849"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.5.0.1" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.092805" steps="20650"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.046709" steps="90899"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SinCosDouble" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.153573" steps="1841"/></proof>
  </goal>
  <goal name="sin_simple_example&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real a +. to_real b in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_rel_err)
     +. (((eps *. abs t) *. (1.0 +. sin_rel_err)) +. sin_abs_err))">
   <goal name="sin_simple_example&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real a +. to_real b))
&lt;=. ((abs (sin (to_real a +. to_real b)) *. sin_rel_err)
     +. (((eps *. abs (to_real a +. to_real b)) *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
    <goal name="sin_simple_example&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real a +. to_real b))
&lt;=. ((sin_rel_err *. abs (sin (to_real a +. to_real b)))
     +. ((((eps *. abs (to_real a +. to_real b)) +. 0.0)
          *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
     <goal name="sin_simple_example&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="a ++. b">
      <goal name="sin_simple_example&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
       <goal name="sin_simple_example&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.213436" steps="2414"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.018316" steps="10541"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.018727" steps="10476"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.083295" steps="12103"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.031004" steps="10398"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.132070" steps="11599"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.112327" steps="11577"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.051983" steps="217"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.170598" steps="2324"/></proof>
  </goal>
  <goal name="cos_simple_example&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real a -. to_real b in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_rel_err)
     +. (((eps *. abs t) *. (1.0 +. cos_rel_err)) +. cos_abs_err))">
   <goal name="cos_simple_example&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real a -. to_real b))
&lt;=. ((abs (cos (to_real a -. to_real b)) *. cos_rel_err)
     +. (((eps *. abs (to_real a -. to_real b)) *. (1.0 +. cos_rel_err))
         +. cos_abs_err))">
    <goal name="cos_simple_example&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real a -. to_real b))
&lt;=. ((cos_rel_err *. abs (cos (to_real a -. to_real b)))
     +. ((((eps *. abs (to_real a -. to_real b)) +. 0.0)
          *. (1.0 +. cos_rel_err))
         +. cos_abs_err))">
     <goal name="cos_simple_example&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_double_error_propagation" arg2="with" arg3="a --. b">
      <goal name="cos_simple_example&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (a --. b) -. (to_real a -. to_real b))
&lt;=. (eps *. abs (to_real a -. to_real b))">
       <goal name="cos_simple_example&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.234121" steps="2600"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.044361" steps="127"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.026276" steps="10482"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.042308" steps="101"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.027352" steps="10402"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.035206" steps="163"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.060067" steps="17951"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.061069" steps="217"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_and_sine_example&#39;vc" expl="VC for cos_and_sine_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_and_sine_example&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.091201" steps="11258"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.091613" steps="11363"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.086681" steps="11426"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.062188" steps="17864"/></proof>
  </goal>
  <goal name="cos_and_sine_example&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="cos_and_sine_example&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.130833" steps="247631"/></proof>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.4.1" expl="VC for cos_and_sine_example" proved="true">
   <proof prover="3"><result status="valid" time="0.032993" steps="145"/></proof>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.4.2" expl="VC for cos_and_sine_example" proved="true">
   <proof prover="3"><result status="valid" time="0.040999" steps="184"/></proof>
   </goal>
   <goal name="cos_and_sine_example&#39;vc.4.3" expl="VC for cos_and_sine_example" proved="true">
   <transf name="assert" proved="true" arg1="let t1 = to_real a1 in
let t2 = sin t1 in
let t3 = cos t1 in
let t4 = 1.0 +. eps in
let t5 = t2 *. t2 in
let t6 = t3 *. t3 in
let t7 =
  eps
  +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err)) *. t4)
in
let t8 =
  eps
  +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err)) *. t4)
in
let t9 = (t4 *. (cos_abs_err +. (cos_abs_err *. cos_rel_err))) *. abs t3 in
let t10 = (t4 *. (sin_abs_err +. (sin_abs_err *. sin_rel_err))) *. abs t2 in
abs (to_real result -. (t6 +. t5))
&lt;=. ((((t7 +. t8) +. eps) *. (abs t6 +. abs t5))
     +. (((t4 +. t8)
          *. (((t9 +. t9) +. (t4 *. (cos_abs_err *. cos_abs_err))) +. eta))
         +. ((t4 +. t7)
             *. (((t10 +. t10) +. (t4 *. (sin_abs_err *. sin_abs_err)))
                 +. eta))))">
    <goal name="cos_and_sine_example&#39;vc.4.3.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((cos (to_real a1) *. cos (to_real a1))
     +. (sin (to_real a1) *. sin (to_real a1))))
&lt;=. (((((eps
         +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err))
             *. (1.0 +. eps)))
        +. (eps
            +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err))
                *. (1.0 +. eps))))
       +. eps)
      *. (abs (cos (to_real a1) *. cos (to_real a1))
          +. abs (sin (to_real a1) *. sin (to_real a1))))
     +. ((((1.0 +. eps)
           +. (eps
               +. (((sin_rel_err +. sin_rel_err)
                    +. (sin_rel_err *. sin_rel_err))
                   *. (1.0 +. eps))))
          *. ((((((1.0 +. eps)
                  *. (cos_abs_err +. (cos_abs_err *. cos_rel_err)))
                 *. abs (cos (to_real a1)))
                +. (((1.0 +. eps)
                     *. (cos_abs_err +. (cos_abs_err *. cos_rel_err)))
                    *. abs (cos (to_real a1))))
               +. ((1.0 +. eps) *. (cos_abs_err *. cos_abs_err)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. (((cos_rel_err +. cos_rel_err)
                       +. (cos_rel_err *. cos_rel_err))
                      *. (1.0 +. eps))))
             *. ((((((1.0 +. eps)
                     *. (sin_abs_err +. (sin_abs_err *. sin_rel_err)))
                    *. abs (sin (to_real a1)))
                   +. (((1.0 +. eps)
                        *. (sin_abs_err +. (sin_abs_err *. sin_rel_err)))
                       *. abs (sin (to_real a1))))
                  +. ((1.0 +. eps) *. (sin_abs_err *. sin_abs_err)))
                 +. eta))))">
     <goal name="cos_and_sine_example&#39;vc.4.3.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="o **. o1,o2 **. o3">
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (cos (to_real a1) *. cos (to_real a1)))
&lt;=. (((eps
       +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err))
           *. (1.0 +. eps)))
      *. abs (cos (to_real a1) *. cos (to_real a1)))
     +. ((((((cos_abs_err +. (cos_abs_err *. cos_rel_err))
             *. abs (cos (to_real a1)))
            +. ((cos_abs_err +. (cos_abs_err *. cos_rel_err))
                *. abs (cos (to_real a1))))
           +. (cos_abs_err *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (cos (to_real a1) *. cos (to_real a1)))
&lt;=. (((eps
       +. (((cos_rel_err +. cos_rel_err) +. (cos_rel_err *. cos_rel_err))
           *. (1.0 +. eps)))
      *. (abs (cos (to_real a1)) *. abs (cos (to_real a1))))
     +. ((((((cos_abs_err +. (cos_abs_err *. cos_rel_err))
             *. abs (cos (to_real a1)))
            +. ((cos_abs_err +. (cos_abs_err *. cos_rel_err))
                *. abs (cos (to_real a1))))
           +. (cos_abs_err *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="o,o1">
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.042709" steps="10712"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.072220" steps="18310"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.112053" steps="11870"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.028297" steps="10704"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.020755" steps="10700"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.056074" steps="18310"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.019929" steps="10700"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.017732" steps="10700"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.0.8" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.063786" steps="18305"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.181047" steps="510"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.4.3.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.109775" steps="12085"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o2 **. o3) -. (sin (to_real a1) *. sin (to_real a1)))
&lt;=. (((eps
       +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err))
           *. (1.0 +. eps)))
      *. abs (sin (to_real a1) *. sin (to_real a1)))
     +. ((((((sin_abs_err +. (sin_abs_err *. sin_rel_err))
             *. abs (sin (to_real a1)))
            +. ((sin_abs_err +. (sin_abs_err *. sin_rel_err))
                *. abs (sin (to_real a1))))
           +. (sin_abs_err *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (o2 **. o3) -. (sin (to_real a1) *. sin (to_real a1)))
&lt;=. (((eps
       +. (((sin_rel_err +. sin_rel_err) +. (sin_rel_err *. sin_rel_err))
           *. (1.0 +. eps)))
      *. (abs (sin (to_real a1)) *. abs (sin (to_real a1))))
     +. ((((((sin_abs_err +. (sin_abs_err *. sin_rel_err))
             *. abs (sin (to_real a1)))
            +. ((sin_abs_err +. (sin_abs_err *. sin_rel_err))
                *. abs (sin (to_real a1))))
           +. (sin_abs_err *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="o2,o3">
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.081861" steps="11873"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.016535" steps="10712"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.043208" steps="264"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.3" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.030703" steps="10704"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.061606" steps="193"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.5" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.017371" steps="10700"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.6" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.024970" steps="10700"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.7" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.063841" steps="193"/></proof>
         </goal>
         <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.0.8" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.035418" steps="10696"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.093157" steps="510"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="cos_and_sine_example&#39;vc.4.3.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.165250" steps="12085"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.110329" steps="11870"/></proof>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.016712" steps="10700"/></proof>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.4" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.060204" steps="194"/></proof>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.5" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.054349" steps="194"/></proof>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.6" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.101408" steps="281"/></proof>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.7" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.062129" steps="281"/></proof>
      </goal>
      <goal name="cos_and_sine_example&#39;vc.4.3.0.0.8" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020371" steps="10696"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_and_sine_example&#39;vc.4.3.0.1" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.063433" steps="19035"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_and_sine_example&#39;vc.4.3.1" expl="VC for cos_and_sine_example" proved="true">
    <proof prover="4"><result status="valid" time="0.085676" steps="20542"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.014449" steps="98179"/></proof>
  </goal>
  <goal name="kinematics&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.037036" steps="75216"/></proof>
  </goal>
  <goal name="kinematics&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real o in
let t3 = to_real o2 in
let t4 = to_real theta11 in
let t5 = 1.0 +. eps in
let t6 = t4 +. to_real theta21 in
let t7 = t *. sin t4 in
let t8 = eps +. (sin_rel_err *. t5) in
let t9 = t3 *. sin t6 in
let t10 = t5 +. t8 in
abs (to_real result -. (t7 +. t9))
&lt;=. ((((t8 +. t8) +. eps) *. (abs t7 +. abs t9))
     +. ((t10 *. (((t5 *. sin_abs_err) *. abs t) +. eta))
         +. (t10
             *. (((t5
                   *. (((eps *. abs t6) *. (1.0 +. sin_rel_err))
                       +. sin_abs_err))
                  *. abs t3)
                 +. eta))))">
   <goal name="kinematics&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real o *. sin (to_real theta11))
     +. (to_real o2 *. sin (to_real theta11 +. to_real theta21))))
&lt;=. (((((eps +. (sin_rel_err *. (1.0 +. eps)))
        +. (eps +. (sin_rel_err *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real o *. sin (to_real theta11))
          +. abs (to_real o2 *. sin (to_real theta11 +. to_real theta21))))
     +. ((((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. sin_abs_err) *. abs (to_real o)) +. eta))
         +. (((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. (((eps *. abs (to_real theta11 +. to_real theta21))
                        *. (1.0 +. sin_rel_err))
                       +. sin_abs_err))
                  *. abs (to_real o2))
                 +. eta))))">
    <goal name="kinematics&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="o **. o1,o2 **. o3">
     <goal name="kinematics&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (to_real o *. sin (to_real theta11)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real o *. sin (to_real theta11)))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real o))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta11))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (o **. o1) -. (to_real o *. sin (to_real theta11)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real o) *. abs (sin (to_real theta11))))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real o))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta11))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="o,o1">
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.055691" steps="10543"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.058767" steps="139"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.046693" steps="118"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.019730" steps="10505"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.107155" steps="11548"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.033383" steps="113"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.079638" steps="17907"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.100101" steps="17902"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.078366" steps="11546"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.080460" steps="206"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.070216" steps="18283"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (o2 **. o3)
 -. (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
     +. (((((((((eps *. abs (to_real theta11 +. to_real theta21))
                *. (1.0 +. sin_rel_err))
               +. sin_abs_err)
              +. ((((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)
                  *. 0.0))
             *. abs (to_real o2))
            +. ((0.0 +. (0.0 *. sin_rel_err))
                *. abs (sin (to_real theta11 +. to_real theta21))))
           +. (0.0
               *. (((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (o2 **. o3)
 -. (to_real o2 *. sin (to_real theta11 +. to_real theta21)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real o2) *. abs (sin (to_real theta11 +. to_real theta21))))
     +. (((((((((eps *. abs (to_real theta11 +. to_real theta21))
                *. (1.0 +. sin_rel_err))
               +. sin_abs_err)
              +. ((((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)
                  *. 0.0))
             *. abs (to_real o2))
            +. ((0.0 +. (0.0 *. sin_rel_err))
                *. abs (sin (to_real theta11 +. to_real theta21))))
           +. (0.0
               *. (((eps *. abs (to_real theta11 +. to_real theta21))
                    *. (1.0 +. sin_rel_err))
                   +. sin_abs_err)))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="o2,o3">
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.024755" steps="10543"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real o3 -. sin (to_real theta11 +. to_real theta21))
&lt;=. ((abs (sin (to_real theta11 +. to_real theta21)) *. sin_rel_err)
     +. (((eps *. abs (to_real theta11 +. to_real theta21))
          *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
         <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs (to_real o3 -. sin (to_real theta11 +. to_real theta21))
&lt;=. ((sin_rel_err *. abs (sin (to_real theta11 +. to_real theta21)))
     +. ((((eps *. abs (to_real theta11 +. to_real theta21)) +. 0.0)
          *. (1.0 +. sin_rel_err))
         +. sin_abs_err))">
          <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="theta11 ++. theta21">
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta11 ++. theta21) -. (to_real theta11 +. to_real theta21))
&lt;=. (eps *. abs (to_real theta11 +. to_real theta21))">
            <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.558127" steps="3121"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.032793" steps="10642"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.021461" steps="10577"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.062540" steps="18559"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.076066" steps="11551"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.132796" steps="11730"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.2.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.061519" steps="18130"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.049442" steps="118"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.106026" steps="17934"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.101230" steps="11548"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.028005" steps="10499"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.028319" steps="113"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.045911" steps="121"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.2.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.113367" steps="11546"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.108924" steps="357"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.065320" steps="18400"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.079146" steps="11548"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.012373" steps="10527"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.041500" steps="76181"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.030829" steps="113"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.084469" steps="12116"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.029271" steps="130"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.024263" steps="10495"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.056243" steps="18547"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.469882" steps="586"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.074519" steps="11318"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.080246" steps="11423"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.083690" steps="11528"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.082977" steps="11633"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.089273" steps="11738"/></proof>
  </goal>
  <goal name="raytracer&#39;vc.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real nz1 in
let t2 = to_real ny1 in
let t3 = to_real nx1 in
let t5 = to_real phi1 in
let t6 = to_real theta1 in
let t7 = sin t5 in
let t8 = cos t5 in
let t9 = cos t6 in
let t10 = 1.0 +. eps in
let t11 = t10 *. cos_abs_err in
let t12 = t *. t9 in
let t13 = t2 *. sin t6 in
let t14 = t3 *. t9 in
let t15 = eps +. (cos_rel_err *. t10) in
let t16 = eps +. (sin_rel_err *. t10) in
let t17 = t12 *. t7 in
let t18 = t14 *. t8 in
let t19 = (t11 *. abs t) +. eta in
let t20 = (t11 *. abs t3) +. eta in
let t21 = eps +. (((t15 +. cos_rel_err) +. (t15 *. cos_rel_err)) *. t10) in
let t22 = eps +. (((t15 +. sin_rel_err) +. (t15 *. sin_rel_err)) *. t10) in
let t23 = (t21 +. t16) +. eps in
abs (to_real result -. ((t18 +. t13) +. t17))
&lt;=. ((((t23 +. t22) +. eps) *. ((abs t18 +. abs t13) +. abs t17))
     +. (((t10 +. t22)
          *. (((t10 +. t16)
               *. (((((t10 *. (cos_abs_err +. (cos_abs_err *. t15)))
                      *. abs t14)
                     +. ((t10 *. (t20 +. (t20 *. cos_rel_err))) *. abs t8))
                    +. (t10 *. (t20 *. cos_abs_err)))
                   +. eta))
              +. ((t10 +. t21) *. (((t10 *. sin_abs_err) *. abs t2) +. eta))))
         +. ((t10 +. t23)
             *. (((((t10 *. (sin_abs_err +. (sin_abs_err *. t15))) *. abs t12)
                   +. ((t10 *. (t19 +. (t19 *. sin_rel_err))) *. abs t7))
                  +. (t10 *. (t19 *. sin_abs_err)))
                 +. eta))))">
   <goal name="raytracer&#39;vc.5.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
      +. (to_real ny1 *. sin (to_real theta1)))
     +. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
                +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
               *. (1.0 +. eps)))
          +. (eps +. (sin_rel_err *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
                 +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
           +. abs (to_real ny1 *. sin (to_real theta1)))
          +. abs
             ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
                    +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
               *. ((((((1.0 +. eps)
                       *. (cos_abs_err
                           +. (cos_abs_err
                               *. (eps +. (cos_rel_err *. (1.0 +. eps))))))
                      *. abs (to_real nx1 *. cos (to_real theta1)))
                     +. (((1.0 +. eps)
                          *. (((((1.0 +. eps) *. cos_abs_err)
                                *. abs (to_real nx1))
                               +. eta)
                              +. (((((1.0 +. eps) *. cos_abs_err)
                                    *. abs (to_real nx1))
                                   +. eta)
                                  *. cos_rel_err)))
                         *. abs (cos (to_real phi1))))
                    +. ((1.0 +. eps)
                        *. (((((1.0 +. eps) *. cos_abs_err)
                              *. abs (to_real nx1))
                             +. eta)
                            *. cos_abs_err)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_rel_err *. (1.0 +. eps)))
                             +. cos_rel_err)
                            +. ((eps +. (cos_rel_err *. (1.0 +. eps)))
                                *. cos_rel_err))
                           *. (1.0 +. eps))))
                  *. ((((1.0 +. eps) *. sin_abs_err) *. abs (to_real ny1))
                      +. eta))))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_rel_err *. (1.0 +. eps)))
                          +. cos_rel_err)
                         +. ((eps +. (cos_rel_err *. (1.0 +. eps)))
                             *. cos_rel_err))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_rel_err *. (1.0 +. eps))))
                  +. eps))
             *. ((((((1.0 +. eps)
                     *. (sin_abs_err
                         +. (sin_abs_err
                             *. (eps +. (cos_rel_err *. (1.0 +. eps))))))
                    *. abs (to_real nz1 *. cos (to_real theta1)))
                   +. (((1.0 +. eps)
                        *. (((((1.0 +. eps) *. cos_abs_err)
                              *. abs (to_real nz1))
                             +. eta)
                            +. (((((1.0 +. eps) *. cos_abs_err)
                                  *. abs (to_real nz1))
                                 +. eta)
                                *. sin_rel_err)))
                       *. abs (sin (to_real phi1))))
                  +. ((1.0 +. eps)
                      *. (((((1.0 +. eps) *. cos_abs_err)
                            *. abs (to_real nz1))
                           +. eta)
                          *. sin_abs_err)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.5.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((nx1 **. o) **. o1) ++. (ny1 **. o2),(nz1 **. o3) **. o4">
     <goal name="raytracer&#39;vc.5.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (((nx1 **. o) **. o1) ++. (ny1 **. o2))
 -. (((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
     +. (to_real ny1 *. sin (to_real theta1))))
&lt;=. (((((eps
         +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
              +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
             *. (1.0 +. eps)))
        +. (eps +. (sin_rel_err *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1))
          +. abs (to_real ny1 *. sin (to_real theta1))))
     +. ((((1.0 +. eps) +. (eps +. (sin_rel_err *. (1.0 +. eps))))
          *. ((((((1.0 +. eps)
                  *. (cos_abs_err
                      +. (cos_abs_err
                          *. (eps +. (cos_rel_err *. (1.0 +. eps))))))
                 *. abs (to_real nx1 *. cos (to_real theta1)))
                +. (((1.0 +. eps)
                     *. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                          +. eta)
                         +. (((((1.0 +. eps) *. cos_abs_err)
                               *. abs (to_real nx1))
                              +. eta)
                             *. cos_rel_err)))
                    *. abs (cos (to_real phi1))))
               +. ((1.0 +. eps)
                   *. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                        +. eta)
                       *. cos_abs_err)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
                       +. ((eps +. (cos_rel_err *. (1.0 +. eps)))
                           *. cos_rel_err))
                      *. (1.0 +. eps))))
             *. ((((1.0 +. eps) *. sin_abs_err) *. abs (to_real ny1)) +. eta))))">
      <goal name="raytracer&#39;vc.5.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(nx1 **. o) **. o1,ny1 **. o2">
       <goal name="raytracer&#39;vc.5.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx1 **. o) **. o1)
 -. ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
           *. (1.0 +. eps)))
      *. abs ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
     +. ((((((cos_abs_err
              +. (cos_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nx1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                      +. eta)
                     *. cos_rel_err))
                *. abs (cos (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
               *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx1 **. o) **. o1)
 -. ((to_real nx1 *. cos (to_real theta1)) *. cos (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. cos_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. cos_rel_err))
           *. (1.0 +. eps)))
      *. (abs (to_real nx1 *. cos (to_real theta1))
          *. abs (cos (to_real phi1))))
     +. ((((((cos_abs_err
              +. (cos_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nx1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1))
                      +. eta)
                     *. cos_rel_err))
                *. abs (cos (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nx1)) +. eta)
               *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx1 **. o,o1">
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs (to_real (nx1 **. o) -. (to_real nx1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real nx1 *. cos (to_real theta1)))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nx1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (nx1 **. o) -. (to_real nx1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real nx1) *. abs (cos (to_real theta1))))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nx1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx1,o">
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.028916" steps="10688"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.040147" steps="155"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.031244" steps="10662"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.052196" steps="132"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.057601" steps="122"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.029056" steps="122"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.076669" steps="11798"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.095878" steps="11801"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.035694" steps="122"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.175154" steps="517"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.063482" steps="266"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.086910" steps="18217"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.033342" steps="10666"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.093798" steps="18222"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.044167" steps="122"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.089810" steps="11801"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.032216" steps="128"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.096264" steps="11801"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.107495" steps="11796"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="2.064351" steps="1941"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.078906" steps="18806"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (ny1 **. o2) -. (to_real ny1 *. sin (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real ny1 *. sin (to_real theta1)))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real ny1))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta1))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.5.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (ny1 **. o2) -. (to_real ny1 *. sin (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. sin_rel_err) +. (0.0 *. sin_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real ny1) *. abs (sin (to_real theta1))))
     +. ((((((sin_abs_err +. (sin_abs_err *. 0.0)) *. abs (to_real ny1))
            +. ((0.0 +. (0.0 *. sin_rel_err)) *. abs (sin (to_real theta1))))
           +. (0.0 *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="ny1,o2">
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.064736" steps="18289"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.044517" steps="150"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.053807" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.023417" steps="10648"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.043214" steps="122"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.020101" steps="10642"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.070571" steps="11798"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.014999" steps="10642"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.030706" steps="10638"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.098587" steps="488"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.037734" steps="10931"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.075521" steps="18263"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.040988" steps="140"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.052278" steps="122"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.128092" steps="12457"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.262407" steps="371"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.064724" steps="128"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.056718" steps="122"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.024261" steps="11647"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz1 **. o3) **. o4)
 -. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
           *. (1.0 +. eps)))
      *. abs ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
     +. ((((((sin_abs_err
              +. (sin_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nz1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1))
                      +. eta)
                     *. sin_rel_err))
                *. abs (sin (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
               *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.5.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz1 **. o3) **. o4)
 -. ((to_real nz1 *. cos (to_real theta1)) *. sin (to_real phi1)))
&lt;=. (((eps
       +. ((((eps +. (cos_rel_err *. (1.0 +. eps))) +. sin_rel_err)
            +. ((eps +. (cos_rel_err *. (1.0 +. eps))) *. sin_rel_err))
           *. (1.0 +. eps)))
      *. (abs (to_real nz1 *. cos (to_real theta1))
          *. abs (sin (to_real phi1))))
     +. ((((((sin_abs_err
              +. (sin_abs_err *. (eps +. (cos_rel_err *. (1.0 +. eps)))))
             *. abs (to_real nz1 *. cos (to_real theta1)))
            +. ((((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
                 +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1))
                      +. eta)
                     *. sin_rel_err))
                *. abs (sin (to_real phi1))))
           +. (((((1.0 +. eps) *. cos_abs_err) *. abs (to_real nz1)) +. eta)
               *. sin_abs_err))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.5.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz1 **. o3,o4">
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (nz1 **. o3) -. (to_real nz1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. abs (to_real nz1 *. cos (to_real theta1)))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nz1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs (to_real (nz1 **. o3) -. (to_real nz1 *. cos (to_real theta1)))
&lt;=. (((eps
       +. (((0.0 +. cos_rel_err) +. (0.0 *. cos_rel_err)) *. (1.0 +. eps)))
      *. (abs (to_real nz1) *. abs (cos (to_real theta1))))
     +. ((((((cos_abs_err +. (cos_abs_err *. 0.0)) *. abs (to_real nz1))
            +. ((0.0 +. (0.0 *. cos_rel_err)) *. abs (cos (to_real theta1))))
           +. (0.0 *. cos_abs_err))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz1,o3">
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.076386" steps="11821"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.016223" steps="10654"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.100220" steps="11798"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.037172" steps="132"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.021194" steps="10642"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.036748" steps="122"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.035622" steps="122"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.025856" steps="10642"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.024842" steps="122"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="0.099229" steps="517"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.5.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.084615" steps="12055"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.106492" steps="11801"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.008397" steps="10666"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.059027" steps="131"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.037603" steps="78048"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.048796" steps="122"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.037389" steps="128"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.087031" steps="11801"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.5.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.075958" steps="18212"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.5.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="1.117811" steps="2001"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.5.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.029445" steps="35184"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.082151" steps="19388"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018691" steps="10670"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.4" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.049949" steps="125"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.5" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.061043" steps="125"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.6" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.812192" steps="654"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.7" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.286995" steps="355"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.5.0.0.8" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.065117" steps="18212"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.5.0.1" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.105796" steps="20574"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.072807" steps="20758"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
