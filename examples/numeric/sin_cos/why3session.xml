<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC5" version="1.0.5" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sin_cos.mlw"/>
<theory name="SinCosSingle" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x +. to_real y in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_error) +. ((eps *. abs t) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.149308" steps="1024"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.044091" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.053883" steps="110"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.079057" steps="93"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.042776" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.080002" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.089498" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.070304" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x -. to_real y in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_error) +. ((eps *. abs t) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_single_error_propagation" arg2="with" arg3="x --. y">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.185540" steps="1036"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.066626" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.046303" steps="110"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.077615" steps="93"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.055899" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.063848" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.085346" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.080404" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real theta1 in
let t8 = to_real twopoint5 in
let t9 = 1.0 +. eps in
let t10 = t1 +. to_real theta2 in
let t11 = to_real zeropointfive *. sin t1 in
let t12 = eps +. (sin_error *. t9) in
let t13 = t8 *. sin t10 in
let t14 = t9 +. t12 in
abs (to_real result -. (t11 +. t13))
&lt;=. ((((t12 +. t12) +. eps) *. (abs t11 +. abs t13))
     +. ((t14 *. eta)
         +. (t14
             *. (((t9 *. ((eps *. abs t10) *. (1.0 +. sin_error))) *. abs t8)
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
    <goal name="kinematics&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.044506" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.073383" steps="128"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052346" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063278" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.048989" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.061158" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.068512" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.050710" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.071956" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.073618" steps="191"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.061696" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063972" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_single_error_propagation" arg2="with" arg3="theta1 ++. theta2">
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.202159" steps="1200"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.065883" steps="135"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.066114" steps="129"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.080581" steps="108"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.047109" steps="103"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.091503" steps="172"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.080526" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052525" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.057478" steps="111"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.048157" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.055488" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.039220" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.043457" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.043326" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.169860" steps="342"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.108030" steps="238"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.074750" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.083805" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.070014" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.066067" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.049309" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.069309" steps="119"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.053391" steps="102"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.270766" steps="497"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.248928" steps="484"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t14 = to_real phi in
let t15 = to_real theta in
let t16 = sin t14 in
let t17 = cos t14 in
let t18 = cos t15 in
let t19 = 1.0 +. eps in
let t20 = to_real ny *. sin t15 in
let t21 = eps +. (cos_error *. t19) in
let t22 = eps +. (sin_error *. t19) in
let t23 = (to_real nz *. t18) *. t16 in
let t24 = (to_real nx *. t18) *. t17 in
let t25 = eps +. (((t21 +. cos_error) +. (t21 *. cos_error)) *. t19) in
let t26 = eps +. (((t21 +. sin_error) +. (t21 *. sin_error)) *. t19) in
let t27 = (t25 +. t22) +. eps in
abs (to_real result -. ((t24 +. t20) +. t23))
&lt;=. ((((t27 +. t26) +. eps) *. ((abs t24 +. abs t20) +. abs t23))
     +. (((t19 +. t26)
          *. (((t19 +. t22)
               *. (((t19 *. (eta +. (eta *. cos_error))) *. abs t17) +. eta))
              +. ((t19 +. t25) *. eta)))
         +. ((t19 +. t27)
             *. (((t19 *. (eta +. (eta *. sin_error))) *. abs t16) +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx,cos_approx theta">
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.056158" steps="123"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.066121" steps="151"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.062089" steps="126"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.068813" steps="127"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.059077" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.071518" steps="117"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.091005" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.059260" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.051976" steps="117"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.123970" steps="498"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.099025" steps="184"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.071961" steps="142"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.089523" steps="136"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.062211" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.048357" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.056124" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.060122" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.065385" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.063626" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.253808" steps="644"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.170326" steps="298"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="ny,sin_approx theta">
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.081342" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.073915" steps="142"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.065446" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.085866" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.084271" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.081071" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.052843" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.064350" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.080755" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.129111" steps="462"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.064937" steps="184"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.055124" steps="135"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.085059" steps="136"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.052698" steps="119"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.080447" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.062676" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.047963" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.053742" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.531553" steps="650"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz,cos_approx theta">
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.056367" steps="123"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.062844" steps="151"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.054862" steps="126"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.084870" steps="127"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.081406" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.063215" steps="117"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.056131" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.085786" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.074234" steps="117"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.165102" steps="498"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.091983" steps="184"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.061144" steps="142"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.079889" steps="136"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.069055" steps="126"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.071188" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.083587" steps="117"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.061165" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.082203" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.055879" steps="117"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.387182" steps="696"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.220102" steps="307"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.076875" steps="201"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.058339" steps="135"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.066391" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.066055" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.102943" steps="140"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.063648" steps="130"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.061472" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.119277" steps="13719"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.122143" steps="13723"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SinCosDouble" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x +. to_real y in
let t1 = sin t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. sin_error) +. ((eps *. abs t) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.152868" steps="1024"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.055491" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.043398" steps="110"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.066221" steps="93"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.058803" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.082349" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.083612" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.069588" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real x -. to_real y in
let t1 = cos t in
abs (to_real result -. t1)
&lt;=. ((abs t1 *. cos_error) +. ((eps *. abs t) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_double_error_propagation" arg2="with" arg3="x --. y">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.151800" steps="1034"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.058157" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.052672" steps="110"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.068304" steps="93"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.047822" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.083719" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.080163" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.076479" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = to_real theta1 in
let t8 = to_real twopoint5 in
let t9 = 1.0 +. eps in
let t10 = t1 +. to_real theta2 in
let t11 = to_real zeropointfive *. sin t1 in
let t12 = eps +. (sin_error *. t9) in
let t13 = t8 *. sin t10 in
let t14 = t9 +. t12 in
abs (to_real result -. (t11 +. t13))
&lt;=. ((((t12 +. t12) +. eps) *. (abs t11 +. abs t13))
     +. ((t14 *. eta)
         +. (t14
             *. (((t9 *. ((eps *. abs t10) *. (1.0 +. sin_error))) *. abs t8)
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
    <goal name="kinematics&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.040921" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063036" steps="128"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052604" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.059781" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.044366" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.072638" steps="102"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.070330" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.059850" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.055982" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.068455" steps="191"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.057151" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="kinematics&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.067885" steps="109"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_double_error_propagation" arg2="with" arg3="theta1 ++. theta2">
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.219165" steps="1200"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.046238" steps="135"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.081498" steps="129"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.049591" steps="108"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.048749" steps="102"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.098997" steps="172"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.095093" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.051955" steps="107"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.056296" steps="111"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.072742" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.063625" steps="102"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.044076" steps="103"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052382" steps="110"/></proof>
        </goal>
        <goal name="kinematics&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.044270" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.151474" steps="342"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.096221" steps="236"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.054919" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.072595" steps="111"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.083292" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.050955" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.052357" steps="103"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.040686" steps="119"/></proof>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.059410" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.263032" steps="491"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.265833" steps="532"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t14 = to_real phi in
let t15 = to_real theta in
let t16 = sin t14 in
let t17 = cos t14 in
let t18 = cos t15 in
let t19 = 1.0 +. eps in
let t20 = to_real ny *. sin t15 in
let t21 = eps +. (cos_error *. t19) in
let t22 = eps +. (sin_error *. t19) in
let t23 = (to_real nz *. t18) *. t16 in
let t24 = (to_real nx *. t18) *. t17 in
let t25 = eps +. (((t21 +. cos_error) +. (t21 *. cos_error)) *. t19) in
let t26 = eps +. (((t21 +. sin_error) +. (t21 *. sin_error)) *. t19) in
let t27 = (t25 +. t22) +. eps in
abs (to_real result -. ((t24 +. t20) +. t23))
&lt;=. ((((t27 +. t26) +. eps) *. ((abs t24 +. abs t20) +. abs t23))
     +. (((t19 +. t26)
          *. (((t19 +. t22)
               *. (((t19 *. (eta +. (eta *. cos_error))) *. abs t17) +. eta))
              +. ((t19 +. t25) *. eta)))
         +. ((t19 +. t27)
             *. (((t19 *. (eta +. (eta *. sin_error))) *. abs t16) +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
    <goal name="raytracer&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx,cos_approx theta">
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.054934" steps="123"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.067153" steps="151"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.045702" steps="126"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.059780" steps="127"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.049215" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.057879" steps="117"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.058306" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.082701" steps="118"/></proof>
             </goal>
             <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.074469" steps="117"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.107638" steps="498"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.092438" steps="184"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.080491" steps="142"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.050946" steps="136"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.063639" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.054800" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.049058" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.040298" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.051209" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.043380" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.240781" steps="644"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.164292" steps="304"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="ny,sin_approx theta">
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.049889" steps="123"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.090776" steps="142"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.057545" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.065506" steps="126"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.051866" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.068351" steps="117"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.068312" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.061977" steps="118"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.076757" steps="117"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.124816" steps="462"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.065527" steps="184"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.085694" steps="135"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.089732" steps="136"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.080606" steps="119"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.060380" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.076246" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.090376" steps="118"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.077195" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.530037" steps="650"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz,cos_approx theta">
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.067103" steps="123"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.088236" steps="151"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.067057" steps="126"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.060682" steps="127"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.087449" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.087840" steps="117"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.057819" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.075935" steps="118"/></proof>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.048351" steps="117"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.115209" steps="498"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.086759" steps="184"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.081153" steps="142"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.060431" steps="136"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.082558" steps="126"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.055826" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.050934" steps="117"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.046723" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.052683" steps="118"/></proof>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.054885" steps="117"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.347720" steps="696"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.141788" steps="307"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.096277" steps="201"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.071434" steps="135"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.085955" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.053418" steps="120"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.071289" steps="140"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.078277" steps="130"/></proof>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.059137" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.232064" steps="13719"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.297291" steps="13723"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
