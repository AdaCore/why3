<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC5" version="1.0.5" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="3" name="Alt-Ergo" version="2.5.2" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sin_cos.mlw"/>
<theory name="SinCosSingle" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; sin_approx y0) @ (x ++. y))
 -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_single_error_propagation">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.135791" steps="1048"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.031244" steps="132"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.212746" steps="1445"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.071499" steps="105"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.044447" steps="98"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.683491" steps="7527"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.050668" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.063891" steps="167"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; cos_approx y0) @ (x --. y))
 -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_single_error_propagation">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.139284" steps="1047"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.046809" steps="132"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.203511" steps="1442"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.066481" steps="105"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.039355" steps="98"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.518314" steps="5209"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.055972" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.086154" steps="168"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
    <goal name="kinematics&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.040564" steps="121"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.054216" steps="139"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.064917" steps="120"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.064599" steps="123"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.046310" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.071850" steps="114"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.063514" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.055865" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.067899" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.080834" steps="206"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.053781" steps="161"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="kinematics&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
       <goal name="kinematics&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.065619" steps="121"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
        <goal name="kinematics&#39;vc.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
         <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; sin_approx y0) @ (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_single_error_propagation">
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.226903" steps="1217"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.051792" steps="146"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.323459" steps="1685"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.072194" steps="120"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.052999" steps="114"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="1.087155" steps="8884"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.092058" steps="187"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.099289" steps="186"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.061331" steps="120"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.072429" steps="123"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.059449" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.074503" steps="114"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.075041" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.049430" steps="122"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.059849" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.151498" steps="349"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.168028" steps="251"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.055266" steps="123"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.052882" steps="123"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.4" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.054528" steps="115"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.5" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.035228" steps="115"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.6" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.043657" steps="115"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.7" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.052178" steps="131"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.8" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.049612" steps="114"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.302155" steps="512"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
    <goal name="raytracer&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nx,cos_approx theta">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.041031" steps="136"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.052015" steps="162"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.051880" steps="138"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.079991" steps="140"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.071887" steps="130"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.064000" steps="129"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.062242" steps="130"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.061250" steps="130"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.052661" steps="129"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.119030" steps="510"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.090037" steps="199"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.056558" steps="155"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.071009" steps="148"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.090321" steps="139"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.086417" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.058397" steps="129"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.061731" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.044055" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.051928" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.331441" steps="681"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.205827" steps="317"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="ny,sin_approx theta">
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.041126" steps="136"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.058960" steps="155"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.068676" steps="138"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.064932" steps="139"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.061091" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.092737" steps="129"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.083942" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.064386" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.059096" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.120611" steps="483"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.094111" steps="199"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.090408" steps="149"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.055721" steps="148"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.072284" steps="131"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.5" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.060469" steps="130"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.6" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.057868" steps="143"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.7" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.049839" steps="130"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.8" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.050418" steps="129"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.613568" steps="711"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="raytracer&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
       <goal name="raytracer&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="nz,cos_approx theta">
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.057396" steps="136"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.082627" steps="162"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.080966" steps="138"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.063408" steps="140"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.059507" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.076572" steps="129"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.076100" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.085728" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.068588" steps="129"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.132305" steps="510"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.106620" steps="199"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.056273" steps="155"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.056283" steps="148"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.082138" steps="139"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.079172" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.060429" steps="129"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.084170" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.052547" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.064672" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.285149" steps="715"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.155950" steps="321"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.095048" steps="213"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.082807" steps="149"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.4" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.077370" steps="132"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.5" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.060969" steps="132"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.6" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.092271" steps="153"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.7" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.051818" steps="141"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.8" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.049489" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.122815" steps="13747"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SinCosDouble" proved="true">
 <goal name="sin_simple_example&#39;vc" expl="VC for sin_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sin_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((abs (sin (to_real x +. to_real y)) *. sin_error)
     +. ((eps *. abs (to_real x +. to_real y)) *. (1.0 +. sin_error)))">
   <goal name="sin_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
    <goal name="sin_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; sin_approx y0) @ (x ++. y))
 -. sin (to_real x +. to_real y))
&lt;=. ((sin_error *. abs (sin (to_real x +. to_real y)))
     +. ((((eps *. abs (to_real x +. to_real y)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
     <goal name="sin_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="sin_double_error_propagation">
      <goal name="sin_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.151404" steps="1044"/></proof>
       </goal>
       <goal name="sin_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.056096" steps="132"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.237982" steps="1445"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.081247" steps="105"/></proof>
      </goal>
      <goal name="sin_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.045444" steps="98"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sin_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.774893" steps="7536"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sin_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.081872" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sin_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.061591" steps="168"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_simple_example&#39;vc" expl="VC for cos_simple_example" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cos_simple_example&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((abs (cos (to_real x -. to_real y)) *. cos_error)
     +. ((eps *. abs (to_real x -. to_real y)) *. (1.0 +. cos_error)))">
   <goal name="cos_simple_example&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
    <goal name="cos_simple_example&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; cos_approx y0) @ (x --. y))
 -. cos (to_real x -. to_real y))
&lt;=. ((cos_error *. abs (cos (to_real x -. to_real y)))
     +. ((((eps *. abs (to_real x -. to_real y)) +. 0.0)
          *. (1.0 +. cos_error))
         +. 0.0))">
     <goal name="cos_simple_example&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="cos_double_error_propagation">
      <goal name="cos_simple_example&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x --. y) -. (to_real x -. to_real y))
&lt;=. (eps *. abs (to_real x -. to_real y))">
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.152024" steps="1067"/></proof>
       </goal>
       <goal name="cos_simple_example&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.061083" steps="132"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.214182" steps="1444"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.053963" steps="105"/></proof>
      </goal>
      <goal name="cos_simple_example&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.069036" steps="98"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="cos_simple_example&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.577947" steps="5209"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_simple_example&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.083094" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="cos_simple_example&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.077669" steps="168"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="kinematics&#39;vc" expl="VC for kinematics" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="kinematics&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((to_real zeropointfive *. sin (to_real theta1))
     +. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
&lt;=. (((((eps +. (sin_error *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs (to_real zeropointfive *. sin (to_real theta1))
          +. abs
             (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
             *. ((((1.0 +. eps)
                   *. ((eps *. abs (to_real theta1 +. to_real theta2))
                       *. (1.0 +. sin_error)))
                  *. abs (to_real twopoint5))
                 +. eta))))">
   <goal name="kinematics&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="zeropointfive **. sin_approx theta1,twopoint5 **. sin_approx (theta1 ++. theta2)">
    <goal name="kinematics&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real zeropointfive *. sin (to_real theta1)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="kinematics&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (zeropointfive **. sin_approx theta1)
 -. (to_real zeropointfive *. sin (to_real theta1)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real zeropointfive) *. abs (sin (to_real theta1))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real zeropointfive))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta1))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="zeropointfive,sin_approx theta1">
       <goal name="kinematics&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.037268" steps="121"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.051013" steps="139"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.041712" steps="120"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.067765" steps="123"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.069251" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.067015" steps="114"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.039136" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.078911" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.060000" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.069918" steps="207"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.065925" steps="161"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="kinematics&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real (twopoint5 **. sin_approx (theta1 ++. theta2))
 -. (to_real twopoint5 *. sin (to_real theta1 +. to_real theta2)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real twopoint5)
          *. abs (sin (to_real theta1 +. to_real theta2))))
     +. ((((((((eps *. abs (to_real theta1 +. to_real theta2))
               *. (1.0 +. sin_error))
              +. (((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))
                  *. 0.0))
             *. abs (to_real twopoint5))
            +. ((0.0 +. (0.0 *. sin_error))
                *. abs (sin (to_real theta1 +. to_real theta2))))
           +. (0.0
               *. ((eps *. abs (to_real theta1 +. to_real theta2))
                   *. (1.0 +. sin_error))))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="kinematics&#39;vc.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="twopoint5,sin_approx (theta1 ++. theta2)">
       <goal name="kinematics&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.068095" steps="121"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((abs (sin (to_real theta1 +. to_real theta2)) *. sin_error)
     +. ((eps *. abs (to_real theta1 +. to_real theta2))
         *. (1.0 +. sin_error)))">
        <goal name="kinematics&#39;vc.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (sin_approx (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
         <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; sin_approx y0) @ (theta1 ++. theta2))
 -. sin (to_real theta1 +. to_real theta2))
&lt;=. ((sin_error *. abs (sin (to_real theta1 +. to_real theta2)))
     +. ((((eps *. abs (to_real theta1 +. to_real theta2)) +. 0.0)
          *. (1.0 +. sin_error))
         +. 0.0))">
          <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="sin_double_error_propagation">
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs (to_real (theta1 ++. theta2) -. (to_real theta1 +. to_real theta2))
&lt;=. (eps *. abs (to_real theta1 +. to_real theta2))">
            <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.304263" steps="1218"/></proof>
            </goal>
            <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.053287" steps="146"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.263763" steps="1708"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.068654" steps="120"/></proof>
           </goal>
           <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.042193" steps="114"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.0.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="1.101802" steps="8878"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="kinematics&#39;vc.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.107468" steps="185"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="kinematics&#39;vc.0.0.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.096670" steps="186"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.039717" steps="120"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.041579" steps="123"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.067203" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.076295" steps="114"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.048537" steps="115"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.046634" steps="122"/></proof>
       </goal>
       <goal name="kinematics&#39;vc.0.0.1.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.082604" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="kinematics&#39;vc.0.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.211818" steps="348"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="kinematics&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.101816" steps="256"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="kinematics&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.059416" steps="123"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.056343" steps="123"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.4" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.051107" steps="115"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.5" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.084482" steps="115"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.6" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.052074" steps="115"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.7" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.092256" steps="131"/></proof>
    </goal>
    <goal name="kinematics&#39;vc.0.0.8" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.045112" steps="114"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="kinematics&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.355353" steps="513"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="raytracer&#39;vc" expl="VC for raytracer" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="raytracer&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs
(to_real result
 -. ((((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
      +. (to_real ny *. sin (to_real theta)))
     +. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
&lt;=. (((((((eps
           +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
               *. (1.0 +. eps)))
          +. (eps +. (sin_error *. (1.0 +. eps))))
         +. eps)
        +. (eps
            +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                 +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                *. (1.0 +. eps))))
       +. eps)
      *. ((abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
           +. abs (to_real ny *. sin (to_real theta)))
          +. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi))))
     +. ((((1.0 +. eps)
           +. (eps
               +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
                    +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
                   *. (1.0 +. eps))))
          *. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
               *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
                    *. abs (cos (to_real phi)))
                   +. eta))
              +. (((1.0 +. eps)
                   +. (eps
                       +. ((((eps +. (cos_error *. (1.0 +. eps)))
                             +. cos_error)
                            +. ((eps +. (cos_error *. (1.0 +. eps)))
                                *. cos_error))
                           *. (1.0 +. eps))))
                  *. eta)))
         +. (((1.0 +. eps)
              +. (((eps
                    +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                         +. ((eps +. (cos_error *. (1.0 +. eps)))
                             *. cos_error))
                        *. (1.0 +. eps)))
                   +. (eps +. (sin_error *. (1.0 +. eps))))
                  +. eps))
             *. ((((1.0 +. eps) *. (eta +. (eta *. sin_error)))
                  *. abs (sin (to_real phi)))
                 +. eta))))">
   <goal name="raytracer&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((nx **. cos_approx theta) **. cos_approx phi) ++. (ny **. sin_approx theta),(nz **. cos_approx theta) **. sin_approx phi">
    <goal name="raytracer&#39;vc.0.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real
 (((nx **. cos_approx theta) **. cos_approx phi)
  ++. (ny **. sin_approx theta))
 -. (((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
     +. (to_real ny *. sin (to_real theta))))
&lt;=. (((((eps
         +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
              +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
             *. (1.0 +. eps)))
        +. (eps +. (sin_error *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi))
          +. abs (to_real ny *. sin (to_real theta))))
     +. ((((1.0 +. eps) +. (eps +. (sin_error *. (1.0 +. eps))))
          *. ((((1.0 +. eps) *. (eta +. (eta *. cos_error)))
               *. abs (cos (to_real phi)))
              +. eta))
         +. (((1.0 +. eps)
              +. (eps
                  +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
                       +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
                      *. (1.0 +. eps))))
             *. eta)))">
     <goal name="raytracer&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(nx **. cos_approx theta) **. cos_approx phi,ny **. sin_approx theta">
      <goal name="raytracer&#39;vc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((nx **. cos_approx theta) **. cos_approx phi)
 -. ((to_real nx *. cos (to_real theta)) *. cos (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. cos_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. cos_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nx *. cos (to_real theta)) *. abs (cos (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nx *. cos (to_real theta)))
            +. ((eta +. (eta *. cos_error)) *. abs (cos (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx **. cos_approx theta,cos_approx phi">
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nx *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (nx **. cos_approx theta) -. (to_real nx *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nx) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nx))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nx,cos_approx theta">
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.051521" steps="136"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.058480" steps="162"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.080905" steps="138"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.072906" steps="140"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.072121" steps="130"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.055997" steps="129"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.077237" steps="130"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.065041" steps="130"/></proof>
            </goal>
            <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.053826" steps="129"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.132925" steps="515"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.069894" steps="199"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.078875" steps="155"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.079076" steps="148"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.066908" steps="139"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.080001" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.083170" steps="129"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.057799" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.051911" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.080212" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.272842" steps="657"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.126607" steps="312"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. abs (to_real ny *. sin (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="raytracer&#39;vc.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (ny **. sin_approx theta) -. (to_real ny *. sin (to_real theta)))
&lt;=. (((eps +. (((0.0 +. sin_error) +. (0.0 *. sin_error)) *. (1.0 +. eps)))
      *. (abs (to_real ny) *. abs (sin (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real ny))
            +. ((0.0 +. (0.0 *. sin_error)) *. abs (sin (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="ny,sin_approx theta">
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.071857" steps="136"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.100086" steps="155"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.097126" steps="138"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.060408" steps="139"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.061052" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.083163" steps="129"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.098648" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.057076" steps="130"/></proof>
         </goal>
         <goal name="raytracer&#39;vc.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.055367" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.129533" steps="483"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.110361" steps="199"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.086468" steps="149"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.060445" steps="148"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.056038" steps="131"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.5" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.065689" steps="130"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.6" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.092662" steps="143"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.7" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.081164" steps="130"/></proof>
      </goal>
      <goal name="raytracer&#39;vc.0.0.0.0.8" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.037070" steps="129"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.671983" steps="672"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. abs ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="raytracer&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((nz **. cos_approx theta) **. sin_approx phi)
 -. ((to_real nz *. cos (to_real theta)) *. sin (to_real phi)))
&lt;=. (((eps
       +. ((((eps +. (cos_error *. (1.0 +. eps))) +. sin_error)
            +. ((eps +. (cos_error *. (1.0 +. eps))) *. sin_error))
           *. (1.0 +. eps)))
      *. (abs (to_real nz *. cos (to_real theta)) *. abs (sin (to_real phi))))
     +. ((((((0.0 +. (0.0 *. (eps +. (cos_error *. (1.0 +. eps)))))
             *. abs (to_real nz *. cos (to_real theta)))
            +. ((eta +. (eta *. sin_error)) *. abs (sin (to_real phi))))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="raytracer&#39;vc.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz **. cos_approx theta,sin_approx phi">
       <goal name="raytracer&#39;vc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. abs (to_real nz *. cos (to_real theta)))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
        <goal name="raytracer&#39;vc.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real (nz **. cos_approx theta) -. (to_real nz *. cos (to_real theta)))
&lt;=. (((eps +. (((0.0 +. cos_error) +. (0.0 *. cos_error)) *. (1.0 +. eps)))
      *. (abs (to_real nz) *. abs (cos (to_real theta))))
     +. ((((((0.0 +. (0.0 *. 0.0)) *. abs (to_real nz))
            +. ((0.0 +. (0.0 *. cos_error)) *. abs (cos (to_real theta))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
         <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="nz,cos_approx theta">
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.052237" steps="136"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.052437" steps="162"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.076707" steps="138"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.075598" steps="140"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.064037" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.093464" steps="129"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.060114" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.073432" steps="130"/></proof>
          </goal>
          <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.061082" steps="129"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="raytracer&#39;vc.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.208233" steps="515"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="raytracer&#39;vc.0.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.063974" steps="199"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.063303" steps="155"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.070840" steps="148"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.070248" steps="139"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.059965" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.094957" steps="129"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.086445" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.055642" steps="130"/></proof>
       </goal>
       <goal name="raytracer&#39;vc.0.0.1.0.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.058143" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="raytracer&#39;vc.0.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.366649" steps="707"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="raytracer&#39;vc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.240038" steps="321"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="raytracer&#39;vc.0.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.068375" steps="213"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.3" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.063430" steps="149"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.4" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.061590" steps="132"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.5" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.064113" steps="132"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.6" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.092058" steps="153"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.7" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.062061" steps="141"/></proof>
    </goal>
    <goal name="raytracer&#39;vc.0.0.8" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.067102" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="raytracer&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.304698" steps="13747"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
