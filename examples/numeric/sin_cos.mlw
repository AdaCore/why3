module SinCosSingle
  use real.RealInfix
  use real.Abs
  use ufloat.USingle
  use ufloat.USingleLemmas
  use real.Trigonometry

  constant sin_error:real
  axiom sin_error_bounds : 0. <=. sin_error <=. 1.
  val function sin_approx (x:usingle) : usingle
    ensures {
      abs (to_real result -. sin (to_real x)) <=. abs (sin (to_real x)) *. sin_error
    }

  constant cos_error:real
  axiom cos_error_bounds : 0. <=. cos_error <=. 1.
  val function cos_approx (x:usingle) : usingle
    ensures {
      abs (to_real result -. cos (to_real x)) <=. abs (cos (to_real x)) *. cos_error
    }


  let ghost sin_simple_example (x y :usingle)
    ensures {
      abs (to_real result -. sin(to_real x +. to_real y))
      <=. sin_error *. abs (sin (to_real x +. to_real y))
       +. eps *. abs (to_real x +. to_real y) *. (1. +. sin_error)
    }
  = sin_approx(x ++. y)

  let ghost cos_simple_example (x y :usingle)
    ensures {
      abs (to_real result -. cos(to_real x -. to_real y))
      <=. cos_error *. abs (cos (to_real x -. to_real y))
       +. eps *. abs (to_real x -. to_real y) *. (1. +. cos_error)
    }
  = cos_approx(x --. y)

constant zeropointfive:usingle
axiom zeropointfive_val : to_real zeropointfive = 0.5

constant twopoint5:usingle
axiom twopoint5_val : to_real twopoint5 = 2.5

let ghost kinematics (theta1 theta2:usingle)
  ensures {
    let t = to_real theta1 in
    let t2 = 1.0 +. eps in
    let t3 = t +. to_real theta2 in
    let t4 = 0.5 *. sin t in
    let t5 = eps +. (sin_error *. t2) in
    let t6 = 2.5 *. sin t3 in
    let t7 = t2 +. t5 in
    let exact = t4 +. t6 in
    abs (to_real result -. exact)
    <=.
    (* Relative part of the error *)
    (((t5 +. t5) +. eps) *. (abs t4 +. abs t6)) +.
    (* Absolute part of the error *)
    t7 *. eta +.
    t7 *. (2.5 *. t2 *. eps *. abs t3 *. (1.0 +. sin_error) +. eta)

  }
= zeropointfive **. sin_approx (theta1) ++. twopoint5 **. sin_approx(theta1 ++. theta2)

let ghost raytracer (theta phi nx ny nz:usingle)
  ensures {
    let t = to_real phi in
    let t1 = to_real theta in
    let t2 = sin t in
    let t3 = cos t in
    let t4 = cos t1 in
    let t5 = 1.0 +. eps in
    let t6 = to_real ny *. sin t1 in
    let t7 = eps +. (cos_error *. t5) in
    let t8 = eps +. (sin_error *. t5) in
    let t9 = (to_real nz *. t4) *. t2 in
    let t10 = (to_real nx *. t4) *. t3 in
    let t11 = eps +. (((t7 +. cos_error) +. (t7 *. cos_error)) *. t5) in
    let t12 = eps +. (((t7 +. sin_error) +. (t7 *. sin_error)) *. t5) in
    let t13 = (t11 +. t8) +. eps in
    abs (to_real result -. ((t10 +. t6) +. t9))
    <=.
    (* Relative part of the error *)
    (t13 +. t12 +. eps) *. (abs t10 +. abs t6 +. abs t9) +.
    (* Absolute part of the error *)
    (t5 +. t12) *. 
      ((t5 +. t8) *. (t5 *. (eta +. eta *. cos_error) *. abs t3 +. eta)
      +. (t5 +. t11) *. eta) +.
    (t5 +. t13) *. ((t5 *. (eta +. eta *. sin_error) *. abs t2) +. eta)
  }
=
  nx **. cos_approx theta **. cos_approx phi
  ++. ny **. sin_approx theta
  ++. nz **. cos_approx theta **. sin_approx phi
end

module SinCosDouble
  use real.RealInfix
  use real.Abs
  use ufloat.UDouble
  use ufloat.UDoubleLemmas
  use real.Trigonometry

  constant sin_error:real
  axiom sin_error_bounds : 0. <=. sin_error <=. 1.
  val function sin_approx (x:udouble) : udouble
    ensures {
      abs (to_real result -. sin (to_real x)) <=. abs (sin (to_real x)) *. sin_error
    }

  constant cos_error:real
  axiom cos_error_bounds : 0. <=. cos_error <=. 1.
  val function cos_approx (x:udouble) : udouble
    ensures {
      abs (to_real result -. cos (to_real x)) <=. abs (cos (to_real x)) *. cos_error
    }


  let ghost sin_simple_example (x y :udouble)
    ensures {
      abs (to_real result -. sin(to_real x +. to_real y))
      <=. sin_error *. abs (sin (to_real x +. to_real y))
       +. eps *. abs (to_real x +. to_real y) *. (1. +. sin_error)
    }
  = sin_approx(x ++. y)

  let ghost cos_simple_example (x y :udouble)
    ensures {
      abs (to_real result -. cos(to_real x -. to_real y))
      <=. cos_error *. abs (cos (to_real x -. to_real y))
       +. eps *. abs (to_real x -. to_real y) *. (1. +. cos_error)
    }
  = cos_approx(x --. y)

constant zeropointfive:udouble
axiom zeropointfive_val : to_real zeropointfive = 0.5

constant twopoint5:udouble
axiom twopoint5_val : to_real twopoint5 = 2.5

let ghost kinematics (theta1 theta2:udouble)
  ensures {
    let t = to_real theta1 in
    let t2 = 1.0 +. eps in
    let t3 = t +. to_real theta2 in
    let t4 = 0.5 *. sin t in
    let t5 = eps +. (sin_error *. t2) in
    let t6 = 2.5 *. sin t3 in
    let t7 = t2 +. t5 in
    let exact = t4 +. t6 in
    abs (to_real result -. exact)
    <=.
    (* Relative part of the error *)
    (((t5 +. t5) +. eps) *. (abs t4 +. abs t6)) +.
    (* Absolute part of the error *)
    t7 *. eta +.
    t7 *. (2.5 *. t2 *. eps *. abs t3 *. (1.0 +. sin_error) +. eta)

  }
= zeropointfive **. sin_approx (theta1) ++. twopoint5 **. sin_approx(theta1 ++. theta2)

let ghost raytracer (theta phi nx ny nz:udouble)
  ensures {
    let t = to_real phi in
    let t1 = to_real theta in
    let t2 = sin t in
    let t3 = cos t in
    let t4 = cos t1 in
    let t5 = 1.0 +. eps in
    let t6 = to_real ny *. sin t1 in
    let t7 = eps +. (cos_error *. t5) in
    let t8 = eps +. (sin_error *. t5) in
    let t9 = (to_real nz *. t4) *. t2 in
    let t10 = (to_real nx *. t4) *. t3 in
    let t11 = eps +. (((t7 +. cos_error) +. (t7 *. cos_error)) *. t5) in
    let t12 = eps +. (((t7 +. sin_error) +. (t7 *. sin_error)) *. t5) in
    let t13 = (t11 +. t8) +. eps in
    abs (to_real result -. ((t10 +. t6) +. t9))
    <=.
    (* Relative part of the error *)
    (t13 +. t12 +. eps) *. (abs t10 +. abs t6 +. abs t9) +.
    (* Absolute part of the error *)
    (t5 +. t12) *. 
      ((t5 +. t8) *. (t5 *. (eta +. eta *. cos_error) *. abs t3 +. eta)
      +. (t5 +. t11) *. eta) +.
    (t5 +. t13) *. ((t5 *. (eta +. eta *. sin_error) *. abs t2) +. eta)
  }
=
  nx **. cos_approx theta **. cos_approx phi
  ++. ny **. sin_approx theta
  ++. nz **. cos_approx theta **. sin_approx phi

end
