<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="exp_log.mlw"/>
<theory name="ExpLogSingle" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.052160" steps="871"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.090134" steps="1034"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (exp (to_real y)) in
let t1 = log (exp (to_real x)) in
let t2 =
  ((1.0 +. eps) +. log_error)
  *. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error))
in
abs (to_real result -. (t1 +. t))
&lt;=. ((((log_error +. log_error) +. eps) *. (abs t1 +. abs t)) +. (t2 +. t2))">
   <goal name="example1&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. (log (exp (to_real x)) +. log (exp (to_real y))))
&lt;=. ((((log_error +. log_error) +. eps)
      *. (abs (log (exp (to_real x))) +. abs (log (exp (to_real y)))))
     +. ((((1.0 +. eps) +. log_error)
          *. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))
         +. (((1.0 +. eps) +. log_error)
             *. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="log_approx (exp_approx x),log_approx (exp_approx y)">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((abs (log (exp (to_real x))) *. log_error)
     +. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((log_error *. abs (log (exp (to_real x))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real x)) +. 0.0) /. exp (to_real x))))
          *. (1.0 +. log_error))
         +. 0.0))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_single_error_propagation" arg2="with" arg3="exp_approx x">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.062492" steps="108"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.043800" steps="128"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.109501" steps="956"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.256428" steps="1101"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.047736" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="2.131162" steps="15387"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.052878" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((abs (log (exp (to_real y))) *. log_error)
     +. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real y)) +. 0.0) /. exp (to_real y))))
          *. (1.0 +. log_error))
         +. 0.0))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_single_error_propagation" arg2="with" arg3="exp_approx y">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.048834" steps="108"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.056856" steps="129"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.143516" steps="952"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.238740" steps="1066"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.089790" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="1.552424" steps="10585"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.097085" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.078874" steps="110"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.083757" steps="110"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.057395" steps="103"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.057044" steps="103"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.127228" steps="649"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.124273" steps="649"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.056837" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.094459" steps="303"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.560963" steps="6987"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.108956" steps="1658"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (exp (to_real x) +. exp (to_real y)) in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. ((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
         *. (1.0 +. log_error)))">
   <goal name="example2&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((abs (log (exp (to_real x) +. exp (to_real y))) *. log_error)
     +. ((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
         *. (1.0 +. log_error)))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real x) +. exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((((exp_error +. exp_error) +. eps)
                     *. (exp (to_real x) +. exp (to_real y)))
                    +. 0.0)
                   /. (exp (to_real x) +. exp (to_real y)))))
          *. (1.0 +. log_error))
         +. 0.0))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_single_error_propagation" arg2="with" arg3="exp_approx x ++. exp_approx y">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x ++. exp_approx y)
 -. (exp (to_real x) +. exp (to_real y)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x) +. exp (to_real y)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="exp_approx x,exp_approx y">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.047525" steps="104"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.051258" steps="104"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.144186" steps="805"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.144319" steps="811"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.073415" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.074852" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.076596" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.051787" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.053343" steps="97"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.049046" steps="108"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.058781" steps="123"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.158653" steps="607"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.211853" steps="1031"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.042415" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="1.091412" steps="9745"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.061448" steps="154"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.063015" steps="158"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.053312" steps="673"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log2 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log2_error) +. ((-. log2 (1.0 -. eps)) *. (1.0 +. log2_error)))">
   <goal name="example3&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((abs (log2 (to_real x +. to_real y)) *. log2_error)
     +. ((-. log2 (1.0 -. eps)) *. (1.0 +. log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((log2_error *. abs (log2 (to_real x +. to_real y)))
     +. (((-. log2
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log2_error))
         +. 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log2_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.123059" steps="850"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.045960" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.057985" steps="117"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.063829" steps="96"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.051306" steps="95"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.044422" steps="92"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.062671" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.045043" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example3&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.052422" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044697" steps="673"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log10 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
   <goal name="example4&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((abs (log10 (to_real x +. to_real y)) *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((log10_error *. abs (log10 (to_real x +. to_real y)))
     +. (((-. log10
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log10_error))
         +. 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log10_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.118403" steps="848"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.058122" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.060417" steps="117"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.058808" steps="96"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.048075" steps="95"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.059876" steps="92"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.053908" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.056092" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example4&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.052061" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExpLogDouble" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.182782" steps="868"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.075010" steps="1030"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (exp (to_real y)) in
let t1 = log (exp (to_real x)) in
let t2 =
  ((1.0 +. eps) +. log_error)
  *. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error))
in
abs (to_real result -. (t1 +. t))
&lt;=. ((((log_error +. log_error) +. eps) *. (abs t1 +. abs t)) +. (t2 +. t2))">
   <goal name="example1&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. (log (exp (to_real x)) +. log (exp (to_real y))))
&lt;=. ((((log_error +. log_error) +. eps)
      *. (abs (log (exp (to_real x))) +. abs (log (exp (to_real y)))))
     +. ((((1.0 +. eps) +. log_error)
          *. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))
         +. (((1.0 +. eps) +. log_error)
             *. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="log_approx (exp_approx x),log_approx (exp_approx y)">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((abs (log (exp (to_real x))) *. log_error)
     +. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((log_error *. abs (log (exp (to_real x))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real x)) +. 0.0) /. exp (to_real x))))
          *. (1.0 +. log_error))
         +. 0.0))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="exp_approx x">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.046615" steps="108"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.077588" steps="128"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.163685" steps="956"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.195230" steps="1094"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.049477" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="1.649521" steps="9284"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.066088" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((abs (log (exp (to_real y))) *. log_error)
     +. ((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real y)) +. 0.0) /. exp (to_real y))))
          *. (1.0 +. log_error))
         +. 0.0))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="exp_approx y">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.092261" steps="108"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.085263" steps="129"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.125015" steps="952"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.272445" steps="1058"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.043294" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="1.671750" steps="10571"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.076072" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.079619" steps="110"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.062856" steps="110"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.078018" steps="103"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.051241" steps="103"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.143010" steps="649"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.125776" steps="649"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.050622" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.099629" steps="304"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.803939" steps="7003"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.104003" steps="1654"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (exp (to_real x) +. exp (to_real y)) in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. ((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
         *. (1.0 +. log_error)))">
   <goal name="example2&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((abs (log (exp (to_real x) +. exp (to_real y))) *. log_error)
     +. ((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
         *. (1.0 +. log_error)))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real x) +. exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((((exp_error +. exp_error) +. eps)
                     *. (exp (to_real x) +. exp (to_real y)))
                    +. 0.0)
                   /. (exp (to_real x) +. exp (to_real y)))))
          *. (1.0 +. log_error))
         +. 0.0))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="exp_approx x ++. exp_approx y">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x ++. exp_approx y)
 -. (exp (to_real x) +. exp (to_real y)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x) +. exp (to_real y)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x,exp_approx y">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.035143" steps="104"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.049222" steps="104"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.139292" steps="804"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.171368" steps="809"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.049820" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.038747" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.069408" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.064671" steps="97"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.079208" steps="97"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.079948" steps="108"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.059169" steps="123"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.105437" steps="605"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.223617" steps="1031"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.045605" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="1.130455" steps="9772"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.060244" steps="154"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.065186" steps="158"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.044315" steps="668"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log2 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log2_error) +. ((-. log2 (1.0 -. eps)) *. (1.0 +. log2_error)))">
   <goal name="example3&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((abs (log2 (to_real x +. to_real y)) *. log2_error)
     +. ((-. log2 (1.0 -. eps)) *. (1.0 +. log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((log2_error *. abs (log2 (to_real x +. to_real y)))
     +. (((-. log2
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log2_error))
         +. 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log2_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.122078" steps="849"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.046257" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.049404" steps="117"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.069733" steps="96"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.037519" steps="95"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.051083" steps="92"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.060299" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.048685" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example3&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.056159" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.160185" steps="668"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log10 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
   <goal name="example4&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((abs (log10 (to_real x +. to_real y)) *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((log10_error *. abs (log10 (to_real x +. to_real y)))
     +. (((-. log10
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log10_error))
         +. 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log10_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.121369" steps="846"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.043368" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.049779" steps="117"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.077287" steps="96"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.049172" steps="95"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.040090" steps="92"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.058860" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.053859" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example4&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.048498" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
