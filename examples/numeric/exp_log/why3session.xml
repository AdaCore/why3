<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Coq" version="8.17.0" timelimit="0" steplimit="0" memlimit="0"/>
<prover id="1" name="Alt-Ergo" version="2.5.2" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="exp_log.mlw"/>
<theory name="ExpLogSingle" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.052160" steps="298"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.090134" steps="436"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example1&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real (uadd (log_approx (exp_approx x)) (log_approx (exp_approx y)))
 -&#39; (log (exp (to_real x)) +&#39; log (exp (to_real y))))
&lt;=&#39; ((((log_error +&#39; log_error) +&#39; eps)
      *&#39; (abs (log (exp (to_real x))) +&#39; abs (log (exp (to_real y)))))
     +&#39; ((((1.0 +&#39; eps) +&#39; log_error)
          *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))
         +&#39; (((1.0 +&#39; eps) +&#39; log_error)
             *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((abs (log (exp (to_real x))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; log_approx y0) @ exp_approx x)
 -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_single_error_propagation">
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.048395" steps="101"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.132212" steps="606"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.089429" steps="479"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.155024" steps="491"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.046275" steps="94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.228251" steps="1047"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.449868" steps="2211"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.056185" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((abs (log (exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; log_approx y0) @ exp_approx y)
 -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_single_error_propagation">
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.077335" steps="101"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.153306" steps="626"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.108241" steps="475"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.167991" steps="454"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.045700" steps="94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.202374" steps="1020"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.535803" steps="2589"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.085338" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.039002" steps="102"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.056314" steps="102"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.044168" steps="94"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.050935" steps="94"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.095723" steps="326"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.078609" steps="326"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.279051" steps="1358"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.108956" steps="705"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example2&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((abs (log (exp (to_real x) +&#39; exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; ((exp_error +&#39; exp_error) +&#39; eps)))
         *&#39; (1.0 +&#39; log_error)))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 ((fun (y0:usingle) -&gt; log_approx y0) @ uadd (exp_approx x) (exp_approx y))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log_single_error_propagation">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (uadd (exp_approx x) (exp_approx y))
 -&#39; (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((((exp_error +&#39; exp_error) +&#39; eps)
      *&#39; (exp (to_real x) +&#39; exp (to_real y)))
     +&#39; ((((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)
         +&#39; (((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)))">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="uadd_single_error_propagation">
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.041970" steps="96"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.042139" steps="96"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.074813" steps="347"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.122806" steps="348"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.043585" steps="88"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.033343" steps="88"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.032149" steps="89"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.047661" steps="89"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.047259" steps="101"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.119447" steps="571"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.098765" steps="282"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.100120" steps="449"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.069907" steps="88"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.185221" steps="1121"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.270298" steps="2472"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.051025" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.053312" steps="232"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example3&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs (log2 (to_real x +&#39; to_real y)) *&#39; log2_error)
     +&#39; ((-&#39; log2 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; log2_approx y0) @ uadd x y)
 -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log2_single_error_propagation">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs (to_real x +&#39; to_real y))">
        <goal name="example3&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.065837" steps="320"/></proof>
        </goal>
        <goal name="example3&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.043968" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.098553" steps="466"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.052263" steps="88"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.042771" steps="88"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.048136" steps="84"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.193748" steps="1490"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.051742" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.047270" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><path name="exp_log_ExpLogSingle_example4qtvc_1.v"/><undone/></proof>
  <proof prover="1"><result status="valid" time="0.044697" steps="232"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example4&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs (log10 (to_real x +&#39; to_real y)) *&#39; log10_error)
     +&#39; ((-&#39; log10 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; log10_approx y0) @ uadd x y)
 -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log10_single_error_propagation">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs (to_real x +&#39; to_real y))">
        <goal name="example4&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.077427" steps="320"/></proof>
        </goal>
        <goal name="example4&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.045721" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.085516" steps="466"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.060974" steps="88"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.038332" steps="88"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.034472" steps="84"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.161906" steps="1520"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.045520" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.037451" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExpLogDouble" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.054807" steps="299"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.075010" steps="438"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example1&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real (uadd (log_approx (exp_approx x)) (log_approx (exp_approx y)))
 -&#39; (log (exp (to_real x)) +&#39; log (exp (to_real y))))
&lt;=&#39; ((((log_error +&#39; log_error) +&#39; eps)
      *&#39; (abs (log (exp (to_real x))) +&#39; abs (log (exp (to_real y)))))
     +&#39; ((((1.0 +&#39; eps) +&#39; log_error)
          *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))
         +&#39; (((1.0 +&#39; eps) +&#39; log_error)
             *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((abs (log (exp (to_real x))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; log_approx y0) @ exp_approx x)
 -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_double_error_propagation">
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.038776" steps="101"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.213931" steps="608"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.091038" steps="479"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.175605" steps="491"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.053139" steps="94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.222759" steps="1055"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.366403" steps="2124"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.085636" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((abs (log (exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; log_approx y0) @ exp_approx y)
 -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_double_error_propagation">
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.049778" steps="101"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.143076" steps="630"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.140089" steps="475"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.150088" steps="453"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.041556" steps="94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.254933" steps="1017"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.374293" steps="2622"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.041641" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.042750" steps="102"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.049079" steps="102"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.041509" steps="94"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.034109" steps="94"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.090938" steps="326"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.080707" steps="326"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.259044" steps="1358"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.104003" steps="703"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example2&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((abs (log (exp (to_real x) +&#39; exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; ((exp_error +&#39; exp_error) +&#39; eps)))
         *&#39; (1.0 +&#39; log_error)))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 ((fun (y0:udouble) -&gt; log_approx y0) @ uadd (exp_approx x) (exp_approx y))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log_double_error_propagation">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real (uadd (exp_approx x) (exp_approx y))
 -&#39; (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((((exp_error +&#39; exp_error) +&#39; eps)
      *&#39; (exp (to_real x) +&#39; exp (to_real y)))
     +&#39; ((((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)
         +&#39; (((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)))">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="uadd_double_error_propagation">
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.039939" steps="96"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.052525" steps="96"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.076586" steps="347"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.087331" steps="348"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.072724" steps="88"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.064171" steps="88"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.076882" steps="89"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.043885" steps="89"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.067618" steps="101"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.141842" steps="571"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.118624" steps="282"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.148842" steps="449"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.045408" steps="88"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.165677" steps="1106"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.315314" steps="2369"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.053064" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.044315" steps="232"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example3&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs (log2 (to_real x +&#39; to_real y)) *&#39; log2_error)
     +&#39; ((-&#39; log2 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; log2_approx y0) @ uadd x y)
 -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log2_double_error_propagation">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs (to_real x +&#39; to_real y))">
        <goal name="example3&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.073249" steps="322"/></proof>
        </goal>
        <goal name="example3&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.051161" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.133061" steps="465"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.065417" steps="88"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.048991" steps="88"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.048278" steps="84"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.196470" steps="1536"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.071560" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.069204" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.160185" steps="232"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example4&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs (log10 (to_real x +&#39; to_real y)) *&#39; log10_error)
     +&#39; ((-&#39; log10 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:udouble) -&gt; log10_approx y0) @ uadd x y)
 -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log10_double_error_propagation">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs (to_real x +&#39; to_real y))">
        <goal name="example4&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.057247" steps="325"/></proof>
        </goal>
        <goal name="example4&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.043291" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.088258" steps="458"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.053146" steps="88"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.046962" steps="88"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.041457" steps="84"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.201347" steps="1493"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.059775" steps="151"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.063378" steps="117"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
