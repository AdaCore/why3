<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="Z3" version="4.12.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC5" version="1.1.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Z3" version="4.13.2" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="exp_log.mlw"/>
<theory name="ExpLogSingle" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.099935" steps="856"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.133523" steps="1116"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t3 = log (exp (to_real y)) in
let t4 = log (exp (to_real x)) in
let t5 =
  ((1.0 +. eps) +. log_error)
  *. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)) +. log_cst_error)
in
abs (to_real result -. (t4 +. t3))
&lt;=. ((((log_error +. log_error) +. eps) *. (abs t4 +. abs t3)) +. (t5 +. t5))">
   <goal name="example1&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. (log (exp (to_real x)) +. log (exp (to_real y))))
&lt;=. ((((log_error +. log_error) +. eps)
      *. (abs (log (exp (to_real x))) +. abs (log (exp (to_real y)))))
     +. ((((1.0 +. eps) +. log_error)
          *. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error))
              +. log_cst_error))
         +. (((1.0 +. eps) +. log_error)
             *. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error))
                 +. log_cst_error))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="log_approx (exp_approx x),log_approx (exp_approx y)">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((abs (log (exp (to_real x))) *. log_error)
     +. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)) +. log_cst_error))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((log_error *. abs (log (exp (to_real x))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real x)) +. 0.0) /. exp (to_real x))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_single_error_propagation" arg2="with" arg3="exp_approx x">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.059324" steps="119"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.066218" steps="134"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.155626" steps="1123"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.128501" steps="1173"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.055604" steps="112"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="1.207190" steps="7334"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.082547" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((abs (log (exp (to_real y))) *. log_error)
     +. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)) +. log_cst_error))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real y)) +. 0.0) /. exp (to_real y))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_single_error_propagation" arg2="with" arg3="exp_approx y">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.066752" steps="119"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.065825" steps="134"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.082450" steps="1121"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.216068" steps="1139"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.090507" steps="112"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="1.076743" steps="7896"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.052866" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.062021" steps="119"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.047311" steps="119"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.050301" steps="112"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.044891" steps="112"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.135051" steps="773"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.147596" steps="773"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.053723" steps="112"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.094205" steps="311"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.108349" steps="305"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.190269" steps="1418"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (exp (to_real x) +. exp (to_real y)) in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="example2&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((abs (log (exp (to_real x) +. exp (to_real y))) *. log_error)
     +. (((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real x) +. exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((((exp_error +. exp_error) +. eps)
                     *. (exp (to_real x) +. exp (to_real y)))
                    +. 0.0)
                   /. (exp (to_real x) +. exp (to_real y)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_single_error_propagation" arg2="with" arg3="exp_approx x ++. exp_approx y">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x ++. exp_approx y)
 -. (exp (to_real x) +. exp (to_real y)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x) +. exp (to_real y)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="exp_approx x,exp_approx y">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.058112" steps="113"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.062115" steps="113"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.151173" steps="955"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.195041" steps="946"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.052021" steps="105"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.066532" steps="105"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.061686" steps="106"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.047719" steps="106"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.050702" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.057204" steps="118"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.053816" steps="132"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.116471" steps="727"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.205825" steps="1130"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.075268" steps="105"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="1.334569" steps="7805"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.066275" steps="160"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.084567" steps="167"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.086160" steps="566"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log2 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log2_error) +. ((-. log2 (1.0 -. eps)) *. (1.0 +. log2_error)))">
   <goal name="example3&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((abs (log2 (to_real x +. to_real y)) *. log2_error)
     +. ((-. log2 (1.0 -. eps)) *. (1.0 +. log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((log2_error *. abs (log2 (to_real x +. to_real y)))
     +. (((-. log2
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log2_error))
         +. 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log2_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.138606" steps="790"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.060096" steps="123"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.065559" steps="127"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.068605" steps="104"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.060663" steps="104"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.049046" steps="100"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.067871" steps="168"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.061491" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example3&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.048102" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.087385" steps="566"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log10 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
   <goal name="example4&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((abs (log10 (to_real x +. to_real y)) *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((log10_error *. abs (log10 (to_real x +. to_real y)))
     +. (((-. log10
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log10_error))
         +. 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log10_single_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.150117" steps="790"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.056298" steps="123"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.069932" steps="127"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.073209" steps="104"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.052681" steps="104"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.073549" steps="100"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.069611" steps="168"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.058950" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example4&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.039820" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExpLogDouble" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.103938" steps="785"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.136607" steps="1016"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t3 = log (exp (to_real y)) in
let t4 = log (exp (to_real x)) in
let t5 =
  ((1.0 +. eps) +. log_error)
  *. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)) +. log_cst_error)
in
abs (to_real result -. (t4 +. t3))
&lt;=. ((((log_error +. log_error) +. eps) *. (abs t4 +. abs t3)) +. (t5 +. t5))">
   <goal name="example1&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. (log (exp (to_real x)) +. log (exp (to_real y))))
&lt;=. ((((log_error +. log_error) +. eps)
      *. (abs (log (exp (to_real x))) +. abs (log (exp (to_real y)))))
     +. ((((1.0 +. eps) +. log_error)
          *. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error))
              +. log_cst_error))
         +. (((1.0 +. eps) +. log_error)
             *. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error))
                 +. log_cst_error))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="log_approx (exp_approx x),log_approx (exp_approx y)">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((abs (log (exp (to_real x))) *. log_error)
     +. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)) +. log_cst_error))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx x)) -. log (exp (to_real x)))
&lt;=. ((log_error *. abs (log (exp (to_real x))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real x)) +. 0.0) /. exp (to_real x))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="exp_approx x">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.054264" steps="113"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.066207" steps="133"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.148397" steps="1051"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.237261" steps="1078"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.081769" steps="107"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="1.392899" steps="7614"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.106152" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((abs (log (exp (to_real y))) *. log_error)
     +. (((-. log (1.0 -. exp_error)) *. (1.0 +. log_error)) +. log_cst_error))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (log_approx (exp_approx y)) -. log (exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((exp_error *. exp (to_real y)) +. 0.0) /. exp (to_real y))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="exp_approx y">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.064546" steps="114"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.083584" steps="133"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.170696" steps="1048"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.111019" steps="1041"/></proof>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.094898" steps="107"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.962963" steps="6936"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.089793" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.075301" steps="116"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.054163" steps="116"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.075151" steps="107"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.074363" steps="107"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.156171" steps="706"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.145470" steps="706"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.8" expl="apply premises" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.052221" steps="107"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.108821" steps="300"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.099029" steps="297"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.180146" steps="1338"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (exp (to_real x) +. exp (to_real y)) in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="example2&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((abs (log (exp (to_real x) +. exp (to_real y))) *. log_error)
     +. (((-. log (1.0 -. ((exp_error +. exp_error) +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log (exp (to_real x) +. exp (to_real y)))
&lt;=. ((log_error *. abs (log (exp (to_real x) +. exp (to_real y))))
     +. (((-. log
              (1.0
               -. (((((exp_error +. exp_error) +. eps)
                     *. (exp (to_real x) +. exp (to_real y)))
                    +. 0.0)
                   /. (exp (to_real x) +. exp (to_real y)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="exp_approx x ++. exp_approx y">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x ++. exp_approx y)
 -. (exp (to_real x) +. exp (to_real y)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x) +. exp (to_real y)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x,exp_approx y">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.047119" steps="111"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.049479" steps="111"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.196780" steps="880"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.179100" steps="877"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.092445" steps="102"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.054563" steps="102"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.083316" steps="103"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.059794" steps="103"/></proof>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2" memlimit="2000"><result status="valid" time="0.076636" steps="102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.069311" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.068558" steps="128"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.131529" steps="674"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.246902" steps="1060"/></proof>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.053611" steps="102"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="1.008805" steps="7448"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.063839" steps="161"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.075798" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lse4&#39;vc" expl="VC for lse4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.925136" steps="5474"/></proof>
  </goal>
  <goal name="lse4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t =
  log
  (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
   +. exp (to_real x4))
in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log
              (1.0
               -. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="lse4&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((abs
      (log
       (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4)))
      *. log_error)
     +. (((-. log
              (1.0
               -. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="lse4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((log_error
      *. abs
         (log
          (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))))
     +. (((-. log
              (1.0
               -. (((((((((exp_error +. exp_error) +. eps) +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     *. (((exp (to_real x1) +. exp (to_real x2))
                          +. exp (to_real x3))
                         +. exp (to_real x4)))
                    +. 0.0)
                   /. (((exp (to_real x1) +. exp (to_real x2))
                        +. exp (to_real x3))
                       +. exp (to_real x4)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="lse4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4">
      <goal name="lse4&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
       <goal name="lse4&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
        <goal name="lse4&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
         <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
           <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.049477" steps="117"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.039299" steps="10967"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.183756" steps="1022"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.280285" steps="35542"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.022870" steps="10955"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.038880" steps="11882"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.040903" steps="10355"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.043469" steps="10355"/></proof>
            </goal>
            <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.025623" steps="10951"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="0.040574" steps="11993"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.061888" steps="117"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.167156" steps="35579"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.180696" steps="35542"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.066521" steps="111"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.063170" steps="11882"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.064267" steps="111"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.054135" steps="10355"/></proof>
          </goal>
          <goal name="lse4&#39;vc.1.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.043723" steps="110"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse4&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="0.046178" steps="12011"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.039227" steps="11890"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.150190" steps="35608"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.254711" steps="35542"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.041844" steps="12336"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.023019" steps="10955"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.041141" steps="111"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.046194" steps="111"/></proof>
        </goal>
        <goal name="lse4&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.065644" steps="110"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.042918" steps="12027"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse4&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.037955" steps="11183"/></proof>
      </goal>
      <goal name="lse4&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.151341" steps="35291"/></proof>
      </goal>
      <goal name="lse4&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.158073" steps="1241"/></proof>
      </goal>
      <goal name="lse4&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.072917" steps="110"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="1.789377" steps="10535"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse4&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.034353" steps="12067"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse4&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.044625" steps="12109"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lse5&#39;vc" expl="VC for lse5" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse5&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="5.436299" steps="17023"/></proof>
  </goal>
  <goal name="lse5&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t =
  log
  ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
    +. exp (to_real x4))
   +. exp (to_real x5))
in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((exp_error +. exp_error) +. eps) +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="lse5&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((abs
      (log
       ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5)))
      *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((exp_error +. exp_error) +. eps) +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="lse5&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((log_error
      *. abs
         (log
          ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))))
     +. (((-. log
              (1.0
               -. (((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     *. ((((exp (to_real x1) +. exp (to_real x2))
                           +. exp (to_real x3))
                          +. exp (to_real x4))
                         +. exp (to_real x5)))
                    +. 0.0)
                   /. ((((exp (to_real x1) +. exp (to_real x2))
                         +. exp (to_real x3))
                        +. exp (to_real x4))
                       +. exp (to_real x5)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="lse5&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="(((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
++. exp_approx x5">
      <goal name="lse5&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real
 ((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 -. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
       <goal name="lse5&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4,exp_approx x5">
        <goal name="lse5&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
         <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
           <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
             <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.041960" steps="11996"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.046422" steps="11996"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.193987" steps="37390"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.129765" steps="1092"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.045867" steps="11988"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.031131" steps="11106"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.031632" steps="11106"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.073429" steps="10418"/></proof>
              </goal>
              <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.030983" steps="11102"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.040292" steps="11277"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.071277" steps="11996"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.192831" steps="37427"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.265791" steps="37390"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.080033" steps="12470"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.062957" steps="114"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.043884" steps="10418"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.055963" steps="114"/></proof>
            </goal>
            <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.052654" steps="10416"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.052669" steps="130"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.063494" steps="11996"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.199994" steps="37456"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.169928" steps="37390"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.055235" steps="114"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.051768" steps="11988"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.027626" steps="11106"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.045088" steps="10418"/></proof>
          </goal>
          <goal name="lse5&#39;vc.1.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.062014" steps="114"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse5&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.070519" steps="132"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.062621" steps="125"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.217096" steps="37480"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.174618" steps="37390"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.051863" steps="12478"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.055136" steps="114"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.048890" steps="10418"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.029839" steps="11106"/></proof>
        </goal>
        <goal name="lse5&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.022445" steps="11102"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse5&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.072318" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse5&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.108572" steps="18515"/></proof>
      </goal>
      <goal name="lse5&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.263646" steps="37129"/></proof>
      </goal>
      <goal name="lse5&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.297762" steps="1338"/></proof>
      </goal>
      <goal name="lse5&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.058404" steps="114"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse5&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="2.281905" steps="17386"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse5&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.073613" steps="12181"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse5&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.042928" steps="12223"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lse6&#39;vc" expl="VC for lse6" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse6&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="300"><result status="valid" time="3.589668" steps="16771"/></proof>
  </goal>
  <goal name="lse6&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t =
  log
  (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4))
    +. exp (to_real x5))
   +. exp (to_real x6))
in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="lse6&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((abs
      (log
       (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4))
         +. exp (to_real x5))
        +. exp (to_real x6)))
      *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="lse6&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((log_error
      *. abs
         (log
          (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
             +. exp (to_real x4))
            +. exp (to_real x5))
           +. exp (to_real x6))))
     +. (((-. log
              (1.0
               -. (((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     *. (((((exp (to_real x1) +. exp (to_real x2))
                            +. exp (to_real x3))
                           +. exp (to_real x4))
                          +. exp (to_real x5))
                         +. exp (to_real x6)))
                    +. 0.0)
                   /. (((((exp (to_real x1) +. exp (to_real x2))
                          +. exp (to_real x3))
                         +. exp (to_real x4))
                        +. exp (to_real x5))
                       +. exp (to_real x6)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="lse6&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 ++. exp_approx x5)
++. exp_approx x6">
      <goal name="lse6&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real
 (((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 -. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))
          +. exp (to_real x6)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
       <goal name="lse6&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
++. exp_approx x5,exp_approx x6">
        <goal name="lse6&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real
 ((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 -. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
         <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4,exp_approx x5">
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
           <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
             <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
               <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.048603" steps="12102"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.054605" steps="12102"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.202440" steps="39131"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.271677" steps="39131"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.081929" steps="12094"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="0.024405" steps="11257"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="0.040039" steps="11257"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.089355" steps="18632"/></proof>
                </goal>
                <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.068370" steps="10479"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="5"><result status="valid" time="0.052063" steps="12205"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.071380" steps="12102"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.242635" steps="39168"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.193837" steps="39131"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.076123" steps="12608"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.052426" steps="12094"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.052902" steps="119"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.059620" steps="119"/></proof>
              </goal>
              <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.071763" steps="10479"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.077465" steps="133"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.067308" steps="12102"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.303232" steps="39197"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.185537" steps="39131"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.062242" steps="12612"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.087505" steps="12094"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.078107" steps="119"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.050960" steps="10481"/></proof>
            </goal>
            <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.059179" steps="10479"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="0.050898" steps="12241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.068937" steps="126"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.283647" steps="39221"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.248130" steps="1166"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.067459" steps="12616"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.070937" steps="119"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.060836" steps="119"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.079071" steps="119"/></proof>
          </goal>
          <goal name="lse6&#39;vc.1.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.073376" steps="10479"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse6&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.076572" steps="136"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.061837" steps="126"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.199433" steps="39245"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.223844" steps="39131"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.074924" steps="12620"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.027387" steps="11257"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.025808" steps="11257"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.073111" steps="119"/></proof>
        </goal>
        <goal name="lse6&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.045539" steps="10479"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse6&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.043989" steps="12275"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse6&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.045047" steps="12106"/></proof>
      </goal>
      <goal name="lse6&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.216765" steps="38850"/></proof>
      </goal>
      <goal name="lse6&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.206171" steps="1444"/></proof>
      </goal>
      <goal name="lse6&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.027301" steps="11257"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse6&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="300"><result status="valid" time="2.154593" steps="14080"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse6&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.054909" steps="12295"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse6&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.057161" steps="12337"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lse7&#39;vc" expl="VC for lse7" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse7&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="30"><result status="valid" time="3.971297" steps="15241"/></proof>
  </goal>
  <goal name="lse7&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t =
  log
  ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5))
    +. exp (to_real x6))
   +. exp (to_real x7))
in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                           +. eps)
                          +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="lse7&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7)))
&lt;=. ((abs
      (log
       ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5))
         +. exp (to_real x6))
        +. exp (to_real x7)))
      *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                           +. eps)
                          +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="lse7&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7)))
&lt;=. ((log_error
      *. abs
         (log
          ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
              +. exp (to_real x4))
             +. exp (to_real x5))
            +. exp (to_real x6))
           +. exp (to_real x7))))
     +. (((-. log
              (1.0
               -. (((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                              +. eps)
                             +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     *. ((((((exp (to_real x1) +. exp (to_real x2))
                             +. exp (to_real x3))
                            +. exp (to_real x4))
                           +. exp (to_real x5))
                          +. exp (to_real x6))
                         +. exp (to_real x7)))
                    +. 0.0)
                   /. ((((((exp (to_real x1) +. exp (to_real x2))
                           +. exp (to_real x3))
                          +. exp (to_real x4))
                         +. exp (to_real x5))
                        +. exp (to_real x6))
                       +. exp (to_real x7)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="lse7&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="(((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 ++. exp_approx x6)
++. exp_approx x7">
      <goal name="lse7&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real
 ((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
    ++. exp_approx x5)
   ++. exp_approx x6)
  ++. exp_approx x7)
 -. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7)))
&lt;=. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
             +. exp (to_real x4))
            +. exp (to_real x5))
           +. exp (to_real x6))
          +. exp (to_real x7)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
       <goal name="lse7&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 ++. exp_approx x5)
++. exp_approx x6,exp_approx x7">
        <goal name="lse7&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real
 (((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 -. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))
          +. exp (to_real x6)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
         <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
++. exp_approx x5,exp_approx x6">
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real
 ((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 -. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
           <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4,exp_approx x5">
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
             <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
               <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
                 <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.046060" steps="12208"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.056148" steps="12208"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.347730" steps="41071"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.317501" steps="41071"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                  <proof prover="1"><result status="valid" time="0.025552" steps="11408"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.066333" steps="123"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                  <proof prover="1"><result status="valid" time="0.038180" steps="11408"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.060286" steps="123"/></proof>
                  </goal>
                  <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.064650" steps="123"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="5"><result status="valid" time="0.073901" steps="12311"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.057658" steps="12208"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.285297" steps="1286"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.237348" steps="41071"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.057099" steps="12746"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.059364" steps="12200"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.054949" steps="10544"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.061754" steps="123"/></proof>
                </goal>
                <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="0.039393" steps="11404"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="5"><result status="valid" time="0.054752" steps="12329"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.072349" steps="12208"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.205404" steps="41137"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.309694" steps="41071"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.073471" steps="12750"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.061837" steps="123"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.087452" steps="18765"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.081222" steps="18765"/></proof>
              </goal>
              <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.062896" steps="10542"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.066379" steps="140"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.061990" steps="130"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.236644" steps="41161"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.278592" steps="1246"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.055580" steps="123"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.044165" steps="12200"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.027000" steps="11408"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.047920" steps="10544"/></proof>
            </goal>
            <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.079433" steps="123"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.024752" steps="11809"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.102187" steps="130"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.231192" steps="41185"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.207150" steps="41071"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.075200" steps="123"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.056796" steps="12200"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.091570" steps="18765"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.071037" steps="10544"/></proof>
          </goal>
          <goal name="lse7&#39;vc.1.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.030309" steps="11404"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse7&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.026441" steps="11883"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.092059" steps="130"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.230574" steps="41209"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.206052" steps="41071"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.074343" steps="12762"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.032888" steps="11408"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.053928" steps="123"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.044105" steps="10544"/></proof>
        </goal>
        <goal name="lse7&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.058631" steps="123"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse7&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.042081" steps="12399"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse7&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.049811" steps="12212"/></proof>
      </goal>
      <goal name="lse7&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.268821" steps="986"/></proof>
      </goal>
      <goal name="lse7&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.238408" steps="1532"/></proof>
      </goal>
      <goal name="lse7&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.033881" steps="11408"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse7&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="2.312217" steps="15909"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse7&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.053597" steps="12409"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse7&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.073830" steps="12451"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lse8&#39;vc" expl="VC for lse8" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse8&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="30"><result status="valid" time="14.750247" steps="83699"/></proof>
  </goal>
  <goal name="lse8&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t =
  log
  (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6))
    +. exp (to_real x7))
   +. exp (to_real x8))
in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                             +. eps)
                            +. exp_error)
                           +. eps)
                          +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="lse8&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5))
       +. exp (to_real x6))
      +. exp (to_real x7))
     +. exp (to_real x8)))
&lt;=. ((abs
      (log
       (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))
          +. exp (to_real x6))
         +. exp (to_real x7))
        +. exp (to_real x8)))
      *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                             +. eps)
                            +. exp_error)
                           +. eps)
                          +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="lse8&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5))
       +. exp (to_real x6))
      +. exp (to_real x7))
     +. exp (to_real x8)))
&lt;=. ((log_error
      *. abs
         (log
          (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
               +. exp (to_real x4))
              +. exp (to_real x5))
             +. exp (to_real x6))
            +. exp (to_real x7))
           +. exp (to_real x8))))
     +. (((-. log
              (1.0
               -. (((((((((((((((((exp_error +. exp_error) +. eps)
                                 +. exp_error)
                                +. eps)
                               +. exp_error)
                              +. eps)
                             +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     *. (((((((exp (to_real x1) +. exp (to_real x2))
                              +. exp (to_real x3))
                             +. exp (to_real x4))
                            +. exp (to_real x5))
                           +. exp (to_real x6))
                          +. exp (to_real x7))
                         +. exp (to_real x8)))
                    +. 0.0)
                   /. (((((((exp (to_real x1) +. exp (to_real x2))
                            +. exp (to_real x3))
                           +. exp (to_real x4))
                          +. exp (to_real x5))
                         +. exp (to_real x6))
                        +. exp (to_real x7))
                       +. exp (to_real x8)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="lse8&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 ++. exp_approx x7)
++. exp_approx x8">
      <goal name="lse8&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real
 (((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
     ++. exp_approx x5)
    ++. exp_approx x6)
   ++. exp_approx x7)
  ++. exp_approx x8)
 -. (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5))
       +. exp (to_real x6))
      +. exp (to_real x7))
     +. exp (to_real x8)))
&lt;=. ((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
              +. exp (to_real x4))
             +. exp (to_real x5))
            +. exp (to_real x6))
           +. exp (to_real x7))
          +. exp (to_real x8)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
       <goal name="lse8&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 ++. exp_approx x6)
++. exp_approx x7,exp_approx x8">
        <goal name="lse8&#39;vc.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real
 ((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
    ++. exp_approx x5)
   ++. exp_approx x6)
  ++. exp_approx x7)
 -. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7)))
&lt;=. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
             +. exp (to_real x4))
            +. exp (to_real x5))
           +. exp (to_real x6))
          +. exp (to_real x7)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
         <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 ++. exp_approx x5)
++. exp_approx x6,exp_approx x7">
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real
 (((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 -. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))
          +. exp (to_real x6)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
           <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
++. exp_approx x5,exp_approx x6">
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="abs
(to_real
 ((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 -. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
             <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4,exp_approx x5">
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
               <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
                 <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
                   <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.039746" steps="12314"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.041704" steps="12314"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.289374" steps="42909"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.283578" steps="1338"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.044929" steps="12306"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.047092" steps="12306"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.070194" steps="127"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.043362" steps="10607"/></proof>
                    </goal>
                    <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.076109" steps="127"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.081306" steps="19060"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.081297" steps="18907"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.302073" steps="1379"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.262543" steps="1338"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.077966" steps="127"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.036107" steps="12306"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.074500" steps="127"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.041718" steps="10607"/></proof>
                  </goal>
                  <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.066388" steps="10605"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.066411" steps="142"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.056828" steps="136"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.294454" steps="1439"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.169822" steps="42909"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="0.066491" steps="83402"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.040353" steps="12306"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.068384" steps="10607"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.116812" steps="18898"/></proof>
                </goal>
                <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.055635" steps="127"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="5"><result status="valid" time="0.067006" steps="12453"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.056963" steps="12314"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.295847" steps="42999"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.197046" steps="42909"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.050342" steps="12892"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.035765" steps="11559"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.072921" steps="127"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.070509" steps="10607"/></proof>
              </goal>
              <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.026160" steps="11555"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="5"><result status="valid" time="0.047003" steps="12471"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.037918" steps="11571"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.271768" steps="43023"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.184306" steps="42909"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.046873" steps="12896"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.080482" steps="127"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.043004" steps="10607"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.042277" steps="10607"/></proof>
            </goal>
            <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.033114" steps="11555"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="0.039267" steps="12489"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.044025" steps="12314"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.273292" steps="43047"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.190979" steps="42909"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.049266" steps="12900"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.076368" steps="12306"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.087835" steps="18898"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.038755" steps="10607"/></proof>
          </goal>
          <goal name="lse8&#39;vc.1.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.026368" steps="11555"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse8&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="0.044666" steps="12507"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.109350" steps="18907"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.277557" steps="43071"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.202704" steps="42909"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.048543" steps="12904"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.076380" steps="127"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.042917" steps="10607"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.097255" steps="18898"/></proof>
        </goal>
        <goal name="lse8&#39;vc.1.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.068650" steps="10605"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse8&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.054865" steps="12523"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse8&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.059372" steps="12318"/></proof>
      </goal>
      <goal name="lse8&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.201401" steps="42503"/></proof>
      </goal>
      <goal name="lse8&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.373531" steps="1640"/></proof>
      </goal>
      <goal name="lse8&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.042324" steps="12306"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse8&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="2.569797" steps="18119"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse8&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.039307" steps="12523"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse8&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.053061" steps="12565"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lse10&#39;vc" expl="VC for lse10" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse10&#39;vc.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="let t = 1.0 +. eps in
let t1 =
  (((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
             +. exp_error)
            +. eps)
           +. exp_error)
          +. eps)
         +. exp_error)
        +. eps)
       +. exp_error)
      +. eps)
     +. exp_error)
    +. eps)
   +. exp_error)
  +. eps
in
let t2 =
  ((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7))
    +. exp (to_real x8))
   +. exp (to_real x9))
  +. exp (to_real x10)
in
abs (to_real s -. t2)
&lt;=. ((((t1 +. exp_error) +. eps) *. t2)
     +. (((t +. exp_error) *. 0.0) +. ((t +. t1) *. 0.0)))">
   <goal name="lse10&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real s
 -. (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5))
         +. exp (to_real x6))
        +. exp (to_real x7))
       +. exp (to_real x8))
      +. exp (to_real x9))
     +. exp (to_real x10)))
&lt;=. ((((((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                    +. exp_error)
                   +. eps)
                  +. exp_error)
                 +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
                +. exp (to_real x4))
               +. exp (to_real x5))
              +. exp (to_real x6))
             +. exp (to_real x7))
            +. exp (to_real x8))
           +. exp (to_real x9))
          +. exp (to_real x10)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                              +. eps)
                             +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
    <goal name="lse10&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
    ++. exp_approx x5)
   ++. exp_approx x6)
  ++. exp_approx x7)
 ++. exp_approx x8)
++. exp_approx x9,exp_approx x10">
     <goal name="lse10&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real
 ((((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
       ++. exp_approx x4)
      ++. exp_approx x5)
     ++. exp_approx x6)
    ++. exp_approx x7)
   ++. exp_approx x8)
  ++. exp_approx x9)
 -. ((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4))
         +. exp (to_real x5))
        +. exp (to_real x6))
       +. exp (to_real x7))
      +. exp (to_real x8))
     +. exp (to_real x9)))
&lt;=. ((((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                  +. exp_error)
                 +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
               +. exp (to_real x4))
              +. exp (to_real x5))
             +. exp (to_real x6))
            +. exp (to_real x7))
           +. exp (to_real x8))
          +. exp (to_real x9)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
      <goal name="lse10&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 ++. exp_approx x7)
++. exp_approx x8,exp_approx x9">
       <goal name="lse10&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs
(to_real
 (((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
     ++. exp_approx x5)
    ++. exp_approx x6)
   ++. exp_approx x7)
  ++. exp_approx x8)
 -. (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5))
       +. exp (to_real x6))
      +. exp (to_real x7))
     +. exp (to_real x8)))
&lt;=. ((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
              +. exp (to_real x4))
             +. exp (to_real x5))
            +. exp (to_real x6))
           +. exp (to_real x7))
          +. exp (to_real x8)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
        <goal name="lse10&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 ++. exp_approx x6)
++. exp_approx x7,exp_approx x8">
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="abs
(to_real
 ((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
    ++. exp_approx x5)
   ++. exp_approx x6)
  ++. exp_approx x7)
 -. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7)))
&lt;=. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
             +. exp (to_real x4))
            +. exp (to_real x5))
           +. exp (to_real x6))
          +. exp (to_real x7)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
          <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 ++. exp_approx x5)
++. exp_approx x6,exp_approx x7">
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="abs
(to_real
 (((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 -. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))
          +. exp (to_real x6)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
            <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
++. exp_approx x5,exp_approx x6">
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="abs
(to_real
 ((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 -. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
              <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4,exp_approx x5">
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
                <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
                  <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
                    <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.088461" steps="18576"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="6"><result status="valid" time="0.009618" steps="10919"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="0.224441" steps="41905"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="0.212250" steps="41903"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="0.056583" steps="12051"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.061885" steps="127"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.070020" steps="18567"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.059623" steps="127"/></proof>
                     </goal>
                     <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                     <proof prover="6"><result status="valid" time="0.010477" steps="10903"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.057620" steps="12185"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.074977" steps="18576"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.282412" steps="53193"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                   <proof prover="5"><result status="valid" time="0.233250" steps="41903"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.094778" steps="19151"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.004205" steps="10907"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.088599" steps="18567"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                   <proof prover="5"><result status="valid" time="0.053162" steps="10337"/></proof>
                   </goal>
                   <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                   <proof prover="5"><result status="valid" time="0.040752" steps="10335"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.049261" steps="12226"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.013017" steps="10919"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                 <proof prover="5"><result status="valid" time="0.223265" steps="41969"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                 <proof prover="5"><result status="valid" time="0.248772" steps="41903"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.046483" steps="80268"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.012529" steps="10907"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.015454" steps="10907"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.009952" steps="10907"/></proof>
                 </goal>
                 <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                 <proof prover="5"><result status="valid" time="0.054265" steps="10335"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.056878" steps="12267"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.012066" steps="10919"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.274288" steps="53248"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.269547" steps="53152"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
               <proof prover="5"><result status="valid" time="0.065294" steps="12645"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.057451" steps="127"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.008086" steps="10907"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.008088" steps="10907"/></proof>
               </goal>
               <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.010027" steps="10903"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.061009" steps="12308"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.021019" steps="10919"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.271510" steps="53273"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.267579" steps="53152"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.054346" steps="127"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.008103" steps="10907"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
             <proof prover="5"><result status="valid" time="0.046946" steps="10337"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.010030" steps="10907"/></proof>
             </goal>
             <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.080331" steps="18557"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.011818" steps="11414"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.070112" steps="18576"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="0.199615" steps="42041"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="0.206499" steps="41903"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.084296" steps="19195"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.011072" steps="10907"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.063540" steps="127"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.053541" steps="127"/></proof>
           </goal>
           <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.011269" steps="10903"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse10&#39;vc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.066343" steps="19079"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.009024" steps="10919"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="0.212295" steps="42065"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="0.209069" steps="41903"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.098622" steps="19206"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.086553" steps="18562"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.086968" steps="18567"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.008107" steps="10907"/></proof>
         </goal>
         <goal name="lse10&#39;vc.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="0.052727" steps="10335"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse10&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.008235" steps="11574"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.008110" steps="10919"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.267751" steps="53348"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.262327" steps="53152"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.103268" steps="19217"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.056691" steps="127"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.059103" steps="127"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.043673" steps="10337"/></proof>
       </goal>
       <goal name="lse10&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.081462" steps="18557"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse10&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.008464" steps="11654"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.067407" steps="133"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="5"><result status="valid" time="0.213807" steps="42113"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.265107" steps="53152"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.062947" steps="127"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="5"><result status="valid" time="0.048622" steps="12051"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.076538" steps="18567"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.073651" steps="18567"/></proof>
     </goal>
     <goal name="lse10&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.020365" steps="10903"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse10&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.012944" steps="11774"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse10&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="2" timelimit="60"><result status="valid" time="13.773994" steps="18285"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="lse10&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.021684" steps="11280"/></proof>
  </goal>
  <goal name="lse10&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t =
  log
  (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5))
       +. exp (to_real x6))
      +. exp (to_real x7))
     +. exp (to_real x8))
    +. exp (to_real x9))
   +. exp (to_real x10))
in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((((((((((exp_error +. exp_error) +. eps)
                                  +. exp_error)
                                 +. eps)
                                +. exp_error)
                               +. eps)
                              +. exp_error)
                             +. eps)
                            +. exp_error)
                           +. eps)
                          +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
   <goal name="lse10&#39;vc.2.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5))
         +. exp (to_real x6))
        +. exp (to_real x7))
       +. exp (to_real x8))
      +. exp (to_real x9))
     +. exp (to_real x10)))
&lt;=. ((abs
      (log
       (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
              +. exp (to_real x4))
             +. exp (to_real x5))
            +. exp (to_real x6))
           +. exp (to_real x7))
          +. exp (to_real x8))
         +. exp (to_real x9))
        +. exp (to_real x10)))
      *. log_error)
     +. (((-. log
              (1.0
               -. ((((((((((((((((((exp_error +. exp_error) +. eps)
                                  +. exp_error)
                                 +. eps)
                                +. exp_error)
                               +. eps)
                              +. exp_error)
                             +. eps)
                            +. exp_error)
                           +. eps)
                          +. exp_error)
                         +. eps)
                        +. exp_error)
                       +. eps)
                      +. exp_error)
                     +. eps)
                    +. exp_error)
                   +. eps)))
          *. (1.0 +. log_error))
         +. log_cst_error))">
    <goal name="lse10&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real result
 -. log
    (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5))
         +. exp (to_real x6))
        +. exp (to_real x7))
       +. exp (to_real x8))
      +. exp (to_real x9))
     +. exp (to_real x10)))
&lt;=. ((log_error
      *. abs
         (log
          (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
                 +. exp (to_real x4))
                +. exp (to_real x5))
               +. exp (to_real x6))
              +. exp (to_real x7))
             +. exp (to_real x8))
            +. exp (to_real x9))
           +. exp (to_real x10))))
     +. (((-. log
              (1.0
               -. (((((((((((((((((((((exp_error +. exp_error) +. eps)
                                     +. exp_error)
                                    +. eps)
                                   +. exp_error)
                                  +. eps)
                                 +. exp_error)
                                +. eps)
                               +. exp_error)
                              +. eps)
                             +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     *. (((((((((exp (to_real x1) +. exp (to_real x2))
                                +. exp (to_real x3))
                               +. exp (to_real x4))
                              +. exp (to_real x5))
                             +. exp (to_real x6))
                            +. exp (to_real x7))
                           +. exp (to_real x8))
                          +. exp (to_real x9))
                         +. exp (to_real x10)))
                    +. 0.0)
                   /. (((((((((exp (to_real x1) +. exp (to_real x2))
                              +. exp (to_real x3))
                             +. exp (to_real x4))
                            +. exp (to_real x5))
                           +. exp (to_real x6))
                          +. exp (to_real x7))
                         +. exp (to_real x8))
                        +. exp (to_real x9))
                       +. exp (to_real x10)))))
          *. (1.0 +. log_error))
         +. log_cst_error))">
     <goal name="lse10&#39;vc.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log_double_error_propagation" arg2="with" arg3="s">
      <goal name="lse10&#39;vc.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs
(to_real s
 -. (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5))
         +. exp (to_real x6))
        +. exp (to_real x7))
       +. exp (to_real x8))
      +. exp (to_real x9))
     +. exp (to_real x10)))
&lt;=. ((((((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                    +. exp_error)
                   +. eps)
                  +. exp_error)
                 +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
                +. exp (to_real x4))
               +. exp (to_real x5))
              +. exp (to_real x6))
             +. exp (to_real x7))
            +. exp (to_real x8))
           +. exp (to_real x9))
          +. exp (to_real x10)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                              +. eps)
                             +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
       <goal name="lse10&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
    ++. exp_approx x5)
   ++. exp_approx x6)
  ++. exp_approx x7)
 ++. exp_approx x8)
++. exp_approx x9,exp_approx x10">
        <goal name="lse10&#39;vc.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs
(to_real
 ((((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
       ++. exp_approx x4)
      ++. exp_approx x5)
     ++. exp_approx x6)
    ++. exp_approx x7)
   ++. exp_approx x8)
  ++. exp_approx x9)
 -. ((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4))
         +. exp (to_real x5))
        +. exp (to_real x6))
       +. exp (to_real x7))
      +. exp (to_real x8))
     +. exp (to_real x9)))
&lt;=. ((((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                  +. exp_error)
                 +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
               +. exp (to_real x4))
              +. exp (to_real x5))
             +. exp (to_real x6))
            +. exp (to_real x7))
           +. exp (to_real x8))
          +. exp (to_real x9)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                            +. eps)
                           +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
         <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 ++. exp_approx x7)
++. exp_approx x8,exp_approx x9">
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="abs
(to_real
 (((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
     ++. exp_approx x5)
    ++. exp_approx x6)
   ++. exp_approx x7)
  ++. exp_approx x8)
 -. (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
         +. exp (to_real x4))
        +. exp (to_real x5))
       +. exp (to_real x6))
      +. exp (to_real x7))
     +. exp (to_real x8)))
&lt;=. ((((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                +. exp_error)
               +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
              +. exp (to_real x4))
             +. exp (to_real x5))
            +. exp (to_real x6))
           +. exp (to_real x7))
          +. exp (to_real x8)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                          +. eps)
                         +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
           <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 ++. exp_approx x6)
++. exp_approx x7,exp_approx x8">
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="abs
(to_real
 ((((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
    ++. exp_approx x5)
   ++. exp_approx x6)
  ++. exp_approx x7)
 -. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
        +. exp (to_real x4))
       +. exp (to_real x5))
      +. exp (to_real x6))
     +. exp (to_real x7)))
&lt;=. ((((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
              +. exp_error)
             +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
             +. exp (to_real x4))
            +. exp (to_real x5))
           +. exp (to_real x6))
          +. exp (to_real x7)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((((exp_error +. exp_error) +. eps) +. exp_error)
                        +. eps)
                       +. exp_error)
                      +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
             <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 ++. exp_approx x5)
++. exp_approx x6,exp_approx x7">
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="abs
(to_real
 (((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
   ++. exp_approx x5)
  ++. exp_approx x6)
 -. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
       +. exp (to_real x4))
      +. exp (to_real x5))
     +. exp (to_real x6)))
&lt;=. ((((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
            +. exp_error)
           +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. (((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
            +. exp (to_real x4))
           +. exp (to_real x5))
          +. exp (to_real x6)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                     +. exp_error)
                    +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
               <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
++. exp_approx x5,exp_approx x6">
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="abs
(to_real
 ((((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
  ++. exp_approx x5)
 -. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
      +. exp (to_real x4))
     +. exp (to_real x5)))
&lt;=. ((((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
          +. exp_error)
         +. eps)
        +. exp_error)
       +. eps)
      *. ((((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
           +. exp (to_real x4))
          +. exp (to_real x5)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
                   +. exp_error)
                  +. eps))
             *. 0.0)))">
                 <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4,exp_approx x5">
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="assert" proved="true" arg1="abs
(to_real
 (((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3) ++. exp_approx x4)
 -. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
     +. exp (to_real x4)))
&lt;=. ((((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
        +. exp_error)
       +. eps)
      *. (((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3))
          +. exp (to_real x4)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps)
              +. ((((exp_error +. exp_error) +. eps) +. exp_error) +. eps))
             *. 0.0)))">
                   <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(exp_approx x1 ++. exp_approx x2) ++. exp_approx x3,exp_approx x4">
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="assert" proved="true" arg1="abs
(to_real ((exp_approx x1 ++. exp_approx x2) ++. exp_approx x3)
 -. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
&lt;=. ((((((exp_error +. exp_error) +. eps) +. exp_error) +. eps)
      *. ((exp (to_real x1) +. exp (to_real x2)) +. exp (to_real x3)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. ((exp_error +. exp_error) +. eps)) *. 0.0)))">
                     <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                     <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1 ++. exp_approx x2,exp_approx x3">
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="assert" proved="true" arg1="abs
(to_real (exp_approx x1 ++. exp_approx x2)
 -. (exp (to_real x1) +. exp (to_real x2)))
&lt;=. ((((exp_error +. exp_error) +. eps)
      *. (exp (to_real x1) +. exp (to_real x2)))
     +. ((((1.0 +. eps) +. exp_error) *. 0.0)
         +. (((1.0 +. eps) +. exp_error) *. 0.0)))">
                       <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                       <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="exp_approx x1,exp_approx x2">
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="5"><result status="valid" time="0.042349" steps="12545"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                        <proof prover="5"><result status="valid" time="0.056928" steps="12545"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                        <proof prover="5"><result status="valid" time="0.219242" steps="46923"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                        <proof prover="5"><result status="valid" time="0.195868" steps="46923"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.061342" steps="134"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.058005" steps="134"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.066660" steps="135"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="0.089558" steps="19188"/></proof>
                        </goal>
                        <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                        <proof prover="5"><result status="valid" time="0.044593" steps="10739"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="5"><result status="valid" time="0.047012" steps="12648"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.078836" steps="142"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="0.307191" steps="46960"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.255312" steps="56032"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.077197" steps="135"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.075018" steps="134"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="0.060226" steps="10741"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="0.070935" steps="10741"/></proof>
                      </goal>
                      <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.066084" steps="134"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="1"><result status="valid" time="0.028135" steps="12253"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="0.025058" steps="12012"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.312292" steps="46994"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.344589" steps="46709"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.063640" steps="135"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.061635" steps="134"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.070673" steps="10741"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.069575" steps="10741"/></proof>
                    </goal>
                    <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="0.022722" steps="11996"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="5"><result status="valid" time="0.067444" steps="12684"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.072655" steps="12545"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.272479" steps="56098"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.222649" steps="46709"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="0.060003" steps="13189"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.065166" steps="134"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.055992" steps="135"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                  <proof prover="1"><result status="valid" time="0.034853" steps="12000"/></proof>
                  </goal>
                  <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.057450" steps="134"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="5"><result status="valid" time="0.068522" steps="12702"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.068214" steps="12545"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.224172" steps="46927"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.203387" steps="46709"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.080805" steps="135"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.079598" steps="134"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="0.024029" steps="12000"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="0.025217" steps="12000"/></proof>
                </goal>
                <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="0.043592" steps="10739"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.085032" steps="150"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.028829" steps="12012"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.232913" steps="46959"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.190563" steps="46709"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.095097" steps="13197"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.061924" steps="12537"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.028516" steps="12000"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.024912" steps="12000"/></proof>
              </goal>
              <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.082381" steps="134"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="5"><result status="valid" time="0.064320" steps="12738"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.047115" steps="12545"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.221604" steps="46991"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.308089" steps="1509"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.074647" steps="13201"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.043941" steps="12537"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.063307" steps="135"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.055853" steps="10741"/></proof>
            </goal>
            <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.060895" steps="134"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="0.073453" steps="12756"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.048719" steps="12545"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.217609" steps="47023"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.374271" steps="46709"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.053977" steps="13205"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.069818" steps="12537"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="0.075765" steps="10741"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.068488" steps="135"/></proof>
          </goal>
          <goal name="lse10&#39;vc.2.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.026939" steps="11996"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="lse10&#39;vc.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="0.046991" steps="12774"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.048376" steps="12545"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.225793" steps="47055"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.263771" steps="46709"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.088904" steps="135"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.058510" steps="134"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.025109" steps="12000"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.041951" steps="10741"/></proof>
        </goal>
        <goal name="lse10&#39;vc.2.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.058125" steps="134"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="lse10&#39;vc.2.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.047098" steps="12786"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse10&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.050874" steps="12549"/></proof>
      </goal>
      <goal name="lse10&#39;vc.2.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.321259" steps="46657"/></proof>
      </goal>
      <goal name="lse10&#39;vc.2.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.339024" steps="1892"/></proof>
      </goal>
      <goal name="lse10&#39;vc.2.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.060400" steps="134"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse10&#39;vc.2.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="30"><result status="valid" time="5.511011" steps="35033"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse10&#39;vc.2.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.048452" steps="12770"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse10&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.077460" steps="12812"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.080734" steps="584"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log2 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log2_rel_error)
     +. (((-. log2 (1.0 -. eps)) *. (1.0 +. log2_rel_error))
         +. log2_abs_error))">
   <goal name="example3&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((abs (log2 (to_real x +. to_real y)) *. log2_rel_error)
     +. (((-. log2 (1.0 -. eps)) *. (1.0 +. log2_rel_error))
         +. log2_abs_error))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (to_real x +. to_real y))
&lt;=. ((log2_rel_error *. abs (log2 (to_real x +. to_real y)))
     +. (((-. log2
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log2_rel_error))
         +. log2_abs_error))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log2_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.126274" steps="815"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="0.043622" steps="11639"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.075211" steps="129"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.047124" steps="107"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="0.055204" steps="12213"/></proof>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.034758" steps="10562"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.085780" steps="172"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.065762" steps="11685"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example3&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.040691" steps="11689"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.099433" steps="584"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log10 (to_real x +. to_real y) in
abs (to_real result -. t)
&lt;=. ((abs t *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
   <goal name="example4&#39;vc.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((abs (log10 (to_real x +. to_real y)) *. log10_error)
     +. ((-. log10 (1.0 -. eps)) *. (1.0 +. log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log10 (to_real x +. to_real y))
&lt;=. ((log10_error *. abs (log10 (to_real x +. to_real y)))
     +. (((-. log10
              (1.0
               -. (((eps *. abs (to_real x +. to_real y)) +. 0.0)
                   /. (to_real x +. to_real y))))
          *. (1.0 +. log10_error))
         +. 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="log10_double_error_propagation" arg2="with" arg3="x ++. y">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (x ++. y) -. (to_real x +. to_real y))
&lt;=. (eps *. abs (to_real x +. to_real y))">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.151494" steps="810"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2" memlimit="2000"><result status="valid" time="0.056304" steps="125"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.053633" steps="129"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.067975" steps="107"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.054963" steps="106"/></proof>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2" memlimit="2000"><result status="valid" time="0.056240" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="2" memlimit="2000"><result status="valid" time="0.059401" steps="172"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="asserted formula" proved="true">
    <proof prover="2" memlimit="2000"><result status="valid" time="0.064877" steps="158"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example4&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2" memlimit="2000"><result status="valid" time="0.053458" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
