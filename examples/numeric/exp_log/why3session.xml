<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Coq" version="8.17.0" timelimit="0" steplimit="0" memlimit="0"/>
<prover id="1" name="Alt-Ergo" version="2.5.2" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="exp_log.mlw"/>
<theory name="ExpLogSingle" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.190118" steps="2206"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.336950" steps="2347"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example1&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1
(to_real (uadd (log_approx (exp_approx x)) (log_approx (exp_approx y)))
 -&#39; (log (exp (to_real x)) +&#39; log (exp (to_real y))))
&lt;=&#39; ((((log_error +&#39; log_error) +&#39; eps)
      *&#39; (abs1 (log (exp (to_real x))) +&#39; abs1 (log (exp (to_real y)))))
     +&#39; ((((1.0 +&#39; eps) +&#39; log_error)
          *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))
         +&#39; (((1.0 +&#39; eps) +&#39; log_error)
             *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((abs1 (log (exp (to_real x))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:usingle) -&gt; log_approx y0) @ exp_approx x)
 -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_single_error_propagation">
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.061496" steps="311"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.996694" steps="4345"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.228338" steps="1791"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.408416" steps="2469"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.123446" steps="303"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="1.354061" steps="7101"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="1.498916" steps="7736"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.080641" steps="335"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((abs1 (log (exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:usingle) -&gt; log_approx y0) @ exp_approx y)
 -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_single_error_propagation">
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.077855" steps="311"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.622095" steps="3825"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.306999" steps="1785"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.553788" steps="2443"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.065745" steps="303"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="1.065961" steps="5516"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="1.160574" steps="7012"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.094983" steps="335"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.062975" steps="312"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.074027" steps="312"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.060024" steps="303"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.071166" steps="303"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.274712" steps="1661"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.463417" steps="1661"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.713136" steps="6628"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.583877" steps="2775"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example2&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((abs1 (log (exp (to_real x) +&#39; exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; ((exp_error +&#39; exp_error) +&#39; eps)))
         *&#39; (1.0 +&#39; log_error)))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs1
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs1
(to_real
 ((fun (y0:usingle) -&gt; log_approx y0) @ uadd (exp_approx x) (exp_approx y))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log_single_error_propagation">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs1
(to_real (uadd (exp_approx x) (exp_approx y))
 -&#39; (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((((exp_error +&#39; exp_error) +&#39; eps)
      *&#39; (exp (to_real x) +&#39; exp (to_real y)))
     +&#39; ((((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)
         +&#39; (((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)))">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="uadd_single_error_propagation">
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.057495" steps="305"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.061349" steps="305"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.299814" steps="2172"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.288004" steps="2173"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.123703" steps="299"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.086373" steps="299"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.109054" steps="299"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.082595" steps="299"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.080731" steps="311"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.942792" steps="4368"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.342144" steps="1613"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.354279" steps="2426"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.115633" steps="299"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.917220" steps="8086"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.927899" steps="7842"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.078725" steps="342"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.306029" steps="1642"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example3&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1 (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs1 (log2 (to_real x +&#39; to_real y)) *&#39; log2_error)
     +&#39; ((-&#39; log2 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs1 (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs1 (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:usingle) -&gt; log2_approx y0) @ uadd x y)
 -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs1 (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log2_single_error_propagation">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs1 (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs1 (to_real x +&#39; to_real y))">
        <goal name="example3&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.356251" steps="2306"/></proof>
        </goal>
        <goal name="example3&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.080619" steps="314"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.532206" steps="3838"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.106187" steps="297"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.095792" steps="297"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.121467" steps="293"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="1.013995" steps="7421"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.128826" steps="358"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.084006" steps="327"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><path name="exp_log_ExpLogSingle_example4qtvc_1.v"/><undone/></proof>
  <proof prover="1"><result status="valid" time="0.336245" steps="1642"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example4&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1 (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs1 (log10 (to_real x +&#39; to_real y)) *&#39; log10_error)
     +&#39; ((-&#39; log10 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs1 (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs1 (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:usingle) -&gt; log10_approx y0) @ uadd x y)
 -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs1 (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log10_single_error_propagation">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs1 (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs1 (to_real x +&#39; to_real y))">
        <goal name="example4&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.309272" steps="2306"/></proof>
        </goal>
        <goal name="example4&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.075903" steps="314"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.551959" steps="3837"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.121453" steps="297"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.108044" steps="297"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.132911" steps="293"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.784698" steps="7419"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.124683" steps="358"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.126176" steps="327"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExpLogDouble" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.235536" steps="2205"/></proof>
  </goal>
  <goal name="example1&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.252651" steps="2348"/></proof>
  </goal>
  <goal name="example1&#39;vc.2" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example1&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1
(to_real (uadd (log_approx (exp_approx x)) (log_approx (exp_approx y)))
 -&#39; (log (exp (to_real x)) +&#39; log (exp (to_real y))))
&lt;=&#39; ((((log_error +&#39; log_error) +&#39; eps)
      *&#39; (abs1 (log (exp (to_real x))) +&#39; abs1 (log (exp (to_real y)))))
     +&#39; ((((1.0 +&#39; eps) +&#39; log_error)
          *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))
         +&#39; (((1.0 +&#39; eps) +&#39; log_error)
             *&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))))">
    <goal name="example1&#39;vc.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation">
     <goal name="example1&#39;vc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((abs1 (log (exp (to_real x))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx x)) -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:udouble) -&gt; log_approx y0) @ exp_approx x)
 -&#39; log (exp (to_real x)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real x)) +&#39; 0.0) / exp (to_real x))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_double_error_propagation">
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.080742" steps="311"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.973676" steps="4345"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.254293" steps="1791"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.497845" steps="2469"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.143171" steps="303"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="1.504336" steps="7186"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="1.316065" steps="7695"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.095807" steps="335"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((abs1 (log (exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; exp_error)) *&#39; (1.0 +&#39; log_error)))">
      <goal name="example1&#39;vc.2.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs1 (to_real (log_approx (exp_approx y)) -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
       <goal name="example1&#39;vc.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:udouble) -&gt; log_approx y0) @ exp_approx y)
 -&#39; log (exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((exp_error *&#39; exp (to_real y)) +&#39; 0.0) / exp (to_real y))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
        <goal name="example1&#39;vc.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="log_double_error_propagation">
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.099743" steps="311"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.784027" steps="3823"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.385541" steps="1786"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.588510" steps="2429"/></proof>
         </goal>
         <goal name="example1&#39;vc.2.0.0.1.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.090082" steps="303"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example1&#39;vc.2.0.0.1.0.0.1" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.995417" steps="5521"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.2.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="1.098279" steps="6987"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.092564" steps="335"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.096303" steps="312"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.089619" steps="312"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.087561" steps="303"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.5" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.095017" steps="303"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.6" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.305458" steps="1660"/></proof>
     </goal>
     <goal name="example1&#39;vc.2.0.0.7" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.319404" steps="1660"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.031708" steps="6645"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.302408" steps="2769"/></proof>
  </goal>
  <goal name="example2&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example2&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((abs1 (log (exp (to_real x) +&#39; exp (to_real y))) *&#39; log_error)
     +&#39; ((-&#39; log (1.0 -&#39; ((exp_error +&#39; exp_error) +&#39; eps)))
         *&#39; (1.0 +&#39; log_error)))">
    <goal name="example2&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs1
(to_real (log_approx (uadd (exp_approx x) (exp_approx y)))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
     <goal name="example2&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs1
(to_real
 ((fun (y0:udouble) -&gt; log_approx y0) @ uadd (exp_approx x) (exp_approx y))
 -&#39; log (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((log_error *&#39; abs1 (log (exp (to_real x) +&#39; exp (to_real y))))
     +&#39; (((-&#39; log
              (1.0
               -&#39; (((((exp_error +&#39; exp_error) +&#39; eps)
                     *&#39; (exp (to_real x) +&#39; exp (to_real y)))
                    +&#39; 0.0)
                   / (exp (to_real x) +&#39; exp (to_real y)))))
          *&#39; (1.0 +&#39; log_error))
         +&#39; 0.0))">
      <goal name="example2&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log_double_error_propagation">
       <goal name="example2&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs1
(to_real (uadd (exp_approx x) (exp_approx y))
 -&#39; (exp (to_real x) +&#39; exp (to_real y)))
&lt;=&#39; ((((exp_error +&#39; exp_error) +&#39; eps)
      *&#39; (exp (to_real x) +&#39; exp (to_real y)))
     +&#39; ((((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)
         +&#39; (((1.0 +&#39; eps) +&#39; exp_error) *&#39; 0.0)))">
        <goal name="example2&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="uadd_double_error_propagation">
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.076778" steps="305"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.073663" steps="305"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.340692" steps="2174"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.398454" steps="2173"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.102792" steps="299"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.102387" steps="299"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.6" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.132213" steps="299"/></proof>
         </goal>
         <goal name="example2&#39;vc.1.0.0.0.0.0.0.7" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.085597" steps="299"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.130088" steps="311"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.630637" steps="4310"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.279387" steps="1614"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.411597" steps="2426"/></proof>
       </goal>
       <goal name="example2&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.128354" steps="299"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.896763" steps="8080"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.813107" steps="7820"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.079728" steps="342"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example3&#39;vc" expl="VC for example3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.174745" steps="1642"/></proof>
  </goal>
  <goal name="example3&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example3&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1 (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs1 (log2 (to_real x +&#39; to_real y)) *&#39; log2_error)
     +&#39; ((-&#39; log2 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log2_error)))">
    <goal name="example3&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs1 (to_real (log2_approx (uadd x y)) -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs1 (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
     <goal name="example3&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:udouble) -&gt; log2_approx y0) @ uadd x y)
 -&#39; log2 (to_real x +&#39; to_real y))
&lt;=&#39; ((log2_error *&#39; abs1 (log2 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log2
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log2_error))
         +&#39; 0.0))">
      <goal name="example3&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log2_double_error_propagation">
       <goal name="example3&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs1 (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs1 (to_real x +&#39; to_real y))">
        <goal name="example3&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.331643" steps="2315"/></proof>
        </goal>
        <goal name="example3&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.087766" steps="314"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.568828" steps="3836"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.079950" steps="297"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.134267" steps="297"/></proof>
       </goal>
       <goal name="example3&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.088977" steps="293"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example3&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.786680" steps="7405"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example3&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.137954" steps="358"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example3&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.114537" steps="327"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example4&#39;vc" expl="VC for example4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example4&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.160185" steps="1642"/></proof>
  </goal>
  <goal name="example4&#39;vc.1" expl="postcondition" proved="true">
  <transf name="inline_trivial" proved="true" >
   <goal name="example4&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="abs1 (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((abs1 (log10 (to_real x +&#39; to_real y)) *&#39; log10_error)
     +&#39; ((-&#39; log10 (1.0 -&#39; eps)) *&#39; (1.0 +&#39; log10_error)))">
    <goal name="example4&#39;vc.1.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs1 (to_real (log10_approx (uadd x y)) -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs1 (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
     <goal name="example4&#39;vc.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs1
(to_real ((fun (y0:udouble) -&gt; log10_approx y0) @ uadd x y)
 -&#39; log10 (to_real x +&#39; to_real y))
&lt;=&#39; ((log10_error *&#39; abs1 (log10 (to_real x +&#39; to_real y)))
     +&#39; (((-&#39; log10
              (1.0
               -&#39; (((eps *&#39; abs1 (to_real x +&#39; to_real y)) +&#39; 0.0)
                   / (to_real x +&#39; to_real y))))
          *&#39; (1.0 +&#39; log10_error))
         +&#39; 0.0))">
      <goal name="example4&#39;vc.1.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log10_double_error_propagation">
       <goal name="example4&#39;vc.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs1 (to_real (uadd x y) -&#39; (to_real x +&#39; to_real y))
&lt;=&#39; (eps *&#39; abs1 (to_real x +&#39; to_real y))">
        <goal name="example4&#39;vc.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.301911" steps="2306"/></proof>
        </goal>
        <goal name="example4&#39;vc.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.085975" steps="314"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.526669" steps="3851"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.093129" steps="297"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.129858" steps="297"/></proof>
       </goal>
       <goal name="example4&#39;vc.1.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.080251" steps="293"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example4&#39;vc.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.811065" steps="7406"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example4&#39;vc.1.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.130393" steps="358"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example4&#39;vc.1.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.118761" steps="327"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
