<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="6" name="Alt-Ergo" version="2.5.2" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml">
<path name=".."/><path name="multiplication.mlw"/>
<theory name="MultiplicationSingle">
 <goal name="multiplication_errors_basic&#39;vc" expl="VC for multiplication_errors_basic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplication_errors_basic&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs (to_real result -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a *. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
   <goal name="multiplication_errors_basic&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a *. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="multiplication_errors_basic&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="a **. b,c">
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (a **. b) -. (to_real a *. to_real b))
&lt;=. ((eps *. abs (to_real a *. to_real b)) +. eta)">
      <goal name="multiplication_errors_basic&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.101710" steps="1025"/></proof>
      </goal>
      <goal name="multiplication_errors_basic&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.043840" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.025480" steps="95"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.059218" steps="107"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.042385" steps="98"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.037908" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.041485" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.047739" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.042934" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.048612" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplication_errors_basic&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.081742" steps="572"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="multiplication_errors_basic&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.045724" steps="238"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="multiplication_errors&#39;vc" expl="VC for multiplication_errors">
 <transf name="split_vc" >
  <goal name="multiplication_errors&#39;vc.0" expl="postcondition">
  <transf name="assert" arg1="abs
(to_real result
 -. (((to_real a *. to_real b) *. to_real c)
     *. (to_real d *. (to_real e *. to_real f))))
&lt;=. (((eps
       +. ((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
            +. ((eps +. (eps *. (1.0 +. eps)))
                *. (eps +. (eps *. (1.0 +. eps)))))
           *. (1.0 +. eps)))
      *. abs
         (((to_real a *. to_real b) *. to_real c)
          *. (to_real d *. (to_real e *. to_real f))))
     +. ((((((((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
              +. (((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
                  *. (eps +. (eps *. (1.0 +. eps)))))
             *. abs ((to_real a *. to_real b) *. to_real c))
            +. ((((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                 +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                     *. (eps +. (eps *. (1.0 +. eps)))))
                *. abs (to_real d *. (to_real e *. to_real f))))
           +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
               *. ((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)))
          *. (1.0 +. eps))
         +. eta))">
   <goal name="multiplication_errors&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a *. to_real b) *. to_real c)
     *. (to_real d *. (to_real e *. to_real f))))
&lt;=. (((eps
       +. ((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
            +. ((eps +. (eps *. (1.0 +. eps)))
                *. (eps +. (eps *. (1.0 +. eps)))))
           *. (1.0 +. eps)))
      *. (abs ((to_real a *. to_real b) *. to_real c)
          *. abs (to_real d *. (to_real e *. to_real f))))
     +. ((((((((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
              +. (((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
                  *. (eps +. (eps *. (1.0 +. eps)))))
             *. abs ((to_real a *. to_real b) *. to_real c))
            +. ((((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                 +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                     *. (eps +. (eps *. (1.0 +. eps)))))
                *. abs (to_real d *. (to_real e *. to_real f))))
           +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
               *. ((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="multiplication_errors&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="(a **. b) **. c,d **. (e **. f)">
     <goal name="multiplication_errors&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a **. b) **. c) -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a *. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="multiplication_errors&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a **. b) **. c) -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a *. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="a **. b,c">
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a **. b) -. (to_real a *. to_real b))
&lt;=. ((eps *. abs (to_real a *. to_real b)) +. eta)">
         <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.111707" steps="1032"/></proof>
         </goal>
         <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.060531" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.049510" steps="95"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.067920" steps="107"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.044115" steps="98"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.063851" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.062472" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.059771" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.053884" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.049413" steps="90"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplication_errors&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.100981" steps="569"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplication_errors&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.062134" steps="236"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (d **. (e **. f)) -. (to_real d *. (to_real e *. to_real f)))
&lt;=. (((eps +. (((0.0 +. eps) +. (0.0 *. eps)) *. (1.0 +. eps)))
      *. abs (to_real d *. (to_real e *. to_real f)))
     +. ((((((eta +. (eta *. 0.0)) *. abs (to_real d))
            +. ((0.0 +. (0.0 *. eps)) *. abs (to_real e *. to_real f)))
           +. (0.0 *. eta))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="multiplication_errors&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (d **. (e **. f)) -. (to_real d *. (to_real e *. to_real f)))
&lt;=. (((eps +. (((0.0 +. eps) +. (0.0 *. eps)) *. (1.0 +. eps)))
      *. (abs (to_real d) *. abs (to_real e *. to_real f)))
     +. ((((((eta +. (eta *. 0.0)) *. abs (to_real d))
            +. ((0.0 +. (0.0 *. eps)) *. abs (to_real e *. to_real f)))
           +. (0.0 *. eta))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="d,e **. f">
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.065095" steps="95"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (e **. f) -. (to_real e *. to_real f))
&lt;=. ((eps *. abs (to_real e *. to_real f)) +. eta)">
         <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.143874" steps="1033"/></proof>
         </goal>
         <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.053765" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.036410" steps="98"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.053566" steps="107"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.058508" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.031491" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.041118" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.037568" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.037902" steps="90"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplication_errors&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.090298" steps="583"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplication_errors&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.066549" steps="236"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.058343" steps="107"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.049712" steps="107"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.050114" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.044948" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.048892" steps="96"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.059596" steps="96"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.053434" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplication_errors&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="2.627953" steps="5323"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="multiplication_errors&#39;vc.0.1" expl="postcondition">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="MultiplicationDouble">
 <goal name="multiplication_errors_basic&#39;vc" expl="VC for multiplication_errors_basic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiplication_errors_basic&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="abs (to_real result -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a *. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
   <goal name="multiplication_errors_basic&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a *. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="multiplication_errors_basic&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="a **. b,c">
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (a **. b) -. (to_real a *. to_real b))
&lt;=. ((eps *. abs (to_real a *. to_real b)) +. eta)">
      <goal name="multiplication_errors_basic&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.109255" steps="1065"/></proof>
      </goal>
      <goal name="multiplication_errors_basic&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.058119" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.045090" steps="95"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.069292" steps="107"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.044329" steps="98"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.059391" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.029464" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.030989" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.040973" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors_basic&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.039577" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplication_errors_basic&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.095404" steps="569"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="multiplication_errors_basic&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.058054" steps="240"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="multiplication_errors&#39;vc" expl="VC for multiplication_errors">
 <transf name="split_vc" >
  <goal name="multiplication_errors&#39;vc.0" expl="postcondition">
  <transf name="assert" arg1="abs
(to_real result
 -. (((to_real a *. to_real b) *. to_real c)
     *. (to_real d *. (to_real e *. to_real f))))
&lt;=. (((eps
       +. ((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
            +. ((eps +. (eps *. (1.0 +. eps)))
                *. (eps +. (eps *. (1.0 +. eps)))))
           *. (1.0 +. eps)))
      *. abs
         (((to_real a *. to_real b) *. to_real c)
          *. (to_real d *. (to_real e *. to_real f))))
     +. ((((((((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
              +. (((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
                  *. (eps +. (eps *. (1.0 +. eps)))))
             *. abs ((to_real a *. to_real b) *. to_real c))
            +. ((((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                 +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                     *. (eps +. (eps *. (1.0 +. eps)))))
                *. abs (to_real d *. (to_real e *. to_real f))))
           +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
               *. ((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)))
          *. (1.0 +. eps))
         +. eta))">
   <goal name="multiplication_errors&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a *. to_real b) *. to_real c)
     *. (to_real d *. (to_real e *. to_real f))))
&lt;=. (((eps
       +. ((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
            +. ((eps +. (eps *. (1.0 +. eps)))
                *. (eps +. (eps *. (1.0 +. eps)))))
           *. (1.0 +. eps)))
      *. (abs ((to_real a *. to_real b) *. to_real c)
          *. abs (to_real d *. (to_real e *. to_real f))))
     +. ((((((((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
              +. (((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)
                  *. (eps +. (eps *. (1.0 +. eps)))))
             *. abs ((to_real a *. to_real b) *. to_real c))
            +. ((((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                 +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
                     *. (eps +. (eps *. (1.0 +. eps)))))
                *. abs (to_real d *. (to_real e *. to_real f))))
           +. (((((1.0 +. eps) *. eta) *. abs (to_real c)) +. eta)
               *. ((((1.0 +. eps) *. eta) *. abs (to_real d)) +. eta)))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="multiplication_errors&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="(a **. b) **. c,d **. (e **. f)">
     <goal name="multiplication_errors&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a **. b) **. c) -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a *. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="multiplication_errors&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a **. b) **. c) -. ((to_real a *. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a *. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a *. to_real b))
            +. ((eta +. (eta *. 0.0)) *. abs (to_real c)))
           +. (eta *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="a **. b,c">
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a **. b) -. (to_real a *. to_real b))
&lt;=. ((eps *. abs (to_real a *. to_real b)) +. eta)">
         <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.135311" steps="1049"/></proof>
         </goal>
         <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.055526" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.046034" steps="95"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.051672" steps="107"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.057663" steps="98"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.047249" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.070426" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.064477" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.070725" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.050968" steps="90"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplication_errors&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.178455" steps="569"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplication_errors&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.092151" steps="238"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (d **. (e **. f)) -. (to_real d *. (to_real e *. to_real f)))
&lt;=. (((eps +. (((0.0 +. eps) +. (0.0 *. eps)) *. (1.0 +. eps)))
      *. abs (to_real d *. (to_real e *. to_real f)))
     +. ((((((eta +. (eta *. 0.0)) *. abs (to_real d))
            +. ((0.0 +. (0.0 *. eps)) *. abs (to_real e *. to_real f)))
           +. (0.0 *. eta))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="multiplication_errors&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real (d **. (e **. f)) -. (to_real d *. (to_real e *. to_real f)))
&lt;=. (((eps +. (((0.0 +. eps) +. (0.0 *. eps)) *. (1.0 +. eps)))
      *. (abs (to_real d) *. abs (to_real e *. to_real f)))
     +. ((((((eta +. (eta *. 0.0)) *. abs (to_real d))
            +. ((0.0 +. (0.0 *. eps)) *. abs (to_real e *. to_real f)))
           +. (0.0 *. eta))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="d,e **. f">
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.042271" steps="95"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (e **. f) -. (to_real e *. to_real f))
&lt;=. ((eps *. abs (to_real e *. to_real f)) +. eta)">
         <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.168543" steps="1049"/></proof>
         </goal>
         <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.050758" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.059098" steps="98"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.046961" steps="107"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.054927" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.070657" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.044365" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.068241" steps="90"/></proof>
        </goal>
        <goal name="multiplication_errors&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.051710" steps="90"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="multiplication_errors&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.097283" steps="582"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="multiplication_errors&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.072503" steps="238"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.069092" steps="107"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.081828" steps="107"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.051085" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.044679" steps="90"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.051140" steps="96"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.065553" steps="96"/></proof>
     </goal>
     <goal name="multiplication_errors&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.044693" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="multiplication_errors&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="3.107533" steps="5275"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="multiplication_errors&#39;vc.0.1" expl="postcondition">
   <proof prover="6"><result status="timeout" time="5.000000" steps="6614"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
