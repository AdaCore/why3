<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC5" version="1.0.5" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.5.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="lse.mlw"/>
<theory name="Helpers" proved="true">
 <goal name="sum_of_fun_le_sum_of_abs_fun&#39;vc" expl="VC for sum_of_fun_le_sum_of_abs_fun" proved="true">
 <proof prover="6"><result status="valid" time="2.925459" steps="24355"/></proof>
 </goal>
 <goal name="usum_rec&#39;vc" expl="VC for usum_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="usum_rec&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.039891" steps="85"/></proof>
  </goal>
  <goal name="usum_rec&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.042781" steps="85"/></proof>
  </goal>
  <goal name="usum_rec&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="usum_rec&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.065051" steps="465"/></proof>
   </goal>
   <goal name="usum_rec&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="usum_rec&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="1.734578" steps="14579"/></proof>
    </goal>
    <goal name="usum_rec&#39;vc.2.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. (sum (real_fun f) a (b - 1) +. to_real (f @ (b - 1))))
&lt;=. (((((eps *. from_int ((b - 1) - a)) +. 0.0) +. eps)
      *. (sum (abs_real_fun f) a (b - 1) +. abs (to_real (f @ (b - 1)))))
     +. ((((1.0 +. eps) +. 0.0) *. 0.0)
         +. (((1.0 +. eps) +. (eps *. from_int ((b - 1) - a))) *. 0.0)))">
     <goal name="usum_rec&#39;vc.2.1.1.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="o1,f @ (b - 1)">
      <goal name="usum_rec&#39;vc.2.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.041909" steps="97"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.036430" steps="95"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.090702" steps="488"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.3" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.035039" steps="98"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.4" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.117020" steps="300"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.5" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.068030" steps="90"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.6" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.067337" steps="90"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.7" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.044969" steps="90"/></proof>
      </goal>
      <goal name="usum_rec&#39;vc.2.1.1.0.8" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.050071" steps="90"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="usum_rec&#39;vc.2.1.1.1" expl="postcondition" proved="true">
     <transf name="simplify_computations" proved="true" >
      <goal name="usum_rec&#39;vc.2.1.1.1.0" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="2.672211" steps="11476"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="exp_approx_pos" proved="true">
 <proof prover="6"><result status="valid" time="1.968107" steps="10903"/></proof>
 </goal>
 <goal name="sum_strictly_pos&#39;vc" expl="VC for sum_strictly_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sum_strictly_pos&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.039526" steps="85"/></proof>
  </goal>
  <goal name="sum_strictly_pos&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.040957" steps="85"/></proof>
  </goal>
  <goal name="sum_strictly_pos&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.066159" steps="355"/></proof>
  </goal>
  <goal name="sum_strictly_pos&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.482694" steps="17077"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="usum_strictly_pos&#39;vc" expl="VC for usum_strictly_pos" proved="true">
 <proof prover="6"><result status="valid" time="3.178369" steps="19008"/></proof>
 </goal>
</theory>
<theory name="LSE" proved="true">
 <goal name="exp_of_f&#39;vc" expl="VC for exp_of_f" proved="true">
 <proof prover="6"><result status="valid" time="0.034104" steps="83"/></proof>
 </goal>
 <goal name="lse&#39;vc" expl="VC for lse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lse&#39;vc.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="3.503970" steps="28093"/></proof>
  </goal>
  <goal name="lse&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.050662" steps="86"/></proof>
  </goal>
  <goal name="lse&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.124979" steps="871"/></proof>
  </goal>
  <goal name="lse&#39;vc.3" expl="precondition" proved="true">
  <proof prover="4" memlimit="2000"><result status="valid" time="0.842105" steps="124165"/></proof>
  </goal>
  <goal name="lse&#39;vc.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.039907" steps="106"/></proof>
  </goal>
  <goal name="lse&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.123882" steps="423"/></proof>
  </goal>
  <goal name="lse&#39;vc.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.047416" steps="102"/></proof>
  </goal>
  <goal name="lse&#39;vc.7" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.042235" steps="112"/></proof>
  </goal>
  <goal name="lse&#39;vc.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.049418" steps="109"/></proof>
  </goal>
  <goal name="lse&#39;vc.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.885146" steps="3619"/></proof>
  </goal>
  <goal name="lse&#39;vc.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.059057" steps="110"/></proof>
  </goal>
  <goal name="lse&#39;vc.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.817248" steps="7315"/></proof>
  </goal>
  <goal name="lse&#39;vc.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.044836" steps="121"/></proof>
  </goal>
  <goal name="lse&#39;vc.13" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = log (sum exact_f&#39; 0 n) in
abs (to_real result -. t)
&lt;=. ((abs t *. log_error)
     +. ((-. log
             (1.0
              -. (exp_error +. ((from_int n *. eps) *. (1.0 +. exp_error)))))
         *. (1.0 +. log_error)))">
   <goal name="lse&#39;vc.13.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log (sum exact_f&#39; 0 n))
&lt;=. ((abs (log (sum exact_f&#39; 0 n)) *. log_error)
     +. ((-. log
             (1.0
              -. (exp_error +. ((from_int n *. eps) *. (1.0 +. exp_error)))))
         *. (1.0 +. log_error)))">
    <goal name="lse&#39;vc.13.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log (sum exact_f&#39; 0 n))
&lt;=. ((log_error *. abs (log (sum exact_f&#39; 0 n)))
     +. (((-. log
              (1.0
               -. ((((exp_error
                      +. ((from_int n *. eps) *. (1.0 +. exp_error)))
                     *. sum exact_f&#39; 0 n)
                    +. 0.0)
                   /. sum exact_f&#39; 0 n)))
          *. (1.0 +. log_error))
         +. 0.0))">
     <goal name="lse&#39;vc.13.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; log_approx y0) @ s) -. log (sum exact_f&#39; 0 n))
&lt;=. ((log_error *. abs (log (sum exact_f&#39; 0 n)))
     +. (((-. log
              (1.0
               -. ((((exp_error
                      +. ((from_int n *. eps) *. (1.0 +. exp_error)))
                     *. sum exact_f&#39; 0 n)
                    +. 0.0)
                   /. sum exact_f&#39; 0 n)))
          *. (1.0 +. log_error))
         +. 0.0))">
      <goal name="lse&#39;vc.13.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log_single_error_propagation">
       <goal name="lse&#39;vc.13.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.053966" steps="135"/></proof>
       </goal>
       <goal name="lse&#39;vc.13.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.301596" steps="1765"/></proof>
       </goal>
       <goal name="lse&#39;vc.13.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.089065" steps="127"/></proof>
       </goal>
       <goal name="lse&#39;vc.13.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="2.183020" steps="12921"/></proof>
       </goal>
       <goal name="lse&#39;vc.13.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.083416" steps="126"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lse&#39;vc.13.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.532156" steps="3158"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lse&#39;vc.13.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3" memlimit="2000"><result status="valid" time="0.307033" steps="3206"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="lse&#39;vc.13.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.067828" steps="182"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="lse&#39;vc.13.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.068845" steps="204"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SLSE" proved="true">
 <goal name="exact_g&#39;vc" expl="VC for exact_g" proved="true">
 <proof prover="6"><result status="valid" time="0.087981" steps="87"/></proof>
 </goal>
 <goal name="compat_order_mult1" proved="true">
 <proof prover="6"><result status="valid" time="0.082538" steps="417"/></proof>
 </goal>
 <goal name="compat_order_mult2" proved="true">
 <proof prover="6"><result status="valid" time="1.305774" steps="13447"/></proof>
 </goal>
 <goal name="g&#39;vc" expl="VC for g" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="g&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.055604" steps="121"/></proof>
  </goal>
  <goal name="g&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.043020" steps="138"/></proof>
  </goal>
  <goal name="g&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.059362" steps="114"/></proof>
  </goal>
  <goal name="g&#39;vc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.090285" steps="178"/></proof>
  </goal>
  <goal name="g&#39;vc.4" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real y in
let t1 = eps +. eps in
let t2 = to_real x +. to_real mu in
let t3 = t2 -. t in
let t4 = abs t2 +. abs t in
abs (to_real r -. (-. (t3 *. t3)))
&lt;=. (((eps +. (((t1 +. t1) +. (t1 *. t1)) *. (1.0 +. eps))) *. (t4 *. t4))
     +. eta)">
   <goal name="g&#39;vc.4.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real r
 -. (-. (((to_real x +. to_real mu) -. to_real y)
         *. ((to_real x +. to_real mu) -. to_real y))))
&lt;=. (((eps
       +. ((((eps +. eps) +. (eps +. eps)) +. ((eps +. eps) *. (eps +. eps)))
           *. (1.0 +. eps)))
      *. ((abs (to_real x +. to_real mu) +. abs (to_real y))
          *. (abs (to_real x +. to_real mu) +. abs (to_real y))))
     +. eta)">
    <goal name="g&#39;vc.4.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs
(to_real (((x ++. mu) --. y) **. ((x ++. mu) --. y))
 -. (((to_real x +. to_real mu) -. to_real y)
     *. ((to_real x +. to_real mu) -. to_real y)))
&lt;=. (((eps
       +. ((((eps +. eps) +. (eps +. eps)) +. ((eps +. eps) *. (eps +. eps)))
           *. (1.0 +. eps)))
      *. ((abs (to_real x +. to_real mu) +. abs (to_real y))
          *. (abs (to_real x +. to_real mu) +. abs (to_real y))))
     +. ((((((0.0 +. (0.0 *. (eps +. eps)))
             *. (abs (to_real x +. to_real mu) +. abs (to_real y)))
            +. ((0.0 +. (0.0 *. (eps +. eps)))
                *. (abs (to_real x +. to_real mu) +. abs (to_real y))))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
     <goal name="g&#39;vc.4.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="(x ++. mu) --. y,(x ++. mu) --. y">
      <goal name="g&#39;vc.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((x ++. mu) --. y) -. ((to_real x +. to_real mu) -. to_real y))
&lt;=. ((((eps +. 0.0) +. eps)
      *. (abs (to_real x +. to_real mu) +. abs (to_real y)))
     +. ((((1.0 +. eps) +. 0.0) *. 0.0) +. (((1.0 +. eps) +. eps) *. 0.0)))">
       <goal name="g&#39;vc.4.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="usub_single_error_propagation" arg2="with" arg3="x ++. mu,y">
        <goal name="g&#39;vc.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (x ++. mu) -. (to_real x +. to_real mu))
&lt;=. (eps *. abs (to_real x +. to_real mu))">
         <goal name="g&#39;vc.4.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.780318" steps="2394"/></proof>
         </goal>
         <goal name="g&#39;vc.4.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.193850" steps="158"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.064217" steps="117"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.105600" steps="124"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.058223" steps="125"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.068985" steps="111"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.102902" steps="111"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.080201" steps="111"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.066305" steps="111"/></proof>
        </goal>
        <goal name="g&#39;vc.4.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.073474" steps="111"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="g&#39;vc.4.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.129753" steps="229"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="3.742346" steps="21966"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.202963" steps="208"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.176685" steps="208"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.167771" steps="111"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.5" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.089433" steps="111"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.6" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.089957" steps="111"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.7" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.061538" steps="111"/></proof>
      </goal>
      <goal name="g&#39;vc.4.0.0.0.8" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.071696" steps="111"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="g&#39;vc.4.0.0.1" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="1.104810" steps="137480"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="g&#39;vc.4.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.592285" steps="617"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="g&#39;vc.4.1" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.604713" steps="823"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="g&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.055939" steps="120"/></proof>
  </goal>
  <goal name="g&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.270899" steps="35029"/></proof>
  </goal>
  <goal name="g&#39;vc.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.408487" steps="36237"/></proof>
  </goal>
  <goal name="g&#39;vc.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t1 = exp ((-. (tt *. tt)) /. 2.0) in
abs (to_real result -. t1)
&lt;=. (t1
     *. (exp_error
         +. ((exp (((a_eps *. t&#39;) *. t&#39;) +. (1.5 *. eta)) -. 1.0)
             *. (1.0 +. exp_error))))">
   <goal name="g&#39;vc.8.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. exp ((-. (tt *. tt)) /. 2.0))
&lt;=. (exp ((-. (tt *. tt)) /. 2.0)
     *. (exp_error
         +. ((exp (((a_eps *. t&#39;) *. t&#39;) +. (1.5 *. eta)) -. 1.0)
             *. (1.0 +. exp_error))))">
    <goal name="g&#39;vc.8.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. exp ((-. (tt *. tt)) /. 2.0))
&lt;=. (((exp_error
       +. ((exp ((0.0 *. 0.0) +. (((a_eps *. t&#39;) *. t&#39;) +. (1.5 *. eta)))
            -. 1.0)
           *. (1.0 +. exp_error)))
      *. exp ((-. (tt *. tt)) /. 2.0))
     +. 0.0)">
     <goal name="g&#39;vc.8.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; exp_approx y0) @ r&#39;)
 -. exp ((-. (tt *. tt)) /. 2.0))
&lt;=. (((exp_error
       +. ((exp ((0.0 *. 0.0) +. (((a_eps *. t&#39;) *. t&#39;) +. (1.5 *. eta)))
            -. 1.0)
           *. (1.0 +. exp_error)))
      *. exp ((-. (tt *. tt)) /. 2.0))
     +. 0.0)">
      <goal name="g&#39;vc.8.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="exp_single_error_propagation">
       <goal name="g&#39;vc.8.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.086407" steps="153"/></proof>
       </goal>
       <goal name="g&#39;vc.8.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.687526" steps="3699"/></proof>
       </goal>
       <goal name="g&#39;vc.8.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(forall x. x *. x &gt;=. 0.)">
        <goal name="g&#39;vc.8.0.0.0.0.2.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.071126" steps="136"/></proof>
        </goal>
        <goal name="g&#39;vc.8.0.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.276081" steps="732"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="g&#39;vc.8.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.124198" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="g&#39;vc.8.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.886950" steps="4367"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="g&#39;vc.8.0.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.103241" steps="180"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="g&#39;vc.8.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.095114" steps="175"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="g&#39;vc.8.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.798095" steps="3740"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="g&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.363005" steps="752"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="exact_f&#39;vc" expl="VC for exact_f" proved="true">
 <proof prover="6"><result status="valid" time="0.040584" steps="87"/></proof>
 </goal>
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="f&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.177839" steps="1385"/></proof>
  </goal>
  <goal name="f&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.227294" steps="1430"/></proof>
  </goal>
  <goal name="f&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.049745" steps="101"/></proof>
  </goal>
  <goal name="f&#39;vc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.096148" steps="92"/></proof>
  </goal>
  <goal name="f&#39;vc.4" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(g&#39; i = g (a i1) (a i) mu)">
   <goal name="f&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.091393" steps="620"/></proof>
   </goal>
   <goal name="f&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.194655" steps="1906"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="f&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.577782" steps="160060"/></proof>
  </goal>
  <goal name="f&#39;vc.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.068996" steps="113"/></proof>
  </goal>
  <goal name="f&#39;vc.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.115127" steps="509"/></proof>
  </goal>
  <goal name="f&#39;vc.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.061939" steps="109"/></proof>
  </goal>
  <goal name="f&#39;vc.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.053661" steps="111"/></proof>
  </goal>
  <goal name="f&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.119349" steps="130563"/></proof>
  </goal>
  <goal name="f&#39;vc.11" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="exact_f">
   <goal name="f&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="exact_g&#39;" arg2="(fun (j:int) -&gt; exact_g (a @ i) (a @ j) mu)">
    <goal name="f&#39;vc.11.0.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.051147" steps="112"/></proof>
    </goal>
    <goal name="f&#39;vc.11.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.021354" steps="9634"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="f&#39;vc.12" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.066996" steps="129"/></proof>
  </goal>
  <goal name="f&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="f&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.169293" steps="934"/></proof>
   </goal>
   <goal name="f&#39;vc.13.1" expl="VC for f" proved="true">
   <proof prover="6"><result status="valid" time="0.170570" steps="941"/></proof>
   </goal>
   <goal name="f&#39;vc.13.2" expl="VC for f" proved="true">
   <proof prover="6"><result status="valid" time="2.849907" steps="20531"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="f&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.017614" steps="9774"/></proof>
  </goal>
  <goal name="f&#39;vc.15" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = from_int n in
let t1 = sum exact_g&#39; 0 n in
let t2 = eps *. t in
let t3 = log2 t1 in
abs (to_real result -. t3)
&lt;=. ((abs t3 *. log2_error)
     +. ((-. log2
             (1.0
              -. ((g_error +. (t2 *. (1.0 +. g_error)))
                  +. ((((0.0 *. t) *. (1.0 +. t2)) +. 0.0) /. t1))))
         *. (1.0 +. log2_error)))">
   <goal name="f&#39;vc.15.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (sum exact_g&#39; 0 n))
&lt;=. ((abs (log2 (sum exact_g&#39; 0 n)) *. log2_error)
     +. ((-. log2
             (1.0
              -. ((g_error +. ((eps *. from_int n) *. (1.0 +. g_error)))
                  +. ((((0.0 *. from_int n) *. (1.0 +. (eps *. from_int n)))
                       +. 0.0)
                      /. sum exact_g&#39; 0 n))))
         *. (1.0 +. log2_error)))">
    <goal name="f&#39;vc.15.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="abs (to_real result -. log2 (sum exact_g&#39; 0 n))
&lt;=. ((log2_error *. abs (log2 (sum exact_g&#39; 0 n)))
     +. (((-. log2
              (1.0
               -. ((((g_error +. ((eps *. from_int n) *. (1.0 +. g_error)))
                     *. sum exact_g&#39; 0 n)
                    +. (((0.0 *. from_int n) *. (1.0 +. (eps *. from_int n)))
                        +. 0.0))
                   /. sum exact_g&#39; 0 n)))
          *. (1.0 +. log2_error))
         +. 0.0))">
     <goal name="f&#39;vc.15.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((fun (y0:usingle) -&gt; log2_approx y0) @ s)
 -. log2 (sum exact_g&#39; 0 n))
&lt;=. ((log2_error *. abs (log2 (sum exact_g&#39; 0 n)))
     +. (((-. log2
              (1.0
               -. ((((g_error +. ((eps *. from_int n) *. (1.0 +. g_error)))
                     *. sum exact_g&#39; 0 n)
                    +. (((0.0 *. from_int n) *. (1.0 +. (eps *. from_int n)))
                        +. 0.0))
                   /. sum exact_g&#39; 0 n)))
          *. (1.0 +. log2_error))
         +. 0.0))">
      <goal name="f&#39;vc.15.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="log2_single_error_propagation">
       <goal name="f&#39;vc.15.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.073530" steps="130"/></proof>
       </goal>
       <goal name="f&#39;vc.15.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.511079" steps="4121"/></proof>
       </goal>
       <goal name="f&#39;vc.15.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.077742" steps="133"/></proof>
       </goal>
       <goal name="f&#39;vc.15.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.110993" steps="124"/></proof>
       </goal>
       <goal name="f&#39;vc.15.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.062356" steps="124"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="f&#39;vc.15.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.970663" steps="8786"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="f&#39;vc.15.0.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.935824" steps="7530"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="f&#39;vc.15.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.127985" steps="255"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="f&#39;vc.15.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.121523" steps="245"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="slse&#39;vc" expl="VC for slse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="slse&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.052990" steps="93"/></proof>
  </goal>
  <goal name="slse&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.175254" steps="1402"/></proof>
  </goal>
  <goal name="slse&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.048305" steps="93"/></proof>
  </goal>
  <goal name="slse&#39;vc.3" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(f&#39; @ i)" arg2="(f a mu n i)">
   <goal name="slse&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(exact_f&#39; @ i)" arg2="(exact_f a mu n i)">
    <goal name="slse&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(exact_f&#39;&#39; @ i)" arg2="(abs (exact_f a mu n i))">
     <goal name="slse&#39;vc.3.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="f&#39;spec">
      <goal name="slse&#39;vc.3.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.063444" steps="94"/></proof>
      </goal>
      <goal name="slse&#39;vc.3.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.193182" steps="1423"/></proof>
      </goal>
      <goal name="slse&#39;vc.3.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.060061" steps="94"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="slse&#39;vc.3.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.261927" steps="1374"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="slse&#39;vc.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.087808" steps="472"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="slse&#39;vc.3.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.111161" steps="598"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="slse&#39;vc.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.089071" steps="92"/></proof>
  </goal>
  <goal name="slse&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.380918" steps="1708"/></proof>
  </goal>
  <goal name="slse&#39;vc.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="slse&#39;vc.6.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(abs (to_real (f a mu n i) -. exact_f a mu n i) &lt;=. ((log2_error *. abs (exact_f a mu n i)) -. (log2 (1.0 -. (g_error +. ((from_int n *. eps) *. (1.0 +. g_error)))) *. (1.0 +. log2_error))))">
    <goal name="slse&#39;vc.6.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="f&#39;spec">
     <goal name="slse&#39;vc.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.054284" steps="99"/></proof>
     </goal>
     <goal name="slse&#39;vc.6.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.171944" steps="1493"/></proof>
     </goal>
     <goal name="slse&#39;vc.6.0.0.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.051309" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="slse&#39;vc.6.0.1" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.916481" steps="143806"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="slse&#39;vc.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.045184" steps="113"/></proof>
  </goal>
  <goal name="slse&#39;vc.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.152561" steps="509"/></proof>
  </goal>
  <goal name="slse&#39;vc.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.065748" steps="110"/></proof>
  </goal>
  <goal name="slse&#39;vc.10" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abs (to_real ret -. sum exact_f&#39; 0 n) &lt;=. (log2_error +. ((eps *. from_int n) *. (1.0 +. log2_error))) *. sum exact_f&#39;&#39; 0 n -. log2 (1.0 -. (g_error +. ((from_int n *. eps) *. (1.0 +. g_error)))) *. (1.0 +. log2_error) *. from_int n *. (1.0 +. (eps *. from_int n)))">
   <goal name="slse&#39;vc.10.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.056892" steps="120"/></proof>
   </goal>
   <goal name="slse&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(exact_f&#39;&#39;)" arg2="(fun (i:int) -&gt; abs (exact_f a mu n i))" arg3="in" arg4="h">
    <goal name="slse&#39;vc.10.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="exact_f&#39;" arg2="(fun (i:int) -&gt; exact_f a mu n i)" arg3="in" arg4="h">
     <goal name="slse&#39;vc.10.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
     <goal name="slse&#39;vc.10.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.053098" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="slse&#39;vc.10.1.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.405030" steps="1622"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
