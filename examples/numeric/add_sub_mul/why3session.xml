<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.4" alternative="FPA" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="Alt-Ergo" version="2.5.4" timelimit="5" steplimit="0" memlimit="2000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="add_sub_mul.mlw"/>
<theory name="AddSubMulSingle" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real d in
let t1 = to_real c in
let t2 = abs t in
let t3 = 0.0 *. 0.0 in
let t4 = eps +. eps in
let t5 = 1.0 +. eps in
let t6 = to_real a +. to_real b in
let t7 = abs t6 +. abs t1 in
abs (to_real result -. ((t6 -. t1) *. t))
&lt;=. (((eps +. (((t4 +. 0.0) +. (t4 *. 0.0)) *. t5)) *. (t7 *. t2))
     +. ((((((0.0 +. (0.0 *. t4)) *. t7) +. ((0.0 +. t3) *. t2)) +. t3) *. t5)
         +. eta))">
   <goal name="example1&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. (((to_real a +. to_real b) -. to_real c) *. to_real d))
&lt;=. (((eps
       +. ((((eps +. eps) +. 0.0) +. ((eps +. eps) *. 0.0)) *. (1.0 +. eps)))
      *. ((abs (to_real a +. to_real b) +. abs (to_real c))
          *. abs (to_real d)))
     +. ((((((0.0 +. (0.0 *. (eps +. eps)))
             *. (abs (to_real a +. to_real b) +. abs (to_real c)))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real d)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="example1&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="(a ++. b) --. c,d">
     <goal name="example1&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) --. c) -. ((to_real a +. to_real b) -. to_real c))
&lt;=. ((((eps +. 0.0) +. eps)
      *. (abs (to_real a +. to_real b) +. abs (to_real c)))
     +. ((((1.0 +. eps) +. 0.0) *. 0.0) +. (((1.0 +. eps) +. eps) *. 0.0)))">
      <goal name="example1&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="usub_single_error_propagation" arg2="with" arg3="a ++. b,c">
       <goal name="example1&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
        <goal name="example1&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.096582" steps="753"/></proof>
        </goal>
        <goal name="example1&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.051130" steps="117"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.044124" steps="91"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.068521" steps="94"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.035291" steps="92"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.033268" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.031234" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.038153" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.063135" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.057554" steps="85"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.061509" steps="156"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.043852" steps="91"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.062369" steps="121"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.049050" steps="92"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.066733" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.065989" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.053754" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.048525" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.043867" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.186345" steps="670"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.394209" steps="1524"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="determinant&#39;vc" expl="VC for determinant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="determinant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real b *. to_real c in
let t1 = to_real a *. to_real d in
let t2 = ((1.0 +. eps) +. eps) *. eta in
abs (to_real result -. (t1 -. t))
&lt;=. ((((eps +. eps) +. eps) *. (abs t1 +. abs t)) +. (t2 +. t2))">
   <goal name="determinant&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. ((to_real a *. to_real d) -. (to_real b *. to_real c)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real d) +. abs (to_real b *. to_real c)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
    <goal name="determinant&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="usub_single_error_propagation" arg2="with" arg3="a **. d,b **. c">
     <goal name="determinant&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (a **. d) -. (to_real a *. to_real d))
&lt;=. ((eps *. abs (to_real a *. to_real d)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.125800" steps="1041"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.051756" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (b **. c) -. (to_real b *. to_real c))
&lt;=. ((eps *. abs (to_real b *. to_real c)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.111470" steps="1041"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.078291" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.043207" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.044141" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.068716" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.067001" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.048144" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.062778" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.056372" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="determinant&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.067481" steps="375"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="determinant&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.057612" steps="394"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_norm&#39;vc" expl="VC for square_norm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_norm&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real c in
let t1 = to_real b in
let t2 = to_real a in
let t3 = 1.0 +. eps in
let t4 = t *. t in
let t5 = t1 *. t1 in
let t6 = t2 *. t2 in
let t7 = (eps +. eps) +. eps in
let t8 = t3 +. eps in
let t9 = t8 *. eta in
abs (to_real result -. ((t6 +. t5) +. t4))
&lt;=. ((((t7 +. eps) +. eps) *. ((abs t6 +. abs t5) +. abs t4))
     +. ((t8 *. (t9 +. t9)) +. ((t3 +. t7) *. eta)))">
   <goal name="square_norm&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a *. to_real a) +. (to_real b *. to_real b))
     +. (to_real c *. to_real c)))
&lt;=. ((((((eps +. eps) +. eps) +. eps) +. eps)
      *. ((abs (to_real a *. to_real a) +. abs (to_real b *. to_real b))
          +. abs (to_real c *. to_real c)))
     +. ((((1.0 +. eps) +. eps)
          *. ((((1.0 +. eps) +. eps) *. eta)
              +. (((1.0 +. eps) +. eps) *. eta)))
         +. (((1.0 +. eps) +. ((eps +. eps) +. eps)) *. eta)))">
    <goal name="square_norm&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(a **. a) ++. (b **. b),c **. c">
     <goal name="square_norm&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((a **. a) ++. (b **. b))
 -. ((to_real a *. to_real a) +. (to_real b *. to_real b)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real a) +. abs (to_real b *. to_real b)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
      <goal name="square_norm&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="a **. a,b **. b">
       <goal name="square_norm&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a **. a) -. (to_real a *. to_real a))
&lt;=. ((eps *. abs (to_real a *. to_real a)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.155207" steps="1136"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.046347" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (b **. b) -. (to_real b *. to_real b))
&lt;=. ((eps *. abs (to_real b *. to_real b)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.164855" steps="1136"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.066630" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.064438" steps="96"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.056631" steps="96"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.059252" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.050232" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.044623" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.049400" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.040518" steps="85"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.057341" steps="164"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (c **. c) -. (to_real c *. to_real c))
&lt;=. ((eps *. abs (to_real c *. to_real c)) +. eta)">
      <goal name="square_norm&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.140113" steps="1136"/></proof>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.052440" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.078605" steps="121"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.055868" steps="96"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.041893" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.069972" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.054893" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.037490" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.073473" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="square_norm&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.072001" steps="457"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="square_norm&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.053215" steps="290"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = 1.0 +. eps in
let t1 = eps +. (eps *. t) in
let t2 = (to_real a +. to_real b) *. to_real c in
let t3 = abs t2 in
let t4 = (t +. t1) *. eta in
abs (to_real result -. (t2 +. t2))
&lt;=. ((((t1 +. t1) +. eps) *. (t3 +. t3)) +. (t4 +. t4))">
   <goal name="example2&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a +. to_real b) *. to_real c)
     +. ((to_real a +. to_real b) *. to_real c)))
&lt;=. (((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real a +. to_real b) *. to_real c)
          +. abs ((to_real a +. to_real b) *. to_real c)))
     +. ((((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)))">
    <goal name="example2&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(a ++. b) **. c,(a ++. b) **. c">
     <goal name="example2&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.123771" steps="789"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.043863" steps="117"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.060064" steps="91"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.068035" steps="94"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.047839" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.077064" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.044650" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.042320" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.041935" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.051728" steps="85"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.087111" steps="510"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.075421" steps="159"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.113924" steps="789"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.075772" steps="117"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.049509" steps="91"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.064965" steps="94"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.054580" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.041857" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.041146" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.063986" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.053300" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.045187" steps="85"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.099733" steps="510"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.053032" steps="159"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.057548" steps="104"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.061820" steps="104"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.032188" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.046061" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.035306" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.044784" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.058143" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.044230" steps="217"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.038699" steps="236"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="AddSubMulDouble" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real d in
let t1 = to_real c in
let t2 = abs t in
let t3 = 0.0 *. 0.0 in
let t4 = eps +. eps in
let t5 = 1.0 +. eps in
let t6 = to_real a +. to_real b in
let t7 = abs t6 +. abs t1 in
abs (to_real result -. ((t6 -. t1) *. t))
&lt;=. (((eps +. (((t4 +. 0.0) +. (t4 *. 0.0)) *. t5)) *. (t7 *. t2))
     +. ((((((0.0 +. (0.0 *. t4)) *. t7) +. ((0.0 +. t3) *. t2)) +. t3) *. t5)
         +. eta))">
   <goal name="example1&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. (((to_real a +. to_real b) -. to_real c) *. to_real d))
&lt;=. (((eps
       +. ((((eps +. eps) +. 0.0) +. ((eps +. eps) *. 0.0)) *. (1.0 +. eps)))
      *. ((abs (to_real a +. to_real b) +. abs (to_real c))
          *. abs (to_real d)))
     +. ((((((0.0 +. (0.0 *. (eps +. eps)))
             *. (abs (to_real a +. to_real b) +. abs (to_real c)))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real d)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="example1&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="(a ++. b) --. c,d">
     <goal name="example1&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) --. c) -. ((to_real a +. to_real b) -. to_real c))
&lt;=. ((((eps +. 0.0) +. eps)
      *. (abs (to_real a +. to_real b) +. abs (to_real c)))
     +. ((((1.0 +. eps) +. 0.0) *. 0.0) +. (((1.0 +. eps) +. eps) *. 0.0)))">
      <goal name="example1&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="usub_double_error_propagation" arg2="with" arg3="a ++. b,c">
       <goal name="example1&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
        <goal name="example1&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.099338" steps="739"/></proof>
        </goal>
        <goal name="example1&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.044111" steps="117"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.039709" steps="91"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.052334" steps="94"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.040767" steps="92"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.044826" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.046250" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.050161" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.039429" steps="85"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.038337" steps="85"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.057962" steps="156"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.039300" steps="91"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.048197" steps="121"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.045211" steps="92"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.037370" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.038349" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.047850" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.040803" steps="85"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.036098" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.196388" steps="670"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.419084" steps="1538"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="determinant&#39;vc" expl="VC for determinant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="determinant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real b *. to_real c in
let t3 = to_real a *. to_real d in
let t4 = ((1.0 +. eps) +. eps) *. eta in
abs (to_real result -. (t3 -. t))
&lt;=. ((((eps +. eps) +. eps) *. (abs t3 +. abs t)) +. (t4 +. t4))">
   <goal name="determinant&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. ((to_real a *. to_real d) -. (to_real b *. to_real c)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real d) +. abs (to_real b *. to_real c)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
    <goal name="determinant&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="usub_double_error_propagation" arg2="with" arg3="a **. d,b **. c">
     <goal name="determinant&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (a **. d) -. (to_real a *. to_real d))
&lt;=. ((eps *. abs (to_real a *. to_real d)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.112748" steps="1039"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.052974" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (b **. c) -. (to_real b *. to_real c))
&lt;=. ((eps *. abs (to_real b *. to_real c)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.117956" steps="1039"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.080507" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.049878" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.059504" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.041347" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.067906" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.047418" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.048682" steps="85"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.044028" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="determinant&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.068004" steps="375"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="determinant&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.066228" steps="396"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_norm&#39;vc" expl="VC for square_norm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_norm&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real c in
let t4 = to_real b in
let t5 = to_real a in
let t6 = 1.0 +. eps in
let t7 = t *. t in
let t8 = t4 *. t4 in
let t9 = t5 *. t5 in
let t10 = (eps +. eps) +. eps in
let t11 = t6 +. eps in
let t12 = t11 *. eta in
abs (to_real result -. ((t9 +. t8) +. t7))
&lt;=. ((((t10 +. eps) +. eps) *. ((abs t9 +. abs t8) +. abs t7))
     +. ((t11 *. (t12 +. t12)) +. ((t6 +. t10) *. eta)))">
   <goal name="square_norm&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a *. to_real a) +. (to_real b *. to_real b))
     +. (to_real c *. to_real c)))
&lt;=. ((((((eps +. eps) +. eps) +. eps) +. eps)
      *. ((abs (to_real a *. to_real a) +. abs (to_real b *. to_real b))
          +. abs (to_real c *. to_real c)))
     +. ((((1.0 +. eps) +. eps)
          *. ((((1.0 +. eps) +. eps) *. eta)
              +. (((1.0 +. eps) +. eps) *. eta)))
         +. (((1.0 +. eps) +. ((eps +. eps) +. eps)) *. eta)))">
    <goal name="square_norm&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(a **. a) ++. (b **. b),c **. c">
     <goal name="square_norm&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((a **. a) ++. (b **. b))
 -. ((to_real a *. to_real a) +. (to_real b *. to_real b)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real a) +. abs (to_real b *. to_real b)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
      <goal name="square_norm&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="a **. a,b **. b">
       <goal name="square_norm&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a **. a) -. (to_real a *. to_real a))
&lt;=. ((eps *. abs (to_real a *. to_real a)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.093713" steps="1136"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.042975" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (b **. b) -. (to_real b *. to_real b))
&lt;=. ((eps *. abs (to_real b *. to_real b)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.108802" steps="1136"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.071893" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.042091" steps="96"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.041152" steps="96"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.042744" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.055265" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.070842" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.070463" steps="85"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.045319" steps="85"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.057372" steps="164"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (c **. c) -. (to_real c *. to_real c))
&lt;=. ((eps *. abs (to_real c *. to_real c)) +. eta)">
      <goal name="square_norm&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.106320" steps="1136"/></proof>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.055363" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.064110" steps="121"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.060803" steps="96"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.046007" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.068342" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.061078" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.050386" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.038568" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="square_norm&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.068279" steps="456"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="square_norm&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.066598" steps="290"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t5 = 1.0 +. eps in
let t6 = eps +. (eps *. t5) in
let t7 = (to_real a +. to_real b) *. to_real c in
let t8 = abs t7 in
let t9 = (t5 +. t6) *. eta in
abs (to_real result -. (t7 +. t7))
&lt;=. ((((t6 +. t6) +. eps) *. (t8 +. t8)) +. (t9 +. t9))">
   <goal name="example2&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a +. to_real b) *. to_real c)
     +. ((to_real a +. to_real b) *. to_real c)))
&lt;=. (((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real a +. to_real b) *. to_real c)
          +. abs ((to_real a +. to_real b) *. to_real c)))
     +. ((((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)))">
    <goal name="example2&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(a ++. b) **. c,(a ++. b) **. c">
     <goal name="example2&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.125627" steps="739"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.078666" steps="117"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.066025" steps="91"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.051434" steps="94"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.052211" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.039701" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.040041" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.043339" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.048932" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.041882" steps="85"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.122295" steps="520"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.091872" steps="156"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.113869" steps="739"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.043755" steps="117"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.068017" steps="91"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.064696" steps="94"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.038286" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.043526" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.071233" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.061148" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.040759" steps="85"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.041913" steps="85"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.113913" steps="520"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.055692" steps="156"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.064147" steps="104"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.056166" steps="104"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.045842" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.053921" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.053499" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.048885" steps="85"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.057707" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.073772" steps="219"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.049202" steps="237"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
