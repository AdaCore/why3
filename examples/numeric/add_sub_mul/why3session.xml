<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="add_sub_mul.mlw"/>
<theory name="AddSubMulSingle" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real d in
let t1 = to_real c in
let t2 = abs t in
let t3 = 0.0 *. 0.0 in
let t4 = eps +. eps in
let t5 = 1.0 +. eps in
let t6 = to_real a +. to_real b in
let t7 = abs t6 +. abs t1 in
abs (to_real result -. ((t6 -. t1) *. t))
&lt;=. (((eps +. (((t4 +. 0.0) +. (t4 *. 0.0)) *. t5)) *. (t7 *. t2))
     +. ((((((0.0 +. (0.0 *. t4)) *. t7) +. ((0.0 +. t3) *. t2)) +. t3) *. t5)
         +. eta))">
   <goal name="example1&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. (((to_real a +. to_real b) -. to_real c) *. to_real d))
&lt;=. (((eps
       +. ((((eps +. eps) +. 0.0) +. ((eps +. eps) *. 0.0)) *. (1.0 +. eps)))
      *. ((abs (to_real a +. to_real b) +. abs (to_real c))
          *. abs (to_real d)))
     +. ((((((0.0 +. (0.0 *. (eps +. eps)))
             *. (abs (to_real a +. to_real b) +. abs (to_real c)))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real d)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="example1&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="(a ++. b) --. c,d">
     <goal name="example1&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) --. c) -. ((to_real a +. to_real b) -. to_real c))
&lt;=. ((((eps +. 0.0) +. eps)
      *. (abs (to_real a +. to_real b) +. abs (to_real c)))
     +. ((((1.0 +. eps) +. 0.0) *. 0.0) +. (((1.0 +. eps) +. eps) *. 0.0)))">
      <goal name="example1&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="usub_single_error_propagation" arg2="with" arg3="a ++. b,c">
       <goal name="example1&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
        <goal name="example1&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.043189" steps="723"/></proof>
        </goal>
        <goal name="example1&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.019065" steps="115"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016408" steps="89"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015864" steps="92"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015408" steps="92"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016141" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.014358" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.014928" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016615" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.013906" steps="83"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.019410" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.013247" steps="89"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018303" steps="122"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017550" steps="92"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014425" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014101" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014364" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018612" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015257" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.118941" steps="647"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.219722" steps="1620"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="determinant&#39;vc" expl="VC for determinant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="determinant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real b *. to_real c in
let t1 = to_real a *. to_real d in
let t2 = ((1.0 +. eps) +. eps) *. eta in
abs (to_real result -. (t1 -. t))
&lt;=. ((((eps +. eps) +. eps) *. (abs t1 +. abs t)) +. (t2 +. t2))">
   <goal name="determinant&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. ((to_real a *. to_real d) -. (to_real b *. to_real c)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real d) +. abs (to_real b *. to_real c)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
    <goal name="determinant&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="usub_single_error_propagation" arg2="with" arg3="a **. d,b **. c">
     <goal name="determinant&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (a **. d) -. (to_real a *. to_real d))
&lt;=. ((eps *. abs (to_real a *. to_real d)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.046067" steps="1020"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020633" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (b **. c) -. (to_real b *. to_real c))
&lt;=. ((eps *. abs (to_real b *. to_real c)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.042496" steps="1020"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020685" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017004" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016878" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014231" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.012075" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016180" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017131" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014640" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="determinant&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.030835" steps="349"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="determinant&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.031572" steps="367"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_norm&#39;vc" expl="VC for square_norm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_norm&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real c in
let t1 = to_real b in
let t2 = to_real a in
let t3 = 1.0 +. eps in
let t4 = t *. t in
let t5 = t1 *. t1 in
let t6 = t2 *. t2 in
let t7 = (eps +. eps) +. eps in
let t8 = t3 +. eps in
let t9 = t8 *. eta in
abs (to_real result -. ((t6 +. t5) +. t4))
&lt;=. ((((t7 +. eps) +. eps) *. ((abs t6 +. abs t5) +. abs t4))
     +. ((t8 *. (t9 +. t9)) +. ((t3 +. t7) *. eta)))">
   <goal name="square_norm&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a *. to_real a) +. (to_real b *. to_real b))
     +. (to_real c *. to_real c)))
&lt;=. ((((((eps +. eps) +. eps) +. eps) +. eps)
      *. ((abs (to_real a *. to_real a) +. abs (to_real b *. to_real b))
          +. abs (to_real c *. to_real c)))
     +. ((((1.0 +. eps) +. eps)
          *. ((((1.0 +. eps) +. eps) *. eta)
              +. (((1.0 +. eps) +. eps) *. eta)))
         +. (((1.0 +. eps) +. ((eps +. eps) +. eps)) *. eta)))">
    <goal name="square_norm&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(a **. a) ++. (b **. b),c **. c">
     <goal name="square_norm&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((a **. a) ++. (b **. b))
 -. ((to_real a *. to_real a) +. (to_real b *. to_real b)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real a) +. abs (to_real b *. to_real b)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
      <goal name="square_norm&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="a **. a,b **. b">
       <goal name="square_norm&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a **. a) -. (to_real a *. to_real a))
&lt;=. ((eps *. abs (to_real a *. to_real a)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.036196" steps="1131"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.018762" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (b **. b) -. (to_real b *. to_real b))
&lt;=. ((eps *. abs (to_real b *. to_real b)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.044809" steps="1131"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.018069" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015910" steps="95"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.013727" steps="95"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016243" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.014678" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016500" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.012252" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.019461" steps="83"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020271" steps="164"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (c **. c) -. (to_real c *. to_real c))
&lt;=. ((eps *. abs (to_real c *. to_real c)) +. eta)">
      <goal name="square_norm&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.039044" steps="1131"/></proof>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.015408" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018533" steps="114"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016397" steps="95"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015936" steps="84"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017263" steps="84"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018980" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017589" steps="84"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016237" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="square_norm&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.033496" steps="443"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="square_norm&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.032158" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = 1.0 +. eps in
let t1 = eps +. (eps *. t) in
let t2 = (to_real a +. to_real b) *. to_real c in
let t3 = abs t2 in
let t4 = (t +. t1) *. eta in
abs (to_real result -. (t2 +. t2))
&lt;=. ((((t1 +. t1) +. eps) *. (t3 +. t3)) +. (t4 +. t4))">
   <goal name="example2&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a +. to_real b) *. to_real c)
     +. ((to_real a +. to_real b) *. to_real c)))
&lt;=. (((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real a +. to_real b) *. to_real c)
          +. abs ((to_real a +. to_real b) *. to_real c)))
     +. ((((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)))">
    <goal name="example2&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_single_error_propagation" arg2="with" arg3="(a ++. b) **. c,(a ++. b) **. c">
     <goal name="example2&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.045186" steps="723"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.019415" steps="115"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017320" steps="89"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.013949" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.014251" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017122" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017777" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.015836" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.024235" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017056" steps="83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.037045" steps="490"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.021773" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_single_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.046488" steps="723"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.017536" steps="115"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016161" steps="89"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.014751" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.014227" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.012991" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.014231" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016922" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.015006" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.014927" steps="83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.034829" steps="490"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.021261" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.020767" steps="103"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015126" steps="103"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.012938" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.021146" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018999" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016054" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015778" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.027693" steps="215"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.038699" steps="231"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="AddSubMulDouble" proved="true">
 <goal name="example1&#39;vc" expl="VC for example1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real d in
let t1 = to_real c in
let t2 = abs t in
let t3 = 0.0 *. 0.0 in
let t4 = eps +. eps in
let t5 = 1.0 +. eps in
let t6 = to_real a +. to_real b in
let t7 = abs t6 +. abs t1 in
abs (to_real result -. ((t6 -. t1) *. t))
&lt;=. (((eps +. (((t4 +. 0.0) +. (t4 *. 0.0)) *. t5)) *. (t7 *. t2))
     +. ((((((0.0 +. (0.0 *. t4)) *. t7) +. ((0.0 +. t3) *. t2)) +. t3) *. t5)
         +. eta))">
   <goal name="example1&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. (((to_real a +. to_real b) -. to_real c) *. to_real d))
&lt;=. (((eps
       +. ((((eps +. eps) +. 0.0) +. ((eps +. eps) *. 0.0)) *. (1.0 +. eps)))
      *. ((abs (to_real a +. to_real b) +. abs (to_real c))
          *. abs (to_real d)))
     +. ((((((0.0 +. (0.0 *. (eps +. eps)))
             *. (abs (to_real a +. to_real b) +. abs (to_real c)))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real d)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
    <goal name="example1&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="(a ++. b) --. c,d">
     <goal name="example1&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) --. c) -. ((to_real a +. to_real b) -. to_real c))
&lt;=. ((((eps +. 0.0) +. eps)
      *. (abs (to_real a +. to_real b) +. abs (to_real c)))
     +. ((((1.0 +. eps) +. 0.0) *. 0.0) +. (((1.0 +. eps) +. eps) *. 0.0)))">
      <goal name="example1&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="usub_double_error_propagation" arg2="with" arg3="a ++. b,c">
       <goal name="example1&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
        <goal name="example1&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.046573" steps="723"/></proof>
        </goal>
        <goal name="example1&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.021783" steps="115"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015056" steps="89"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.014301" steps="92"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015131" steps="92"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016157" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016721" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.015361" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.017752" steps="84"/></proof>
       </goal>
       <goal name="example1&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016081" steps="83"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example1&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020566" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example1&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.011880" steps="89"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017359" steps="122"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016680" steps="92"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015073" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014089" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014940" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016197" steps="84"/></proof>
     </goal>
     <goal name="example1&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016757" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example1&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.125375" steps="645"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example1&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.217875" steps="1620"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="determinant&#39;vc" expl="VC for determinant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="determinant&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real b *. to_real c in
let t3 = to_real a *. to_real d in
let t4 = ((1.0 +. eps) +. eps) *. eta in
abs (to_real result -. (t3 -. t))
&lt;=. ((((eps +. eps) +. eps) *. (abs t3 +. abs t)) +. (t4 +. t4))">
   <goal name="determinant&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result -. ((to_real a *. to_real d) -. (to_real b *. to_real c)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real d) +. abs (to_real b *. to_real c)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
    <goal name="determinant&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="usub_double_error_propagation" arg2="with" arg3="a **. d,b **. c">
     <goal name="determinant&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (a **. d) -. (to_real a *. to_real d))
&lt;=. ((eps *. abs (to_real a *. to_real d)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.046744" steps="1020"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020464" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (b **. c) -. (to_real b *. to_real c))
&lt;=. ((eps *. abs (to_real b *. to_real c)) +. eta)">
      <goal name="determinant&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.052845" steps="1020"/></proof>
      </goal>
      <goal name="determinant&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.017077" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016328" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014536" steps="101"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.011772" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.024468" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015318" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.018912" steps="84"/></proof>
     </goal>
     <goal name="determinant&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014326" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="determinant&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.028252" steps="349"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="determinant&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.031947" steps="367"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_norm&#39;vc" expl="VC for square_norm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_norm&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t = to_real c in
let t4 = to_real b in
let t5 = to_real a in
let t6 = 1.0 +. eps in
let t7 = t *. t in
let t8 = t4 *. t4 in
let t9 = t5 *. t5 in
let t10 = (eps +. eps) +. eps in
let t11 = t6 +. eps in
let t12 = t11 *. eta in
abs (to_real result -. ((t9 +. t8) +. t7))
&lt;=. ((((t10 +. eps) +. eps) *. ((abs t9 +. abs t8) +. abs t7))
     +. ((t11 *. (t12 +. t12)) +. ((t6 +. t10) *. eta)))">
   <goal name="square_norm&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a *. to_real a) +. (to_real b *. to_real b))
     +. (to_real c *. to_real c)))
&lt;=. ((((((eps +. eps) +. eps) +. eps) +. eps)
      *. ((abs (to_real a *. to_real a) +. abs (to_real b *. to_real b))
          +. abs (to_real c *. to_real c)))
     +. ((((1.0 +. eps) +. eps)
          *. ((((1.0 +. eps) +. eps) *. eta)
              +. (((1.0 +. eps) +. eps) *. eta)))
         +. (((1.0 +. eps) +. ((eps +. eps) +. eps)) *. eta)))">
    <goal name="square_norm&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(a **. a) ++. (b **. b),c **. c">
     <goal name="square_norm&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs
(to_real ((a **. a) ++. (b **. b))
 -. ((to_real a *. to_real a) +. (to_real b *. to_real b)))
&lt;=. ((((eps +. eps) +. eps)
      *. (abs (to_real a *. to_real a) +. abs (to_real b *. to_real b)))
     +. ((((1.0 +. eps) +. eps) *. eta) +. (((1.0 +. eps) +. eps) *. eta)))">
      <goal name="square_norm&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="a **. a,b **. b">
       <goal name="square_norm&#39;vc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (a **. a) -. (to_real a *. to_real a))
&lt;=. ((eps *. abs (to_real a *. to_real a)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.046763" steps="1131"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016523" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="abs (to_real (b **. b) -. (to_real b *. to_real b))
&lt;=. ((eps *. abs (to_real b *. to_real b)) +. eta)">
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.038997" steps="1131"/></proof>
        </goal>
        <goal name="square_norm&#39;vc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.015463" steps="126"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.014934" steps="95"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.013809" steps="95"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.014146" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.017115" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.6" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.018188" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.7" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.017659" steps="84"/></proof>
       </goal>
       <goal name="square_norm&#39;vc.0.0.0.0.0.8" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.016275" steps="83"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.015895" steps="164"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real (c **. c) -. (to_real c *. to_real c))
&lt;=. ((eps *. abs (to_real c *. to_real c)) +. eta)">
      <goal name="square_norm&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.040861" steps="1131"/></proof>
      </goal>
      <goal name="square_norm&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.019277" steps="126"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016947" steps="114"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015115" steps="95"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.013085" steps="84"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016554" steps="84"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017685" steps="85"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014933" steps="84"/></proof>
     </goal>
     <goal name="square_norm&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.016227" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="square_norm&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.034514" steps="443"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="square_norm&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.029726" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="example2&#39;vc" expl="VC for example2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="example2&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="let t5 = 1.0 +. eps in
let t6 = eps +. (eps *. t5) in
let t7 = (to_real a +. to_real b) *. to_real c in
let t8 = abs t7 in
let t9 = (t5 +. t6) *. eta in
abs (to_real result -. (t7 +. t7))
&lt;=. ((((t6 +. t6) +. eps) *. (t8 +. t8)) +. (t9 +. t9))">
   <goal name="example2&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="abs
(to_real result
 -. (((to_real a +. to_real b) *. to_real c)
     +. ((to_real a +. to_real b) *. to_real c)))
&lt;=. (((((eps +. (eps *. (1.0 +. eps))) +. (eps +. (eps *. (1.0 +. eps))))
       +. eps)
      *. (abs ((to_real a +. to_real b) *. to_real c)
          +. abs ((to_real a +. to_real b) *. to_real c)))
     +. ((((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)
         +. (((1.0 +. eps) +. (eps +. (eps *. (1.0 +. eps)))) *. eta)))">
    <goal name="example2&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="uadd_double_error_propagation" arg2="with" arg3="(a ++. b) **. c,(a ++. b) **. c">
     <goal name="example2&#39;vc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.049550" steps="723"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.020127" steps="115"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.021080" steps="89"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017107" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.018216" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.011667" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.015979" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.012791" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016506" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.0.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016120" steps="83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.037973" steps="490"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020171" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. abs ((to_real a +. to_real b) *. to_real c))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
      <goal name="example2&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="abs (to_real ((a ++. b) **. c) -. ((to_real a +. to_real b) *. to_real c))
&lt;=. (((eps +. (((eps +. 0.0) +. (eps *. 0.0)) *. (1.0 +. eps)))
      *. (abs (to_real a +. to_real b) *. abs (to_real c)))
     +. ((((((0.0 +. (0.0 *. eps)) *. abs (to_real a +. to_real b))
            +. ((0.0 +. (0.0 *. 0.0)) *. abs (to_real c)))
           +. (0.0 *. 0.0))
          *. (1.0 +. eps))
         +. eta))">
       <goal name="example2&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="umul_double_error_propagation" arg2="with" arg3="a ++. b,c">
        <goal name="example2&#39;vc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="abs (to_real (a ++. b) -. (to_real a +. to_real b))
&lt;=. (eps *. abs (to_real a +. to_real b))">
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.048226" steps="723"/></proof>
         </goal>
         <goal name="example2&#39;vc.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.019304" steps="115"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.015519" steps="89"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.019131" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016033" steps="92"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017808" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.017299" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.016656" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.7" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.015529" steps="84"/></proof>
        </goal>
        <goal name="example2&#39;vc.0.0.0.1.0.0.8" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.020355" steps="83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="example2&#39;vc.0.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.040229" steps="490"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="example2&#39;vc.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.020153" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="example2&#39;vc.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.027041" steps="103"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.017552" steps="103"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014614" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.5" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.014365" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.6" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015531" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.7" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015129" steps="84"/></proof>
     </goal>
     <goal name="example2&#39;vc.0.0.0.8" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.015629" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="example2&#39;vc.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.025878" steps="215"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="example2&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.039003" steps="231"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
