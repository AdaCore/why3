
(* McCarthy's ``91'' function. *)

module McCarthy91

  use import int.Int

  (* traditional recursive implementation *)

  let rec function f91 (n:int) : int
    variant { 101-n }
    ensures { result = if n <= 100 then 91 else n - 10 }
  = if n <= 100 then
      f91 (f91 (n + 11))
    else
      n - 10


  (* non-recursive implementation using a while loop *)

  use import ref.Ref
  use import int.Iter

  let f91_nonrec (n0: int) ensures { result = f91 n0 }
  = let e = ref 1 in
    let n = ref n0 in
    while !e > 0 do
      invariant { !e >= 0 /\ iter f91 !e !n = f91 n0 }
      variant   { 101 - !n + 10 * !e, !e }
      if !n > 100 then begin
        n := !n - 10;
        e := !e - 1
      end else begin
        n := !n + 11;
        e := !e + 1
      end
    done;
    !n

end
