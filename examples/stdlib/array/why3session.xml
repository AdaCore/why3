<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Coq" version="8.9.1" timelimit="6" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.3.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="7" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name=".."/><path name=".."/><path name="stdlib"/>
<path name="array.mlw"/>
<theory name="Array" proved="true">
 <goal name="array&#39;vc" expl="VC for array" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="defensive_get&#39;vc" expl="VC for defensive_get" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="4"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="2111"/></proof>
 </goal>
 <goal name="defensive_set&#39;vc" expl="VC for defensive_set" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="4"/></proof>
 <proof prover="7"><result status="valid" time="0.01" steps="2273"/></proof>
 </goal>
 <goal name="copy&#39;vc" expl="VC for copy" proved="true">
 <proof prover="8"><result status="valid" time="0.05" steps="8390"/></proof>
 </goal>
 <goal name="sub&#39;vc" expl="VC for sub" proved="true">
 <proof prover="8"><result status="valid" time="0.08" steps="10605"/></proof>
 </goal>
 <goal name="fill&#39;vc" expl="VC for fill" proved="true">
 <proof prover="8"><result status="valid" time="0.08" steps="10420"/></proof>
 </goal>
 <goal name="blit&#39;vc" expl="VC for blit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="blit&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="8"><result status="valid" time="0.02" steps="1740"/></proof>
  </goal>
  <goal name="blit&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="8"><result status="valid" time="0.02" steps="2371"/></proof>
  </goal>
  <goal name="blit&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="8"><result status="valid" time="0.02" steps="3063"/></proof>
  </goal>
  <goal name="blit&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="8"><result status="valid" time="0.02" steps="3068"/></proof>
  </goal>
  <goal name="blit&#39;vc.4" expl="loop invariant preservation" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.01" steps="69"/></proof>
  </goal>
  <goal name="blit&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.01" steps="55"/></proof>
  </goal>
  <goal name="blit&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.04" steps="57205"/></proof>
  </goal>
  <goal name="blit&#39;vc.7" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="blit&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="blit&#39;vc.7.0.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="1"><result status="valid" time="0.15" steps="830554"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="blit&#39;vc.8" expl="out of loop bounds" proved="true">
  <proof prover="8"><result status="valid" time="0.01" steps="2459"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="append&#39;vc" expl="VC for append" proved="true">
 <proof prover="8"><result status="valid" time="0.04" steps="8694"/></proof>
 </goal>
 <goal name="self_blit&#39;vc" expl="VC for self_blit" proved="true">
 <proof prover="3"><result status="valid" time="0.07" steps="255"/></proof>
 </goal>
</theory>
<theory name="Init" proved="true">
 <goal name="init&#39;vc" expl="VC for init" proved="true">
 <proof prover="8"><result status="valid" time="0.05" steps="7788"/></proof>
 </goal>
</theory>
<theory name="ArrayPermut" proved="true">
 <goal name="exchange_permut_sub" proved="true">
 <proof prover="1"><path name="array_ArrayPermut_exchange_permut_sub_1.v"/><result status="valid" time="1.42"/></proof>
 </goal>
 <goal name="permut_sub_trans" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.01" steps="119"/></proof>
 </goal>
 <goal name="permut_sub_weakening" proved="true">
 <proof prover="1"><path name="array_ArrayPermut_permut_sub_weakening_2.v"/><result status="valid" time="0.48"/></proof>
 </goal>
 <goal name="exchange_permut_all" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="28395"/></proof>
 <proof prover="2" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="7" timelimit="1"><result status="valid" time="0.06" steps="14822"/></proof>
 </goal>
</theory>
<theory name="ArraySwap" proved="true">
 <goal name="swap&#39;vc" expl="VC for swap" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="37"/></proof>
 </goal>
</theory>
<theory name="ToList" proved="true">
 <goal name="to_list&#39;vc" expl="VC for to_list" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="8"/></proof>
 </goal>
 <goal name="to_list_append&#39;vc" expl="VC for to_list_append" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="108"/></proof>
 </goal>
</theory>
<theory name="ToSeq" proved="true">
 <goal name="to_seq_sub&#39;vc" expl="VC for to_seq_sub" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="8"/></proof>
 </goal>
 <goal name="to_seq_length&#39;vc" expl="VC for to_seq_length" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="to_seq_length&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="to_seq_length&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="to_seq_length&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.00" steps="34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_seq_nth&#39;vc" expl="VC for to_seq_nth" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="to_seq_nth&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="to_seq_nth&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
  <goal name="to_seq_nth&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.11" steps="342"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="to_seq&#39;vc" expl="VC for to_seq" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
<theory name="Inversions" proved="true">
 <goal name="exchange_inversion&#39;vc" expl="VC for exchange_inversion" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="exchange_inversion&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="exchange_inversion&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="62795"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="95442"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.2.2" expl="assertion" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.84" steps="1984881"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.2.3" expl="assertion" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.88" steps="1976655"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.2.4" expl="assertion" proved="true">
   <transf name="remove" proved="true" arg1="real,tuple0,unit,map,zero,one,( * ),sum,get,set,([&lt;-]),([&lt;-]&#39;),make,inversions_for,inversions,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,numof&#39;def,Numof_bounds,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_some,numof_change_equiv,sum&#39;def,sum_left,sum_ext,sum_le,sum_zero,sum_nonneg,sum_decomp,shift_left,exchange_set,array&#39;invariant,([&lt;-])&#39;spec,make_spec">
    <goal name="exchange_inversion&#39;vc.2.4.0" expl="assertion" proved="true">
    <proof prover="0" timelimit="1"><result status="valid" time="0.02" steps="20717"/></proof>
    <proof prover="2"><result status="valid" time="0.02" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="exchange_inversion&#39;vc.2.5" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="exchange_inversion&#39;vc.2.5.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="9.27" steps="25499862"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="exchange_inversion&#39;vc.2.6" expl="VC for exchange_inversion" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="exchange_inversion&#39;vc.3" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="exchange_inversion&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="1.85" steps="5658588"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="exchange_inversion&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="exchange_inversion&#39;vc.4.0" expl="VC for exchange_inversion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="exchange_inversion&#39;vc.4.0.0" expl="VC for exchange_inversion" proved="true">
    <proof prover="0"><result status="valid" time="0.47" steps="1431132"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="exchange_inversion&#39;vc.4.1" expl="VC for exchange_inversion" proved="true">
   <proof prover="2"><result status="valid" time="1.43" steps="1452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="exchange_inversion&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="exchange_inversion&#39;vc.5.0" expl="VC for exchange_inversion" proved="true">
   <proof prover="2"><result status="valid" time="0.41" steps="279"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.5.1" expl="VC for exchange_inversion" proved="true">
   <proof prover="2"><result status="valid" time="0.02" steps="16"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.5.2" expl="VC for exchange_inversion" proved="true">
   <proof prover="0"><result status="valid" time="0.42" steps="1225325"/></proof>
   </goal>
   <goal name="exchange_inversion&#39;vc.5.3" expl="VC for exchange_inversion" proved="true">
   <proof prover="0"><result status="valid" time="0.07" steps="198832"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="exchange_inversion&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="26"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="38"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
  <goal name="exchange_inversion&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="2817369"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
