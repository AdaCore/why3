<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="8" name="Eprover" version="2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="9" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="Z3" version="4.8.10" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="12" name="CVC5" version="1.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="strassen.mlw"/>
<theory name="InfMatrixGen">
 <goal name="ext_by_bounds&#39;vc" expl="VC for ext_by_bounds" proved="true">
 <proof prover="10"><result status="valid" time="0.010000" steps="15464"/></proof>
 </goal>
 <goal name="oob_zero" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="16"/></proof>
 </goal>
 <goal name="size_to_bounds" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="46"/></proof>
 </goal>
 <goal name="iso_size">
 <transf name="introduce_premises" >
  <goal name="iso_size.0">
  <transf name="inline_goal" >
   <goal name="iso_size.0.0">
   <transf name="split_goal_right" >
    <goal name="iso_size.0.0.0">
    </goal>
    <goal name="iso_size.0.0.1">
    </goal>
    <goal name="iso_size.0.0.2">
    </goal>
    <goal name="iso_size.0.0.3">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="size_rows_ib" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="18"/></proof>
 </goal>
 <goal name="size_iso">
 <transf name="split_goal_right" >
  <goal name="size_iso.0">
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InfMatrix" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="1"><result status="valid" time="0.000000" steps="2"/></proof>
 </goal>
 <goal name="set_def_changed" proved="true">
 <proof prover="1"><result status="valid" time="0.020000" steps="176"/></proof>
 </goal>
 <goal name="set_def_unchanged" proved="true">
 <proof prover="1"><result status="valid" time="0.054356" steps="774"/></proof>
 </goal>
 <goal name="set_def_rowz_changed" proved="true">
 <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="6057"/></proof>
 </goal>
 <goal name="set_def_colz_changed" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="80"/></proof>
 </goal>
 <goal name="set_def_rowz_unchanged" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="89"/></proof>
 </goal>
 <goal name="set_def_colz_unchanged" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="99"/></proof>
 </goal>
 <goal name="set_def_other_rowz" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="83"/></proof>
 </goal>
 <goal name="set_def_other_colz" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="82"/></proof>
 </goal>
 <goal name="fcreate&#39;vc" expl="VC for fcreate" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="4"/></proof>
 </goal>
 <goal name="fcreate_get_ib" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="71"/></proof>
 </goal>
 <goal name="fcreate_get_oob" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="79"/></proof>
 </goal>
 <goal name="fcreate_size" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="fcreate_size.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="fcreate_size.0.0" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="fcreate_size.0.0.0" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="32"/></proof>
    </goal>
    <goal name="fcreate_size.0.0.1" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sum_extended" proved="true">
 <goal name="sum_mult&#39;vc" expl="VC for sum_mult" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="sum_mult&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="6495"/></proof>
  </goal>
  <goal name="sum_mult&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.060000" steps="2532"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_add&#39;vc" expl="VC for sum_add" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="sum_add&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="7153"/></proof>
  </goal>
  <goal name="sum_add&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="34309"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="fubini&#39;vc" expl="VC for fubini" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="fubini&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="22"/></proof>
  </goal>
  <goal name="fubini&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="3"/></proof>
  </goal>
  <goal name="fubini&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.000000" steps="18"/></proof>
  </goal>
  <goal name="fubini&#39;vc.3" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.150000" steps="419663"/></proof>
  </goal>
  <goal name="fubini&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.220000" steps="3494"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_ext&#39;vc" expl="VC for sum_ext" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="sum_ext&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="776"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="MaxFun" proved="true">
 <goal name="maxf&#39;vc" expl="VC for maxf" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="2"/></proof>
 </goal>
 <goal name="maxf_nonneg&#39;vc" expl="VC for maxf_nonneg" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="maxf_nonneg&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="3"/></proof>
  </goal>
  <goal name="maxf_nonneg&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="3"/></proof>
  </goal>
  <goal name="maxf_nonneg&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="maxf_larger&#39;vc" expl="VC for maxf_larger" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="maxf_larger&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="maxf_larger&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="maxf_larger&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.050000" steps="5265"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="max_left&#39;vc" expl="VC for max_left" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="max_left&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="max_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="3"/></proof>
  </goal>
  <goal name="max_left&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.060000" steps="5832"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="max_ext&#39;vc" expl="VC for max_ext" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="max_ext&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="max_ext&#39;vc.0.0" expl="VC for max_ext" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
   </goal>
   <goal name="max_ext&#39;vc.0.1" expl="VC for max_ext" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="2"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="max_ext&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="max_ext&#39;vc.2" expl="precondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="max_ext&#39;vc.2.0" expl="precondition" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="max_ext&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.070000" steps="8658"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="max_decomp&#39;vc" expl="VC for max_decomp" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="max_decomp&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="33"/></proof>
  </goal>
  <goal name="max_decomp&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="max_decomp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="max_decomp&#39;vc.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="1014"/></proof>
  </goal>
  <goal name="max_decomp&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="max_constant&#39;vc" expl="VC for max_constant" proved="true">
 <proof prover="9" timelimit="10" memlimit="4096"><result status="valid" time="0.023074" steps="7802"/></proof>
 </goal>
</theory>
<theory name="InfIntMatrix">
 <goal name="id&#39;vc" expl="VC for id" proved="true">
 <transf name="split_goal_right" proved="true" >
 </transf>
 </goal>
 <goal name="id_def" proved="true">
 <proof prover="1" timelimit="5"><result status="valid" time="0.014625" steps="104"/></proof>
 <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.050000" steps="10283"/></proof>
 <proof prover="10" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="51077"/></proof>
 <transf name="split_goal_right" proved="true" >
  <goal name="id_def.0" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.015639" steps="104"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add2f&#39;vc" expl="VC for add2f" proved="true">
 <transf name="split_goal_right" proved="true" >
 </transf>
 </goal>
 <goal name="add_get" proved="true">
 <proof prover="1" timelimit="5"><result status="valid" time="0.038155" steps="493"/></proof>
 <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.030000" steps="13714"/></proof>
 <proof prover="10" timelimit="5" memlimit="2000"><result status="valid" time="0.018315" steps="82276"/></proof>
 </goal>
 <goal name="add_iso" proved="true">
 <proof prover="1" timelimit="5"><result status="valid" time="0.038140" steps="525"/></proof>
 </goal>
 <goal name="add_size" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="add_size.0" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.021394" steps="136"/></proof>
  </goal>
  <goal name="add_size.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.030000" steps="99"/></proof>
  </goal>
  <goal name="add_size.2" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_assoc" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="add_assoc.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="140"/></proof>
  </goal>
  <goal name="add_assoc.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_commutative" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="add_commutative.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="31"/></proof>
  </goal>
  <goal name="add_commutative.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="zero_neutral" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="zero_neutral.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="110"/></proof>
  </goal>
  <goal name="zero_neutral.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sub&#39;vc" expl="VC for sub" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="8"/></proof>
 </goal>
 <goal name="sub_size" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="sub_size.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.146472" steps="2170"/></proof>
  </goal>
  <goal name="sub_size.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.150000" steps="1777"/></proof>
  </goal>
  <goal name="sub_size.2" proved="true">
  <proof prover="10"><result status="valid" time="0.019683" steps="76341"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="opp_involutive" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="opp_involutive.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.066386" steps="888"/></proof>
  </goal>
  <goal name="opp_involutive.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="atom_oob">
 <transf name="split_goal_right" >
  <goal name="atom_oob.0" proved="true">
  <proof prover="10"><result status="valid" time="0.030000" steps="62365"/></proof>
  </goal>
  <goal name="atom_oob.1">
  </goal>
  <goal name="atom_oob.2">
  </goal>
  <goal name="atom_oob.3" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cell_oob_r">
 <transf name="split_goal_right" >
  <goal name="cell_oob_r.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
  <goal name="cell_oob_r.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="224"/></proof>
  </goal>
  <goal name="cell_oob_r.2" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="130"/></proof>
  </goal>
  <goal name="cell_oob_r.3">
  </goal>
  <goal name="cell_oob_r.4" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="35"/></proof>
  </goal>
  <goal name="cell_oob_r.5" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.313262" steps="14140"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cell_oob_c" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="cell_oob_c.0" proved="true">
  <proof prover="10"><result status="valid" time="0.040000" steps="67972"/></proof>
  </goal>
  <goal name="cell_oob_c.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="224"/></proof>
  </goal>
  <goal name="cell_oob_c.2" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="130"/></proof>
  </goal>
  <goal name="cell_oob_c.3" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="71474"/></proof>
  </goal>
  <goal name="cell_oob_c.4" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="35"/></proof>
  </goal>
  <goal name="cell_oob_c.5" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.381681" steps="15948"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_sizes&#39;vc" expl="VC for mul_sizes" proved="true">
 <proof prover="9" timelimit="1"><result status="valid" time="0.110000" steps="31093"/></proof>
 </goal>
 <goal name="id_neutral_r">
 <transf name="split_goal_right" >
  <goal name="id_neutral_r.0">
  </goal>
  <goal name="id_neutral_r.1">
  </goal>
  <goal name="id_neutral_r.2" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="75316"/></proof>
  </goal>
  <goal name="id_neutral_r.3" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.090000" steps="763"/></proof>
  </goal>
  <goal name="id_neutral_r.4" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="id_neutral_l" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="id_neutral_l.0" proved="true">
  <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="2.279335" steps="61834"/></proof>
  </goal>
  <goal name="id_neutral_l.1" proved="true">
  <proof prover="1"><result status="valid" time="0.537094" steps="9011"/></proof>
  </goal>
  <goal name="id_neutral_l.2" proved="true">
  <proof prover="10"><result status="valid" time="0.027115" steps="122613"/></proof>
  </goal>
  <goal name="id_neutral_l.3" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="63"/></proof>
  <proof prover="10" timelimit="5" memlimit="2000"><result status="valid" time="0.030000" steps="81227"/></proof>
  </goal>
  <goal name="id_neutral_l.4" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.322882" steps="10540"/></proof>
  </goal>
  <goal name="id_neutral_l.5" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="64"/></proof>
  </goal>
  <goal name="id_neutral_l.6" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.020000" steps="80694"/></proof>
  </goal>
  <goal name="id_neutral_l.7" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="21"/></proof>
  </goal>
  <goal name="id_neutral_l.8" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="32"/></proof>
  </goal>
  <goal name="id_neutral_l.9" proved="true">
  <proof prover="10"><result status="valid" time="0.070000" steps="77725"/></proof>
  </goal>
  <goal name="id_neutral_l.10" proved="true">
  <proof prover="10" timelimit="5" memlimit="2000"><result status="valid" time="0.050000" steps="76276"/></proof>
  </goal>
  <goal name="id_neutral_l.11" proved="true">
  <proof prover="10"><result status="valid" time="0.019821" steps="92048"/></proof>
  </goal>
  <goal name="id_neutral_l.12" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_assoc_get&#39;vc" expl="VC for mul_assoc_get" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="mul_assoc_get&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="0.010000" steps="386"/></proof>
  </goal>
  <goal name="mul_assoc_get&#39;vc.1" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.121161" steps="26570"/></proof>
  </goal>
  <goal name="mul_assoc_get&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mul_assoc_get&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.020000" steps="83049"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.2.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.160000" steps="647532"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.2.2" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.030000" steps="83078"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.2.3" expl="VC for mul_assoc_get" proved="true">
   <proof prover="9" timelimit="10" memlimit="4096"><result status="valid" time="0.040040" steps="23688"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.2.4" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.024068" steps="94802"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.2.5" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.020000" steps="93791"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.2.6" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.020753" steps="95151"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mul_assoc_get&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.088727" steps="1211"/></proof>
   <proof prover="4"><result status="valid" time="0.180000" steps="19012"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.1" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.020000" steps="103940"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.2" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1"><result status="valid" time="0.020000" steps="75"/></proof>
   <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.050000" steps="15767"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.3" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.019548" steps="126"/></proof>
   <proof prover="4" timelimit="10" memlimit="4000"><result status="valid" time="0.050000" steps="15804"/></proof>
   <proof prover="10" timelimit="10" memlimit="4000"><result status="valid" time="0.040000" steps="89287"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.4" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.018790" steps="93"/></proof>
   <proof prover="4" timelimit="10" memlimit="4000"><result status="valid" time="0.040000" steps="19806"/></proof>
   <proof prover="10" timelimit="10" memlimit="4000"><result status="valid" time="0.010000" steps="87243"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.5" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.012041" steps="83"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.6" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.020041" steps="65"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.3.7" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mul_assoc_get&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.040000" steps="8"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mul_assoc_get&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="9" timelimit="1"><result status="valid" time="0.180000" steps="32603"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mul_assoc_get&#39;vc.6.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.179902" steps="4199"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.1" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.190000" steps="2139"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.2" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="503"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.3" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.040000" steps="32"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.4" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.335974" steps="5228"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.5" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="498"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.6" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="32"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.6.7" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.312776" steps="5461"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mul_assoc_get&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.040000" steps="88956"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.7.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.040000" steps="117076"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.7.2" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.050000" steps="88756"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.7.3" expl="VC for mul_assoc_get" proved="true">
   <proof prover="4"><result status="valid" time="0.150000" steps="19677"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.7.4" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.019652" steps="101988"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.7.5" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.050000" steps="100884"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.7.6" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.025060" steps="105712"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mul_assoc_get&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.507946" steps="10566"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.1" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.030000" steps="104328"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.2" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.030000" steps="91073"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.3" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.030000" steps="95389"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.4" expl="VC for mul_assoc_get" proved="true">
   <proof prover="10"><result status="valid" time="0.030000" steps="93002"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.5" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1"><result status="valid" time="0.020000" steps="110"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.6" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="97"/></proof>
   </goal>
   <goal name="mul_assoc_get&#39;vc.8.7" expl="VC for mul_assoc_get" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="69"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_assoc_get&#39;vc.9" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.080000" steps="6046"/></proof>
  </goal>
  <goal name="mul_assoc_get&#39;vc.10" expl="assertion" proved="true">
  <proof prover="1" timelimit="10" memlimit="4096"><result status="valid" time="12.213092" steps="393278"/></proof>
  <proof prover="9"><result status="valid" time="0.088853" steps="41650"/></proof>
  </goal>
  <goal name="mul_assoc_get&#39;vc.11" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mul_assoc_get&#39;vc.11.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="17"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_assoc" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="mul_assoc.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="33"/></proof>
  </goal>
  <goal name="mul_assoc.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_distr_right_get&#39;vc" expl="VC for mul_distr_right_get">
 <transf name="split_vc" >
  <goal name="mul_distr_right_get&#39;vc.0" expl="assertion">
  <transf name="split_vc" >
   <goal name="mul_distr_right_get&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.130000" steps="19664"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.1" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.110000" steps="7398"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.2" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.600639" steps="12906"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.3" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="20"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.4" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="4"><result status="valid" time="0.180000" steps="26581"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.5" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="1.322333" steps="37300"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.6" expl="VC for mul_distr_right_get">
   <proof prover="1"><result status="timeout" time="2.000000" steps="47522"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.7" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="32"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.8" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="4"><result status="valid" time="0.110562" steps="37209"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.9" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="4"><result status="valid" time="0.127638" steps="39892"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.10" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.020000" steps="159"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.11" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="38"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.12" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="38"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.13" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="1"><result status="valid" time="0.020000" steps="174"/></proof>
   </goal>
   <goal name="mul_distr_right_get&#39;vc.0.14" expl="VC for mul_distr_right_get" proved="true">
   <proof prover="9" memlimit="2000"><result status="valid" time="0.542516" steps="192247"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_distr_right_get&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="1294"/></proof>
  </goal>
  <goal name="mul_distr_right_get&#39;vc.2" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.180000" steps="27255"/></proof>
  </goal>
  <goal name="mul_distr_right_get&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.220072" steps="67228"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ext_iso" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="68"/></proof>
 </goal>
 <goal name="ext_get" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="ext_get.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="ext_get.0.0" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="454"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ext_dist_sum_mat" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="ext_dist_sum_mat.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="ext_dist_sum_mat.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="ext_dist_sum_mat.0.0.0" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.030000" steps="249"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ext_dist_sum_mat.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ext_dist_sum_r" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="ext_dist_sum_r.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.030000" steps="431"/></proof>
  </goal>
  <goal name="ext_dist_sum_r.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assoc_mul_ext" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="assoc_mul_ext.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.040000" steps="667"/></proof>
  </goal>
  <goal name="assoc_mul_ext.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unit_ext" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="unit_ext.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="40"/></proof>
  </goal>
  <goal name="unit_ext.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="comm_mul_ext_ij&#39;vc" expl="VC for comm_mul_ext_ij">
 <transf name="split_vc" >
  <goal name="comm_mul_ext_ij&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="227"/></proof>
  </goal>
  <goal name="comm_mul_ext_ij&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="368"/></proof>
  </goal>
  <goal name="comm_mul_ext_ij&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.323672" steps="7141"/></proof>
  </goal>
  <goal name="comm_mul_ext_ij&#39;vc.3" expl="assertion">
  <transf name="split_vc" >
   <goal name="comm_mul_ext_ij&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.112661" steps="35562"/></proof>
   </goal>
   <goal name="comm_mul_ext_ij&#39;vc.3.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.040000" steps="471"/></proof>
   </goal>
   <goal name="comm_mul_ext_ij&#39;vc.3.2" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="467"/></proof>
   </goal>
   <goal name="comm_mul_ext_ij&#39;vc.3.3" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.240000" steps="36041"/></proof>
   </goal>
   <goal name="comm_mul_ext_ij&#39;vc.3.4" expl="VC for comm_mul_ext_ij">
   </goal>
   <goal name="comm_mul_ext_ij&#39;vc.3.5" expl="VC for comm_mul_ext_ij" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="138"/></proof>
   </goal>
   <goal name="comm_mul_ext_ij&#39;vc.3.6" expl="VC for comm_mul_ext_ij" proved="true">
   <proof prover="1"><result status="valid" time="0.010000" steps="138"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="comm_mul_ext_ij&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="66"/></proof>
  </goal>
  <goal name="comm_mul_ext_ij&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="comm_mul_ext" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="comm_mul_ext.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="41"/></proof>
  </goal>
  <goal name="comm_mul_ext.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="41"/></proof>
  </goal>
  <goal name="comm_mul_ext.2" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="16"/></proof>
  </goal>
  <goal name="comm_mul_ext.3" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InfIntMatrixDecision">
 <goal name="aplus&#39;refn&#39;vc" expl="VC for aplus&#39;refn" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="8"/></proof>
 </goal>
 <goal name="atimes&#39;refn&#39;vc" expl="VC for atimes&#39;refn" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="8"/></proof>
 </goal>
 <goal name="aopp&#39;refn&#39;vc" expl="VC for aopp&#39;refn" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="8"/></proof>
 </goal>
 <goal name="A.Assoc" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
 </goal>
 <goal name="A.Unit_def_l" proved="true">
 <proof prover="10"><result status="valid" time="0.030000" steps="83777"/></proof>
 </goal>
 <goal name="A.Unit_def_r" proved="true">
 <proof prover="10"><result status="valid" time="0.020000" steps="83366"/></proof>
 </goal>
 <goal name="A.Inv_def_l">
 </goal>
 <goal name="A.Inv_def_r">
 </goal>
 <goal name="A.Comm" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="13"/></proof>
 </goal>
 <goal name="A.MulAssoc.Assoc" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="13"/></proof>
 </goal>
 <goal name="A.Mul_distr_l">
 </goal>
 <goal name="A.Mul_distr_r">
 </goal>
 <goal name="AUnitary" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="18"/></proof>
 </goal>
 <goal name="ANonTrivial" proved="true">
 <proof prover="10"><result status="valid" time="0.040000" steps="158864"/></proof>
 </goal>
 <goal name="infix $&#39;refn&#39;vc" expl="VC for infix $&#39;refn" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="9"/></proof>
 </goal>
 <goal name="ExtDistSumA" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
 </goal>
 <goal name="ExtDistSumR" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
 </goal>
 <goal name="AssocMulExt" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="14"/></proof>
 </goal>
 <goal name="UnitExt" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.010000" steps="13"/></proof>
 </goal>
 <goal name="CommMulExt" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="14"/></proof>
 </goal>
 <goal name="eq0&#39;refn&#39;vc" expl="VC for eq0&#39;refn" proved="true">
 <proof prover="1"><result status="valid" time="0.000000" steps="9"/></proof>
 </goal>
 <goal name="asub_def" proved="true">
 <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="13"/></proof>
 </goal>
</theory>
<theory name="MatrixTests">
 <goal name="block_mul_ij&#39;vc" expl="VC for block_mul_ij" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="block_mul_ij&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="block_mul_ij&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="2.046230" steps="19582"/></proof>
   </goal>
   <goal name="block_mul_ij&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.120000" steps="250"/></proof>
   </goal>
   <goal name="block_mul_ij&#39;vc.0.2" expl="VC for block_mul_ij" proved="true">
   <proof prover="1"><result status="valid" time="0.050000" steps="333"/></proof>
   </goal>
   <goal name="block_mul_ij&#39;vc.0.3" expl="VC for block_mul_ij" proved="true">
   <proof prover="1"><result status="valid" time="0.050000" steps="62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="block_mul_ij&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="0.070000" steps="16962"/></proof>
  <proof prover="10" timelimit="5" memlimit="2000"><result status="valid" time="0.020000" steps="76806"/></proof>
  </goal>
  <goal name="block_mul_ij&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.060000" steps="136143"/></proof>
  </goal>
  <goal name="block_mul_ij&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.040000" steps="35"/></proof>
  </goal>
  <goal name="block_mul_ij&#39;vc.4" expl="precondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="block_mul_ij&#39;vc.4.0" expl="precondition" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="block_mul_ij&#39;vc.4.0.0" expl="VC for block_mul_ij" proved="true">
    <proof prover="1"><result status="valid" time="0.040000" steps="17"/></proof>
    </goal>
    <goal name="block_mul_ij&#39;vc.4.0.1" expl="VC for block_mul_ij" proved="true">
    <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="0.070000" steps="17"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="block_mul_ij&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.140000" steps="700"/></proof>
  </goal>
  <goal name="block_mul_ij&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.140000" steps="1823"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_split&#39;vc" expl="VC for mul_split" proved="true">
 <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
 <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="127765"/></proof>
 <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="973137"/></proof>
 <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="119197"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="mul_split&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="37"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="37"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="39"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="41"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="41"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="212"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="43"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="274"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="131"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="154"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.10" expl="assertion" proved="true">
  <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
  <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="101959"/></proof>
  <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="966634"/></proof>
  <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="112435"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="mul_split&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.880902" steps="4560"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.1" expl="VC for mul_split" proved="true">
   <proof prover="10"><result status="valid" time="0.180000" steps="340219"/></proof>
   <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="108501"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.2" expl="VC for mul_split" proved="true">
   <proof prover="1"><result status="valid" time="0.140000" steps="810"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.3" expl="VC for mul_split" proved="true">
   <proof prover="1"><result status="valid" time="0.077860" steps="1033"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.4" expl="VC for mul_split" proved="true">
   <proof prover="1"><result status="valid" time="1.942828" steps="52741"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.5" expl="VC for mul_split" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="113"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.6" expl="VC for mul_split" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="5.368401" steps="153482"/></proof>
   <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
   <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="160261"/></proof>
   <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="518625"/></proof>
   <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="106785"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.7" expl="VC for mul_split" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="71"/></proof>
   </goal>
   <goal name="mul_split&#39;vc.10.8" expl="VC for mul_split" proved="true">
   <proof prover="1"><result status="valid" time="0.020000" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="mul_split&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="53"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="217"/></proof>
  </goal>
  <goal name="mul_split&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_block_cell&#39;vc" expl="VC for mul_block_cell" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="mul_block_cell&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.124494" steps="3375"/></proof>
  </goal>
  <goal name="mul_block_cell&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9" timelimit="1"><result status="valid" time="0.314542" steps="115361"/></proof>
  </goal>
  <goal name="mul_block_cell&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.017802" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_block&#39;vc" expl="VC for mul_block">
 <transf name="split_goal_right" >
  <goal name="mul_block&#39;vc.0" expl="assertion">
  </goal>
  <goal name="mul_block&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.018061" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="naive_blocks&#39;vc" expl="VC for naive_blocks">
 </goal>
 <goal name="cut_quarters&#39;vc" expl="VC for cut_quarters" proved="true">
 <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
 <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="106739"/></proof>
 <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="2297494"/></proof>
 <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="115784"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="cut_quarters&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="21"/></proof>
  </goal>
  <goal name="cut_quarters&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="8" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000"/></proof>
  <proof prover="9" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="247205"/></proof>
  <proof prover="10" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="10695260"/></proof>
  <proof prover="12" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="635567"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="cut_quarters&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="cut_quarters&#39;vc.1.0.0" expl="VC for cut_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="21"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.1" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="355465"/></proof>
    <proof prover="9"><result status="valid" time="0.993781" steps="135420"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.2" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="541436"/></proof>
    <proof prover="9"><result status="valid" time="0.986197" steps="135413"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.3" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="541734"/></proof>
    <proof prover="9"><result status="valid" time="1.011848" steps="135441"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.4" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="543177"/></proof>
    <proof prover="9"><result status="valid" time="1.046209" steps="135412"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.5" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="0.430000" steps="66833"/></proof>
    <proof prover="9"><result status="valid" time="1.439071" steps="158277"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.6" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="0.440000" steps="66732"/></proof>
    <proof prover="9"><result status="valid" time="1.486996" steps="158582"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.7" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="0.440000" steps="66698"/></proof>
    <proof prover="9"><result status="valid" time="1.446016" steps="158308"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.8" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="2.386167" steps="248343"/></proof>
    <proof prover="9"><result status="valid" time="1.398444" steps="158378"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.9" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="0.440000" steps="66811"/></proof>
    <proof prover="9"><result status="valid" time="1.407261" steps="158178"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.10" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="0.460000" steps="66710"/></proof>
    <proof prover="9"><result status="valid" time="1.442013" steps="158483"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.11" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="0.440000" steps="66676"/></proof>
    <proof prover="9"><result status="valid" time="1.508844" steps="158209"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.12" expl="VC for cut_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.010000" steps="21"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.13" expl="VC for cut_quarters" proved="true">
    <proof prover="4"><result status="valid" time="1.495448" steps="181954"/></proof>
    <proof prover="9"><result status="valid" time="0.421264" steps="92965"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.14" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="1.048903" steps="151997"/></proof>
    <proof prover="9"><result status="valid" time="1.601138" steps="149237"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.15" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="2.780000" steps="342240"/></proof>
    <proof prover="9"><result status="valid" time="2.047344" steps="174269"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.16" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="3.055115" steps="345999"/></proof>
    <proof prover="9"><result status="valid" time="2.025655" steps="174079"/></proof>
    </goal>
    <goal name="cut_quarters&#39;vc.1.0.17" expl="VC for cut_quarters" proved="true">
    <proof prover="4" timelimit="5" memlimit="2000"><result status="valid" time="2.780000" steps="359305"/></proof>
    <proof prover="9"><result status="valid" time="2.162090" steps="174602"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="paste_quarters&#39;vc" expl="VC for paste_quarters">
 <transf name="split_vc" >
  <goal name="paste_quarters&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="paste_quarters&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.099971" steps="50816"/></proof>
   </goal>
   <goal name="paste_quarters&#39;vc.0.1" expl="VC for paste_quarters" proved="true">
   <proof prover="9"><result status="valid" time="0.057069" steps="33471"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="paste_quarters&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="paste_quarters&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.208395" steps="3856"/></proof>
   <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
   <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="98090"/></proof>
   <proof prover="10" timelimit="5" memlimit="2000"><result status="valid" time="1.172443" steps="4897909"/></proof>
   <proof prover="12" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="225690"/></proof>
   </goal>
   <goal name="paste_quarters&#39;vc.1.1" expl="VC for paste_quarters" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="paste_quarters&#39;vc.2" expl="assertion" proved="true">
  <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
  <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="108330"/></proof>
  <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="3073257"/></proof>
  <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="105581"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="paste_quarters&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.628962" steps="293975"/></proof>
   </goal>
   <goal name="paste_quarters&#39;vc.2.1" expl="VC for paste_quarters" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="paste_quarters&#39;vc.3" expl="assertion" proved="true">
  <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
  <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="105991"/></proof>
  <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="2993132"/></proof>
  <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="85235"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="paste_quarters&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.259172" steps="4732"/></proof>
   </goal>
   <goal name="paste_quarters&#39;vc.3.1" expl="VC for paste_quarters" proved="true">
   <proof prover="1"><result status="valid" time="0.030000" steps="49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="paste_quarters&#39;vc.4" expl="postcondition">
  <proof prover="1" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="63265"/></proof>
  <proof prover="8" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000"/></proof>
  <proof prover="9" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="243567"/></proof>
  <proof prover="10" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="6891698"/></proof>
  <proof prover="12" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="310025"/></proof>
  <transf name="inline_goal" >
   <goal name="paste_quarters&#39;vc.4.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="paste_quarters&#39;vc.4.0.0" expl="VC for paste_quarters">
    <proof prover="8" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000"/></proof>
    <proof prover="9" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="189465"/></proof>
    <proof prover="10" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="12632948"/></proof>
    <proof prover="12" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="315373"/></proof>
    <transf name="inline_goal" >
     <goal name="paste_quarters&#39;vc.4.0.0.0" expl="VC for paste_quarters">
     <proof prover="0"><result status="timeout" time="5.000000" steps="13066826"/></proof>
     <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="30.000000" steps="570237"/></proof>
     <proof prover="9"><result status="timeout" time="5.000000" steps="414546"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.1" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.2" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.3" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.4" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.5" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.6" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.7" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.8" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.9" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.10" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.11" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.12" expl="VC for paste_quarters" proved="true">
    <proof prover="0"><result status="valid" time="0.883830" steps="2827636"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.13" expl="VC for paste_quarters">
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.14" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.15" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.16" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
    <goal name="paste_quarters&#39;vc.4.0.17" expl="VC for paste_quarters" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="strassen_pow2&#39;vc" expl="VC for strassen_pow2">
 <transf name="split_vc" >
  <goal name="strassen_pow2&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="21"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="46"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="42"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="169"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="53"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="49"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="182"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="58"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.179589" steps="71188"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1" obsolete="true"><result status="timeout" time="1.000000" steps="9014"/></proof>
  <proof prover="4"><result status="valid" time="0.220000" steps="30117"/></proof>
  <proof prover="9"><result status="valid" time="0.213390" steps="81228"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="71"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="71"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.12" expl="assertion" proved="true">
  <proof prover="8" obsolete="true"><result status="timeout" time="1.000000"/></proof>
  <proof prover="9" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="106076"/></proof>
  <proof prover="10" obsolete="true"><result status="timeout" time="1.000000" steps="4405239"/></proof>
  <proof prover="12" obsolete="true"><result status="timeout" time="1.000000" steps="105191"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="strassen_pow2&#39;vc.12.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.180000" steps="501"/></proof>
   </goal>
   <goal name="strassen_pow2&#39;vc.12.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.145177" steps="2071"/></proof>
   </goal>
   <goal name="strassen_pow2&#39;vc.12.2" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.143774" steps="2071"/></proof>
   </goal>
   <goal name="strassen_pow2&#39;vc.12.3" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.148751" steps="2071"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="strassen_pow2&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.092082" steps="1472"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.092904" steps="1765"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.15" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.092416" steps="713"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.16" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="89"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="89"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.090000" steps="149"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.090000" steps="152"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.20" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="91"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="91"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.120000" steps="149"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="94"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.24" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="91"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.25" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="91"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.26" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="92"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.27" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.110000" steps="150"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.28" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="91"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.29" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="91"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="92"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.120000" steps="150"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.32" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="93"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.33" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="93"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.34" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.038644" steps="151"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.35" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="96"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.36" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="95"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.37" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="95"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.38" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.039079" steps="153"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.39" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.047929" steps="158"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.40" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="97"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.41" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="97"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.42" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.042018" steps="155"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040733" steps="160"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.44" expl="assertion">
  </goal>
  <goal name="strassen_pow2&#39;vc.45" expl="assertion">
  </goal>
  <goal name="strassen_pow2&#39;vc.46" expl="assertion">
  </goal>
  <goal name="strassen_pow2&#39;vc.47" expl="assertion">
  </goal>
  <goal name="strassen_pow2&#39;vc.48" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.069466" steps="1514"/></proof>
  <proof prover="4"><result status="valid" time="0.210000" steps="34893"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.49" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.100109" steps="2206"/></proof>
  <proof prover="4"><result status="valid" time="0.240000" steps="35334"/></proof>
  </goal>
  <goal name="strassen_pow2&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.226999" steps="94736"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
