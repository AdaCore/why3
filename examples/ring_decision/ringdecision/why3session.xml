<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="7" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="ringdecision.mlw"/>
<theory name="UnitaryCommutativeRingDecision">
 <goal name="mon_append&#39;vc" expl="VC for mon_append" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="143"/></proof>
 </goal>
 <goal name="interp_nil" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.000000" steps="12"/></proof>
 </goal>
 <goal name="interp_cons" proved="true">
 <transf name="compute_in_goal" proved="true" >
  <goal name="interp_cons.0" proved="true">
  <proof prover="4"><result status="valid" time="0.020000" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="interp_sum&#39;vc" expl="VC for interp_sum" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="interp_sum&#39;vc.0" expl="variant decrease" proved="true">
  <transf name="compute_in_goal" proved="true" >
   <goal name="interp_sum&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.050000" steps="35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="interp_sum&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.017453" steps="179"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="append_mon&#39;vc" expl="VC for append_mon" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="append_mon&#39;vc.0" expl="postcondition" proved="true">
  <transf name="compute_in_goal" proved="true" >
   <goal name="append_mon&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.133291" steps="2615"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_mon&#39;vc" expl="VC for mul_mon">
 <transf name="split_vc" >
  <goal name="mul_mon&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="mul_mon&#39;vc.0.0" expl="postcondition">
   </goal>
   <goal name="mul_mon&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.050000" steps="5843"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_devel&#39;vc" expl="VC for mul_devel">
 <transf name="split_vc" >
  <goal name="mul_devel&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="mul_devel&#39;vc.0.0" expl="postcondition">
   </goal>
   <goal name="mul_devel&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.120000" steps="162"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conv&#39;vc" expl="VC for conv" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="conv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="simplify_trivial_quantification" proved="true" >
   <goal name="conv&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="conv&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.090000" steps="16676"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="277"/></proof>
 </goal>
 <goal name="insertion_sort&#39;vc" expl="VC for insertion_sort" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="136"/></proof>
 </goal>
 <goal name="sort_mon&#39;vc" expl="VC for sort_mon" proved="true">
 <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.015881" steps="170"/></proof>
 </goal>
 <goal name="sort_mons&#39;vc" expl="VC for sort_mons">
 <transf name="split_goal_right" >
  <goal name="sort_mons&#39;vc.0" expl="variant decrease">
  <transf name="split_goal_right" >
   <goal name="sort_mons&#39;vc.0.0" expl="VC for sort_mons">
   <transf name="compute_in_goal" >
    <goal name="sort_mons&#39;vc.0.0.0" expl="VC for sort_mons">
    </goal>
   </transf>
   </goal>
   <goal name="sort_mons&#39;vc.0.1" expl="VC for sort_mons" proved="true">
   <proof prover="4"><result status="valid" time="0.040000" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sort_mons&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.020000" steps="226"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="same&#39;vc" expl="VC for same" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="81"/></proof>
 </goal>
 <goal name="squash_sum" proved="true">
 <transf name="compute_in_goal" proved="true" >
  <goal name="squash_sum.0" proved="true">
  <proof prover="7"><result status="valid" time="0.044834" steps="10992"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="squash_append&#39;vc" expl="VC for squash_append" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.023542" steps="213"/></proof>
 </goal>
 <goal name="insert_mon&#39;vc" expl="VC for insert_mon">
 <transf name="split_goal_right" >
  <goal name="insert_mon&#39;vc.0" expl="assertion">
  <transf name="simplify_trivial_quantification" >
   <goal name="insert_mon&#39;vc.0.0" expl="assertion">
   <proof prover="3"><result status="timeout" time="1.300000" steps="286401"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert_mon&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="34283"/></proof>
  </goal>
  <goal name="insert_mon&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.120070" steps="29750"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insertion_sort_mon&#39;vc" expl="VC for insertion_sort_mon" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="501"/></proof>
 </goal>
 <goal name="normalize&#39;vc" expl="VC for normalize" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="62"/></proof>
 </goal>
 <goal name="norm&#39;" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="40268"/></proof>
 </goal>
 <goal name="norm" proved="true">
 <proof prover="4" timelimit="15"><result status="valid" time="0.020000" steps="66"/></proof>
 </goal>
</theory>
<theory name="Tests" proved="true">
 <goal name="morph_zero" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="morph_one" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="morph_add" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="morph_mul" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="morph_inv" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="eq0&#39;refn&#39;vc" expl="VC for eq0&#39;refn" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="g" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="g.0" proved="true">
  <transf name="reflection_l" proved="true" arg1="norm">
   <goal name="g.0.0" expl="reification check" proved="true">
   <proof prover="4" timelimit="10" memlimit="4096"><result status="valid" time="0.016257" steps="19"/></proof>
   </goal>
   <goal name="g.0.1" expl="asserted formula" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="g.0.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.010000" steps="11197"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="AssocAlgebraDecision">
 <goal name="ext_minone">
 <transf name="split_goal_right" >
  <goal name="ext_minone.0">
  </goal>
 </transf>
 </goal>
 <goal name="mon_append&#39;vc" expl="VC for mon_append" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="mon_append&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="3" timelimit="10" memlimit="4000"><result status="valid" time="0.020000" steps="3211"/></proof>
  </goal>
  <goal name="mon_append&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.010000" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="interp_cons" proved="true">
 <transf name="compute_in_goal" proved="true" >
  <goal name="interp_cons.0" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="130"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="interp_sum&#39;vc" expl="VC for interp_sum" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="interp_sum&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="32"/></proof>
  </goal>
  <goal name="interp_sum&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.010000" steps="352"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="append_mon&#39;vc" expl="VC for append_mon">
 <transf name="split_goal_right" >
  <goal name="append_mon&#39;vc.0" expl="postcondition">
  <transf name="compute_in_goal" >
   <goal name="append_mon&#39;vc.0.0" expl="postcondition">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_mon&#39;vc" expl="VC for mul_mon">
 <transf name="split_vc" >
  <goal name="mul_mon&#39;vc.0" expl="postcondition">
  </goal>
 </transf>
 </goal>
 <goal name="mul_devel&#39;vc" expl="VC for mul_devel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mul_devel&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="mul_devel&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.070363" steps="892"/></proof>
   </goal>
   <goal name="mul_devel&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.050000" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ext&#39;vc" expl="VC for ext">
 <transf name="split_goal_right" >
  <goal name="ext&#39;vc.0" expl="postcondition">
  <proof prover="3"><result status="timeout" time="1.220000" steps="343975"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ext_sub" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="8"/></proof>
 </goal>
 <goal name="conv&#39;vc" expl="VC for conv" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="conv&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.046779" steps="1411"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="same&#39;vc" expl="VC for same" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="78"/></proof>
 </goal>
 <goal name="squash_append" proved="true">
 <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.050000" steps="7519"/></proof>
 <transf name="compute_in_goal" proved="true" >
  <goal name="squash_append.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="5847745"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.060000" steps="9755"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insert_mon&#39;vc" expl="VC for insert_mon" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert_mon&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.130000" steps="15086"/></proof>
  </goal>
  <goal name="insert_mon&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="4" timelimit="1" memlimit="1000"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="insert_mon&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.110000" steps="15572"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="insertion_sort_mon&#39;vc" expl="VC for insertion_sort_mon" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="insertion_sort_mon&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.040000" steps="5039"/></proof>
  </goal>
  <goal name="insertion_sort_mon&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.051346" steps="538"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="normalize&#39;&#39;vc" expl="VC for normalize&#39;" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="12"/></proof>
 </goal>
 <goal name="normalize&#39;vc" expl="VC for normalize" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="normalize&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="normalize&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="compute_in_goal" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="norm&#39;vc" expl="VC for norm" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="62"/></proof>
 </goal>
 <goal name="norm&#39;&#39;vc" expl="VC for norm&#39;" proved="true">
 <proof prover="4"><result status="valid" time="0.020000" steps="56"/></proof>
 </goal>
 <goal name="norm_f&#39;vc" expl="VC for norm_f" proved="true">
 <proof prover="1"><result status="valid" time="0.040000" steps="69522"/></proof>
 </goal>
</theory>
<theory name="ReifyTests" proved="true">
 <goal name="A.Assoc" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="A.Unit_def_l" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="250"/></proof>
 </goal>
 <goal name="A.Unit_def_r" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="250"/></proof>
 </goal>
 <goal name="A.Comm" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="A.MulAssoc.Assoc" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="AUnitary" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="ANonTrivial" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="346"/></proof>
 </goal>
 <goal name="ExtDistSumA" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="ExtDistSumR" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="AssocMulExt" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="UnitExt" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="CommMulExt" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="3"/></proof>
 </goal>
 <goal name="eq0&#39;refn&#39;vc" expl="VC for eq0&#39;refn" proved="true">
 <proof prover="4"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="g" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="g.0" proved="true">
  <transf name="reflection_l" proved="true" arg1="norm">
   <goal name="g.0.0" expl="reification check" proved="true">
   <proof prover="4"><result status="valid" time="0.010000" steps="16"/></proof>
   </goal>
   <goal name="g.0.1" expl="asserted formula" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="g.0.1.0" proved="true">
    <transf name="compute_in_goal" proved="true" >
     <goal name="g.0.1.0.0" proved="true">
     <proof prover="4"><result status="valid" time="0.000000" steps="13"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="g.0.1.1" proved="true">
    <proof prover="4"><result status="valid" time="0.020000" steps="30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="h" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="h.0" proved="true">
  <transf name="reflection_l" proved="true" arg1="norm">
   <goal name="h.0.0" expl="reification check" proved="true">
   <proof prover="4"><result status="valid" time="0.020000" steps="19"/></proof>
   </goal>
   <goal name="h.0.1" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.020000" steps="525"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
