(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import ZArith.
Require Import Rbase.
Definition unit  := unit.

Parameter mark : Type.

Parameter at1: forall (a:Type), a -> mark  -> a.

Implicit Arguments at1.

Parameter old: forall (a:Type), a  -> a.

Implicit Arguments old.

Inductive ref (a:Type) :=
  | mk_ref : a -> ref a.
Implicit Arguments mk_ref.

Definition contents (a:Type)(u:(ref a)): a :=
  match u with
  | mk_ref contents1 => contents1
  end.
Implicit Arguments contents.

Inductive even : Z -> Prop :=
  | even_0 : (even 0%Z)
  | even_odd : forall (x:Z), (even x) -> (even (x + 2%Z)%Z).

Theorem even_not_odd : forall (x:Z), (even x) -> ~ (even (x + 1%Z)%Z).
(* YOU MAY EDIT THE PROOF BELOW *)
assert (nonneg: forall x:Z, even x -> (x >= 0)%Z).
induction 1; auto with *.
induction 1.
red; intro.
inversion H.
assert (h: (x = -1)%Z) by omega.
absurd (-1 >= 0)%Z.
omega.
apply nonneg.
rewrite <- h; auto.
intuition.
inversion H0.
assert (h: (x = -3)%Z) by omega.
absurd (-3 >= 0)%Z.
omega.
apply nonneg.
rewrite <- h; auto.
assert (x0 = x+1)%Z by omega.
subst x0; auto.
Qed.
(* DO NOT EDIT BELOW *)


