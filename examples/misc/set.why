theory Bidule
  use import set.SetMap

  type a
  type s = set a

  function a : s
  function b : s
  function c : s

  goal Union : forall s1 s2 : s. forall x : a.
    mem x (union s1 s2) -> (mem x s1 \/ mem x s2)

  goal Inter : forall s1 s2 : s. forall x : a.
    mem x (inter s1 s2) -> (mem x s1 /\ mem x s2)

  goal Union_inter : forall s1 s2 s3 : s.
    equal (inter (union s1 s2) s3) (union (inter s1 s3) (inter s2 s3))

  lemma Union_assoc : forall s1 s2 s3 : s.
    equal (union (union s1 s2) s3) (union s1 (union s2 s3))

  clone algebra.Assoc with type t = s, function op = union, goal Assoc

  clone algebra.AC with type t = s, function op = union,
    goal Assoc, goal Comm.Comm

end
