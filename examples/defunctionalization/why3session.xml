<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.5.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="defunctionalization.mlw"/>
<theory name="DirectSem" proved="true">
 <goal name="eval_p3" proved="true">
 <proof prover="5"><result status="valid" time="0.014855" steps="24"/></proof>
 </goal>
</theory>
<theory name="CPS" proved="true">
 <goal name="eval_1&#39;vc" expl="VC for eval_1" proved="true">
 <proof prover="5"><result status="valid" time="0.017529" steps="103"/></proof>
 </goal>
 <goal name="interpret_1&#39;vc" expl="VC for interpret_1" proved="true">
 <proof prover="5"><result status="valid" time="0.015148" steps="4"/></proof>
 </goal>
</theory>
<theory name="Defunctionalization" proved="true">
 <goal name="size_e_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_e_pos.0" proved="true">
  <proof prover="5"><result status="valid" time="0.012628" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="5"><result status="valid" time="0.011973" steps="27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="continue_2&#39;vc" expl="VC for continue_2" proved="true">
 <proof prover="5"><result status="valid" time="0.017764" steps="93"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <proof prover="5"><result status="valid" time="0.046699" steps="353"/></proof>
 </goal>
 <goal name="interpret_2&#39;vc" expl="VC for interpret_2" proved="true">
 <proof prover="5"><result status="valid" time="0.018562" steps="47"/></proof>
 </goal>
</theory>
<theory name="Defunctionalization2" proved="true">
 <goal name="continue_2&#39;vc" expl="VC for continue_2" proved="true">
 <proof prover="5"><result status="valid" time="0.016208" steps="124"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="eval_2&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.011937" steps="25"/></proof>
  </goal>
  <goal name="eval_2&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.023190" steps="57"/></proof>
  </goal>
  <goal name="eval_2&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.030193" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="interpret_2&#39;vc" expl="VC for interpret_2" proved="true">
 <proof prover="5"><result status="valid" time="0.014508" steps="34"/></proof>
 </goal>
</theory>
<theory name="SemWithError" proved="true">
 <goal name="cps_correct_expr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="cps_correct_expr.0" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="cps_correct_expr.0.0" proved="true">
   <proof prover="5"><result status="valid" time="0.013741" steps="14"/></proof>
   </goal>
   <goal name="cps_correct_expr.0.1" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="cps_correct_expr.0.1.0" proved="true">
    <transf name="subst" proved="true" arg1="e">
     <goal name="cps_correct_expr.0.1.0.0" proved="true">
     <transf name="unfold" proved="true" arg1="eval_1">
      <goal name="cps_correct_expr.0.1.0.0.0" proved="true">
      <transf name="step" proved="true" >
       <goal name="cps_correct_expr.0.1.0.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="cps_correct_expr.0.1.0.0.0.0.0" proved="true">
        <proof prover="5"><result status="valid" time="0.019605" steps="159"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cps_correct" proved="true">
 <proof prover="5"><result status="valid" time="0.004243" steps="10"/></proof>
 </goal>
 <goal name="cps2_correct_expr_aux" proved="true">
 <proof prover="5"><result status="valid" time="0.007617" steps="6"/></proof>
 </goal>
 <goal name="cps2_correct_expr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="cps2_correct_expr.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="cps2_correct_expr.0.0" proved="true">
   <proof prover="5"><result status="valid" time="0.008619" steps="36"/></proof>
   </goal>
   <goal name="cps2_correct_expr.0.1" proved="true">
   <proof prover="5"><result status="valid" time="0.036239" steps="169"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cps2_correct" proved="true">
 <proof prover="5"><result status="valid" time="0.012423" steps="30"/></proof>
 </goal>
 <goal name="cps3_correct_expr&#39;vc" expl="VC for cps3_correct_expr" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="cps3_correct_expr&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.007991" steps="27"/></proof>
  </goal>
  <goal name="cps3_correct_expr&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.010982" steps="29"/></proof>
  </goal>
  <goal name="cps3_correct_expr&#39;vc.2" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.011459" steps="12"/></proof>
  </goal>
  <goal name="cps3_correct_expr&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="cps3_correct_expr&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.021863" steps="54"/></proof>
   </goal>
   <goal name="cps3_correct_expr&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.122174" steps="17318"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cps3_correct" proved="true">
 <proof prover="5"><result status="valid" time="0.015735" steps="20"/></proof>
 </goal>
 <goal name="size_e_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_e_pos.0" proved="true">
  <proof prover="5"><result status="valid" time="0.004858" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="5"><result status="valid" time="0.020027" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="continue_4&#39;vc" expl="VC for continue_4" proved="true">
 <proof prover="5"><result status="valid" time="0.032780" steps="226"/></proof>
 </goal>
 <goal name="eval_4&#39;vc" expl="VC for eval_4" proved="true">
 <proof prover="5"><result status="valid" time="0.348903" steps="3951"/></proof>
 </goal>
 <goal name="interpret_4&#39;vc" expl="VC for interpret_4" proved="true">
 <proof prover="5"><result status="valid" time="0.025549" steps="98"/></proof>
 </goal>
</theory>
<theory name="ReductionSemantics" proved="true">
 <goal name="contract&#39;vc" expl="VC for contract" proved="true">
 <proof prover="5"><result status="valid" time="0.015620" steps="107"/></proof>
 </goal>
 <goal name="recompose_values&#39;vc" expl="VC for recompose_values" proved="true">
 <proof prover="5"><result status="valid" time="0.035870" steps="200"/></proof>
 </goal>
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="5"><result status="valid" time="0.021782" steps="34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decompose_term&#39;vc" expl="VC for decompose_term" proved="true">
 <proof prover="5"><result status="valid" time="0.033452" steps="150"/></proof>
 </goal>
 <goal name="decompose_cont&#39;vc" expl="VC for decompose_cont" proved="true">
 <proof prover="5"><result status="valid" time="0.040857" steps="380"/></proof>
 </goal>
 <goal name="decompose&#39;vc" expl="VC for decompose" proved="true">
 <proof prover="5"><result status="valid" time="0.014189" steps="18"/></proof>
 </goal>
 <goal name="reduce&#39;vc" expl="VC for reduce" proved="true">
 <proof prover="5"><result status="valid" time="0.016680" steps="24"/></proof>
 </goal>
 <goal name="itere&#39;vc" expl="VC for itere" proved="true">
 <proof prover="5"><result status="valid" time="0.019047" steps="38"/></proof>
 </goal>
 <goal name="refocus&#39;vc" expl="VC for refocus" proved="true">
 <proof prover="5"><result status="valid" time="0.007827" steps="11"/></proof>
 </goal>
 <goal name="itere_opt&#39;vc" expl="VC for itere_opt" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="itere_opt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.015840" steps="12"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.013071" steps="23"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.2" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.015985" steps="12"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="5"><result status="valid" time="0.017217" steps="36"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.046072" steps="322"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="normalize&#39;vc" expl="VC for normalize" proved="true">
 <proof prover="5"><result status="valid" time="0.011671" steps="14"/></proof>
 </goal>
 <goal name="eval_1&#39;vc" expl="VC for eval_1" proved="true">
 <proof prover="5"><result status="valid" time="0.025207" steps="109"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <proof prover="5"><result status="valid" time="0.033306" steps="202"/></proof>
 </goal>
 <goal name="interpret&#39;vc" expl="VC for interpret" proved="true">
 <proof prover="5"><result status="valid" time="0.009610" steps="14"/></proof>
 </goal>
</theory>
<theory name="RWithError" proved="true">
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="5"><result status="valid" time="0.024863" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="recompose_values&#39;vc" expl="VC for recompose_values" proved="true">
 <proof prover="5"><result status="valid" time="0.111264" steps="1097"/></proof>
 </goal>
 <goal name="recompose_underflow&#39;vc" expl="VC for recompose_underflow" proved="true">
 <proof prover="5"><result status="valid" time="0.062006" steps="387"/></proof>
 </goal>
 <goal name="eval_1&#39;vc" expl="VC for eval_1" proved="true">
 <proof prover="5"><result status="valid" time="0.032449" steps="159"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <proof prover="5"><result status="valid" time="0.191382" steps="2001"/></proof>
 </goal>
 <goal name="interpret&#39;vc" expl="VC for interpret" proved="true">
 <proof prover="5"><result status="valid" time="0.017912" steps="22"/></proof>
 </goal>
</theory>
</file>
</why3session>
