<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.7.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="foveoos11_challenge3.mlw"/>
<theory name="TwoEqualElements" proved="true">
 <goal name="two_equal_elements&#39;vc" expl="VC for two_equal_elements" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="two_equal_elements&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="3316"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="1884"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="1884"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="1884"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="5449"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="5626"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="5880"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.7" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="6924"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="7720"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5287"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="12807"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5499"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="11964"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="9216"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="two_equal_elements&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="two_equal_elements&#39;vc.14.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="two_equal_elements&#39;vc.14.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.12" steps="19855"/></proof>
     </goal>
     <goal name="two_equal_elements&#39;vc.14.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="10513"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="4912"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="10504"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="16689"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="16125"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.19" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="two_equal_elements&#39;vc.19.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="two_equal_elements&#39;vc.19.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="two_equal_elements&#39;vc.19.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.08" steps="8544"/></proof>
     </goal>
     <goal name="two_equal_elements&#39;vc.19.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="8857"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="9922"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="4832"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="12853"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="5102"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="13081"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.01" steps="6752"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.26" expl="loop invariant preservation" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="two_equal_elements&#39;vc.26.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="22039"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.27" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="7915"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5187"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="11576"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="12535"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.31" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="16356"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="two_equal_elements&#39;vc.32.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="two_equal_elements&#39;vc.32.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="two_equal_elements&#39;vc.32.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.05" steps="20305"/></proof>
     </goal>
     <goal name="two_equal_elements&#39;vc.32.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="9676"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="167007"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="8195"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.35" expl="out of loop bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="4619"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
