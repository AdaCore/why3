<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/><path name="foveoos11_challenge3.mlw"/>
<theory name="TwoEqualElements" proved="true">
 <goal name="VC two_equal_elements" expl="VC for two_equal_elements" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="VC two_equal_elements.0" expl="array creation size" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="3627"/></proof>
  </goal>
  <goal name="VC two_equal_elements.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="2145"/></proof>
  </goal>
  <goal name="VC two_equal_elements.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="2145"/></proof>
  </goal>
  <goal name="VC two_equal_elements.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="2145"/></proof>
  </goal>
  <goal name="VC two_equal_elements.4" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="5743"/></proof>
  </goal>
  <goal name="VC two_equal_elements.5" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="5880"/></proof>
  </goal>
  <goal name="VC two_equal_elements.6" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="6130"/></proof>
  </goal>
  <goal name="VC two_equal_elements.7" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="6964"/></proof>
  </goal>
  <goal name="VC two_equal_elements.8" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="7762"/></proof>
  </goal>
  <goal name="VC two_equal_elements.9" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5524"/></proof>
  </goal>
  <goal name="VC two_equal_elements.10" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="12957"/></proof>
  </goal>
  <goal name="VC two_equal_elements.11" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5736"/></proof>
  </goal>
  <goal name="VC two_equal_elements.12" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="11995"/></proof>
  </goal>
  <goal name="VC two_equal_elements.13" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="9267"/></proof>
  </goal>
  <goal name="VC two_equal_elements.14" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="VC two_equal_elements.14.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="VC two_equal_elements.14.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="VC two_equal_elements.14.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.08" steps="19703"/></proof>
     </goal>
     <goal name="VC two_equal_elements.14.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="10082"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_equal_elements.15" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5150"/></proof>
  </goal>
  <goal name="VC two_equal_elements.16" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="10569"/></proof>
  </goal>
  <goal name="VC two_equal_elements.17" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="16728"/></proof>
  </goal>
  <goal name="VC two_equal_elements.18" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="16043"/></proof>
  </goal>
  <goal name="VC two_equal_elements.19" expl="loop invariant preservation" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="VC two_equal_elements.19.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="10452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_equal_elements.20" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="9856"/></proof>
  </goal>
  <goal name="VC two_equal_elements.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5070"/></proof>
  </goal>
  <goal name="VC two_equal_elements.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="12916"/></proof>
  </goal>
  <goal name="VC two_equal_elements.23" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="5340"/></proof>
  </goal>
  <goal name="VC two_equal_elements.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="13003"/></proof>
  </goal>
  <goal name="VC two_equal_elements.25" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="5675"/></proof>
  </goal>
  <goal name="VC two_equal_elements.26" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="VC two_equal_elements.26.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="VC two_equal_elements.26.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="VC two_equal_elements.26.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.05" steps="13524"/></proof>
     </goal>
     <goal name="VC two_equal_elements.26.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="10161"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_equal_elements.27" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="7951"/></proof>
  </goal>
  <goal name="VC two_equal_elements.28" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="5136"/></proof>
  </goal>
  <goal name="VC two_equal_elements.29" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="11292"/></proof>
  </goal>
  <goal name="VC two_equal_elements.30" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="12283"/></proof>
  </goal>
  <goal name="VC two_equal_elements.31" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="15903"/></proof>
  </goal>
  <goal name="VC two_equal_elements.32" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="VC two_equal_elements.32.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="VC two_equal_elements.32.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="VC two_equal_elements.32.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.12" steps="22587"/></proof>
     </goal>
     <goal name="VC two_equal_elements.32.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="9695"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_equal_elements.33" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="1362934"/></proof>
  </goal>
  <goal name="VC two_equal_elements.34" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="8488"/></proof>
  </goal>
  <goal name="VC two_equal_elements.35" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="4899"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
