<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.7.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="foveoos11_challenge3.mlw"/>
<theory name="TwoEqualElements" proved="true">
 <goal name="two_equal_elements&#39;vc" expl="VC for two_equal_elements" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="two_equal_elements&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="3259"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.000000" steps="1905"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.000000" steps="1905"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.000000" steps="1905"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="5319"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="5496"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="5750"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.7" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="6794"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="7590"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="5170"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.060000" steps="12677"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="5382"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.070000" steps="11834"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.030000" steps="9086"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="two_equal_elements&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="two_equal_elements&#39;vc.14.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="two_equal_elements&#39;vc.14.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.120000" steps="19725"/></proof>
     </goal>
     <goal name="two_equal_elements&#39;vc.14.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.020000" steps="10383"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="4795"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="10374"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.080000" steps="16559"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="15995"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.19" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="two_equal_elements&#39;vc.19.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="two_equal_elements&#39;vc.19.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="two_equal_elements&#39;vc.19.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.080000" steps="8427"/></proof>
     </goal>
     <goal name="two_equal_elements&#39;vc.19.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.030000" steps="8740"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="9792"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="4715"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.060000" steps="12723"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.060000" steps="4985"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.060000" steps="12951"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.010000" steps="6216"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.26" expl="loop invariant preservation" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="two_equal_elements&#39;vc.26.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.020000" steps="22094"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.27" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="7785"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.010000" steps="5150"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="11526"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.000000" steps="12485"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.31" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.050000" steps="16306"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="appear_twice">
   <goal name="two_equal_elements&#39;vc.32.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="two_equal_elements&#39;vc.32.0.0" expl="loop invariant preservation" proved="true">
    <transf name="assert" proved="true" arg1="(forall i1 j:int. 0 &lt;= i1 /\ i1 &lt; (i + 1) /\ 0 &lt;= j /\ j &lt; (i + 1) /\ i1 &lt;&gt; j -&gt; a[i1] &lt;&gt; v \/ a[j] &lt;&gt; v)">
     <goal name="two_equal_elements&#39;vc.32.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.050000" steps="20255"/></proof>
     </goal>
     <goal name="two_equal_elements&#39;vc.32.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="1"><result status="valid" time="0.030000" steps="9626"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="two_equal_elements&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.080000" steps="160387"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.040000" steps="8065"/></proof>
  </goal>
  <goal name="two_equal_elements&#39;vc.35" expl="out of loop bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="4489"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
