<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.4.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Z3" version="4.11.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="linked_list_rev.mlw"/>
<theory name="InPlaceRev" proved="true">
 <goal name="mem_decomp&#39;vc" expl="VC for mem_decomp" proved="true">
 <proof prover="3"><result status="valid" time="0.040000" steps="381"/></proof>
 </goal>
 <goal name="list_seg_frame_ext&#39;vc" expl="VC for list_seg_frame_ext" proved="true">
 <proof prover="3"><result status="valid" time="0.040000" steps="352"/></proof>
 </goal>
 <goal name="list_seg_functional&#39;vc" expl="VC for list_seg_functional" proved="true">
 <proof prover="3"><result status="valid" time="0.030000" steps="303"/></proof>
 </goal>
 <goal name="list_seg_sublistl&#39;vc" expl="VC for list_seg_sublistl" proved="true">
 <proof prover="3"><result status="valid" time="0.050000" steps="311"/></proof>
 </goal>
 <goal name="list_seg_no_repet&#39;vc" expl="VC for list_seg_no_repet" proved="true">
 <proof prover="3"><result status="valid" time="0.060000" steps="421"/></proof>
 </goal>
 <goal name="list_seg_append&#39;vc" expl="VC for list_seg_append" proved="true">
 <proof prover="3"><result status="valid" time="0.030000" steps="259"/></proof>
 </goal>
 <goal name="app&#39;vc" expl="VC for app" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="app&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="55"/></proof>
  </goal>
  <goal name="app&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="12"/></proof>
  </goal>
  <goal name="app&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="app&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="app&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="16"/></proof>
  </goal>
  <goal name="app&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="48"/></proof>
  </goal>
  <goal name="app&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="22"/></proof>
  </goal>
  <goal name="app&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="62"/></proof>
  </goal>
  <goal name="app&#39;vc.8" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="165"/></proof>
  </goal>
  <goal name="app&#39;vc.9" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="32"/></proof>
  </goal>
  <goal name="app&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="34"/></proof>
  </goal>
  <goal name="app&#39;vc.11" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="149"/></proof>
  </goal>
  <goal name="app&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="36"/></proof>
  </goal>
  <goal name="app&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="327"/></proof>
  </goal>
  <goal name="app&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="107"/></proof>
  </goal>
  <goal name="app&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="270"/></proof>
  </goal>
  <goal name="app&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="303"/></proof>
  </goal>
  <goal name="app&#39;vc.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="26"/></proof>
  </goal>
  <goal name="app&#39;vc.18" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="126"/></proof>
  </goal>
  <goal name="app&#39;vc.19" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="79"/></proof>
  </goal>
  <goal name="app&#39;vc.20" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.080000" steps="461"/></proof>
  </goal>
  <goal name="app&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="199"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_place_reverse&#39;vc" expl="VC for in_place_reverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_place_reverse&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="23"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="10"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="16"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="118"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="61"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.7" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="148"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="142"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="93"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.210000" steps="1052"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="36"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="81"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InPlaceRevSeq" proved="true">
 <goal name="non_empty_seq" proved="true">
 <proof prover="3"><result status="valid" time="0.010000" steps="47"/></proof>
 </goal>
 <goal name="mem_decomp&#39;vc" expl="VC for mem_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="13"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="18"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="27"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="11"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.080000" steps="573"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_frame_ext" proved="true">
 <proof prover="3"><result status="valid" time="0.030000" steps="137"/></proof>
 </goal>
 <goal name="list_seg_functional&#39;vc" expl="VC for list_seg_functional" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_functional&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="32"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="31"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="304"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.100000" steps="643"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="5.300000" steps="761"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_tail&#39;vc" expl="VC for list_seg_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_tail&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="17"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="157"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="27"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.080000" steps="544"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_append&#39;vc" expl="VC for list_seg_append" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_append&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="24"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="8"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="8"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.870000" steps="8193"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="seq_tail_append" proved="true">
 <proof prover="3"><result status="valid" time="0.030000" steps="132"/></proof>
 </goal>
 <goal name="list_seg_prefix&#39;vc" expl="VC for list_seg_prefix" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_prefix&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="10"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="12"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="12"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="47"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="55"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.320000" steps="449170"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_sublistl&#39;vc" expl="VC for list_seg_sublistl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_sublistl&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="8"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="44"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="85"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="list_seg_sublistl&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.000000" steps="10"/></proof>
   </goal>
   <goal name="list_seg_sublistl&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l1 = empty)">
    <goal name="list_seg_sublistl&#39;vc.6.1.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.050000"/></proof>
    </goal>
    <goal name="list_seg_sublistl&#39;vc.6.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall l:seq &#39;a. empty ++ l = l)">
     <goal name="list_seg_sublistl&#39;vc.6.1.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall l:seq &#39;a. empty ++ l == l)">
      <goal name="list_seg_sublistl&#39;vc.6.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.030000" steps="129"/></proof>
      </goal>
      <goal name="list_seg_sublistl&#39;vc.6.1.1.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.020000" steps="47"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="list_seg_sublistl&#39;vc.6.1.1.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.010000" steps="10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_tail" proved="true">
 <proof prover="3"><result status="valid" time="0.010000" steps="17"/></proof>
 </goal>
 <goal name="tail_suffix" proved="true">
 <proof prover="3"><result status="valid" time="0.020000" steps="88"/></proof>
 </goal>
 <goal name="list_seg_no_repet&#39;vc" expl="VC for list_seg_no_repet" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_no_repet&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.410000" steps="1838"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="18"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="70"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="86"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.7" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="31"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="9"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.9" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.690000" steps="72176"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="284"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="app&#39;vc" expl="VC for app" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="app&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="155"/></proof>
  </goal>
  <goal name="app&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="10"/></proof>
  </goal>
  <goal name="app&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="12"/></proof>
  </goal>
  <goal name="app&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="40"/></proof>
  </goal>
  <goal name="app&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="app&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="56"/></proof>
  </goal>
  <goal name="app&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="56"/></proof>
  </goal>
  <goal name="app&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="22"/></proof>
  </goal>
  <goal name="app&#39;vc.8" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="app&#39;vc.9" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="231"/></proof>
  </goal>
  <goal name="app&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="30"/></proof>
  </goal>
  <goal name="app&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="40"/></proof>
  </goal>
  <goal name="app&#39;vc.12" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="125"/></proof>
  </goal>
  <goal name="app&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="42"/></proof>
  </goal>
  <goal name="app&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.440000" steps="2478"/></proof>
  </goal>
  <goal name="app&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="47"/></proof>
  </goal>
  <goal name="app&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="158"/></proof>
  </goal>
  <goal name="app&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="1.640000" steps="1068"/></proof>
  <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),get1,set1,([]&#39;),([&lt;-]&#39;),(!),([]),singleton,cons,snoc,(++),reverse,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,length_nonnegative,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;def,([.._])&#39;def,mem_append,mem_tail,eq_loc&#39;spec,non_empty_seq,list_seg_frame_ext,list_seg_functional,list_seg_tail,list_seg_append,seq_tail_append,list_seg_prefix,list_seg_sublistl,get_tail,tail_suffix,Requires2,Requires1,Requires,Ensures11,H1,Ensures10,LoopInvariant8,LoopInvariant7,Ensures9,H,Assert,Ensures8,Ensures7,Ensures6,Ensures5,Ensures4,Ensures3,LoopInvariant3,LoopInvariant2,LoopInvariant1">
   <goal name="app&#39;vc.17.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.040000" steps="111"/></proof>
   <proof prover="3"><result status="valid" time="0.050000" steps="183"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="app&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="26"/></proof>
  </goal>
  <goal name="app&#39;vc.19" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.200000" steps="1069"/></proof>
  </goal>
  <goal name="app&#39;vc.20" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.070000" steps="280"/></proof>
  </goal>
  <goal name="app&#39;vc.21" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="2.060000" steps="5758"/></proof>
  </goal>
  <goal name="app&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.550000" steps="1631"/></proof>
  <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),get1,set1,([]&#39;),([&lt;-]&#39;),(!),([]),singleton,cons,snoc,(++),mem,reverse,disjoint,no_repet,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,length_nonnegative,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,mem_append,mem_tail,eq_loc&#39;spec,non_empty_seq,list_seg_frame_ext,list_seg_functional,list_seg_tail,list_seg_append,seq_tail_append,list_seg_prefix,list_seg_sublistl,get_tail,tail_suffix,list_seg_no_repet,Requires1,Requires,Ensures3,H1,Ensures2,LoopInvariant4,LoopInvariant3,LoopInvariant">
   <goal name="app&#39;vc.22.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.940000" steps="1515"/></proof>
   <proof prover="3"><result status="valid" time="5.190000" steps="6996"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="in_place_reverse&#39;vc" expl="VC for in_place_reverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_place_reverse&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="2"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="103"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.340000" steps="1843"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="30"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.8" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="124"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.280000" steps="1090"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="5.030000" steps="15268"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.550000" steps="80547"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="assert" proved="true" arg1="(length pM1 &gt; 0)">
   <goal name="in_place_reverse&#39;vc.12.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.020000" steps="38"/></proof>
   </goal>
   <goal name="in_place_reverse&#39;vc.12.1" expl="loop invariant preservation" proved="true">
   <transf name="remove" proved="true" arg1="LoopInvariant,LoopInvariant1,LoopInvariant2,LoopInvariant4,LoopInvariant5,LoopInvariant6,Ensures2,Ensures3,Ensures4,Ensures5,Ensures6,Ensures7,Ensures8">
    <goal name="in_place_reverse&#39;vc.12.1.0" expl="loop invariant preservation" proved="true">
    <proof prover="0"><result status="valid" time="1.170000" steps="1462"/></proof>
    <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),get1,set1,([]&#39;),([&lt;-]&#39;),(!),([]),singleton,cons,snoc,(++),mem,disjoint,no_repet,list_seg,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,length_nonnegative,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,snoc&#39;spec,([..])&#39;def,([.._])&#39;def,mem_append,mem_tail,eq_loc&#39;spec,non_empty_seq,list_seg_frame_ext,list_seg_functional,list_seg_tail,list_seg_append,seq_tail_append,list_seg_prefix,list_seg_sublistl,get_tail,tail_suffix,list_seg_no_repet,Requires,H,Assert">
     <goal name="in_place_reverse&#39;vc.12.1.0.0" expl="loop invariant preservation" proved="true">
     <proof prover="0"><result status="valid" time="0.020000" steps="67"/></proof>
     <proof prover="3"><result status="valid" time="0.050000" steps="188"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="in_place_reverse&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.080000" steps="515"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="YetAnotherInPlaceRev" proved="true">
 <goal name="cdr&#39;vc" expl="VC for cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.070000" steps="27"/></proof>
 </goal>
 <goal name="set_cdr&#39;vc" expl="VC for set_cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.090000" steps="556"/></proof>
 </goal>
 <goal name="list_reversal&#39;vc" expl="VC for list_reversal" proved="true">
 <proof prover="8" timelimit="1"><result status="valid" time="0.040000" steps="48588"/></proof>
 </goal>
 <goal name="is_list&#39;vc" expl="VC for is_list" proved="true">
 <proof prover="9"><result status="valid" time="0.070000" steps="433"/></proof>
 </goal>
 <goal name="cells_of_list&#39;vc" expl="VC for cells_of_list" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cells_of_list&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="669"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.020000" steps="276"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="334"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.192970" steps="51987"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.790000" steps="7419"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.060000" steps="476"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_of_cells&#39;vc" expl="VC for list_of_cells" proved="true">
 <proof prover="8" timelimit="1"><result status="valid" time="0.280000" steps="416085"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="list_of_cells&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2191"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="1344"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="1414"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.080000" steps="3692"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.100000" steps="4268"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.085378" steps="27128"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_reversal_final&#39;vc" expl="VC for list_reversal_final" proved="true">
 <proof prover="5"><result status="valid" time="0.260000" steps="48199"/></proof>
 </goal>
</theory>
<theory name="Termination" proved="true">
 <goal name="cdr&#39;vc" expl="VC for cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.030000" steps="1540"/></proof>
 </goal>
 <goal name="set_cdr&#39;vc" expl="VC for set_cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.030000" steps="2081"/></proof>
 </goal>
 <goal name="set_idx&#39;vc" expl="VC for set_idx" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_idx&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_idx&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.040000" steps="2795"/></proof>
   </goal>
   <goal name="set_idx&#39;vc.0.1" expl="VC for set_idx" proved="true">
   <proof prover="9"><result status="valid" time="0.130000" steps="22635"/></proof>
   </goal>
   <goal name="set_idx&#39;vc.0.2" expl="VC for set_idx" proved="true">
   <proof prover="9"><result status="valid" time="0.189648" steps="61734"/></proof>
   </goal>
   <goal name="set_idx&#39;vc.0.3" expl="VC for set_idx" proved="true">
   <proof prover="8"><result status="valid" time="0.640000" steps="1433297"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_idx&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2025"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_reversal&#39;vc" expl="VC for list_reversal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_reversal&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2003"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2056"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2061"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="17474"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="3333"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3199"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="12150"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2783"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2784"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.9" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.010000" steps="1769"/></proof>
  <proof prover="9"><result status="valid" time="0.030000" steps="2780"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2783"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2795"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2863"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2873"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.14" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.060000" steps="5952"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.080000" steps="11217"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3398"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.080018" steps="32056"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3738"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="6370"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="4392"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.21" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(idx l = 0)">
   <goal name="list_reversal&#39;vc.21.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.040000" steps="5644"/></proof>
   </goal>
   <goal name="list_reversal&#39;vc.21.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.090000" steps="19304"/></proof>
   </goal>
  </transf>
  <transf name="case" proved="true" arg1="(idx l = -1)">
   <goal name="list_reversal&#39;vc.21.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.070000" steps="8977"/></proof>
   </goal>
   <goal name="list_reversal&#39;vc.21.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.070000" steps="8817"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="list_reversal&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2781"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2791"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.24" expl="loop variant decrease" proved="true">
  <transf name="right" proved="true" >
   <goal name="list_reversal&#39;vc.24.0" expl="right case" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="list_reversal&#39;vc.24.0.0" expl="right case" proved="true">
    <proof prover="9"><result status="valid" time="0.050000" steps="4163"/></proof>
    </goal>
    <goal name="list_reversal&#39;vc.24.0.1" expl="right case" proved="true">
    <proof prover="9"><result status="valid" time="0.050000" steps="4723"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="list_reversal&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.080000" steps="7648"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="3226"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.145488" steps="46185"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3082"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="4627"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.010000" steps="39"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.31" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(idx l = 0)">
   <goal name="list_reversal&#39;vc.31.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="list_reversal&#39;vc.31.0.0" expl="true case (loop invariant preservation)" proved="true">
    <transf name="compute_in_goal" proved="true" >
     <goal name="list_reversal&#39;vc.31.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.040000" steps="4289"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="list_reversal&#39;vc.31.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.039549" steps="11565"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
