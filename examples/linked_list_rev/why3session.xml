<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="10" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="linked_list_rev.mlw"/>
<theory name="InPlaceRev" proved="true">
 <goal name="mem_decomp&#39;vc" expl="VC for mem_decomp" proved="true">
 <proof prover="10"><result status="valid" time="0.040000" steps="337"/></proof>
 </goal>
 <goal name="list_seg_frame_ext&#39;vc" expl="VC for list_seg_frame_ext" proved="true">
 <proof prover="10"><result status="valid" time="0.040000" steps="338"/></proof>
 </goal>
 <goal name="list_seg_functional&#39;vc" expl="VC for list_seg_functional" proved="true">
 <proof prover="10"><result status="valid" time="0.030000" steps="315"/></proof>
 </goal>
 <goal name="list_seg_sublistl&#39;vc" expl="VC for list_seg_sublistl" proved="true">
 <proof prover="10"><result status="valid" time="0.050000" steps="217"/></proof>
 </goal>
 <goal name="list_seg_no_repet&#39;vc" expl="VC for list_seg_no_repet" proved="true">
 <proof prover="10"><result status="valid" time="0.060000" steps="448"/></proof>
 </goal>
 <goal name="list_seg_append&#39;vc" expl="VC for list_seg_append" proved="true">
 <proof prover="10"><result status="valid" time="0.030000" steps="336"/></proof>
 </goal>
 <goal name="app&#39;vc" expl="VC for app" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="app&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="53"/></proof>
  </goal>
  <goal name="app&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="12"/></proof>
  </goal>
  <goal name="app&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="app&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="app&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="16"/></proof>
  </goal>
  <goal name="app&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="64"/></proof>
  </goal>
  <goal name="app&#39;vc.6" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="22"/></proof>
  </goal>
  <goal name="app&#39;vc.7" expl="unreachable point" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="85"/></proof>
  </goal>
  <goal name="app&#39;vc.8" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="267"/></proof>
  </goal>
  <goal name="app&#39;vc.9" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="32"/></proof>
  </goal>
  <goal name="app&#39;vc.10" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="34"/></proof>
  </goal>
  <goal name="app&#39;vc.11" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="155"/></proof>
  </goal>
  <goal name="app&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="36"/></proof>
  </goal>
  <goal name="app&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.060000" steps="566"/></proof>
  </goal>
  <goal name="app&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="122"/></proof>
  </goal>
  <goal name="app&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.040000" steps="420"/></proof>
  </goal>
  <goal name="app&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.060000" steps="619"/></proof>
  </goal>
  <goal name="app&#39;vc.17" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="26"/></proof>
  </goal>
  <goal name="app&#39;vc.18" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="170"/></proof>
  </goal>
  <goal name="app&#39;vc.19" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="88"/></proof>
  </goal>
  <goal name="app&#39;vc.20" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.080000" steps="765"/></proof>
  </goal>
  <goal name="app&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.040000" steps="315"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_place_reverse&#39;vc" expl="VC for in_place_reverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_place_reverse&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="23"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="10"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="16"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.5" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="173"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.6" expl="unreachable point" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="86"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.7" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="206"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="198"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="154"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.210000" steps="2103"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="38"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InPlaceRevSeq" proved="true">
 <goal name="non_empty_seq" proved="true">
 <proof prover="10"><result status="valid" time="0.010000" steps="77"/></proof>
 </goal>
 <goal name="mem_decomp&#39;vc" expl="VC for mem_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mem_decomp&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="14"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.1" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="18"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="27"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="13"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="mem_decomp&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.080000" steps="908"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_frame_ext" proved="true">
 <proof prover="10"><result status="valid" time="0.030000" steps="131"/></proof>
 </goal>
 <goal name="list_seg_functional&#39;vc" expl="VC for list_seg_functional" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_functional&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="25"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="38"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.050000" steps="484"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.100000" steps="1030"/></proof>
  </goal>
  <goal name="list_seg_functional&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.540040" steps="20099"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_tail&#39;vc" expl="VC for list_seg_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_tail&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="21"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.030000" steps="244"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="30"/></proof>
  </goal>
  <goal name="list_seg_tail&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.080000" steps="1046"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_append&#39;vc" expl="VC for list_seg_append" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_append&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="39"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="12"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="8"/></proof>
  </goal>
  <goal name="list_seg_append&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="1.326692" steps="16605"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="seq_tail_append" proved="true">
 <proof prover="10"><result status="valid" time="0.030000" steps="172"/></proof>
 </goal>
 <goal name="list_seg_prefix&#39;vc" expl="VC for list_seg_prefix" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_prefix&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="10"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="16"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="12"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="75"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="86"/></proof>
  </goal>
  <goal name="list_seg_prefix&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.043104" steps="90810"/></proof>
  <proof prover="10"><result status="valid" time="1.535176" steps="25125"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_seg_sublistl&#39;vc" expl="VC for list_seg_sublistl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_sublistl&#39;vc.0" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="9"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="8"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="69"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="119"/></proof>
  </goal>
  <goal name="list_seg_sublistl&#39;vc.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="list_seg_sublistl&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="10"><result status="valid" time="0.000000" steps="10"/></proof>
   </goal>
   <goal name="list_seg_sublistl&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(l1 = empty)">
    <goal name="list_seg_sublistl&#39;vc.6.1.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.050000"/></proof>
    </goal>
    <goal name="list_seg_sublistl&#39;vc.6.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall l:seq &#39;a. empty ++ l = l)">
     <goal name="list_seg_sublistl&#39;vc.6.1.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall l:seq &#39;a. empty ++ l == l)">
      <goal name="list_seg_sublistl&#39;vc.6.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="0.030000" steps="200"/></proof>
      </goal>
      <goal name="list_seg_sublistl&#39;vc.6.1.1.0.1" expl="asserted formula" proved="true">
      <proof prover="10"><result status="valid" time="0.020000" steps="20"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="list_seg_sublistl&#39;vc.6.1.1.1" expl="postcondition" proved="true">
     <proof prover="10"><result status="valid" time="0.010000" steps="22"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_tail" proved="true">
 <proof prover="10"><result status="valid" time="0.010000" steps="21"/></proof>
 </goal>
 <goal name="tail_suffix" proved="true">
 <proof prover="10"><result status="valid" time="0.020000" steps="146"/></proof>
 </goal>
 <goal name="list_seg_no_repet&#39;vc" expl="VC for list_seg_no_repet" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_seg_no_repet&#39;vc.0" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="4"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.2" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.127012" steps="1154"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.3" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="18"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="71"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.5" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.030000" steps="154"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.6" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="6"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.7" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="39"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.8" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="15"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.9" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.330055" steps="51720"/></proof>
  </goal>
  <goal name="list_seg_no_repet&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.050000" steps="532"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="app&#39;vc" expl="VC for app" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="app&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.030000" steps="127"/></proof>
  </goal>
  <goal name="app&#39;vc.1" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="10"/></proof>
  </goal>
  <goal name="app&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="12"/></proof>
  </goal>
  <goal name="app&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="40"/></proof>
  </goal>
  <goal name="app&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="app&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="73"/></proof>
  </goal>
  <goal name="app&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="56"/></proof>
  </goal>
  <goal name="app&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="22"/></proof>
  </goal>
  <goal name="app&#39;vc.8" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="app&#39;vc.9" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.060000" steps="441"/></proof>
  </goal>
  <goal name="app&#39;vc.10" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="30"/></proof>
  </goal>
  <goal name="app&#39;vc.11" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="40"/></proof>
  </goal>
  <goal name="app&#39;vc.12" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.040000" steps="202"/></proof>
  </goal>
  <goal name="app&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="42"/></proof>
  </goal>
  <goal name="app&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.139210" steps="2101"/></proof>
  </goal>
  <goal name="app&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="62"/></proof>
  </goal>
  <goal name="app&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.050000" steps="282"/></proof>
  </goal>
  <goal name="app&#39;vc.17" expl="loop invariant preservation" proved="true">
  <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),get1,set1,([]&#39;),([&lt;-]&#39;),(!),([]),singleton,cons,snoc,(++),reverse,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,length_nonnegative,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;def,([.._])&#39;def,mem_append,mem_tail,eq_loc&#39;spec,non_empty_seq,list_seg_frame_ext,list_seg_functional,list_seg_tail,list_seg_append,seq_tail_append,list_seg_prefix,list_seg_sublistl,get_tail,tail_suffix,Requires2,Requires1,Requires,Ensures11,H1,Ensures10,LoopInvariant8,LoopInvariant7,Ensures9,H,Assert,Ensures8,Ensures7,Ensures6,Ensures5,Ensures4,Ensures3,LoopInvariant3,LoopInvariant2,LoopInvariant1">
   <goal name="app&#39;vc.17.0" expl="loop invariant preservation" proved="true">
   <proof prover="10"><result status="valid" time="0.040000" steps="453"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="app&#39;vc.18" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="26"/></proof>
  </goal>
  <goal name="app&#39;vc.19" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.286586" steps="4230"/></proof>
  </goal>
  <goal name="app&#39;vc.20" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.070000" steps="349"/></proof>
  </goal>
  <goal name="app&#39;vc.21" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.312957" steps="5041"/></proof>
  </goal>
  <goal name="app&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.193096" steps="327026"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="in_place_reverse&#39;vc" expl="VC for in_place_reverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_place_reverse&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="2"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="16"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="28"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="10"><result status="valid" time="0.020000" steps="137"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.4" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.5" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.000000" steps="14"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.6" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.173201" steps="949"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.7" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="35"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.8" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.030000" steps="182"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.057017" steps="560"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="2.543266" steps="35219"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.550000" steps="76920"/></proof>
  </goal>
  <goal name="in_place_reverse&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="assert" proved="true" arg1="(length pM1 &gt; 0)">
   <goal name="in_place_reverse&#39;vc.12.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.020000" steps="57"/></proof>
   </goal>
   <goal name="in_place_reverse&#39;vc.12.1" expl="loop invariant preservation" proved="true">
   <transf name="remove" proved="true" arg1="LoopInvariant,LoopInvariant1,LoopInvariant2,LoopInvariant4,LoopInvariant5,LoopInvariant6,Ensures2,Ensures3,Ensures4,Ensures5,Ensures6,Ensures7,Ensures8">
    <goal name="in_place_reverse&#39;vc.12.1.0" expl="loop invariant preservation" proved="true">
    <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),get1,set1,([]&#39;),([&lt;-]&#39;),(!),([]),singleton,cons,snoc,(++),mem,disjoint,no_repet,list_seg,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,length_nonnegative,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,snoc&#39;spec,([..])&#39;def,([.._])&#39;def,mem_append,mem_tail,eq_loc&#39;spec,non_empty_seq,list_seg_frame_ext,list_seg_functional,list_seg_tail,list_seg_append,seq_tail_append,list_seg_prefix,list_seg_sublistl,get_tail,tail_suffix,list_seg_no_repet,Requires,H,Assert">
     <goal name="in_place_reverse&#39;vc.12.1.0.0" expl="loop invariant preservation" proved="true">
     <proof prover="10"><result status="valid" time="0.020000" steps="294"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="in_place_reverse&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.080000" steps="298"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="YetAnotherInPlaceRev" proved="true">
 <goal name="cdr&#39;vc" expl="VC for cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.070000" steps="27"/></proof>
 <proof prover="10"><result status="valid" time="0.005016" steps="0"/></proof>
 </goal>
 <goal name="set_cdr&#39;vc" expl="VC for set_cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.090000" steps="556"/></proof>
 <proof prover="10"><result status="valid" time="0.007595" steps="14"/></proof>
 </goal>
 <goal name="list_reversal&#39;vc" expl="VC for list_reversal" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.040000" steps="44667"/></proof>
 <proof prover="10"><result status="valid" time="0.546582" steps="7420"/></proof>
 </goal>
 <goal name="is_list&#39;vc" expl="VC for is_list" proved="true">
 <proof prover="9"><result status="valid" time="0.070000" steps="433"/></proof>
 <proof prover="10"><result status="valid" time="0.009588" steps="14"/></proof>
 </goal>
 <goal name="cells_of_list&#39;vc" expl="VC for cells_of_list" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="cells_of_list&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="669"/></proof>
  <proof prover="10"><result status="valid" time="0.015008" steps="8"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.020000" steps="276"/></proof>
  <proof prover="10"><result status="valid" time="0.006144" steps="6"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="334"/></proof>
  <proof prover="10"><result status="valid" time="0.011951" steps="6"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.562725" steps="51987"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="10" timelimit="1"><result status="valid" time="0.187895" steps="2679"/></proof>
  </goal>
  <goal name="cells_of_list&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="10" timelimit="1"><result status="valid" time="0.060000" steps="575"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_of_cells&#39;vc" expl="VC for list_of_cells" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="1.175469" steps="4056904"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="list_of_cells&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2313"/></proof>
  <proof prover="10"><result status="valid" time="0.013372" steps="21"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="1427"/></proof>
  <proof prover="10"><result status="valid" time="0.012726" steps="8"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="1498"/></proof>
  <proof prover="10"><result status="valid" time="0.004288" steps="8"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.080000" steps="3807"/></proof>
  <proof prover="10"><result status="valid" time="0.030524" steps="117"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.100000" steps="4383"/></proof>
  <proof prover="10"><result status="valid" time="0.024977" steps="138"/></proof>
  </goal>
  <goal name="list_of_cells&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.244087" steps="19313"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_reversal_final&#39;vc" expl="VC for list_reversal_final" proved="true">
 <proof prover="5"><result status="valid" time="0.260000" steps="48676"/></proof>
 </goal>
</theory>
<theory name="Termination" proved="true">
 <goal name="cdr&#39;vc" expl="VC for cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.030000" steps="1540"/></proof>
 <proof prover="10"><result status="valid" time="0.011713" steps="0"/></proof>
 </goal>
 <goal name="set_cdr&#39;vc" expl="VC for set_cdr" proved="true">
 <proof prover="9"><result status="valid" time="0.030000" steps="2081"/></proof>
 <proof prover="10"><result status="valid" time="0.014214" steps="14"/></proof>
 </goal>
 <goal name="set_idx&#39;vc" expl="VC for set_idx" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_idx&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_idx&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.040000" steps="2795"/></proof>
   <proof prover="10"><result status="valid" time="0.018868" steps="43"/></proof>
   </goal>
   <goal name="set_idx&#39;vc.0.1" expl="VC for set_idx" proved="true">
   <proof prover="9"><result status="valid" time="0.130000" steps="22635"/></proof>
   <proof prover="10"><result status="valid" time="0.195245" steps="1108"/></proof>
   </goal>
   <goal name="set_idx&#39;vc.0.2" expl="VC for set_idx" proved="true">
   <proof prover="9"><result status="valid" time="0.553354" steps="61734"/></proof>
   <proof prover="10"><result status="valid" time="0.275169" steps="1749"/></proof>
   </goal>
   <goal name="set_idx&#39;vc.0.3" expl="VC for set_idx" proved="true">
   <proof prover="2"><result status="valid" time="1.023641" steps="2134017"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_idx&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2025"/></proof>
  <proof prover="10"><result status="valid" time="0.018854" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="list_reversal&#39;vc" expl="VC for list_reversal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="list_reversal&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2003"/></proof>
  <proof prover="10"><result status="valid" time="0.004069" steps="8"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2056"/></proof>
  <proof prover="10"><result status="valid" time="0.008898" steps="10"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2061"/></proof>
  <proof prover="10"><result status="valid" time="0.004561" steps="10"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="17474"/></proof>
  <proof prover="10"><result status="valid" time="1.239208" steps="8919"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="3333"/></proof>
  <proof prover="10"><result status="valid" time="0.019956" steps="46"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3199"/></proof>
  <proof prover="10"><result status="valid" time="0.009770" steps="34"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="12150"/></proof>
  <proof prover="10"><result status="valid" time="0.036379" steps="206"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2783"/></proof>
  <proof prover="10"><result status="valid" time="0.008456" steps="28"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2784"/></proof>
  <proof prover="10"><result status="valid" time="0.007647" steps="28"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.010000" steps="1793"/></proof>
  <proof prover="9"><result status="valid" time="0.030000" steps="2780"/></proof>
  <proof prover="10"><result status="valid" time="0.014271" steps="28"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2783"/></proof>
  <proof prover="10"><result status="valid" time="0.016461" steps="28"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2795"/></proof>
  <proof prover="10"><result status="valid" time="0.012997" steps="28"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="2863"/></proof>
  <proof prover="10"><result status="valid" time="0.018135" steps="62"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.13" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2873"/></proof>
  <proof prover="10"><result status="valid" time="0.018035" steps="64"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.14" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.060000" steps="5952"/></proof>
  <proof prover="10"><result status="valid" time="0.033877" steps="195"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.080000" steps="11217"/></proof>
  <proof prover="10"><result status="valid" time="0.031805" steps="189"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3398"/></proof>
  <proof prover="10"><result status="valid" time="0.017125" steps="72"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.241715" steps="32056"/></proof>
  <proof prover="10"><result status="valid" time="0.041763" steps="243"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3738"/></proof>
  <proof prover="10"><result status="valid" time="0.016376" steps="79"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="6370"/></proof>
  <proof prover="10"><result status="valid" time="0.036179" steps="151"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="4392"/></proof>
  <proof prover="10"><result status="valid" time="0.026761" steps="118"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.21" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(idx l = 0)">
   <goal name="list_reversal&#39;vc.21.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.040000" steps="5644"/></proof>
   <proof prover="10"><result status="valid" time="0.016752" steps="106"/></proof>
   </goal>
   <goal name="list_reversal&#39;vc.21.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.090000" steps="19304"/></proof>
   <proof prover="10"><result status="valid" time="0.109906" steps="790"/></proof>
   </goal>
  </transf>
  <transf name="case" proved="true" arg1="(idx l = -1)">
   <goal name="list_reversal&#39;vc.21.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.070000" steps="8977"/></proof>
   <proof prover="10"><result status="valid" time="0.030821" steps="245"/></proof>
   </goal>
   <goal name="list_reversal&#39;vc.21.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.070000" steps="8817"/></proof>
   <proof prover="10"><result status="valid" time="0.036776" steps="241"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="list_reversal&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2781"/></proof>
  <proof prover="10"><result status="valid" time="0.004670" steps="26"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="2791"/></proof>
  <proof prover="10"><result status="valid" time="0.009577" steps="28"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.24" expl="loop variant decrease" proved="true">
  <transf name="right" proved="true" >
   <goal name="list_reversal&#39;vc.24.0" expl="right case" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="list_reversal&#39;vc.24.0.0" expl="right case" proved="true">
    <proof prover="9"><result status="valid" time="0.050000" steps="4163"/></proof>
    <proof prover="10"><result status="valid" time="0.021250" steps="87"/></proof>
    </goal>
    <goal name="list_reversal&#39;vc.24.0.1" expl="right case" proved="true">
    <proof prover="9"><result status="valid" time="0.050000" steps="4723"/></proof>
    <proof prover="10"><result status="valid" time="0.023589" steps="112"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="list_reversal&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.080000" steps="7648"/></proof>
  <proof prover="10"><result status="valid" time="0.026048" steps="93"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.030000" steps="3226"/></proof>
  <proof prover="10"><result status="valid" time="0.012532" steps="34"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.434504" steps="46185"/></proof>
  <proof prover="10"><result status="valid" time="0.031125" steps="122"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.040000" steps="3082"/></proof>
  <proof prover="10"><result status="valid" time="0.008388" steps="37"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.050000" steps="4627"/></proof>
  <proof prover="10"><result status="valid" time="0.015706" steps="42"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.010000" steps="39"/></proof>
  </goal>
  <goal name="list_reversal&#39;vc.31" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(idx l = 0)">
   <goal name="list_reversal&#39;vc.31.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="list_reversal&#39;vc.31.0.0" expl="true case (loop invariant preservation)" proved="true">
    <transf name="compute_in_goal" proved="true" >
     <goal name="list_reversal&#39;vc.31.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.040000" steps="4289"/></proof>
     <proof prover="10"><result status="valid" time="0.015267" steps="48"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="list_reversal&#39;vc.31.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.039549" steps="11565"/></proof>
   <proof prover="10"><result status="valid" time="0.023382" steps="181"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
