(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.
Require list.List.
Require list.Length.
Require list.Nth.
Require option.Option.
Require list.HdTl.

(* Why3 assumption *)
Definition zero_at (l:Init.Datatypes.list Numbers.BinNums.Z)
    (i:Numbers.BinNums.Z) : Prop :=
  ((list.Nth.nth i l) = (Init.Datatypes.Some 0%Z)) /\
  (forall (j:Numbers.BinNums.Z), (0%Z <= j)%Z /\ (j < i)%Z ->
   ~ ((list.Nth.nth j l) = (Init.Datatypes.Some 0%Z))).

(* Why3 assumption *)
Definition no_zero (l:Init.Datatypes.list Numbers.BinNums.Z) : Prop :=
  forall (j:Numbers.BinNums.Z),
  (0%Z <= j)%Z /\ (j < (list.Length.length l))%Z ->
  ~ ((list.Nth.nth j l) = (Init.Datatypes.Some 0%Z)).

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x => x
  end.

(* Why3 goal *)
Theorem search_loop'vc :
  forall (l:Init.Datatypes.list Numbers.BinNums.Z),
  forall (s:Init.Datatypes.list Numbers.BinNums.Z) (i:Numbers.BinNums.Z),
  (0%Z <= i)%Z /\
  ((i + (list.Length.length s))%Z = (list.Length.length l)) /\
  (forall (j:Numbers.BinNums.Z), (0%Z <= j)%Z ->
   ((list.Nth.nth j s) = (list.Nth.nth (i + j)%Z l))) /\
  (forall (j:Numbers.BinNums.Z), (0%Z <= j)%Z /\ (j < i)%Z ->
   ~ ((list.Nth.nth j l) = (Init.Datatypes.Some 0%Z))) ->
  list.List.is_nil s <-> (s = Init.Datatypes.nil) ->
  forall (o:Init.Datatypes.bool),
  ~ list.List.is_nil s /\
  (exists o1:Numbers.BinNums.Z,
   ((list.HdTl.hd s) = (Init.Datatypes.Some o1)) /\
   ((o1 = 0%Z) /\ (o = Init.Datatypes.false) \/
    ~ (o1 = 0%Z) /\ (o = Init.Datatypes.true))) \/
  list.List.is_nil s /\ (o = Init.Datatypes.false) ->
  ~ (o = Init.Datatypes.true) ->
  ((0%Z <= i)%Z /\ (i < (list.Length.length l))%Z) /\ zero_at l i \/
  (i = (list.Length.length l)) /\ no_zero l.
Proof.
intros l s i (h1,(h2,(h3,h4))) _ o h6 h7.
destruct s.
destruct h6.
now elim (proj1 H).
rewrite Zplus_0_r in h2.
right.
apply (conj h2).
intros j h6.
apply h4.
now rewrite h2.
left.
split.
apply (conj h1).
rewrite <- h2.
change (Length.length (cons z s))%Z with (1 + Length.length s)%Z.
generalize (Length.Length_nonnegative s).
omega.
simpl in h6.
split.
intuition.
generalize (h3 0%Z (Zle_refl 0)).
ring_simplify (i+0)%Z.
intros <-.
simpl.
now destruct H1 ; intuition ; subst.
easy.
Qed.