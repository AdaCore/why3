<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.3.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.5" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="skew_heaps.mlw"/>
<theory name="SkewHeaps" proved="true">
 <goal name="root_is_min&#39;vc" expl="VC for root_is_min" proved="true">
 <proof prover="2"><result status="valid" time="0.65" steps="1275"/></proof>
 </goal>
 <goal name="empty&#39;vc" expl="VC for empty" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
 <goal name="get_min&#39;vc" expl="VC for get_min" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="35"/></proof>
 </goal>
 <goal name="merge&#39;vc" expl="VC for merge" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="merge&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="6796"/></proof>
  </goal>
  <goal name="merge&#39;vc.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="3581"/></proof>
  </goal>
  <goal name="merge&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="6849"/></proof>
  </goal>
  <goal name="merge&#39;vc.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="3585"/></proof>
  </goal>
  <goal name="merge&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="3435"/></proof>
   </goal>
   <goal name="merge&#39;vc.4.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="3469"/></proof>
   </goal>
   <goal name="merge&#39;vc.4.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="3469"/></proof>
   </goal>
   <goal name="merge&#39;vc.4.3" expl="postcondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.25" steps="918"/></proof>
   </goal>
   <goal name="merge&#39;vc.4.4" expl="postcondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.15" steps="662"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.05" steps="3870"/></proof>
   </goal>
   <goal name="merge&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="3909"/></proof>
   </goal>
   <goal name="merge&#39;vc.5.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="3909"/></proof>
   </goal>
   <goal name="merge&#39;vc.5.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.06" steps="7285"/></proof>
   </goal>
   <goal name="merge&#39;vc.5.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.06" steps="7311"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="3400"/></proof>
   </goal>
   <goal name="merge&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="3445"/></proof>
   </goal>
   <goal name="merge&#39;vc.6.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="3445"/></proof>
   </goal>
   <goal name="merge&#39;vc.6.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.07" steps="6734"/></proof>
   </goal>
   <goal name="merge&#39;vc.6.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="6797"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add&#39;vc" expl="VC for add" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="158"/></proof>
 </goal>
 <goal name="remove_min&#39;vc" expl="VC for remove_min" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="260"/></proof>
 </goal>
</theory>
<theory name="HeapSort" proved="true">
 <goal name="heapsort&#39;vc" expl="VC for heapsort" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="heapsort&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.28" steps="318"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="82432"/></proof>
  <proof prover="1"><result status="valid" time="0.01" steps="14"/></proof>
  <proof prover="4"><result status="valid" time="0.07" steps="17927"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="70"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.12" expl="index in array bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="120184"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="50"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.23" steps="29443"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="187653"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="68"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="116"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.20" expl="out of loop bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="heapsort&#39;vc.21" expl="out of loop bounds" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
