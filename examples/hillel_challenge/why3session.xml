<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="hillel_challenge.mlw"/>
<theory name="Leftpad" proved="true">
 <goal name="VC leftpad" expl="VC for leftpad" proved="true">
 <proof prover="0"><result status="valid" time="0.02"/></proof>
 </goal>
</theory>
<theory name="Unique" proved="true">
 <goal name="VC unique" expl="VC for unique" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unique.0" expl="array creation size" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC unique.1" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC unique.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC unique.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC unique.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC unique.5" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC unique.6" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC unique.7" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC unique.8" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC unique.9" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC unique.10" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.84"/></proof>
  </goal>
  <goal name="VC unique.11" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="x=a[i]">
   <goal name="VC unique.11.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="75"/></proof>
   </goal>
   <goal name="VC unique.11.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="assert" proved="true" arg1="(mem x a (i+1) &lt;-&gt; mem x a i)">
    <goal name="VC unique.11.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="VC unique.11.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="105"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unique.12" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j &lt; len-1)">
   <goal name="VC unique.12.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="44"/></proof>
   </goal>
   <goal name="VC unique.12.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem a[i1] a i1))">
    <goal name="VC unique.12.1.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="VC unique.12.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="92"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unique.13" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC unique.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC unique.15" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(x=n-1)">
   <goal name="VC unique.15.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="4"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC unique.15.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="assert" proved="true" arg1="(mem x a (i+1) &lt;-&gt; mem x a i)">
    <goal name="VC unique.15.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.02"/></proof>
    </goal>
    <goal name="VC unique.15.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="25"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unique.16" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC unique.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC unique.18" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC unique.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC unique.20" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Fulcrum" proved="true">
 <goal name="VC fulcrum" expl="VC for fulcrum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC fulcrum.0" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.1" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.2" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.6" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.7" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.8" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.9" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.10" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.11" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.12" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.13" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.14" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.15" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.16" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.17" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.18" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.19" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC fulcrum.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.22" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC fulcrum.23" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="FulcrumNoOverflow" proved="true">
 <goal name="VC big" expl="VC for big" proved="true">
 <proof prover="0"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="VC big_zero" expl="VC for big_zero" proved="true">
 <proof prover="0"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="VC add_big" expl="VC for add_big" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_big.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC add_big.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.3" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC add_big.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC add_big.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.6" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_big.6.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC add_big.6.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC add_big.6.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC add_big.6.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.02"/></proof>
   </goal>
   <goal name="VC add_big.6.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_big.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.8" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.9" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.10" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC add_big.11" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_big.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC add_big.14" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC add_big.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC add_big.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sub_big" expl="VC for sub_big" proved="true">
 <proof prover="0"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="VC delta" expl="VC for delta" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC delta.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC delta.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC delta.3" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.4" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC delta.5" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC delta.7" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.8" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC delta.10" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC delta.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.13" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC delta.14" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.15" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC delta.16" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC delta.18" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC delta.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC big_lt" expl="VC for big_lt" proved="true">
 <proof prover="0"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="VC sum_bounds" expl="VC for sum_bounds" proved="true">
 <proof prover="0"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="VC fulcrum" expl="VC for fulcrum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC fulcrum.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.1" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.3" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC fulcrum.5" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.6" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC fulcrum.8" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.9" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.10" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC fulcrum.11" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.12" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.13" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC fulcrum.14" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.15" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC fulcrum.17" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC fulcrum.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC fulcrum.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC fulcrum.21" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC fulcrum.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.23" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.24" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC fulcrum.25" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="1.34"/></proof>
  </goal>
  <goal name="VC fulcrum.26" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fulcrum.27" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.28" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="61"/></proof>
  </goal>
  <goal name="VC fulcrum.29" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.30" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC fulcrum.31" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="VC fulcrum.32" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.33" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="51"/></proof>
  </goal>
  <goal name="VC fulcrum.34" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="55"/></proof>
  </goal>
  <goal name="VC fulcrum.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC fulcrum.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC fulcrum.37" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fulcrum.38" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
