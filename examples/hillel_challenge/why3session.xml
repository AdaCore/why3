<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="hillel_challenge.mlw"/>
<theory name="Leftpad" proved="true">
 <goal name="leftpad&#39;VC" expl="VC for leftpad" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="7009"/></proof>
 </goal>
</theory>
<theory name="Unique" proved="true">
 <goal name="unique&#39;VC" expl="VC for unique" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unique&#39;VC.0" expl="array creation size" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="4270"/></proof>
  </goal>
  <goal name="unique&#39;VC.1" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="3597"/></proof>
  </goal>
  <goal name="unique&#39;VC.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="4349"/></proof>
  </goal>
  <goal name="unique&#39;VC.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="4622"/></proof>
  </goal>
  <goal name="unique&#39;VC.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="4586"/></proof>
  </goal>
  <goal name="unique&#39;VC.5" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4468"/></proof>
  </goal>
  <goal name="unique&#39;VC.6" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4515"/></proof>
  </goal>
  <goal name="unique&#39;VC.7" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="4781"/></proof>
  </goal>
  <goal name="unique&#39;VC.8" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="5111"/></proof>
  </goal>
  <goal name="unique&#39;VC.9" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4932"/></proof>
  </goal>
  <goal name="unique&#39;VC.10" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="2598833"/></proof>
  </goal>
  <goal name="unique&#39;VC.11" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="x=a[i]">
   <goal name="unique&#39;VC.11.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="75"/></proof>
   </goal>
   <goal name="unique&#39;VC.11.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="assert" proved="true" arg1="(mem x a (i+1) &lt;-&gt; mem x a i)">
    <goal name="unique&#39;VC.11.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="8317"/></proof>
    </goal>
    <goal name="unique&#39;VC.11.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="105"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unique&#39;VC.12" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j &lt; len-1)">
   <goal name="unique&#39;VC.12.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="44"/></proof>
   </goal>
   <goal name="unique&#39;VC.12.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem a[i1] a i1))">
    <goal name="unique&#39;VC.12.1.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.04" steps="7266"/></proof>
    </goal>
    <goal name="unique&#39;VC.12.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="92"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unique&#39;VC.13" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="4227"/></proof>
  </goal>
  <goal name="unique&#39;VC.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="20621"/></proof>
  </goal>
  <goal name="unique&#39;VC.15" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(x=n-1)">
   <goal name="unique&#39;VC.15.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="5645"/></proof>
   </goal>
   <goal name="unique&#39;VC.15.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="assert" proved="true" arg1="(mem x a (i+1) &lt;-&gt; mem x a i)">
    <goal name="unique&#39;VC.15.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.02" steps="4983"/></proof>
    </goal>
    <goal name="unique&#39;VC.15.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="25"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="unique&#39;VC.16" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="5396"/></proof>
  </goal>
  <goal name="unique&#39;VC.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="4778"/></proof>
  </goal>
  <goal name="unique&#39;VC.18" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="20112"/></proof>
  </goal>
  <goal name="unique&#39;VC.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="5860"/></proof>
  </goal>
  <goal name="unique&#39;VC.20" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="5290"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Fulcrum" proved="true">
 <goal name="fulcrum&#39;VC" expl="VC for fulcrum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fulcrum&#39;VC.0" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="3900"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.1" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3473"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.2" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="4619"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="3926"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3460"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3063"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.6" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="4396"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.7" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3447"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.8" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3682"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.9" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3719"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.10" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="8088"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.11" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6510"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.12" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4088"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.13" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6336"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.14" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="5212"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.15" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="7207"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.16" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6231"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.17" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="3841"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.18" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3437"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.19" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.37" steps="34816"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="3639"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="4021"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.22" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3577"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.23" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="8166"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="FulcrumNoOverflow" proved="true">
 <goal name="big&#39;VC" expl="VC for big" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="4797"/></proof>
 </goal>
 <goal name="big_zero&#39;VC" expl="VC for big_zero" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="4963"/></proof>
 </goal>
 <goal name="add_big&#39;VC" expl="VC for add_big" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_big&#39;VC.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6086"/></proof>
  </goal>
  <goal name="add_big&#39;VC.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6284"/></proof>
  </goal>
  <goal name="add_big&#39;VC.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6371"/></proof>
  </goal>
  <goal name="add_big&#39;VC.3" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6512"/></proof>
  </goal>
  <goal name="add_big&#39;VC.4" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6770"/></proof>
  </goal>
  <goal name="add_big&#39;VC.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="5295"/></proof>
  </goal>
  <goal name="add_big&#39;VC.6" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_big&#39;VC.6.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="6164"/></proof>
   </goal>
   <goal name="add_big&#39;VC.6.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="6161"/></proof>
   </goal>
   <goal name="add_big&#39;VC.6.2" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="5133"/></proof>
   </goal>
   <goal name="add_big&#39;VC.6.3" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="6098"/></proof>
   </goal>
   <goal name="add_big&#39;VC.6.4" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="6588"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_big&#39;VC.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="5226"/></proof>
  </goal>
  <goal name="add_big&#39;VC.8" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6021"/></proof>
  </goal>
  <goal name="add_big&#39;VC.9" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6193"/></proof>
  </goal>
  <goal name="add_big&#39;VC.10" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6306"/></proof>
  </goal>
  <goal name="add_big&#39;VC.11" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6421"/></proof>
  </goal>
  <goal name="add_big&#39;VC.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6822"/></proof>
  </goal>
  <goal name="add_big&#39;VC.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="5295"/></proof>
  </goal>
  <goal name="add_big&#39;VC.14" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6386"/></proof>
  </goal>
  <goal name="add_big&#39;VC.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="7020"/></proof>
  </goal>
  <goal name="add_big&#39;VC.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="5280"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sub_big&#39;VC" expl="VC for sub_big" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="9468"/></proof>
 </goal>
 <goal name="delta&#39;VC" expl="VC for delta" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="delta&#39;VC.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6272"/></proof>
  </goal>
  <goal name="delta&#39;VC.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6539"/></proof>
  </goal>
  <goal name="delta&#39;VC.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6665"/></proof>
  </goal>
  <goal name="delta&#39;VC.3" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6750"/></proof>
  </goal>
  <goal name="delta&#39;VC.4" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="6868"/></proof>
  </goal>
  <goal name="delta&#39;VC.5" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="7076"/></proof>
  </goal>
  <goal name="delta&#39;VC.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="7982"/></proof>
  </goal>
  <goal name="delta&#39;VC.7" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6564"/></proof>
  </goal>
  <goal name="delta&#39;VC.8" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6707"/></proof>
  </goal>
  <goal name="delta&#39;VC.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="7453"/></proof>
  </goal>
  <goal name="delta&#39;VC.10" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6520"/></proof>
  </goal>
  <goal name="delta&#39;VC.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="7181"/></proof>
  </goal>
  <goal name="delta&#39;VC.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="6644"/></proof>
  </goal>
  <goal name="delta&#39;VC.13" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6602"/></proof>
  </goal>
  <goal name="delta&#39;VC.14" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6744"/></proof>
  </goal>
  <goal name="delta&#39;VC.15" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6809"/></proof>
  </goal>
  <goal name="delta&#39;VC.16" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6998"/></proof>
  </goal>
  <goal name="delta&#39;VC.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="7859"/></proof>
  </goal>
  <goal name="delta&#39;VC.18" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6637"/></proof>
  </goal>
  <goal name="delta&#39;VC.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="7498"/></proof>
  </goal>
  <goal name="delta&#39;VC.20" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6598"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="big_lt&#39;VC" expl="VC for big_lt" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="7069"/></proof>
 </goal>
 <goal name="sum_bounds&#39;VC" expl="VC for sum_bounds" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="10963"/></proof>
 </goal>
 <goal name="fulcrum&#39;VC" expl="VC for fulcrum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fulcrum&#39;VC.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6787"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.1" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="5833"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="7218"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.3" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6425"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="7787"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.5" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6029"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.6" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="9837"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="7752"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.8" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="7749"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.9" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6034"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.10" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="9422"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.11" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6546"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.12" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6087"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.13" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="9761"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.14" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6652"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.15" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="7022"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="9418"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.17" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="7137"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="13012"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="19993"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="13073"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.21" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="9882"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="9950"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.23" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6785"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.24" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.20" steps="22013"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.25" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="120634"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.26" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="7515"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.27" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="28526"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.28" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="58"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.29" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="6716"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.30" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.18" steps="19388"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.31" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.17" steps="529495"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.32" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="7346"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.33" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="48"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.34" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="52"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="7021"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.36" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="9314"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.37" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="6690"/></proof>
  </goal>
  <goal name="fulcrum&#39;VC.38" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="20585"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
