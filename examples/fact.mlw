
(* Various programs computing the factorial. *)

module FactRecursive

  use import int.Fact

  let rec fact_rec (x:int) : int variant {x} =
    requires { x >= 0 } ensures { result = fact x }
    if x = 0 then 1 else x * fact_rec (x-1)

end

module FactImperative

  use import int.Fact
  use import ref.Ref

  let fact_imp (x:int) : int
    requires { x >= 0 }
    ensures { result = fact x }
  = let y = ref 0 in
    let r = ref 1 in
    while !y < x do
      invariant { 0 <= !y <= x /\ !r = fact !y }
      y := !y + 1;
      r := !r * !y
    done;
    !r

end
