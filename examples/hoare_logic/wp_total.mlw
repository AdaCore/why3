

theory Imp

(* terms and formulas *)

type datatype = Tint | Tbool

type operator = Oplus | Ominus | Omult | Ole

type ident = int

type term =
  | Tconst int
  | Tvar ident
  | Tderef ident
  | Tbin term operator term

type fmla =
  | Fterm term
  | Fand fmla fmla
  | Fnot fmla
  | Fimplies fmla fmla
  | Flet ident term fmla
  | Fforall ident datatype fmla

(* program states: 2 stack env for refs and local vars  *)

use import int.Int
use import bool.Bool

type value =
  | Vint int
  | Vbool bool

use map.Map as IdMap
type env = IdMap.map ident value
type var_env = env
type ref_env = env

type state = { var_env : var_env; ref_env: ref_env }

(* semantics of formulas *)

function eval_bin (x:value) (op:operator) (y:value) : value =
  match x,y with
  | Vint x,Vint y ->
     match op with
     | Oplus -> Vint (x+y)
     | Ominus -> Vint (x-y)
     | Omult -> Vint (x*y)
     | Ole -> Vbool (if x <= y then True else False)
     end
  | _,_ -> Vbool False
  end

function get_env (i:ident) (e:env) : value = IdMap.get e i

function eval_term (s:state) (t:term) : value =
  match t with
  | Tconst n -> Vint n
  | Tvar id -> get_env id (var_env s)
  | Tderef id -> get_env id (ref_env s)
  | Tbin t1 op t2 ->
     eval_bin (eval_term s t1) op (eval_term s t2)
  end

function my_state :state =
    { var_env = IdMap.const (Vint 42);
      ref_env = IdMap.const (Vint 0) }

goal Test13 :
  eval_term my_state (Tconst 13) = Vint 13

goal Test42 :
  eval_term my_state (Tvar 0) = Vint 42

goal Test0 :
  eval_term my_state (Tderef 0) = Vint 0

goal Test55 :
  eval_term my_state (Tbin (Tvar 0) Oplus (Tconst 13)) = Vint 55

predicate eval_fmla (s:state) (f:fmla) =
  match f with
  | Fterm t -> eval_term s t = Vbool True
  | Fand f1 f2 -> eval_fmla s f1 /\ eval_fmla s f2
  | Fnot f -> not (eval_fmla s f)
  | Fimplies f1 f2 -> eval_fmla s f1 -> eval_fmla s f2
  | Flet x t f ->
      eval_fmla
        { var_env = IdMap.set s.var_env x (eval_term s t) ;
          ref_env = s.ref_env }
        f
  | Fforall x Tint f ->
     forall n:int.
        eval_fmla
          { var_env = IdMap.set s.var_env x (Vint n);
            ref_env = s.ref_env }
          f
  | Fforall x Tbool f ->
     forall b:bool.
        eval_fmla
          { var_env = IdMap.set s.var_env x (Vbool b);
            ref_env = s.ref_env }
          f
  end

(* substitution of a *reference* by a term *)

function subst_term (e:term) (x:ident) (t:term) : term =
  match e with
  | Tconst _ -> e
  | Tvar _ -> e
  | Tderef y -> if x=y then t else e
  | Tbin e1 op e2 -> Tbin (subst_term e1 x t) op (subst_term e2 x t)
  end

lemma eval_subst_term:
  forall s:state, e:term, x:ident, t:term.
    eval_term s (subst_term e x t) =
    eval_term { var_env = s.var_env;
                ref_env = (IdMap.set s.ref_env x (eval_term s t)) }
              e

function subst (f:fmla) (x:ident) (t:term) : fmla =
  match f with
  | Fterm e -> Fterm (subst_term e x t)
  | Fand f1 f2 -> Fand (subst f1 x t) (subst f2 x t)
  | Fnot f -> Fnot (subst f x t)
  | Fimplies f1 f2 -> Fimplies (subst f1 x t) (subst f2 x t)
  | Flet y t' f -> Flet y t' (subst f x t)
  | Fforall y ty f -> Fforall y ty (subst f x t)
  end

(* faux pour let *)
lemma eval_subst:
  forall f:fmla, s:state, x:ident, t:term.
    eval_fmla s (subst f x t) <->
    eval_fmla { var_env = s.var_env;
                ref_env = (IdMap.set s.ref_env x (eval_term s t)) }
              f

(* statements *)

type stmt =
  | Sskip
  | Sassign ident term
  | Sseq stmt stmt
  | Sif term stmt stmt
  | Sassert fmla
  | Swhile term fmla stmt

lemma check_skip:
  forall s:stmt. s=Sskip \/s<>Sskip

(* small-steps semantics for statements *)

inductive one_step state stmt state stmt =

  | one_step_assign:
      forall s:state, x:ident, e:term.
        one_step s (Sassign x e)
                 { var_env = s.var_env;
                   ref_env = (IdMap.set s.ref_env x (eval_term s e)) }
                 Sskip

  | one_step_seq:
      forall s s':state, i1 i1' i2:stmt.
        one_step s i1 s' i1' ->
          one_step s (Sseq i1 i2) s' (Sseq i1' i2)

  | one_step_seq_skip:
      forall s:state, i:stmt.
        one_step s (Sseq Sskip i) s i

  | one_step_if_true:
      forall s:state, e:term, i1 i2:stmt.
        eval_term s e = (Vbool True) ->
          one_step s (Sif e i1 i2) s i1

  | one_step_if_false:
      forall s:state, e:term, i1 i2:stmt.
        eval_term s e = (Vbool False) ->
          one_step s (Sif e i1 i2) s i2

  | one_step_assert:
      forall s:state, f:fmla.
        eval_fmla s f ->
          one_step s (Sassert f) s Sskip

  | one_step_while_true:
      forall s:state, e:term, inv:fmla, i:stmt.
        eval_fmla s inv ->
        eval_term s e = (Vbool True) ->
          one_step s (Swhile e inv i) s (Sseq i (Swhile e inv i))

  | one_step_while_false:
      forall s:state, e:term, inv:fmla, i:stmt.
        eval_fmla s inv ->
        eval_term s e = (Vbool False) ->
          one_step s (Swhile e inv i) s Sskip

  goal Ass42 :
    let x = 0 in
    forall s':state.
      one_step my_state (Sassign x (Tconst 42)) s' Sskip ->
        IdMap.get s'.ref_env x = Vint 42

  goal If42 :
    let x = 0 in
    forall s1 s2:state, i:stmt.
      one_step my_state
        (Sif (Tbin (Tderef x) Ole (Tconst 10))
             (Sassign x (Tconst 13))
             (Sassign x (Tconst 42)))
        s1 i ->
      one_step s1 i s2 Sskip ->
        IdMap.get s2.ref_env x = Vint 13

(*

  lemma progress:
    forall s:state, i:stmt.
      i <> Sskip ->
      exists s':state, i':stmt. one_step s i s' i'

*)

 (* many steps of execution *)

 inductive many_steps state stmt state stmt int =
   | many_steps_refl:
     forall s:state, i:stmt. many_steps s i s i 0
   | many_steps_trans:
     forall s1 s2 s3:state, i1 i2 i3:stmt, n:int.
       one_step s1 i1 s2 i2 ->
       many_steps s2 i2 s3 i3 n ->
       many_steps s1 i1 s3 i3 (n+1)

lemma steps_non_neg:
  forall s1 s2:state, i1 i2:stmt, n:int.
    many_steps s1 i1 s2 i2 n -> n >= 0

lemma many_steps_seq:
  forall s1 s3:state, i1 i2:stmt, n:int.
    many_steps s1 (Sseq i1 i2) s3 Sskip n ->
    exists s2:state, n1 n2:int.
      many_steps s1 i1 s2 Sskip n1 /\
      many_steps s2 i2 s3 Sskip n2 /\
      n = 1 + n1 + n2


predicate valid_fmla (p:fmla) = forall s:state. eval_fmla s p

(*** Hoare triples ***)

(* partial correctness *)
predicate valid_triple (p:fmla) (i:stmt) (q:fmla) =
    forall s:state. eval_fmla s p ->
      forall s':state, n:int. many_steps s i s' Sskip n ->
        eval_fmla s' q

(* total correctness *)
(*
predicate total_valid_triple (p:fmla) (i:stmt) (q:fmla) =
    forall s:state. eval_fmla s p ->
      exists s':state, n:int. many_steps s i s' Sskip n /\
        eval_fmla s' q
*)

(* Hoare logic rules (partial correctness) *)

lemma skip_rule:
  forall q:fmla. valid_triple q Sskip q

lemma assign_rule:
  forall q:fmla, x:ident, e:term.
  valid_triple (subst q x e) (Sassign x e) q

lemma seq_rule:
  forall p q r:fmla, i1 i2:stmt.
  valid_triple p i1 r /\ valid_triple r i2 q ->
  valid_triple p (Sseq i1 i2) q

lemma if_rule:
  forall e:term, p q:fmla, i1 i2:stmt.
  valid_triple (Fand p (Fterm e)) i1 q /\
  valid_triple (Fand p (Fnot (Fterm e))) i2 q ->
  valid_triple p (Sif e i1 i2) q

lemma assert_rule:
  forall f p:fmla. valid_fmla (Fimplies p f) ->
  valid_triple p (Sassert f) p

lemma assert_rule_ext:
  forall f p:fmla.
  valid_triple (Fimplies f p) (Sassert f) p

lemma while_rule:
  forall e:term, inv:fmla, i:stmt.
  valid_triple (Fand (Fterm e) inv) i inv ->
  valid_triple inv (Swhile e inv i) (Fand (Fnot (Fterm e)) inv)

lemma while_rule_ext:
  forall e:term, inv inv':fmla, i:stmt.
  valid_fmla (Fimplies inv' inv) ->
  valid_triple (Fand (Fterm e) inv') i inv' ->
  valid_triple inv' (Swhile e inv i) (Fand (Fnot (Fterm e)) inv')

lemma consequence_rule:
  forall p p' q q':fmla, i:stmt.
  valid_fmla (Fimplies p' p) ->
  valid_triple p i q ->
  valid_fmla (Fimplies q q') ->
  valid_triple p' i q'

(* frame rule *)

use set.Set

predicate assigns (s:state) (a:Set.set ident) (s':state) =
  forall i:ident. not (Set.mem i a) ->
    eval_term s (Tderef i) = eval_term s' (Tderef i)

function stmt_writes (s:stmt) : Set.set ident =
  match s with
  | Sskip -> Set.empty
  | Sassign i _ -> Set.singleton i
  | Sseq s1 s2 -> Set.union (stmt_writes s1) (stmt_writes s2)
  | Sif _ s1 s2 -> Set.union (stmt_writes s1) (stmt_writes s2)
  | Swhile _ _ s -> stmt_writes s
  | Sassert _ -> Set.empty
  end

end


module WP

  use import Imp

  let rec wp (i:stmt) (q:fmla)
    ensures { valid_triple result i q }
  = match i with
    | Sskip -> q
    | Sseq i1 i2 -> wp i1 (wp i2 q)
    | Sassign x e ->
       (*
         let id = fresh (vars q) in Flet id e (subst q x (Tvar id))
       *)
       subst q x e
    | Sif e i1 i2 ->
        Fand (Fimplies (Fterm e) (wp i1 q))
             (Fimplies (Fnot (Fterm e)) (wp i2 q))
    | Sassert f ->
       Fimplies f q (* liberal wp, no termination required *)
       (* Fand f q *) (* strict wp, termination required *)
    | Swhile e inv i ->
        Fand inv
          ((*Fforall*) (Fand
                     (Fimplies (Fand (Fterm e) inv) (wp i inv))
                     (Fimplies (Fand (Fnot (Fterm e)) inv) q)))

    end

end



(*
Local Variables:
compile-command: "why3ide -I . wp_total.mlw"
End:
*)

