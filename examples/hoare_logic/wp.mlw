

theory Imp

(* terms and formulas *)

type datatype = Tint | Tbool

type operator = Oplus | Ominus | Omult | Ole

type ident = int

type term =
  | Tconst int
  | Tvar ident
  | Tderef ident
  | Tbin term operator term

type fmla =
  | Fterm term
  | Fand fmla fmla
  | Fnot fmla
  | Fimplies fmla fmla
  | Flet ident term fmla
  | Fforall ident datatype fmla

(* program states: 2 stack env for refs and local vars  *)

use import int.Int
use import bool.Bool

type value =
  | Vint int
  | Vbool bool

use map.Map as IdMap
type var_env = IdMap.map ident value
type ref_env = IdMap.map ident value

type state = {| var_env : var_env; ref_env: ref_env |}

(* semantics of formulas *)

predicate eval_bin (x:value) (op:operator) (y:value) (res:value) =
  match x,y with
  | Vint x,Vint y ->
     match op with
     | Oplus -> res = Vint (x+y)
     | Ominus -> res = Vint (x-y)
     | Omult -> res = Vint (x*y)
     | Ole -> res = Vbool (if x <= y then True else False)
     end
  | _,_ -> false
  end

(*
inductive get_env (i:int) (env:list value) (res:value) =
  | Get_first:
    forall x:value, l:list value. get_env 0 (Cons x l) x
  | Get_next:
    forall i:int, x r:value, l:list value. i > 0 ->
      get_env (i-1) l r -> get_env i (Cons x l) x
*)

predicate get_refenv (i:ident) (e:ref_env) (r:value) =
    IdMap.get e i = r

inductive eval_term state term value =
  | eval_const :
      forall s:state, n:int. eval_term s (Tconst n) (Vint n)
  | eval_var :
      forall s:state, i:int, res:value.
        get_refenv i (var_env s) res -> eval_term s (Tvar i) res
  | eval_deref :
      forall s:state, i:ident, res:value.
        get_refenv i (ref_env s) res -> eval_term s (Tderef i) res
  | eval_bin :
      forall s:state, op:operator, t1 t2:term, r1 r2 r:value.
        eval_term s t1 r1 -> eval_term s t2 r2 ->
        eval_bin r1 op r2 r -> eval_term s (Tbin t1 op t2) r

  function my_state :state =
    {| var_env = IdMap.const (Vint 42);
       ref_env = IdMap.const (Vint 0) |}

  goal Test13 :
    eval_term my_state (Tconst 13) (Vint 13)

  goal Test42 :
    eval_term my_state (Tvar 0) (Vint 42)

  goal Test55 :
    eval_term my_state (Tbin (Tvar 0) Oplus (Tconst 13)) (Vint 55)

inductive eval_fmla state fmla bool =
  | eval_term:
    forall s:state, t:term, b:bool.
      eval_term s t (Vbool b) -> eval_fmla s (Fterm t) b
  | eval_and:
    forall s:state, f1 f2:fmla, b1 b2:bool.
      eval_fmla s f1 b1 -> eval_fmla s f2 b2 ->
      eval_fmla s (Fand f1 f2) (andb b1 b2)
  | eval_not:
    forall s:state, f:fmla, b:bool.
      eval_fmla s f b -> eval_fmla s (Fnot f) (notb b)
  | eval_impl:
    forall s:state, f1 f2:fmla, b1 b2:bool.
      eval_fmla s f1 b1 -> eval_fmla s f2 b2 ->
      eval_fmla s (Fimplies f1 f2) (implb b1 b2)
  | eval_forall_int_true:
      forall s:state, x:ident, f:fmla.
        (* problem: qu'est-ce qui garanti que s.var_env a exactement
           autant de debruijn que f ? *)
        (forall n:int. eval_fmla
          {| var_env = IdMap.set s.var_env x (Vint n);
             ref_env = s.ref_env |}
          f True) ->
        eval_fmla s (Fforall x Tint f) True

(* substitution *) 

function subst_term (e:term) (x:ident) (t:term) : term =
  match e with
  | Tconst _ -> e
  | Tvar _ -> e
  | Tderef y -> if x=y then t else e
  | Tbin e1 op e2 -> Tbin (subst_term e1 x t) op (subst_term e2 x t)
  end

lemma eval_subst_term:
  forall s:state, e:term, x:ident, t:term, r v:value.
    eval_term s t r ->
    eval_term s (subst_term e x t) v <->
      eval_term {| var_env = s.var_env;
                   ref_env = (IdMap.set s.ref_env x r) |}
                 e v

function subst (f:fmla) (x:ident) (t:term) : fmla =
  match f with
  | Fterm e -> Fterm (subst_term e x t)
  | Fand f1 f2 -> Fand (subst f1 x t) (subst f2 x t)
  | Fnot f -> Fnot (subst f x t)
  | Fimplies f1 f2 -> Fimplies (subst f1 x t) (subst f2 x t)
  | Flet y t' f -> Flet y t' (subst f x t)
  | Fforall y ty f -> Fforall y ty (subst f x t)
  end

lemma eval_subst:
  forall s:state, f:fmla, x:ident, t:term, r:value, b:bool.
    eval_fmla s (subst f x t) b <->
    eval_fmla {| var_env = s.var_env;
                 ref_env = (IdMap.set s.ref_env x r) |}
              f b


(* statements *)

type stmt =
  | Sskip
  | Sassign ident term
  | Sseq stmt stmt
  | Sif term stmt stmt
  | Swhile term fmla stmt

lemma check_skip:
  forall s:stmt. s=Sskip \/s<>Sskip

(* small-steps semantics for statements *)

inductive one_step state stmt state stmt =

  | one_step_assign:
      forall s:state, x:ident, e:term, r:value.
        eval_term s e r ->
        one_step s (Sassign x e)
                 {| var_env = s.var_env;
                    ref_env = (IdMap.set s.ref_env x r) |}
                 Sskip

  | one_step_seq:
      forall s s':state, i1 i1' i2:stmt.
        one_step s i1 s' i1' ->
          one_step s (Sseq i1 i2) s' (Sseq i1' i2)

  | one_step_seq_skip:
      forall s:state, i:stmt.
        one_step s (Sseq Sskip i) s i

  | one_step_if_true:
      forall s:state, e:term, i1 i2:stmt.
        eval_term s e (Vbool True) ->
          one_step s (Sif e i1 i2) s i1

  | one_step_if_false:
      forall s:state, e:term, i1 i2:stmt.
        eval_term s e (Vbool False) ->
          one_step s (Sif e i1 i2) s i2

  | one_step_while_true:
      forall s:state, e:term, inv:fmla, i:stmt.
        eval_fmla s inv True ->
        eval_term s e (Vbool True) ->
          one_step s (Swhile e inv i) s (Sseq i (Swhile e inv i))

  | one_step_while_false:
      forall s:state, e:term, inv:fmla, i:stmt.
        eval_fmla s inv True ->
        eval_term s e (Vbool False) ->
          one_step s (Swhile e inv i) s Sskip

  goal Ass42 :
    let x = 0 in
    forall s':state.
      one_step my_state (Sassign x (Tconst 42)) s' Sskip ->
        IdMap.get s'.ref_env x = Vint 42

  goal If42 :
    let x = 0 in
    forall s1 s2:state, i:stmt.
      one_step my_state
        (Sif (Tbin (Tvar x) Ole (Tconst 10))
             (Sassign x (Tconst 13))
             (Sassign x (Tconst 42)))
        s1 i ->
      one_step s1 i s2 Sskip ->
        IdMap.get s2.ref_env x = Vint 42

(*

  lemma progress:
    forall s:state, i:stmt.
      i <> Sskip ->
      exists s':state, i':stmt. one_step s i s' i'

*)

 (* many steps of execution *)

 inductive many_steps state stmt state stmt int =
   | many_steps_refl:
     forall s:state, i:stmt. many_steps s i s i 0
   | many_steps_trans:
     forall s1 s2 s3:state, i1 i2 i3:stmt, n:int.
       one_step s1 i1 s2 i2 ->
       many_steps s2 i2 s3 i3 n ->
       many_steps s1 i1 s3 i3 (n+1)

lemma steps_non_neg:
  forall s1 s2:state, i1 i2:stmt, n:int.
    many_steps s1 i1 s2 i2 n -> n >= 0

lemma many_steps_seq:
  forall s1 s3:state, i1 i2:stmt, n:int.
    many_steps s1 (Sseq i1 i2) s3 Sskip n ->
    exists s2:state, n1 n2:int.
      many_steps s1 i1 s2 Sskip n1 /\
      many_steps s2 i2 s3 Sskip n2 /\
      n = 1 + n1 + n2


predicate valid_fmla (p:fmla) = forall s:state. eval_fmla s p True

(* Hoare triples *)

predicate valid_triple (p:fmla) (i:stmt) (q:fmla) =
    forall s:state. eval_fmla s p True ->
      forall s':state, n:int. many_steps s i s' Sskip n ->
        eval_fmla s' q True

(* Hoare logic rules *)

lemma skip_rule:
  forall q:fmla. valid_triple q Sskip q

lemma assign_rule:
  forall q:fmla, x:ident, e:term.
  valid_triple (subst q x e) (Sassign x e) q

lemma seq_rule:
  forall p q r:fmla, i1 i2:stmt.
  valid_triple p i1 r /\ valid_triple r i2 q ->
  valid_triple p (Sseq i1 i2) q

lemma if_rule:
  forall e:term, p q:fmla, i1 i2:stmt.
  valid_triple (Fand p (Fterm e)) i1 q /\
  valid_triple (Fand p (Fnot (Fterm e))) i2 q ->
  valid_triple p (Sif e i1 i2) q

lemma while_rule:
  forall e:term, inv:fmla, i:stmt.
  valid_triple (Fand (Fterm e) inv) i inv ->
  valid_triple inv (Swhile e inv i) (Fand (Fnot (Fterm e)) inv)

lemma consequence_rule:
  forall p p' q q':fmla, i:stmt.
  valid_fmla (Fimplies p' p) ->
  valid_triple p i q ->
  valid_fmla (Fimplies q q') ->
  valid_triple p' i q'



end




module WP

  use import Imp

  let rec wp (i:stmt) (q:fmla) =
    { true }
    match i with
    | Sskip -> q
    | Sseq i1 i2 -> wp i1 (wp i2 q)
    | Sassign x e -> subst q x e
    | Sif e i1 i2 ->
        Fand (Fimplies (Fterm e) (wp i1 q))
             (Fimplies (Fnot (Fterm e)) (wp i2 q))
    | Swhile e inv i ->
        Fand inv
          ((*Fforall*) (Fand
                     (Fimplies (Fand (Fterm e) inv) (wp i inv))
                     (Fimplies (Fand (Fnot (Fterm e)) inv) q))) 

    end
    { valid_triple result i q }

end



(*
Local Variables:
compile-command: "why3ide -I . wp.mlw"
End:
*)

