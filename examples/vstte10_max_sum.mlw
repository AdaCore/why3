(*
   VSTTE'10 competition http://www.macs.hw.ac.uk/vstte10/Competition.html
   Problem 1: maximum /\ sum of an array

   Author: Jean-Christophe Filliatre (CNRS)
   Tool:   Why3 (see http://why3.lri.fr/)
*)

module MaxAndSum

  use import int.Int
  use import ref.Ref
  use import array.Array

  let max_sum (a: array int) (n: int)
    requires { n = length a /\ forall i:int. 0 <= i < n -> a[i] >= 0 }
    ensures { let (sum, max) = result in sum <= n * max }
  = let sum = ref 0 in
    let max = ref 0 in
    for i = 0 to n - 1 do
      invariant { !sum <= i * !max }
      if !max < a[i] then max := a[i];
      sum := !sum + a[i]
    done;
    (!sum, !max)

end

module MaxAndSum2

  use import int.Int
  use import ref.Ref
  use import array.Array
  use import array.ArraySum

  predicate is_max (a: array int) (l h: int) (m: int) =
    (forall k: int. l <= k < h -> a[k] <= m) &&
    ((h <= l && m = 0) ||
     (l <  h && exists k: int. l <= k < h && m = a[k]))

  let max_sum (a: array int) (n: int)
    requires { n = length a /\ forall i:int. 0 <= i < n -> a[i] >= 0 }
    ensures  { let (s, m) = result in
               s = sum a 0 n /\ is_max a 0 n m /\ s <= n * m }
  = let s = ref 0 in
    let m = ref 0 in
    for i = 0 to n - 1 do
      invariant { !s = sum a 0 i /\ is_max a 0 i !m /\ !s <= i * !m }
      if !m < a[i] then m := a[i];
      s := !s + a[i]
    done;
    (!s, !m)

end

module TestCase

  use import MaxAndSum2
  use import array.Array
  use import array.ArraySum

  exception BenchFailure

  let test () =
    let n = 10 in
    let a = make n 0 in
    a[0] <- 9;
    a[1] <- 5;
    a[2] <- 0;
    a[3] <- 2;
    a[4] <- 7;
    a[5] <- 3;
    a[6] <- 2;
    a[7] <- 1;
    a[8] <- 10;
    a[9] <- 6;
    let (s, m) = max_sum a n in
    assert { s = 45 };
    assert { m = 10 };
    (s, m)

  let test_case () raises { BenchFailure -> true } =
    let (s, m) = test () in
    (* bench of --exec *)
    if s <> 45  then raise BenchFailure;
    if m <> 10  then raise BenchFailure;
    (s,m)

end
