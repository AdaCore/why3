(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.
Require list.List.
Require list.Length.
Require list.Mem.
Require list.Append.
Require list.NumOcc.
Require list.Permut.

(* Why3 assumption *)
Definition unit := unit.

Axiom qtmark : Type.
Parameter qtmark_WhyType : WhyType qtmark.
Existing Instance qtmark_WhyType.

(* Why3 assumption *)
Inductive sorted: (list Z) -> Prop :=
  | Sorted_Nil : (sorted Init.Datatypes.nil)
  | Sorted_One : forall (x:Z), (sorted
      (Init.Datatypes.cons x Init.Datatypes.nil))
  | Sorted_Two : forall (x:Z) (y:Z) (l:(list Z)), (x <= y)%Z -> ((sorted
      (Init.Datatypes.cons y l)) -> (sorted
      (Init.Datatypes.cons x (Init.Datatypes.cons y l)))).

Axiom sorted_mem : forall (x:Z) (l:(list Z)), ((forall (y:Z), (list.Mem.mem y
  l) -> (x <= y)%Z) /\ (sorted l)) <-> (sorted (Init.Datatypes.cons x l)).

Import Permut.

(* Why3 goal *)
Theorem WP_parameter_merge : forall (l1:(list Z)) (l2:(list Z)), ((sorted
  l1) /\ (sorted l2)) ->
  match l2 with
  | (Init.Datatypes.cons x x1) =>
      match l1 with
      | (Init.Datatypes.cons x2 x3) => (~ (x2 <= x)%Z) -> (((sorted l1) /\
          (sorted x1)) -> forall (o:(list Z)), ((sorted o) /\
          (list.Permut.permut o (Init.Datatypes.app l1 x1))) ->
          (list.Permut.permut (Init.Datatypes.cons x o)
          (Init.Datatypes.app l1 l2)))
      | Init.Datatypes.nil => True
      end
  | Init.Datatypes.nil => True
  end.
(* Why3 intros l1 l2 (h1,h2). *)
Proof.
intuition.
destruct l2; intuition.
destruct l1; intuition.
apply Permut_trans with (cons z (app (cons z0 l1) l2)); auto.
apply Permut_cons; auto.
apply (Permut_cons_append z).
Qed.

