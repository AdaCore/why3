<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.5.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sumrange.mlw"/>
<theory name="ArraySum" proved="true">
 <goal name="sum&#39;vc" expl="VC for sum" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="2630"/></proof>
 </goal>
 <goal name="sum_right" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_right.0" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. 0 &lt; x &lt; j -&gt; sum a (j-x) j = sum a (j-x) (j-1) + a[j-1])">
   <goal name="sum_right.0.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sum_right.0.0.0" expl="asserted formula" proved="true">
    <transf name="induction" proved="true" arg1="x">
     <goal name="sum_right.0.0.0.0" expl="base case (asserted formula)" proved="true">
     <proof prover="3"><result status="valid" time="0.00" steps="2549"/></proof>
     </goal>
     <goal name="sum_right.0.0.0.1" expl="recursive case (asserted formula)" proved="true">
     <transf name="instantiate" proved="true" arg1="Hrec" arg2="(x - 1)">
      <goal name="sum_right.0.0.0.1.0" expl="recursive case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="0.02" steps="5493"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_right.0.1" proved="true">
   <transf name="instantiate" proved="true" arg1="h" arg2="(j-i)">
    <goal name="sum_right.0.1.0" proved="true">
    <proof prover="2"><result status="valid" time="0.10" steps="248056"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Simple" proved="true">
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="query&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="3486"/></proof>
  </goal>
  <goal name="query&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="3480"/></proof>
  </goal>
  <goal name="query&#39;vc.2" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="4106"/></proof>
  </goal>
  <goal name="query&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="2951"/></proof>
  </goal>
  <goal name="query&#39;vc.4" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="2918"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExtraLemmas" proved="true">
 <goal name="sum_concat" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_concat.0" proved="true">
  <transf name="induction" proved="true" arg1="k">
   <goal name="sum_concat.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="3292"/></proof>
   </goal>
   <goal name="sum_concat.0.1" expl="recursive case" proved="true">
   <transf name="instantiate" proved="true" arg1="Hrec" arg2="k">
    <goal name="sum_concat.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="5303"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_frame" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_frame.0" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. 0 &lt;= x &lt;= j-i -&gt; sum a1 (j-x) j = sum a2 (j-x) j)">
   <goal name="sum_frame.0.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sum_frame.0.0.0" expl="asserted formula" proved="true">
    <transf name="induction" proved="true" arg1="x">
     <goal name="sum_frame.0.0.0.0" expl="base case (asserted formula)" proved="true">
     <proof prover="3"><result status="valid" time="0.01" steps="3975"/></proof>
     </goal>
     <goal name="sum_frame.0.0.0.1" expl="recursive case (asserted formula)" proved="true">
     <transf name="instantiate" proved="true" arg1="Hrec" arg2="(x - 1)">
      <goal name="sum_frame.0.0.0.1.0" expl="recursive case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="0.02" steps="6230"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_frame.0.1" proved="true">
   <transf name="instantiate" proved="true" arg1="h" arg2="(j-i)">
    <goal name="sum_frame.0.1.0" proved="true">
    <proof prover="3"><result status="valid" time="0.00" steps="3275"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_update" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_update.0" proved="true">
  <transf name="induction" proved="true" arg1="h" arg2="from" arg3="i+1">
   <goal name="sum_update.0.0" expl="base case" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="sum_update.0.0.0" expl="base case" proved="true">
    <proof prover="3"><result status="valid" time="0.07" steps="16040"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sum_update.0.1" expl="recursive case" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="sum_update.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="9017"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CumulativeArray" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="15477"/></proof>
 </goal>
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <proof prover="3"><result status="valid" time="0.06" steps="12547"/></proof>
 </goal>
 <goal name="update&#39;vc" expl="VC for update" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="59537"/></proof>
 </goal>
</theory>
<theory name="CumulativeTree" proved="true">
 <goal name="tree_of_array&#39;vc" expl="VC for tree_of_array" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="tree_of_array&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="7001"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="6432"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="8080"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="7123"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="7126"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="7236"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="7221"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.7" expl="assertion" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="tree_of_array&#39;vc.7.0" expl="assertion" proved="true">
   <transf name="destruct_term" proved="true" arg1="l">
    <goal name="tree_of_array&#39;vc.7.0.0" expl="assertion" proved="true">
    <transf name="destruct_term" proved="true" arg1="r">
     <goal name="tree_of_array&#39;vc.7.0.0.0" expl="assertion" proved="true">
     <proof prover="3"><result status="valid" time="0.08" steps="15740"/></proof>
     </goal>
     <goal name="tree_of_array&#39;vc.7.0.0.1" expl="assertion" proved="true">
     <proof prover="3"><result status="valid" time="0.04" steps="9773"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="tree_of_array&#39;vc.7.0.1" expl="assertion" proved="true">
    <transf name="destruct_term" proved="true" arg1="r" arg2="using" arg3="b1,b2,b3">
     <goal name="tree_of_array&#39;vc.7.0.1.0" expl="assertion" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="0.11" steps="14217"/></proof>
     </goal>
     <goal name="tree_of_array&#39;vc.7.0.1.1" expl="assertion" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="0.04" steps="13248"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="tree_of_array&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="tree_of_array&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="8220"/></proof>
   </goal>
   <goal name="tree_of_array&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="is_tree_for">
    <goal name="tree_of_array&#39;vc.8.1.0" expl="VC for tree_of_array" proved="true">
    <proof prover="3"><result status="valid" time="0.22" steps="36067"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="3"><result status="valid" time="0.02" steps="6435"/></proof>
 </goal>
 <goal name="query_aux&#39;vc" expl="VC for query_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.25" steps="40747"/></proof>
 </goal>
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="query&#39;vc.0" expl="VC for query" proved="true">
  <transf name="destruct_term" proved="true" arg1="t">
   <goal name="query&#39;vc.0.0" expl="VC for query" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="9817"/></proof>
   </goal>
   <goal name="query&#39;vc.0.1" expl="VC for query" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="8470"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="is_tree_for_frame" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="is_tree_for_frame.0" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="931"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="update_aux&#39;vc" expl="VC for update_aux" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="update_aux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="7293"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="7952"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="7505"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="7603"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="9082"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="9710"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="7963"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="7527"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="7702"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.9" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="9726"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.10" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="9159"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="78497"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="update&#39;vc" expl="VC for update" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="update&#39;vc.0" expl="VC for update" proved="true">
  <transf name="destruct_term" proved="true" arg1="t">
   <goal name="update&#39;vc.0.0" expl="VC for update" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="10619"/></proof>
   </goal>
   <goal name="update&#39;vc.0.1" expl="VC for update" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="9819"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="depth_min" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="depth_min.0" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="8072"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="depth_is_log&#39;vc" expl="VC for depth_is_log" proved="true">
 <proof prover="0" timelimit="1"><result status="valid" time="0.77" steps="1034"/></proof>
 </goal>
 <goal name="update_aux_complexity&#39;vc" expl="VC for update_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="update_aux_complexity&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="8590"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="8549"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.09" steps="14820"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="9315"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="8809"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="8914"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10454"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.7" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="11206"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="11797"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.12" steps="23192"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="9326"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="8831"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="9013"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="11222"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.14" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="10531"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="11890"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.13" steps="22308"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="query_aux_complexity&#39;vc" expl="VC for query_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="query_aux_complexity&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="9079"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="10854"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="9266"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="11536"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10357"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="9849"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10057"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="11689"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="8129"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10432"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="9933"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10212"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="11814"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="8155"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="10430"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="9931"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10240"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.17" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10632"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10100"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="10354"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="12354"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="13457"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
