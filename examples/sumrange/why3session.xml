<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sumrange.mlw"/>
<theory name="ArraySum" proved="true">
 <goal name="sum&#39;vc" expl="VC for sum" proved="true">
 <proof prover="3"><result status="valid" time="0.010000" steps="2319"/></proof>
 </goal>
 <goal name="sum_right" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_right.0" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. 0 &lt; x &lt; j -&gt; sum a (j-x) j = sum a (j-x) (j-1) + a[j-1])">
   <goal name="sum_right.0.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sum_right.0.0.0" expl="asserted formula" proved="true">
    <transf name="induction" proved="true" arg1="x">
     <goal name="sum_right.0.0.0.0" expl="base case (asserted formula)" proved="true">
     <proof prover="3"><result status="valid" time="0.000000" steps="2288"/></proof>
     </goal>
     <goal name="sum_right.0.0.0.1" expl="recursive case (asserted formula)" proved="true">
     <transf name="instantiate" proved="true" arg1="Hrec" arg2="(x - 1)">
      <goal name="sum_right.0.0.0.1.0" expl="recursive case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="0.020000" steps="5182"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_right.0.1" proved="true">
   <transf name="instantiate" proved="true" arg1="h" arg2="(j-i)">
    <goal name="sum_right.0.1.0" proved="true">
    <proof prover="4"><result status="valid" time="0.070000" steps="538437"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Simple" proved="true">
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="query&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="3175"/></proof>
  </goal>
  <goal name="query&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="3168"/></proof>
  </goal>
  <goal name="query&#39;vc.2" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="3794"/></proof>
  </goal>
  <goal name="query&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="2689"/></proof>
  </goal>
  <goal name="query&#39;vc.4" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="2656"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExtraLemmas" proved="true">
 <goal name="sum_concat" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_concat.0" proved="true">
  <transf name="induction" proved="true" arg1="k">
   <goal name="sum_concat.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.010000" steps="2980"/></proof>
   </goal>
   <goal name="sum_concat.0.1" expl="recursive case" proved="true">
   <transf name="instantiate" proved="true" arg1="Hrec" arg2="k">
    <goal name="sum_concat.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.020000" steps="4990"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_frame" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_frame.0" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. 0 &lt;= x &lt;= j-i -&gt; sum a1 (j-x) j = sum a2 (j-x) j)">
   <goal name="sum_frame.0.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sum_frame.0.0.0" expl="asserted formula" proved="true">
    <transf name="induction" proved="true" arg1="x">
     <goal name="sum_frame.0.0.0.0" expl="base case (asserted formula)" proved="true">
     <proof prover="3"><result status="valid" time="0.010000" steps="3665"/></proof>
     </goal>
     <goal name="sum_frame.0.0.0.1" expl="recursive case (asserted formula)" proved="true">
     <transf name="instantiate" proved="true" arg1="Hrec" arg2="(x - 1)">
      <goal name="sum_frame.0.0.0.1.0" expl="recursive case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="0.020000" steps="5920"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_frame.0.1" proved="true">
   <transf name="instantiate" proved="true" arg1="h" arg2="(j-i)">
    <goal name="sum_frame.0.1.0" proved="true">
    <proof prover="3"><result status="valid" time="0.000000" steps="3014"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_update" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_update.0" proved="true">
  <transf name="induction" proved="true" arg1="h" arg2="from" arg3="i+1">
   <goal name="sum_update.0.0" expl="base case" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="sum_update.0.0.0" expl="base case" proved="true">
    <proof prover="3"><result status="valid" time="0.070000" steps="15729"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sum_update.0.1" expl="recursive case" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="sum_update.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.040000" steps="8704"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CumulativeArray" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="4"><result status="valid" time="0.010000" steps="22848"/></proof>
 </goal>
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <proof prover="3"><result status="valid" time="0.060000" steps="12236"/></proof>
 </goal>
 <goal name="update&#39;vc" expl="VC for update" proved="true">
 <proof prover="4"><result status="valid" time="0.020000" steps="71868"/></proof>
 </goal>
</theory>
<theory name="CumulativeTree" proved="true">
 <goal name="tree_of_array&#39;vc" expl="VC for tree_of_array" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="tree_of_array&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6682"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="6171"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7761"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6803"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6806"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6916"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6901"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.080000" steps="21297"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.088241" steps="30393"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="3"><result status="valid" time="0.020000" steps="6173"/></proof>
 </goal>
 <goal name="query_aux&#39;vc" expl="VC for query_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.250000" steps="40427"/></proof>
 </goal>
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <proof prover="2"><result status="valid" time="0.060000" steps="15791"/></proof>
 </goal>
 <goal name="is_tree_for_frame" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="is_tree_for_frame.0" proved="true">
  <proof prover="0"><result status="valid" time="1.170000" steps="931"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="update_aux&#39;vc" expl="VC for update_aux" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="update_aux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="6977"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7636"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7189"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="7287"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8349"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8977"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7647"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="7211"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7386"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.9" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8993"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.10" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8426"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.550000" steps="77731"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="update&#39;vc" expl="VC for update" proved="true">
 <proof prover="2"><result status="valid" time="0.084725" steps="27655"/></proof>
 </goal>
 <goal name="depth_min" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="depth_min.0" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7751"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="depth_is_log&#39;vc" expl="VC for depth_is_log" proved="true">
 <proof prover="0" timelimit="1"><result status="valid" time="0.770000" steps="1034"/></proof>
 </goal>
 <goal name="update_aux_complexity&#39;vc" expl="VC for update_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="update_aux_complexity&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8271"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7815"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.090000" steps="14082"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8996"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8490"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="8595"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9716"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.7" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10468"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="11060"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.120000" steps="22454"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="9007"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8512"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8694"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10484"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.14" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="9793"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="11153"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.130000" steps="21570"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="query_aux_complexity&#39;vc" expl="VC for query_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="query_aux_complexity&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8755"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="10531"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8941"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="11211"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10032"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="9524"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9732"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="11364"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7867"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10107"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9608"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9887"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="11490"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7893"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="10105"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9606"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9915"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.17" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10307"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9775"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10030"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="12030"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="13132"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
