<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.3.3" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.4.3" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="sumrange.mlw"/>
<theory name="ArraySum" proved="true">
 <goal name="sum&#39;vc" expl="VC for sum" proved="true">
 <proof prover="3"><result status="valid" time="0.010000" steps="2123"/></proof>
 </goal>
 <goal name="sum_right" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_right.0" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. 0 &lt; x &lt; j -&gt; sum a (j-x) j = sum a (j-x) (j-1) + a[j-1])">
   <goal name="sum_right.0.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sum_right.0.0.0" expl="asserted formula" proved="true">
    <transf name="induction" proved="true" arg1="x">
     <goal name="sum_right.0.0.0.0" expl="base case (asserted formula)" proved="true">
     <proof prover="3"><result status="valid" time="0.000000" steps="2240"/></proof>
     </goal>
     <goal name="sum_right.0.0.0.1" expl="recursive case (asserted formula)" proved="true">
     <transf name="instantiate" proved="true" arg1="Hrec" arg2="(x - 1)">
      <goal name="sum_right.0.0.0.1.0" expl="recursive case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="0.020000" steps="5125"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_right.0.1" proved="true">
   <transf name="instantiate" proved="true" arg1="h" arg2="(j-i)">
    <goal name="sum_right.0.1.0" proved="true">
    <proof prover="0"><result status="valid" time="0.070000" steps="11792"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Simple" proved="true">
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="query&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="2979"/></proof>
  </goal>
  <goal name="query&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="2972"/></proof>
  </goal>
  <goal name="query&#39;vc.2" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="3737"/></proof>
  </goal>
  <goal name="query&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="2524"/></proof>
  </goal>
  <goal name="query&#39;vc.4" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="2491"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExtraLemmas" proved="true">
 <goal name="sum_concat" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_concat.0" proved="true">
  <transf name="induction" proved="true" arg1="k">
   <goal name="sum_concat.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.010000" steps="2784"/></proof>
   </goal>
   <goal name="sum_concat.0.1" expl="recursive case" proved="true">
   <transf name="instantiate" proved="true" arg1="Hrec" arg2="k">
    <goal name="sum_concat.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.020000" steps="4793"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_frame" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_frame.0" proved="true">
  <transf name="assert" proved="true" arg1="(forall x. 0 &lt;= x &lt;= j-i -&gt; sum a1 (j-x) j = sum a2 (j-x) j)">
   <goal name="sum_frame.0.0" expl="asserted formula" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sum_frame.0.0.0" expl="asserted formula" proved="true">
    <transf name="induction" proved="true" arg1="x">
     <goal name="sum_frame.0.0.0.0" expl="base case (asserted formula)" proved="true">
     <proof prover="3"><result status="valid" time="0.010000" steps="3608"/></proof>
     </goal>
     <goal name="sum_frame.0.0.0.1" expl="recursive case (asserted formula)" proved="true">
     <transf name="instantiate" proved="true" arg1="Hrec" arg2="(x - 1)">
      <goal name="sum_frame.0.0.0.1.0" expl="recursive case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="0.020000" steps="5863"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="sum_frame.0.1" proved="true">
   <transf name="instantiate" proved="true" arg1="h" arg2="(j-i)">
    <goal name="sum_frame.0.1.0" proved="true">
    <proof prover="3"><result status="valid" time="0.000000" steps="2966"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_update" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_update.0" proved="true">
  <transf name="induction" proved="true" arg1="h" arg2="from" arg3="i+1">
   <goal name="sum_update.0.0" expl="base case" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="sum_update.0.0.0" expl="base case" proved="true">
    <proof prover="3"><result status="valid" time="0.070000" steps="15752"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="sum_update.0.1" expl="recursive case" proved="true">
   <transf name="compute_in_goal" proved="true" >
    <goal name="sum_update.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.040000" steps="8726"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CumulativeArray" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="24981"/></proof>
 </goal>
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <proof prover="3"><result status="valid" time="0.060000" steps="12179"/></proof>
 </goal>
 <goal name="update&#39;vc" expl="VC for update" proved="true">
 <proof prover="0"><result status="valid" time="0.238284" steps="860801"/></proof>
 </goal>
</theory>
<theory name="CumulativeTree" proved="true">
 <goal name="tree_of_array&#39;vc" expl="VC for tree_of_array" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="tree_of_array&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6487"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="6006"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7566"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6608"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6611"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6721"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="6706"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.188126" steps="21017"/></proof>
  </goal>
  <goal name="tree_of_array&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.263401" steps="30196"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="3"><result status="valid" time="0.020000" steps="6008"/></proof>
 </goal>
 <goal name="query_aux&#39;vc" expl="VC for query_aux" proved="true">
 <proof prover="3"><result status="valid" time="0.250000" steps="40236"/></proof>
 </goal>
 <goal name="query&#39;vc" expl="VC for query" proved="true">
 <proof prover="2"><result status="valid" time="0.060000" steps="15511"/></proof>
 </goal>
 <goal name="is_tree_for_frame" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="is_tree_for_frame.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="is_tree_for_frame.0.0" proved="true">
   <proof prover="4"><result status="valid" time="1.223666" steps="12390"/></proof>
   </goal>
   <goal name="is_tree_for_frame.0.1" proved="true">
   <proof prover="4"><result status="valid" time="2.110853" steps="17351"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="update_aux&#39;vc" expl="VC for update_aux" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="update_aux&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="6994"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7653"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7206"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="7304"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.4" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8381"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9009"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.6" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7664"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="7228"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7403"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.9" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="9025"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.10" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8458"/></proof>
  </goal>
  <goal name="update_aux&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.724537" steps="77763"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="update&#39;vc" expl="VC for update" proved="true">
 <proof prover="2"><result status="valid" time="0.239765" steps="27533"/></proof>
 </goal>
 <goal name="depth_min" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="depth_min.0" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="7768"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="depth_is_log&#39;vc" expl="VC for depth_is_log" proved="true">
 <proof prover="1"><result status="valid" time="0.511788" steps="1280"/></proof>
 </goal>
 <goal name="update_aux_complexity&#39;vc" expl="VC for update_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="update_aux_complexity&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8288"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7832"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.090000" steps="14114"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9013"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8507"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="8612"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9748"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.7" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10500"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="11092"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.120000" steps="22486"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.10" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="9024"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8529"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8711"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10516"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.14" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="9825"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="11185"/></proof>
  </goal>
  <goal name="update_aux_complexity&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.130000" steps="21602"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="query_aux_complexity&#39;vc" expl="VC for query_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="query_aux_complexity&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="8560"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="10336"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="8746"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="11016"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9837"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="9329"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9537"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="11170"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7702"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.9" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9912"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9413"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9692"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="11295"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="7728"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.050000" steps="9910"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9411"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9720"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.17" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="10112"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9580"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="9835"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.20" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="11835"/></proof>
  </goal>
  <goal name="query_aux_complexity&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.060000" steps="12937"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
