<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="3" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="tree_of_array.mlw"/>
<theory name="TreeOfArray" proved="true">
 <goal name="tree_of_array_aux&#39;vc" expl="VC for tree_of_array_aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="tree_of_array_aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="8315"/></proof>
  </goal>
  <goal name="tree_of_array_aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.07" steps="11862"/></proof>
  </goal>
  <goal name="tree_of_array_aux&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="11537"/></proof>
  </goal>
  <goal name="tree_of_array_aux&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="13613"/></proof>
  </goal>
  <goal name="tree_of_array_aux&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.10" steps="18131"/></proof>
  </goal>
  <goal name="tree_of_array_aux&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.07" steps="14846"/></proof>
  </goal>
  <goal name="tree_of_array_aux&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="tree_of_array_aux&#39;vc.6.0" expl="VC for tree_of_array_aux" proved="true">
   <proof prover="2" timelimit="1" memlimit="1000"><result status="valid" time="0.02" steps="64"/></proof>
   </goal>
   <goal name="tree_of_array_aux&#39;vc.6.1" expl="VC for tree_of_array_aux" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="tree_of_array_aux&#39;vc.6.1.0" expl="VC for tree_of_array_aux" proved="true">
    <proof prover="2"><result status="valid" time="0.31" steps="689"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="tree_of_array_aux&#39;vc.6.2" expl="VC for tree_of_array_aux" proved="true">
   <transf name="case" proved="true" arg1="hi=lo">
    <goal name="tree_of_array_aux&#39;vc.6.2.0" expl="true case" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="13380"/></proof>
    </goal>
    <goal name="tree_of_array_aux&#39;vc.6.2.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="hi=lo+1">
     <goal name="tree_of_array_aux&#39;vc.6.2.1.0" expl="false case (true case)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="tree_of_array_aux&#39;vc.6.2.1.0.0" expl="false case (true case)" proved="true">
      <proof prover="0"><result status="valid" time="0.32" steps="3574"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="tree_of_array_aux&#39;vc.6.2.1.1" expl="false case" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="tree_of_array_aux&#39;vc.6.2.1.1.0" expl="false case" proved="true">
      <proof prover="2"><result status="valid" time="0.81" steps="1023"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="tree_of_array_aux&#39;vc.6.3" expl="VC for tree_of_array_aux" proved="true">
   <transf name="case" proved="true" arg1="hi=lo">
    <goal name="tree_of_array_aux&#39;vc.6.3.0" expl="true case" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="13380"/></proof>
    </goal>
    <goal name="tree_of_array_aux&#39;vc.6.3.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="hi=lo+1">
     <goal name="tree_of_array_aux&#39;vc.6.3.1.0" expl="false case (true case)" proved="true">
     <transf name="assert" proved="true" arg1="left=Empty">
      <goal name="tree_of_array_aux&#39;vc.6.3.1.0.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.08" steps="17613"/></proof>
      </goal>
      <goal name="tree_of_array_aux&#39;vc.6.3.1.0.1" expl="false case (true case)" proved="true">
      <transf name="assert" proved="true" arg1="right=Empty">
       <goal name="tree_of_array_aux&#39;vc.6.3.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.06" steps="17546"/></proof>
       </goal>
       <goal name="tree_of_array_aux&#39;vc.6.3.1.0.1.1" expl="false case (true case)" proved="true">
       <proof prover="2" timelimit="1" memlimit="1000"><result status="valid" time="0.03" steps="123"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="tree_of_array_aux&#39;vc.6.3.1.1" expl="false case" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="tree_of_array_aux&#39;vc.6.3.1.1.0" expl="false case" proved="true">
      <proof prover="2"><result status="valid" time="2.48" steps="1313"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="tree_of_array&#39;vc" expl="VC for tree_of_array" proved="true">
 <proof prover="3"><result status="valid" time="0.04" steps="10081"/></proof>
 </goal>
</theory>
</file>
</why3session>
