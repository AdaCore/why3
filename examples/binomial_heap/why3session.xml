<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="CVC4" version="1.4" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="2" name="Eprover" version="1.8-001" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="1.30" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.5.0" timelimit="10" steplimit="0" memlimit="1000"/>
<file name="../binomial_heap.mlw" expanded="true">
<theory name="BinomialHeap" sum="a4b20c3f0b661937cb05ebc19298c2ba" expanded="true">
 <goal name="VC size_nonnneg" expl="VC for size_nonnneg">
 <proof prover="4"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="le_roots_trans">
 <transf name="induction_ty_lex">
  <goal name="le_roots_trans.1" expl="1.">
  <proof prover="3"><result status="valid" time="0.01" steps="44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="heaps_append">
 <transf name="induction_ty_lex">
  <goal name="heaps_append.1" expl="1.">
  <transf name="split_goal_wp">
   <goal name="heaps_append.1.1" expl="1.">
   <proof prover="3"><result status="valid" time="0.01" steps="7"/></proof>
   </goal>
   <goal name="heaps_append.1.2" expl="2.">
   <proof prover="2"><result status="valid" time="1.62"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="heaps_reverse">
 <transf name="induction_ty_lex">
  <goal name="heaps_reverse.1" expl="1.">
  <transf name="split_goal_wp">
   <goal name="heaps_reverse.1.1" expl="1.">
   <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
   </goal>
   <goal name="heaps_reverse.1.2" expl="2.">
   <proof prover="2"><result status="valid" time="0.13"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC occ_nonneg" expl="VC for occ_nonneg">
 <proof prover="3"><result status="valid" time="0.02" steps="95"/></proof>
 </goal>
 <goal name="occ_append">
 <transf name="induction_ty_lex">
  <goal name="occ_append.1" expl="1.">
  <transf name="split_goal_wp">
   <goal name="occ_append.1.1" expl="1.">
   <proof prover="3"><result status="valid" time="0.00" steps="5"/></proof>
   </goal>
   <goal name="occ_append.1.2" expl="2.">
   <transf name="compute_in_goal">
    <goal name="occ_append.1.2.1" expl="1.">
    <proof prover="0"><result status="valid" time="0.37"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="occ_reverse">
 <transf name="induction_ty_lex">
  <goal name="occ_reverse.1" expl="1.">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC heaps_mem" expl="VC for heaps_mem">
 <proof prover="0"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="has_order_length">
 <transf name="induction_ty_lex">
  <goal name="has_order_length.1" expl="1.">
  <transf name="split_goal_wp">
   <goal name="has_order_length.1.1" expl="1.">
   <proof prover="3"><result status="valid" time="0.01" steps="13"/></proof>
   </goal>
   <goal name="has_order_length.1.2" expl="2.">
   <transf name="compute_in_goal">
    <goal name="has_order_length.1.2.1" expl="1.">
    <proof prover="3"><result status="valid" time="0.08" steps="412"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inv_trans">
 <transf name="induction_ty_lex">
  <goal name="inv_trans.1" expl="1.">
  <proof prover="3"><result status="valid" time="0.00" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_reverse" expl="VC for inv_reverse">
 <proof prover="3"><result status="valid" time="0.14" steps="605"/></proof>
 </goal>
 <goal name="VC empty" expl="VC for empty">
 <proof prover="3"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
 <goal name="VC is_empty" expl="VC for is_empty">
 <proof prover="3"><result status="valid" time="0.00" steps="9"/></proof>
 </goal>
 <goal name="VC get_min" expl="VC for get_min" expanded="true">
 <transf name="split_goal_wp" expanded="true">
  <goal name="VC get_min.1" expl="1. unreachable point">
  <proof prover="3"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="VC get_min.2" expl="2. variant decrease">
  <proof prover="3"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC get_min.3" expl="3. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="VC get_min.4" expl="4. postcondition">
  <proof prover="3"><result status="valid" time="0.05" steps="268"/></proof>
  </goal>
  <goal name="VC get_min.5" expl="5. postcondition">
  <proof prover="3"><result status="valid" time="0.01" steps="68"/></proof>
  </goal>
  <goal name="VC get_min.6" expl="6. postcondition">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC get_min.7" expl="7. precondition">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC get_min.8" expl="8. postcondition">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC get_min.9" expl="9. postcondition">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC link" expl="VC for link">
 <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
 <goal name="VC add_tree" expl="VC for add_tree">
 <transf name="split_goal_wp">
  <goal name="VC add_tree.1" expl="1. assertion">
  <proof prover="3"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="VC add_tree.2" expl="2. variant decrease">
  <proof prover="3"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC add_tree.3" expl="3. precondition">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC add_tree.4" expl="4. precondition">
  <proof prover="0"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC add_tree.5" expl="5. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="83"/></proof>
  </goal>
  <goal name="VC add_tree.6" expl="6. precondition">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC add_tree.7" expl="7. postcondition">
  <proof prover="3"><result status="valid" time="0.02" steps="91"/></proof>
  </goal>
  <goal name="VC add_tree.8" expl="8. postcondition">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC add_tree.9" expl="9. postcondition">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add" expl="VC for add">
 <proof prover="3"><result status="valid" time="0.04" steps="259"/></proof>
 </goal>
 <goal name="VC merge" expl="VC for merge">
 <transf name="split_goal_wp">
  <goal name="VC merge.1" expl="1. variant decrease">
  <proof prover="3"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC merge.2" expl="2. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="60"/></proof>
  </goal>
  <goal name="VC merge.3" expl="3. precondition">
  <proof prover="3"><result status="valid" time="0.00" steps="27"/></proof>
  </goal>
  <goal name="VC merge.4" expl="4. precondition">
  <proof prover="3"><result status="valid" time="0.00" steps="13"/></proof>
  </goal>
  <goal name="VC merge.5" expl="5. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="74"/></proof>
  </goal>
  <goal name="VC merge.6" expl="6. variant decrease">
  <proof prover="3"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC merge.7" expl="7. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="VC merge.8" expl="8. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="73"/></proof>
  </goal>
  <goal name="VC merge.9" expl="9. precondition">
  <proof prover="3"><result status="valid" time="0.02" steps="62"/></proof>
  </goal>
  <goal name="VC merge.10" expl="10. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="VC merge.11" expl="11. variant decrease">
  <proof prover="3"><result status="valid" time="0.01" steps="40"/></proof>
  </goal>
  <goal name="VC merge.12" expl="12. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="64"/></proof>
  </goal>
  <goal name="VC merge.13" expl="13. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="VC merge.14" expl="14. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="68"/></proof>
  </goal>
  <goal name="VC merge.15" expl="15. precondition">
  <proof prover="3"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="VC merge.16" expl="16. precondition">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC merge.17" expl="17. precondition">
  <proof prover="0"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC merge.18" expl="18. precondition">
  <proof prover="3"><result status="valid" time="0.00" steps="16"/></proof>
  </goal>
  <goal name="VC merge.19" expl="19. precondition">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC merge.20" expl="20. postcondition">
  <proof prover="3"><result status="valid" time="0.03" steps="203"/></proof>
  </goal>
  <goal name="VC merge.21" expl="21. postcondition">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC merge.22" expl="22. postcondition">
  <proof prover="0"><result status="valid" time="1.58"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC extract_min_tree" expl="VC for extract_min_tree">
 <proof prover="3"><result status="valid" time="0.28" steps="1891"/></proof>
 </goal>
 <goal name="VC extract_min" expl="VC for extract_min">
 <proof prover="3"><result status="valid" time="0.10" steps="551"/></proof>
 </goal>
 <goal name="VC has_order_size" expl="VC for has_order_size">
 <proof prover="0"><result status="valid" time="0.10"/></proof>
 </goal>
 <goal name="binomial_tree_size">
 <proof prover="3"><result status="valid" time="0.01" steps="11"/></proof>
 <proof prover="4"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="VC inv_size" expl="VC for inv_size">
 <proof prover="0"><result status="valid" time="1.30"/></proof>
 </goal>
 <goal name="heap_size">
 <proof prover="3"><result status="valid" time="0.01" steps="19"/></proof>
 <proof prover="4"><result status="valid" time="0.02"/></proof>
 </goal>
</theory>
</file>
</why3session>
