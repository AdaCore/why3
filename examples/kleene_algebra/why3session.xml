<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.11.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="kleene_algebra.mlw"/>
<theory name="SemiRing" proved="true">
 <goal name="infix ^&#39;vc" expl="VC for infix ^" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="767"/></proof>
 </goal>
 <goal name="Exponentiation.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="738"/></proof>
 </goal>
 <goal name="Exponentiation.Unit_def_l" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="784"/></proof>
 </goal>
 <goal name="Exponentiation.Unit_def_r" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="828"/></proof>
 </goal>
 <goal name="Exponentiation.Power_0" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="942"/></proof>
 </goal>
 <goal name="Exponentiation.Power_s" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="1218"/></proof>
 </goal>
</theory>
<theory name="Dioid" proved="true">
 <goal name="le_refl" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="1989"/></proof>
 </goal>
 <goal name="le_antisym" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="2175"/></proof>
 </goal>
 <goal name="le_trans" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="2286"/></proof>
 </goal>
 <goal name="zero_le" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="2235"/></proof>
 </goal>
 <goal name="le_compat_add" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="4348"/></proof>
 </goal>
 <goal name="le_add" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="2791"/></proof>
 </goal>
 <goal name="le_add_le" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="2589"/></proof>
 </goal>
 <goal name="add_le" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="3140"/></proof>
 </goal>
 <goal name="le_compat_add_left" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="2765"/></proof>
 </goal>
 <goal name="le_compat_add_right" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="2857"/></proof>
 </goal>
</theory>
<theory name="KleeneAlgebra" proved="true">
 <goal name="one_le_star" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="3427"/></proof>
 </goal>
 <goal name="mul_var_le_star" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="4557"/></proof>
 </goal>
 <goal name="var_mul_le_star" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="4883"/></proof>
 </goal>
 <goal name="power_le_star" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="power_le_star.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="power_le_star.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.01" steps="3693"/></proof>
   </goal>
   <goal name="power_le_star.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="10565"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_mul_star" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_mul_star.0" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="3866"/></proof>
  </goal>
  <goal name="star_mul_star.1" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="12023"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_star" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="21190"/></proof>
 </goal>
 <goal name="star_unfold_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="9145"/></proof>
  </goal>
  <goal name="star_unfold_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="5205"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_unfold_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="9036"/></proof>
  </goal>
  <goal name="star_unfold_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="5509"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_le" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_le.0" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="7509"/></proof>
  </goal>
  <goal name="star_le.1" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="6511"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="le_star_left_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="le_star_left_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="39528"/></proof>
  </goal>
  <goal name="le_star_left_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="3753"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="le_star_right_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="le_star_right_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.33" steps="39974"/></proof>
  </goal>
  <goal name="le_star_right_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="3867"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="slide_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="slide_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4462"/></proof>
  </goal>
  <goal name="slide_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="39960"/></proof>
  </goal>
  <goal name="slide_left.2" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="3954"/></proof>
  </goal>
  <goal name="slide_left.3" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="4000"/></proof>
  </goal>
  <goal name="slide_left.4" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="15039"/></proof>
  </goal>
  <goal name="slide_left.5" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="82932"/></proof>
  </goal>
  <goal name="slide_left.6" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="12191"/></proof>
  </goal>
  <goal name="slide_left.7" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4079"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="slide_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="slide_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4567"/></proof>
  </goal>
  <goal name="slide_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.27" steps="56605"/></proof>
  </goal>
  <goal name="slide_right.2" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4013"/></proof>
  </goal>
  <goal name="slide_right.3" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4059"/></proof>
  </goal>
  <goal name="slide_right.4" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="18872"/></proof>
  </goal>
  <goal name="slide_right.5" proved="true">
  <proof prover="0"><result status="valid" time="0.86" steps="112412"/></proof>
  </goal>
  <goal name="slide_right.6" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="14064"/></proof>
  </goal>
  <goal name="slide_right.7" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="4138"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_pow&#39;vc" expl="VC for sum_pow" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="4306"/></proof>
 </goal>
 <goal name="sum_pow_left" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_pow_left.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="sum_pow_left.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.01" steps="4124"/></proof>
   </goal>
   <goal name="sum_pow_left.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="8242"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_sum_pow" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="mul_sum_pow.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="mul_sum_pow.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="4961"/></proof>
   </goal>
   <goal name="mul_sum_pow.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="18503"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_pow_le_star" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_pow_le_star.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="sum_pow_le_star.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="5117"/></proof>
   </goal>
   <goal name="sum_pow_le_star.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="9083"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Conway_equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Conway_equality.0" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="12963"/></proof>
  </goal>
  <goal name="Conway_equality.1" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="19216"/></proof>
  </goal>
  <goal name="Conway_equality.2" proved="true">
  <proof prover="0"><result status="valid" time="1.22" steps="188779"/></proof>
  </goal>
  <goal name="Conway_equality.3" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="153258"/></proof>
  </goal>
  <goal name="Conway_equality.4" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="13925"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="RelAlgebra" proved="true">
 <goal name="zero_def" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="9421"/></proof>
 </goal>
 <goal name="one_def" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="11817"/></proof>
 </goal>
 <goal name="post&#39;vc" expl="VC for post" proved="true">
 <proof prover="0"><result status="valid" time="0.16" steps="24021"/></proof>
 </goal>
 <goal name="pre&#39;vc" expl="VC for pre" proved="true">
 <proof prover="0"><result status="valid" time="0.14" steps="28427"/></proof>
 </goal>
 <goal name="infix +&#39;vc" expl="VC for infix +" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="11992"/></proof>
 </goal>
 <goal name="infix *&#39;vc" expl="VC for infix *" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix *&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.53" steps="3595"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unit_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unit_l.0" proved="true">
  <proof prover="1"><result status="valid" time="1.60" steps="11431"/></proof>
  </goal>
  <goal name="unit_l.1" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="10578"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unit_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unit_r.0" proved="true">
  <proof prover="1"><result status="valid" time="1.58" steps="11436"/></proof>
  </goal>
  <goal name="unit_r.1" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="10630"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assoc_mul" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assoc_mul.0" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="1582"/></proof>
  </goal>
  <goal name="assoc_mul.1" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="1582"/></proof>
  </goal>
  <goal name="assoc_mul.2" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="67204"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Dioid.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="11121"/></proof>
 </goal>
 <goal name="Dioid.Unit_def_l" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="11249"/></proof>
 </goal>
 <goal name="Dioid.Unit_def_r" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="11223"/></proof>
 </goal>
 <goal name="Dioid.Comm" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="11120"/></proof>
 </goal>
 <goal name="Dioid.Monoid.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="10761"/></proof>
 </goal>
 <goal name="Dioid.Monoid.Unit_def_l" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="4"/></proof>
 </goal>
 <goal name="Dioid.Monoid.Unit_def_r" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="4"/></proof>
 </goal>
 <goal name="Dioid.Mul_zero_l" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="84"/></proof>
 </goal>
 <goal name="Dioid.Mul_zero_r" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="84"/></proof>
 </goal>
 <goal name="Dioid.Mul_distr_l" proved="true">
 <proof prover="1"><result status="valid" time="0.88" steps="6665"/></proof>
 </goal>
 <goal name="Dioid.Mul_distr_r" proved="true">
 <proof prover="1"><result status="valid" time="0.88" steps="6667"/></proof>
 </goal>
 <goal name="Dioid.Idem" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="13223"/></proof>
 </goal>
 <goal name="le_mem" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="18465"/></proof>
 </goal>
 <goal name="power_in_star" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="power_in_star.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="power_in_star.0.0" expl="base case" proved="true">
   <proof prover="1"><result status="valid" time="1.20" steps="18390"/></proof>
   </goal>
   <goal name="power_in_star.0.1" expl="recursive case" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="power_in_star.0.1.0" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="184185"/></proof>
    </goal>
    <goal name="power_in_star.0.1.1" proved="true">
    <proof prover="3"><result status="valid" time="1.03" steps="386358"/></proof>
    </goal>
    <goal name="power_in_star.0.1.2" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="6936"/></proof>
    </goal>
    <goal name="power_in_star.0.1.3" proved="true">
    <proof prover="1"><result status="valid" time="0.97" steps="7449"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_in_power" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="star_in_power.0" proved="true">
  <transf name="induction_arg_pr" proved="true" arg1="H" arg2="with_gen" arg3="x,y">
   <goal name="star_in_power.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="star_in_power.0.0.0" proved="true">
    <transf name="exists" proved="true" arg1="0">
     <goal name="star_in_power.0.0.0.0" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="80604"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="star_in_power.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.29" steps="69145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_spec" proved="true">
 <proof prover="1"><result status="valid" time="0.10" steps="876"/></proof>
 </goal>
 <goal name="star_unfold_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_l.0" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="17280"/></proof>
  </goal>
  <goal name="star_unfold_l.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="100849"/></proof>
  </goal>
  <goal name="star_unfold_l.2" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="73299"/></proof>
  </goal>
  <goal name="star_unfold_l.3" proved="true">
  <proof prover="1"><result status="valid" time="0.32" steps="2770"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_unfold_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_r.0" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="17368"/></proof>
  </goal>
  <goal name="star_unfold_r.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="101717"/></proof>
  </goal>
  <goal name="star_unfold_r.2" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="73867"/></proof>
  </goal>
  <goal name="star_unfold_r.3" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="33815"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_left_ind" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_left_ind.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="star_induct_left_ind.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="77662"/></proof>
   </goal>
   <goal name="star_induct_left_ind.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.42" steps="56815"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_left_lem" proved="true">
 <transf name="rewrite" proved="true" arg1="&lt;-" arg2="le_mem">
  <goal name="star_induct_left_lem.0" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="14847"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="17412"/></proof>
  </goal>
  <goal name="star_induct_left.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="114875"/></proof>
  </goal>
  <goal name="star_induct_left.2" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="75735"/></proof>
  </goal>
  <goal name="star_induct_left.3" proved="true">
  <proof prover="0"><result status="valid" time="0.32" steps="39068"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_right_ind" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_right_ind.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="star_induct_right_ind.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="79826"/></proof>
   </goal>
   <goal name="star_induct_right_ind.0.1" expl="recursive case" proved="true">
   <proof prover="3" timelimit="10"><result status="valid" time="0.53" steps="313170"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_right_lem" proved="true">
 <transf name="rewrite" proved="true" arg1="&lt;-" arg2="le_mem">
  <goal name="star_induct_right_lem.0" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="15241"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="17837"/></proof>
  </goal>
  <goal name="star_induct_right.1" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="117308"/></proof>
  </goal>
  <goal name="star_induct_right.2" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="77488"/></proof>
  </goal>
  <goal name="star_induct_right.3" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="42304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="KleeneAlgebra.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="15473"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Unit_def_l" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="15519"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Unit_def_r" proved="true">
 <proof prover="0"><result status="valid" time="0.12" steps="15563"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Comm" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="15606"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Monoid.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="15990"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Monoid.Unit_def_l" proved="true">
 <proof prover="4"><result status="valid" time="0.02" steps="5"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Monoid.Unit_def_r" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="5"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_zero_l" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="5"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_zero_r" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="5"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_distr_l" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="8"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_distr_r" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="9"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Idem" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="17267"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_unfold_left" proved="true">
 <proof prover="0"><result status="valid" time="0.09" steps="21502"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_unfold_right" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="22310"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_induct_left" proved="true">
 <proof prover="0"><result status="valid" time="0.12" steps="19018"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_induct_right" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="19267"/></proof>
 </goal>
</theory>
</file>
</why3session>
