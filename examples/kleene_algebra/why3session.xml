<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC5" version="1.1.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Z3" version="4.13.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="kleene_algebra.mlw"/>
<theory name="SemiRing" proved="true">
 <goal name="infix ^&#39;vc" expl="VC for infix ^" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="767"/></proof>
 </goal>
 <goal name="Exponentiation.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="601"/></proof>
 </goal>
 <goal name="Exponentiation.Unit_def_l" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="647"/></proof>
 </goal>
 <goal name="Exponentiation.Unit_def_r" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="691"/></proof>
 </goal>
 <goal name="Exponentiation.Power_0" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="942"/></proof>
 </goal>
 <goal name="Exponentiation.Power_s" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="1218"/></proof>
 </goal>
</theory>
<theory name="Dioid" proved="true">
 <goal name="le_refl" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="1791"/></proof>
 </goal>
 <goal name="le_antisym" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="1963"/></proof>
 </goal>
 <goal name="le_trans" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="2074"/></proof>
 </goal>
 <goal name="zero_le" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="2037"/></proof>
 </goal>
 <goal name="le_compat_add" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="3999"/></proof>
 </goal>
 <goal name="le_add" proved="true">
 <proof prover="0"><result status="valid" time="0.030000" steps="2428"/></proof>
 </goal>
 <goal name="le_add_le" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="2377"/></proof>
 </goal>
 <goal name="add_le" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="2777"/></proof>
 </goal>
 <goal name="le_compat_add_left" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="2555"/></proof>
 </goal>
 <goal name="le_compat_add_right" proved="true">
 <proof prover="0"><result status="valid" time="0.030000" steps="2647"/></proof>
 </goal>
</theory>
<theory name="KleeneAlgebra" proved="true">
 <goal name="one_le_star" proved="true">
 <proof prover="0"><result status="valid" time="0.030000" steps="3064"/></proof>
 </goal>
 <goal name="mul_var_le_star" proved="true">
 <proof prover="0"><result status="valid" time="0.050000" steps="4194"/></proof>
 </goal>
 <goal name="var_mul_le_star" proved="true">
 <proof prover="0"><result status="valid" time="0.040000" steps="4513"/></proof>
 </goal>
 <goal name="power_le_star" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="power_le_star.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="power_le_star.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.010000" steps="3354"/></proof>
   </goal>
   <goal name="power_le_star.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.040000" steps="10163"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_mul_star" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_mul_star.0" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="3503"/></proof>
  </goal>
  <goal name="star_mul_star.1" proved="true">
  <proof prover="0"><result status="valid" time="0.030000" steps="11642"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_star" proved="true">
 <proof prover="0"><result status="valid" time="0.090000" steps="20641"/></proof>
 </goal>
 <goal name="star_unfold_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.030000" steps="8746"/></proof>
  </goal>
  <goal name="star_unfold_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="4833"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_unfold_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="8637"/></proof>
  </goal>
  <goal name="star_unfold_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.030000" steps="5137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_le" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_le.0" proved="true">
  <proof prover="0"><result status="valid" time="0.050000" steps="7128"/></proof>
  </goal>
  <goal name="star_le.1" proved="true">
  <proof prover="0"><result status="valid" time="0.030000" steps="6148"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="le_star_left_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="le_star_left_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.270000" steps="39111"/></proof>
  </goal>
  <goal name="le_star_left_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="3553"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="le_star_right_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="le_star_right_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.330000" steps="39556"/></proof>
  </goal>
  <goal name="le_star_right_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="3667"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="slide_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="slide_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="4099"/></proof>
  </goal>
  <goal name="slide_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.150000" steps="39570"/></proof>
  </goal>
  <goal name="slide_left.2" proved="true">
  <proof prover="0"><result status="valid" time="0.030000" steps="3754"/></proof>
  </goal>
  <goal name="slide_left.3" proved="true">
  <proof prover="0"><result status="valid" time="0.060000" steps="3788"/></proof>
  </goal>
  <goal name="slide_left.4" proved="true">
  <proof prover="0"><result status="valid" time="0.080000" steps="14674"/></proof>
  </goal>
  <goal name="slide_left.5" proved="true">
  <proof prover="0"><result status="valid" time="0.610000" steps="82289"/></proof>
  </goal>
  <goal name="slide_left.6" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="11854"/></proof>
  </goal>
  <goal name="slide_left.7" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="3867"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="slide_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="slide_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="4204"/></proof>
  </goal>
  <goal name="slide_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.270000" steps="56206"/></proof>
  </goal>
  <goal name="slide_right.2" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="3813"/></proof>
  </goal>
  <goal name="slide_right.3" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="3847"/></proof>
  </goal>
  <goal name="slide_right.4" proved="true">
  <proof prover="0"><result status="valid" time="0.070000" steps="18498"/></proof>
  </goal>
  <goal name="slide_right.5" proved="true">
  <proof prover="0"><result status="valid" time="0.860000" steps="111929"/></proof>
  </goal>
  <goal name="slide_right.6" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="13767"/></proof>
  </goal>
  <goal name="slide_right.7" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="3926"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sum_pow&#39;vc" expl="VC for sum_pow" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="4108"/></proof>
 </goal>
 <goal name="sum_pow_left" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_pow_left.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="sum_pow_left.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.010000" steps="3982"/></proof>
   </goal>
   <goal name="sum_pow_left.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.030000" steps="7825"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mul_sum_pow" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="mul_sum_pow.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="mul_sum_pow.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.030000" steps="4570"/></proof>
   </goal>
   <goal name="mul_sum_pow.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.030000" steps="18082"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sum_pow_le_star" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_pow_le_star.0" proved="true">
  <transf name="induction" proved="true" arg1="b" arg2="from" arg3="a">
   <goal name="sum_pow_le_star.0.0" expl="base case" proved="true">
   <proof prover="0"><result status="valid" time="0.020000" steps="4729"/></proof>
   </goal>
   <goal name="sum_pow_le_star.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.040000" steps="8700"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Conway_equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Conway_equality.0" proved="true">
  <proof prover="0"><result status="valid" time="0.050000" steps="12566"/></proof>
  </goal>
  <goal name="Conway_equality.1" proved="true">
  <proof prover="0"><result status="valid" time="0.090000" steps="18826"/></proof>
  </goal>
  <goal name="Conway_equality.2" proved="true">
  <proof prover="0"><result status="valid" time="1.220000" steps="188404"/></proof>
  </goal>
  <goal name="Conway_equality.3" proved="true">
  <proof prover="0"><result status="valid" time="1.420000" steps="152654"/></proof>
  </goal>
  <goal name="Conway_equality.4" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="13549"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="RelAlgebra" proved="true">
 <goal name="zero_def" proved="true">
 <proof prover="0"><result status="valid" time="0.050000" steps="9470"/></proof>
 </goal>
 <goal name="one_def" proved="true">
 <proof prover="0"><result status="valid" time="0.080000" steps="11866"/></proof>
 </goal>
 <goal name="post&#39;vc" expl="VC for post" proved="true">
 <proof prover="6"><result status="valid" time="0.030637" steps="80770"/></proof>
 </goal>
 <goal name="pre&#39;vc" expl="VC for pre" proved="true">
 <proof prover="6"><result status="valid" time="0.026584" steps="80770"/></proof>
 </goal>
 <goal name="infix +&#39;vc" expl="VC for infix +" proved="true">
 <proof prover="7"><result status="valid" time="0.036413" steps="19"/></proof>
 </goal>
 <goal name="infix *&#39;vc" expl="VC for infix *" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="infix *&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.490954" steps="2874"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unit_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unit_l.0" proved="true">
  <proof prover="7"><result status="valid" time="4.058396" steps="30538"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unit_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unit_r.0" proved="true">
  <proof prover="7"><result status="valid" time="4.250909" steps="30607"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="assoc_mul" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="assoc_mul.0" proved="true">
  <proof prover="7"><result status="valid" time="0.292594" steps="1597"/></proof>
  </goal>
  <goal name="assoc_mul.1" proved="true">
  <proof prover="7"><result status="valid" time="0.285475" steps="1597"/></proof>
  </goal>
  <goal name="assoc_mul.2" proved="true">
  <proof prover="5"><result status="valid" time="0.085444" steps="11051"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Dioid.Assoc" proved="true">
 <proof prover="7"><result status="valid" time="0.048136" steps="184"/></proof>
 </goal>
 <goal name="Dioid.Unit_def_l" proved="true">
 <proof prover="5"><result status="valid" time="0.071111" steps="8446"/></proof>
 </goal>
 <goal name="Dioid.Unit_def_r" proved="true">
 <proof prover="5"><result status="valid" time="0.066955" steps="8503"/></proof>
 </goal>
 <goal name="Dioid.Comm" proved="true">
 <proof prover="6"><result status="valid" time="0.018887" steps="58495"/></proof>
 </goal>
 <goal name="Dioid.Monoid.Assoc" proved="true">
 <proof prover="5"><result status="valid" time="0.058361" steps="8057"/></proof>
 </goal>
 <goal name="Dioid.Monoid.Unit_def_l" proved="true">
 <proof prover="7"><result status="valid" time="0.034542" steps="12"/></proof>
 </goal>
 <goal name="Dioid.Monoid.Unit_def_r" proved="true">
 <proof prover="5"><result status="valid" time="0.067237" steps="7876"/></proof>
 </goal>
 <goal name="Dioid.Mul_zero_l" proved="true">
 <proof prover="7"><result status="valid" time="0.041096" steps="63"/></proof>
 </goal>
 <goal name="Dioid.Mul_zero_r" proved="true">
 <proof prover="7"><result status="valid" time="0.041760" steps="64"/></proof>
 </goal>
 <goal name="Dioid.Mul_distr_l" proved="true">
 <proof prover="7"><result status="valid" time="0.262576" steps="1741"/></proof>
 </goal>
 <goal name="Dioid.Mul_distr_r" proved="true">
 <proof prover="7"><result status="valid" time="0.263935" steps="1743"/></proof>
 </goal>
 <goal name="Dioid.Idem" proved="true">
 <proof prover="5"><result status="valid" time="0.077732" steps="9899"/></proof>
 </goal>
 <goal name="le_mem" proved="true">
 <proof prover="7"><result status="valid" time="0.048910" steps="123"/></proof>
 </goal>
 <goal name="power_in_star" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="power_in_star.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="power_in_star.0.0" expl="base case" proved="true">
   <proof prover="7"><result status="valid" time="1.315926" steps="18737"/></proof>
   </goal>
   <goal name="power_in_star.0.1" expl="recursive case" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="power_in_star.0.1.0" proved="true">
    <proof prover="0"><result status="valid" time="0.178357" steps="29810"/></proof>
    </goal>
    <goal name="power_in_star.0.1.1" proved="true">
    <proof prover="7"><result status="valid" time="0.915316" steps="5983"/></proof>
    </goal>
    <goal name="power_in_star.0.1.2" proved="true">
    <proof prover="0"><result status="valid" time="0.065920" steps="17519"/></proof>
    </goal>
    <goal name="power_in_star.0.1.3" proved="true">
    <proof prover="7"><result status="valid" time="1.058476" steps="7360"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_in_power" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="star_in_power.0" proved="true">
  <transf name="induction_arg_pr" proved="true" arg1="H" arg2="with_gen" arg3="x,y">
   <goal name="star_in_power.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="star_in_power.0.0.0" proved="true">
    <transf name="exists" proved="true" arg1="0">
     <goal name="star_in_power.0.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.106750" steps="16462"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="star_in_power.0.1" proved="true">
   <proof prover="0"><result status="valid" time="2.598936" steps="814364"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_spec" proved="true">
 <proof prover="7"><result status="valid" time="0.148792" steps="857"/></proof>
 </goal>
 <goal name="star_unfold_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_l.0" proved="true">
  <proof prover="0"><result status="valid" time="0.070000" steps="16916"/></proof>
  </goal>
  <goal name="star_unfold_l.1" proved="true">
  <proof prover="0"><result status="valid" time="0.196783" steps="57344"/></proof>
  </goal>
  <goal name="star_unfold_l.2" proved="true">
  <proof prover="6"><result status="valid" time="0.027993" steps="73083"/></proof>
  </goal>
  <goal name="star_unfold_l.3" proved="true">
  <proof prover="7"><result status="valid" time="0.101807" steps="530"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_unfold_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_unfold_r.0" proved="true">
  <proof prover="6"><result status="valid" time="0.045749" steps="96583"/></proof>
  </goal>
  <goal name="star_unfold_r.1" proved="true">
  <proof prover="0"><result status="valid" time="0.214536" steps="57436"/></proof>
  </goal>
  <goal name="star_unfold_r.2" proved="true">
  <proof prover="6"><result status="valid" time="0.027893" steps="73651"/></proof>
  </goal>
  <goal name="star_unfold_r.3" proved="true">
  <proof prover="7"><result status="valid" time="0.155988" steps="1036"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_left_ind" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_left_ind.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="star_induct_left_ind.0.0" expl="base case" proved="true">
   <proof prover="7"><result status="valid" time="0.041309" steps="93"/></proof>
   </goal>
   <goal name="star_induct_left_ind.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="0.420000" steps="55416"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_left_lem" proved="true">
 <transf name="rewrite" proved="true" arg1="&lt;-" arg2="le_mem">
  <goal name="star_induct_left_lem.0" proved="true">
  <proof prover="5"><result status="valid" time="0.055510" steps="10091"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_left.0" proved="true">
  <proof prover="0"><result status="valid" time="0.090000" steps="17193"/></proof>
  </goal>
  <goal name="star_induct_left.1" proved="true">
  <proof prover="0"><result status="valid" time="0.186263" steps="50517"/></proof>
  </goal>
  <goal name="star_induct_left.2" proved="true">
  <proof prover="6"><result status="valid" time="0.030378" steps="75705"/></proof>
  </goal>
  <goal name="star_induct_left.3" proved="true">
  <proof prover="6"><result status="valid" time="0.123826" steps="246030"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_right_ind" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_right_ind.0" proved="true">
  <transf name="induction" proved="true" arg1="i">
   <goal name="star_induct_right_ind.0.0" expl="base case" proved="true">
   <proof prover="7"><result status="valid" time="0.048865" steps="93"/></proof>
   </goal>
   <goal name="star_induct_right_ind.0.1" expl="recursive case" proved="true">
   <proof prover="0"><result status="valid" time="1.089454" steps="132723"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_right_lem" proved="true">
 <transf name="rewrite" proved="true" arg1="&lt;-" arg2="le_mem">
  <goal name="star_induct_right_lem.0" proved="true">
  <proof prover="0"><result status="valid" time="0.050000" steps="15075"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="star_induct_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="star_induct_right.0" proved="true">
  <proof prover="0"><result status="valid" time="0.090000" steps="17618"/></proof>
  </goal>
  <goal name="star_induct_right.1" proved="true">
  <proof prover="0"><result status="valid" time="0.241111" steps="55779"/></proof>
  </goal>
  <goal name="star_induct_right.2" proved="true">
  <proof prover="6"><result status="valid" time="0.024233" steps="77458"/></proof>
  </goal>
  <goal name="star_induct_right.3" proved="true">
  <proof prover="6"><result status="valid" time="0.118341" steps="248274"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="KleeneAlgebra.Assoc" proved="true">
 <proof prover="7"><result status="valid" time="0.036902" steps="42"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Unit_def_l" proved="true">
 <proof prover="7"><result status="valid" time="0.034269" steps="20"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Unit_def_r" proved="true">
 <proof prover="7"><result status="valid" time="0.039480" steps="20"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Comm" proved="true">
 <proof prover="7"><result status="valid" time="0.035254" steps="22"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Monoid.Assoc" proved="true">
 <proof prover="0"><result status="valid" time="0.080000" steps="16430"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Monoid.Unit_def_l" proved="true">
 <proof prover="7"><result status="valid" time="0.039883" steps="12"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Monoid.Unit_def_r" proved="true">
 <proof prover="7"><result status="valid" time="0.040879" steps="12"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_zero_l" proved="true">
 <proof prover="7"><result status="valid" time="0.032197" steps="14"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_zero_r" proved="true">
 <proof prover="7"><result status="valid" time="0.041376" steps="14"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_distr_l" proved="true">
 <proof prover="0"><result status="valid" time="0.102860" steps="16571"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Mul_distr_r" proved="true">
 <proof prover="7"><result status="valid" time="0.031527" steps="32"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Idem" proved="true">
 <proof prover="0"><result status="valid" time="0.080000" steps="17489"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_unfold_left" proved="true">
 <proof prover="0"><result status="valid" time="0.090000" steps="21146"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_unfold_right" proved="true">
 <proof prover="0"><result status="valid" time="0.060000" steps="21927"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_induct_left" proved="true">
 <proof prover="0"><result status="valid" time="0.120000" steps="18844"/></proof>
 </goal>
 <goal name="KleeneAlgebra.Star_induct_right" proved="true">
 <proof prover="0"><result status="valid" time="0.080000" steps="19089"/></proof>
 </goal>
</theory>
</file>
</why3session>
