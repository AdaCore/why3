(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import ZArith.
Require Import Rbase.
Require Import ZOdiv.
Require int.Int.
Require int.Abs.
Require int.EuclideanDivision.
Require int.ComputerDivision.
Require number.Parity.
Require number.Divisibility.
Require number.Gcd.

(* Why3 assumption *)
Definition unit  := unit.

Parameter qtmark : Type.

Parameter at1: forall (a:Type), a -> qtmark -> a.
Implicit Arguments at1.

Parameter old: forall (a:Type), a -> a.
Implicit Arguments old.

(* Why3 assumption *)
Definition implb(x:bool) (y:bool): bool := match (x,
  y) with
  | (true, false) => false
  | (_, _) => true
  end.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | mk_ref : a -> ref a.
Implicit Arguments mk_ref.

(* Why3 assumption *)
Definition contents (a:Type)(v:(ref a)): a :=
  match v with
  | (mk_ref x) => x
  end.
Implicit Arguments contents.

(* Why3 goal *)
Theorem WP_parameter_gcd : forall (x:Z), forall (y:Z), ((0%Z <= x)%Z /\
  (0%Z <= y)%Z) -> forall (d:Z), forall (c:Z), forall (b:Z), forall (a:Z),
  forall (y1:Z), forall (x1:Z), ((0%Z <= x1)%Z /\ ((0%Z <= y1)%Z /\
  (((number.Gcd.gcd x1 y1) = (number.Gcd.gcd x y)) /\
  ((((a * x)%Z + (b * y)%Z)%Z = x1) /\
  (((c * x)%Z + (d * y)%Z)%Z = y1))))) -> ((0%Z < y1)%Z -> forall (x2:Z),
  (x2 = y1) -> forall (y2:Z), (y2 = (ZOmod x1 y1)) -> forall (a1:Z),
  (a1 = c) -> forall (b1:Z), (b1 = d) -> forall (c1:Z),
  (c1 = (a - (c * (ZOdiv x1 y1))%Z)%Z) -> forall (d1:Z),
  (d1 = (b - (d * (ZOdiv x1 y1))%Z)%Z) -> ((number.Gcd.gcd x2
  y2) = (number.Gcd.gcd x y))).
Proof.
intuition.
rewrite <- H4.
subst x2 y2.
symmetry.
rewrite Gcd.Comm.
rewrite Gcd.gcd_euclid with (q:=(ZOdiv x1 y1)).
apply f_equal.
rewrite (ZO_div_mod_eq x1 y1) at 1.
ring.
Qed.


