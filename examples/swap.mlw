
(* Swapping two integers in-place *)

module Swap

  use import int.Int
  use import ref.Ref

  let swap (a b: ref int) : unit
    writes  { a, b }
    ensures { !a = old !b /\ !b = old !a }
  =
    a := !a + !b;
    b := !a - !b;
    a := !a - !b

end

(* It also works fine with machine integers, even with overflows *)

module SwapInt32

  use import int.Int
  use import ref.Ref

  (* a simple model of 32-bit integers with addition, subtraction,
     and possible overflows *)

  type int32

  constant min_int32 : int = - 0x80000000
  constant max_int32 : int =   0x7fffffff
  constant width     : int = max_int32 - min_int32 + 1

  function to_int (n: int32) : int

  val (+) (a: int32) (b: int32) : int32
    ensures   { to_int result =
         if to_int a + to_int b < min_int32 then to_int a + to_int b + width
    else if to_int a + to_int b > max_int32 then to_int a + to_int b - width
    else    to_int a + to_int b }

  val (-) (a: int32) (b: int32) : int32
    ensures   { to_int result =
         if to_int a - to_int b < min_int32 then to_int a - to_int b + width
    else if to_int a - to_int b > max_int32 then to_int a - to_int b - width
    else    to_int a - to_int b }

  predicate in_bounds (n: int32) = min_int32 <= to_int n <= max_int32

  (* purely applicative version first *)

  let swap (a b: int32) : (int32, int32)
    requires { in_bounds a /\ in_bounds b }
    ensures  { let (x,y) = result in
               to_int x = to_int b /\ to_int y = to_int a }
  =
    let a = a + b in
    let b = a - b in
    let a = a - b in
    (a, b)

  (* then rephrased with mutable variables *)

  let swap_ref (a b: ref int32) : unit
    requires { in_bounds !a /\ in_bounds !b }
    writes   { a, b }
    ensures  { to_int !a = old (to_int !b) /\ to_int !b = old (to_int !a) }
  =
    a := !a + !b;
    b := !a - !b;
    a := !a - !b

end
