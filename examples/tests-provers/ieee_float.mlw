module TestIeeeFloat

  use import ieee_float.Float32
  use real.Abs

  lemma Test00: forall x:t.  abs x .<= (of_int RNE 2) -> .- (of_int RNE 3) .<= x

  lemma Test01:
       forall x:t.
          .-(of_int RNE 2) .<= x .<= (of_int RNE 2) -> .- (of_int RNE 4) .<= x .* x .<= (of_int RNE 4)

end

module M603_018
  use import ieee_float.Float32

  constant x : t = zeroF
  constant y : t = of_int RNE 1
  constant z : t = y ./ (of_int RNE 2)
  constant t : t = (x .+ y) ./ (of_int RNE 2)

  let triplet (x y z : t)
    requires { x .<= z /\ z .<= y }
    requires { .-(of_int RNE 1) .<= x /\ x .<= (of_int RNE 10) }
    requires { y .= x .+ (of_int RNE 1) }
    requires { roundToIntegral RTN z = x }
    requires { roundToIntegral RTP z = y }
  =
    let t = (x .+ y) ./ (of_int RNE 2) in
    assert { roundToIntegral RTN x .= x };
    assert { roundToIntegral RTN y .= y };
    assert { roundToIntegral RTN z .= x };
    assert { roundToIntegral RTN t .= x };

    assert { roundToIntegral RTP x .= x };
    assert { roundToIntegral RTP y .= y };
    assert { roundToIntegral RTP z .= y };
    assert { roundToIntegral RTP t .= y };

    assert { x .<= z /\ z .<= y };
    assert { x .<= t /\ t .<= y };
    ()

  goal G1: roundToIntegral RTN x .= x
  goal G2: roundToIntegral RTN y .= y
  goal G3: roundToIntegral RTN z .= x
  goal G4: roundToIntegral RTN t .= x

  goal G5: roundToIntegral RTP x .= x
  goal G6: roundToIntegral RTP y .= y
  goal G7: roundToIntegral RTP z .= y
  goal G8: roundToIntegral RTP t .= y

  goal G9: x .<= z /\ z .<= y
  goal G10: x .<= t /\ t .<= y

end

module M121_039_nonlinear

  use import ieee_float.Float32

  constant max : t = of_int RNE 340282346638528859811704183484516925440
  constant min : t = .- max

  constant one : t = of_int RNE 1
  constant zero : t = zeroF

  predicate in_range (x :t) = min .<= x .<= max

  (* predicate axiom_mult t t t *)

  (* axiom axiom_mult : forall a b y. *)
  (*   axiom_mult a b y = if a .<= b /\ y .<= zero then a .* y .>= b .* y else false *)

  predicate axiom_mult (a b y : t) =
     if a .<= b /\ y .<= zero then a .* y .>= b .* y else false

  let test (a x y:t)
    requires { zero .<= a .<= one }
    requires { .- one .<= x .<= one }
    requires { .- one .<= y .<= one }
    requires { x .> zero /\ y .< zero /\ x .+ y .>= zero }
    ensures  { result .>= zero /\ result .<= (of_int RNE 2) }
  =
    assert { axiom_mult a one y };

    assert { a .>= zero };
    assert { a .<= one };
    assert { x .> zero };
    assert { y .<= zero };
    assert { y .* a .<= zero };
    assert { y .* a .>= y .* one };
    assert { x .+ y .* a .>= x .+ y };
    assert { x .+ y .>= zero };
    assert { x .+ y .* a .>= zero };

    x .+ y .* a

end

module LB09_025_conversion

  use import ieee_float.Float32
  use import int.Int

  let fti x
    requires { x .>= of_int RNE (-2147483648) /\ x .+ (of_int RNE 1) .<= of_int RNE 2147483647 }
    ensures  { of_int RNE result .>= x .- (of_int RNE 1) }
    ensures  { of_int RNE result .<= x .+ (of_int RNE 1) }
    ensures  { result = to_int RNE x }
  =
    to_int RNE x

end

module Test
  use import ieee_float.Float32

  constant half : t = of_int RNE 1 ./ of_int RNE 2

  goal G1: forall x. is_finite x -> x .- half .<= roundToIntegral RNA x .<= x .+ half

end
