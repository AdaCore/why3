(***

Algorithm 64

C. A. R. Hoare
Elliott Brothers Ltd., Hertfordshire, England, U.K.

Communications of the ACM  archive
Volume 4 ,  Issue 7  (July 1961) table of contents
Pages: 321 - 322

***)

module Algo64

  use import int.Int
  use import ref.Ref
  use import array.Array
  use import array.ArrayPermut
  use import array.ArraySorted

  (* Algorithm 63 *)

  val partition (a:array int) (m n:int) (i j:ref int) : unit
    requires { 0 <= m < n < length a }
    writes   { a, i, j}
    ensures  { m <= !j < !i <= n }
    ensures  { permut_sub (old a) a m (n+1) }
    ensures  {
      exists x:int.
        (forall r:int. m <= r <= !j -> a[r] <= x) /\
        (forall r:int. !j < r < !i -> a[r] = x) /\
        (forall r:int. !i <= r <= n -> a[r] >= x) }

  (* Algorithm 64 *)

  let rec quicksort (a:array int) (m n:int) : unit
    requires { 0 <= m <= n < length a }
    variant  { n - m }
    ensures  { permut_sub (old a) a m (n+1) }
    ensures  { sorted_sub a m (n+1) }
  = if m < n then begin
      let i = ref 0 in
      let j = ref 0 in
      partition a m n i j;
'L1:  quicksort a m !j;
      assert { permut_sub (at a 'L1) a m (n+1) };
      assert { forall r:int. !j < r <= n -> a[r] = (at a 'L1)[r] };
      assert { forall r:int. m <= r <= !j ->
        (exists s:int. m <= s <= !j /\ a[r] = (at a 'L1)[s]) &&
        a[r] <= a[!j+1] };
'L2:  quicksort a !i n;
      assert { permut_sub (at a 'L2) a m (n+1) };
      assert { forall r:int. m <= r < !i -> a[r] = (at a 'L2)[r] };
      assert { forall r:int. !i <= r <= n ->
        (exists s:int. !i <= s <= n /\ a[r] = (at a 'L2)[s]) &&
        a[r] >= a[!i-1] };
      assert { 
        forall r s:int. m <= r <= s <= n ->
          if r <= !j then
            if s <= !j then "a" a[r] <= a[s] else
            if s <  !i then "b" a[r] <= a[s] else
                            "c" a[r] <= a[s] else
          if r <  !i then
            if s <  !i then "d" a[r] <= a[s] else
                            "e" a[r] <= a[s] else
                            "f" a[r] <= a[s] }
    end

  let qs (a:array int) : unit
    ensures  { permut_all (old a) a }
    ensures  { sorted a }
  = if length a > 0 then quicksort a 0 (length a - 1)

end
