theory Elements

use import int.Int
use import bag.Bag
use import map.Map as A

type array 'a = A.map int 'a

(* [elements a i j] is the bag of elements in a[i..j[ *)
function elements (a:array 'a) (i j:int) : bag 'a

axiom Elements_empty : forall a:array 'a, i j:int.
     i >= j -> (elements a i j) = empty_bag

axiom Elements_union2 : forall a:array 'a, i j :int.
       i < j ->
       (elements a i j) = (add (A.get a (j-1)) (elements a i (j-1)))

lemma Elements_singleton : forall a:array 'a, i j:int.
     j = i + 1 ->
       (elements a i j) = (singleton (A.get a i))

lemma Elements_union : forall a:array 'a, i j k:int.
     i <= j <= k  ->
      (elements a i k) = (union (elements a i j) (elements a j k))

lemma Elements_union1 : forall a:array 'a, i j :int.
      i < j ->
      (elements a i j) = (add (A.get a i) (elements a (i+1) j))

lemma Elements_remove_last: forall a:array 'a, i j :int.
      i < j-1 ->
      (elements a i (j-1)) = diff (elements a i j) (singleton (A.get a (j-1)))

lemma Occ_elements: forall a:array 'a, i j n:int.
       i <= j < n ->
         nb_occ a[j] (elements a i n) > 0

lemma Elements_set_outside : forall a:array 'a, i j:int.
       i <= j -> forall k : int. (k < i || k >= j) ->
       forall e:'a. (elements (A.set a k e) i j) = (elements a i j)

lemma Elements_set_inside : forall a:array 'a, i j n: int, e:'a, b:bag 'a.
       i <= j < n ->
       (elements a i n) = add (A.get a j) b ->
       (elements (A.set a j e) i n) = add e b

lemma Elements_set_inside2 : forall a:array 'a, i j n: int, e:'a.
       i <= j < n ->
       elements (A.set a j e) i n =
          add e (diff (elements a i n) (singleton (a[j])))

end

(*
Local Variables:
compile-command: "why3ide -I . proofs"
End:
*)
