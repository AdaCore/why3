module M

  use import int.Int

  type char
  clone array.ArrayRich as S
  type string = S.t int char

  type rope =
    | Str string int  (len: int)
    | App rope   rope (len: int)

  logic inv (r: rope) = match r with
    | Str s ofs len -> 
        len = 0 or 0 <= ofs < S.length s and ofs + len <= S.length s
    | App l r _ ->
        0 < len l and inv l and 0 < len r and inv r
  end

  logic model (r: rope) : string = match r with
    | Str s ofs len -> S.sub s ofs len
    | App l r _     -> S.app (model l) (model r)
  end

  logic eq (s1 s2: string) =
    S.length s1 = S.length s2 and
    forall i:int. 0 <= i < S.length s1 -> S.get s1 i = S.get s2 i

let empty () = 
  {} 
  Str (S.create_length 0) 0 0 
  { len result = 0 and inv result and eq (model result) (S.create_length 0) }

let length r = 
  {} 
  len r 
  { result = len r }

let rec get r i = 
  { inv r and 0 <= i < len r }
  match r with
  | Str s ofs len -> 
      S.get s (ofs + i)
  | App l r   _   -> 
      let n = length l in
      if i < n then get l i else get r (i - n)
  end
  { result = S.get (model r) i }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../.. examples/programs/ropes"
End: 
*)
