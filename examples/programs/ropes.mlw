
theory String

  type char
  clone export map.Map
  type string = map int char

  logic create int : string  
  logic length string : int
  logic sub string int int : string
  logic app string string : string
end

module M

  use import int.Int
  use import String 

  type rope =
    | Str string int  (len: int)
    | App rope   rope (len: int)

  logic inv (r: rope) = match r with
    | Str s ofs len -> 
        len = 0 or 0 <= ofs < length s and ofs + len <= length s
    | App l r _ ->
        0 < len l and inv l and 0 < len r and inv r
  end

  logic model (r: rope) : string = match r with
    | Str s ofs len -> sub s ofs len
    | App l r _     -> app (model l) (model r)
  end

  logic eq (s1 s2: string) =
    length s1 = length s2 and
    forall i:int. 0 <= i < length s1 -> get s1 i = get s2 i

  let empty () = 
    {} 
    Str (create 0) 0 0 
    { len result = 0 and inv result and eq (model result) (create 0) }
  
  let length r = 
    {} 
    len r 
    { result = len r }
  
  let rec get r i = 
    { inv r and 0 <= i < len r }
    match r with
    | Str s ofs len -> 
        get s (ofs + i)
    | App l r   _   -> 
        let n = length l in
        if i < n then get l i else get r (i - n)
    end
    { result = get (model r) i }
  
end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../.. examples/programs/ropes"
End: 
*)
