module M

  use import int.Int

  (* use import module string.String *)
  namespace import S
    type char
    type string
    function length string : int
    function get string int : char
    function app string string : string
    function sub string int int : string
    function create int : string
  end

  type rope =
    | Str string int  (len: int)
    | App rope   rope (len: int)

  predicate inv (r: rope) = match r with
    | Str s ofs len ->
        len = 0 \/ 0 <= ofs < S.length s /\ ofs + len <= S.length s
    | App l r _ ->
        0 < len l /\ inv l /\ 0 < len r /\ inv r
  end

  function model (r: rope) : string = match r with
    | Str s ofs len -> S.sub s ofs len
    | App l r _     -> S.app (model l) (model r)
  end

  predicate eq (s1 s2: string) =
    S.length s1 = S.length s2 /\
    forall i:int. 0 <= i < S.length s1 -> S.get s1 i = S.get s2 i

  let empty () =
    {}
    Str (S.create 0) 0 0
    { len result = 0 /\ inv result /\ eq (model result) (S.create 0) }

  let length r =
    {}
    len r
    { result = len r }

(**
  let rec get (r: rope) i =
    { inv r /\ 0 <= i < len r }
    match r with
    | Str s ofs len ->
        S.get s (ofs + i)
    | App l r   _   ->
        let n = length l in
        if i < n then get l i else get r (i - n)
    end
    { result = S.get (model r) i }
**)

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/ropes"
End:
*)
