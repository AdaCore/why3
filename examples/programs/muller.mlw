
(* A small verification challenge proposed by Peter MÃ¼ller.

   Given an array of integers, we first count how many non-zero values
   it contains. Then we allocate a new array with exactly this size and
   we fill it with the non-zero values. *)

module Muller

  use import int.Int
  use import module ref.Refint
  use import module array.Array

  type param = M.map int int
  predicate pr (a: param) (n: int) = M.([]) a n <> 0
  clone import int.NumOfParam with type param = param, predicate pr = pr

  let compact (a: array int) =
    let count = ref 0 in
    for i = 0 to length a - 1 do
      invariant { 0 <= !count = num_of a.elts 0 i <= i}
      if a[i] <> 0 then incr count
    done;
    let u = make !count 0 in
    count := 0;
    for i = 0 to length a - 1 do
      invariant { 0 <= !count = num_of a.elts 0 i <= i }
      if a[i] <> 0 then begin u[!count] <- a[i]; incr count end
    done

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/muller.gui"
End:
*)
