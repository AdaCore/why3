(* Beware! Only edit allowed sections below    *)
(* This file is generated by Why3's Coq driver *)
Require Import ZArith.
Require Import Rbase.
Definition unit  := unit.

Parameter ignore: forall (a:Type), a  -> unit.
Implicit Arguments ignore.

Parameter arrow : forall (a:Type) (b:Type), Type.

Parameter ref : forall (a:Type), Type.

Parameter prefix_ex: forall (a:Type), (ref a)  -> a.
Implicit Arguments prefix_ex.

Parameter label : Type.

Parameter at1: forall (a:Type), a -> label  -> a.
Implicit Arguments at1.

Parameter old: forall (a:Type), a  -> a.
Implicit Arguments old.

Parameter exn : Type.

Definition lt_nat(x:Z) (y:Z): Prop := (0%Z <= y)%Z /\ (x <  y)%Z.

Parameter t : forall (a:Type) (b:Type), Type.

Parameter get: forall (a:Type) (b:Type), (t a b) -> a  -> b.
Implicit Arguments get.

Parameter set: forall (a:Type) (b:Type), (t a b) -> a -> b  -> (t a b).
Implicit Arguments set.

Axiom Select_eq : forall (a:Type) (b:Type), forall (m:(t a b)), forall (a1:a)
  (a2:a), forall (b1:b), (a1 = a2) -> ((get (set m a1 b1) a2) = b1).

Axiom Select_neq : forall (a:Type) (b:Type), forall (m:(t a b)),
  forall (a1:a) (a2:a), forall (b1:b), (~ (a1 = a2)) -> ((get (set m a1 b1)
  a2) = (get m a2)).

Parameter create_const: forall (b:Type) (a:Type), b  -> (t a b).
Set Contextual Implicit.
Implicit Arguments create_const.
Unset Contextual Implicit.

Axiom Const : forall (b:Type) (a:Type), forall (b1:b) (a1:a),
  ((get (create_const(b1):(t a b)) a1) = b1).

Parameter length: forall (a:Type), (t Z a)  -> Z.
Implicit Arguments length.

Axiom Length_non_negative : forall (a:Type), forall (a1:(t Z a)),
  (0%Z <= (length a1))%Z.

Axiom Length_set : forall (a:Type), forall (a1:(t Z a)), forall (k:Z),
  forall (v:a), ((length (set a1 k v)) = (length a1)).

Parameter create_const_length: forall (a:Type), a -> Z  -> (t Z a).
Implicit Arguments create_const_length.

Axiom Create_const_length_get : forall (a:Type), forall (b:a), forall (n:Z)
  (i:Z), ((get (create_const_length b n) i) = b).

Axiom Create_const_length_length : forall (a:Type), forall (a1:a),
  forall (n:Z), (0%Z <= n)%Z -> ((length (create_const_length a1 n)) = n).

Parameter create_length: forall (a:Type), Z  -> (t Z a).
Set Contextual Implicit.
Implicit Arguments create_length.
Unset Contextual Implicit.

Axiom Create_length_length : forall (a:Type), forall (n:Z), (0%Z <= n)%Z ->
  ((length (create_length(n):(t Z a))) = n).

Definition array a := (t Z a).

Definition consistent_row(board:(t Z Z)) (pos:Z) (q:Z): Prop :=
  (~ ((get board q) = (get board pos))) /\ ((~ (((get board q) - (get board
  pos))%Z = (pos - q)%Z)) /\ ~ (((get board pos) - (get board
  q))%Z = (pos - q)%Z)).

Definition is_consistent(board:(t Z Z)) (pos:Z): Prop := forall (q:Z),
  ((0%Z <= q)%Z /\ (q <  pos)%Z) -> (consistent_row board pos q).

Theorem Is_consistent_set : forall (board:(t Z Z)) (pos:Z) (q:Z) (i:Z),
  (is_consistent board pos) -> ((pos <  q)%Z -> (is_consistent (set board q
  i) pos)).
(* YOU MAY EDIT THE PROOF BELOW *)
unfold is_consistent; unfold consistent_row; intros.
assert (q <> q0) by omega.
repeat (rewrite Select_neq); auto.
omega.
Qed.
(* DO NOT EDIT BELOW *)


