(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require Import ZOdiv.
Require BuiltIn.
Require int.Int.
Require int.Abs.
Require int.ComputerDivision.

(* Why3 assumption *)
Definition unit  := unit.

(* Why3 assumption *)
Inductive option (a:Type) {a_WT:WhyType a} :=
  | None : option a
  | Some : a -> option a.
Axiom option_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (option a).
Existing Instance option_WhyType.
Implicit Arguments None [[a] [a_WT]].
Implicit Arguments Some [[a] [a_WT]].

Parameter map : forall (a:Type) {a_WT:WhyType a} (b:Type) {b_WT:WhyType b},
  Type.
Axiom map_WhyType : forall (a:Type) {a_WT:WhyType a}
  (b:Type) {b_WT:WhyType b}, WhyType (map a b).
Existing Instance map_WhyType.

Parameter get: forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  (map a b) -> a -> b.

Parameter set: forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  (map a b) -> a -> b -> (map a b).

Axiom Select_eq : forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (m:(map a b)), forall (a1:a) (a2:a), forall (b1:b), (a1 = a2) ->
  ((get (set m a1 b1) a2) = b1).

Axiom Select_neq : forall {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}, forall (m:(map a b)), forall (a1:a) (a2:a),
  forall (b1:b), (~ (a1 = a2)) -> ((get (set m a1 b1) a2) = (get m a2)).

Parameter const: forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  b -> (map a b).

Axiom Const : forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (b1:b) (a1:a), ((get (const b1:(map a b)) a1) = b1).

(* Why3 assumption *)
Inductive list (a:Type) {a_WT:WhyType a} :=
  | Nil : list a
  | Cons : a -> (list a) -> list a.
Axiom list_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (list a).
Existing Instance list_WhyType.
Implicit Arguments Nil [[a] [a_WT]].
Implicit Arguments Cons [[a] [a_WT]].

(* Why3 assumption *)
Fixpoint mem {a:Type} {a_WT:WhyType a}(x:a) (l:(list a)) {struct l}: Prop :=
  match l with
  | Nil => False
  | (Cons y r) => (x = y) \/ (mem x r)
  end.

(* Why3 assumption *)
Inductive array (a:Type) {a_WT:WhyType a} :=
  | mk_array : BuiltIn.int -> (map BuiltIn.int a) -> array a.
Axiom array_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (array a).
Existing Instance array_WhyType.
Implicit Arguments mk_array [[a] [a_WT]].

(* Why3 assumption *)
Definition elts {a:Type} {a_WT:WhyType a}(v:(array a)): (map BuiltIn.int
  a) := match v with
  | (mk_array x x1) => x1
  end.

(* Why3 assumption *)
Definition length {a:Type} {a_WT:WhyType a}(v:(array a)): BuiltIn.int :=
  match v with
  | (mk_array x x1) => x
  end.

(* Why3 assumption *)
Definition get1 {a:Type} {a_WT:WhyType a}(a1:(array a)) (i:BuiltIn.int): a :=
  (get (elts a1) i).

(* Why3 assumption *)
Definition set1 {a:Type} {a_WT:WhyType a}(a1:(array a)) (i:BuiltIn.int)
  (v:a): (array a) := (mk_array (length a1) (set (elts a1) i v)).

(* Why3 assumption *)
Inductive t (a:Type) {a_WT:WhyType a}
  (b:Type) {b_WT:WhyType b} :=
  | mk_t : (map a (option b)) -> (array (list (a* b)%type)) -> t a b.
Axiom t_WhyType : forall (a:Type) {a_WT:WhyType a} (b:Type) {b_WT:WhyType b},
  WhyType (t a b).
Existing Instance t_WhyType.
Implicit Arguments mk_t [[a] [a_WT] [b] [b_WT]].

(* Why3 assumption *)
Definition data {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}(v:(t a
  b)): (array (list (a* b)%type)) := match v with
  | (mk_t x x1) => x1
  end.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}(v:(t
  a b)): (map a (option b)) := match v with
  | (mk_t x x1) => x
  end.

(* Why3 assumption *)
Definition get2 {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}(h:(t a
  b)) (k:a): (option b) := (get (contents h) k).

Parameter hash: forall {a:Type} {a_WT:WhyType a}, a -> BuiltIn.int.

(* Why3 assumption *)
Definition idx {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}(h:(t a b))
  (k:a): BuiltIn.int := (ZOmod (Zabs (hash k)) (length (data h))).

(* Why3 assumption *)
Fixpoint occurs_first {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}(k:a) (v:b) (l:(list (a*
  b)%type)) {struct l}: Prop :=
  match l with
  | Nil => False
  | (Cons (k', v') r) => ((k = k') /\ (v = v')) \/ ((~ (k = k')) /\
      (occurs_first k v r))
  end.

Axiom mem_occurs_first : forall {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}, forall (k:a) (v:b) (l:(list (a* b)%type)),
  (occurs_first k v l) -> (mem (k, v) l).

Axiom cons_occurs_first : forall {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}, forall (k1:a) (v1:b) (l:(list (a* b)%type)),
  (occurs_first k1 v1 l) -> forall (k:a) (v:b), (~ (k = k1)) ->
  (occurs_first k1 v1 (Cons (k, v) l)).

(* Why3 assumption *)
Definition valid {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}(h:(t a
  b)): Prop := (0%Z < (length (data h)))%Z /\ ((forall (k:a) (v:b), ((get2 h
  k) = (Some v)) <-> (occurs_first k v (get1 (data h) (idx h k)))) /\
  forall (k:a) (v:b), forall (i:BuiltIn.int), ((0%Z <= i)%Z /\
  (i < (length (data h)))%Z) -> ((mem (k, v) (get1 (data h) i)) ->
  (i = (idx h k)))).

Axiom idx_bounds : forall {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}, forall (h:(t a b)), (valid h) -> forall (k:a),
  (0%Z <= (idx h k))%Z /\ ((idx h k) < (length (data h)))%Z.

(* Why3 goal *)
Theorem WP_parameter_find : forall {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}, forall (h:BuiltIn.int) (k:a), forall (rho:(map
  BuiltIn.int (list (a* b)%type))) (rho1:(map a (option b))),
  (valid (mk_t rho1 (mk_array h rho))) -> let i :=
  (ZOmod (Zabs (hash k)) h) in (((0%Z <= i)%Z /\ (i < h)%Z) ->
  ((forall (v:b), ~ (mem (k, v) (get rho i))) -> ((get rho1
  k) = (None :(option b))))).
intros a _a b _b h k rho rho1.
unfold valid.
pose (i := (Zabs (hash k) mod h)).
unfold get1; simpl.
intuition.
generalize (H0 k); clear H0.
generalize (H5 k); clear H5.
unfold get2; simpl; intuition.
destruct (get rho1 k); auto.
elim (H1 b0); clear H1.
generalize (H3 b0); clear H3.
intuition.
apply mem_occurs_first; auto.
Qed.


