(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import ZArith.
Require Import Rbase.
Require Import ZOdiv.
Require int.Int.
Require int.Abs.
Require int.ComputerDivision.
Definition unit  := unit.

Parameter qtmark : Type.

Parameter at1: forall (a:Type), a -> qtmark -> a.

Implicit Arguments at1.

Parameter old: forall (a:Type), a -> a.

Implicit Arguments old.

Definition implb(x:bool) (y:bool): bool := match (x,
  y) with
  | (true, false) => false
  | (_, _) => true
  end.

Inductive option (a:Type) :=
  | None : option a
  | Some : a -> option a.
Set Contextual Implicit.
Implicit Arguments None.
Unset Contextual Implicit.
Implicit Arguments Some.

Parameter map : forall (a:Type) (b:Type), Type.

Parameter get: forall (a:Type) (b:Type), (map a b) -> a -> b.

Implicit Arguments get.

Parameter set: forall (a:Type) (b:Type), (map a b) -> a -> b -> (map a b).

Implicit Arguments set.

Axiom Select_eq : forall (a:Type) (b:Type), forall (m:(map a b)),
  forall (a1:a) (a2:a), forall (b1:b), (a1 = a2) -> ((get (set m a1 b1)
  a2) = b1).

Axiom Select_neq : forall (a:Type) (b:Type), forall (m:(map a b)),
  forall (a1:a) (a2:a), forall (b1:b), (~ (a1 = a2)) -> ((get (set m a1 b1)
  a2) = (get m a2)).

Parameter const: forall (b:Type) (a:Type), b -> (map a b).

Set Contextual Implicit.
Implicit Arguments const.
Unset Contextual Implicit.

Axiom Const : forall (b:Type) (a:Type), forall (b1:b) (a1:a),
  ((get (const b1:(map a b)) a1) = b1).

Inductive list (a:Type) :=
  | Nil : list a
  | Cons : a -> (list a) -> list a.
Set Contextual Implicit.
Implicit Arguments Nil.
Unset Contextual Implicit.
Implicit Arguments Cons.

Set Implicit Arguments.
Fixpoint mem (a:Type)(x:a) (l:(list a)) {struct l}: Prop :=
  match l with
  | Nil => False
  | (Cons y r) => (x = y) \/ (mem x r)
  end.
Unset Implicit Arguments.

Inductive array (a:Type) :=
  | mk_array : Z -> (map Z a) -> array a.
Implicit Arguments mk_array.

Definition elts (a:Type)(u:(array a)): (map Z a) :=
  match u with
  | (mk_array _ elts1) => elts1
  end.
Implicit Arguments elts.

Definition length (a:Type)(u:(array a)): Z :=
  match u with
  | (mk_array length1 _) => length1
  end.
Implicit Arguments length.

Definition get1 (a:Type)(a1:(array a)) (i:Z): a := (get (elts a1) i).
Implicit Arguments get1.

Definition set1 (a:Type)(a1:(array a)) (i:Z) (v:a): (array a) :=
  match a1 with
  | (mk_array xcl0 _) => (mk_array xcl0 (set (elts a1) i v))
  end.
Implicit Arguments set1.

Inductive t (a:Type)
  (b:Type) :=
  | mk_t : (map a (option b)) -> (array (list (a* b)%type)) -> t a b.
Implicit Arguments mk_t.

Definition contents (a:Type) (b:Type)(u:(t a b)): (map a (option b)) :=
  match u with
  | (mk_t contents1 _) => contents1
  end.
Implicit Arguments contents.

Definition data (a:Type) (b:Type)(u:(t a b)): (array (list (a* b)%type)) :=
  match u with
  | (mk_t _ data1) => data1
  end.
Implicit Arguments data.

Definition get2 (a:Type) (b:Type)(h:(t a b)) (k:a): (option b) :=
  (get (contents h) k).
Implicit Arguments get2.

Parameter hash: forall (a:Type), a -> Z.

Implicit Arguments hash.

Definition idx (a:Type) (b:Type)(h:(t a b)) (k:a): Z :=
  (ZOmod (Zabs (hash k)) (length (data h))).
Implicit Arguments idx.

Set Implicit Arguments.
Fixpoint occurs_first (a:Type) (b:Type)(k:a) (v:b) (l:(list (a*
  b)%type)) {struct l}: Prop :=
  match l with
  | Nil => False
  | (Cons (kqt, vqt) r) => ((k = kqt) /\ (v = vqt)) \/ ((~ (k = kqt)) /\
      (occurs_first k v r))
  end.
Unset Implicit Arguments.

Axiom mem_occurs_first : forall (a:Type) (b:Type), forall (k:a) (v:b)
  (l:(list (a* b)%type)), (occurs_first k v l) -> (mem (k, v) l).

Axiom cons_occurs_first : forall (a:Type) (b:Type), forall (k1:a) (v1:b)
  (l:(list (a* b)%type)), (occurs_first k1 v1 l) -> forall (k:a) (v:b),
  (~ (k = k1)) -> (occurs_first k1 v1 (Cons (k, v) l)).

Definition valid (a:Type) (b:Type)(h:(t a b)): Prop :=
  (0%Z <  (length (data h)))%Z /\ ((forall (k:a) (v:b), ((get2 h
  k) = (Some v)) <-> (occurs_first k v (get1 (data h) (idx h k)))) /\
  forall (k:a) (v:b), forall (i:Z), ((0%Z <= i)%Z /\
  (i <  (length (data h)))%Z) -> ((mem (k, v) (get1 (data h) i)) ->
  (i = (idx h k)))).
Implicit Arguments valid.

Axiom idx_bounds : forall (a:Type) (b:Type), forall (h:(t a b)), (valid h) ->
  forall (k:a), (0%Z <= (idx h k))%Z /\ ((idx h k) <  (length (data h)))%Z.

(* YOU MAY EDIT THE CONTEXT BELOW *)

(* DO NOT EDIT BELOW *)

Theorem WP_parameter_find : forall (a:Type) (b:Type), forall (h:Z),
  forall (k:a), forall (rho:(map Z (list (a* b)%type))), forall (rho1:(map a
  (option b))), (valid (mk_t rho1 (mk_array h rho))) ->
  (((0%Z <= (ZOmod (Zabs (hash k)) h))%Z /\
  ((ZOmod (Zabs (hash k)) h) <  h)%Z) -> let result := (get rho
  (ZOmod (Zabs (hash k)) h)) in ((forall (result1:b), (occurs_first k result1
  result) -> ((get rho1 k) = (Some result1))) -> ((forall (v:b), ~ (mem (k,
  v) result)) -> ((get rho1 k) = (None :(option b)))))).
(* YOU MAY EDIT THE PROOF BELOW *)
intros a b h k rho.
unfold valid.
pose (i := (Zabs (hash k) mod h)).
unfold get1; simpl.
intuition.
generalize (H0 k); clear H0.
generalize (H6 k); clear H6.
unfold get2; simpl; intuition.
destruct (get rho1 k); auto.
elim (H2 b0); clear H2.
generalize (H4 b0); clear H4.
intuition.
apply mem_occurs_first; auto.
Qed.
(* DO NOT EDIT BELOW *)


