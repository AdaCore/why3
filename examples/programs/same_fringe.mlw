
(*
  ``Same fringe'' is a famous problem.
  Given two binary search trees, you must decide whether they contain the
  same elements. See for instance http://www.c2.com/cgi/wiki?SameFringeProblem
*)

module SameFringe

  use import int.Int
  use import list.List
  use import list.Length
  use import list.Append

  (* binary trees with elements at the nodes *)

  type elt

  type tree =
    | Empty
    | Node tree elt tree

  function elements (t : tree) : list elt = match t with
    | Empty -> Nil
    | Node l x r -> elements l ++ Cons x (elements r)
  end

  (* the left spine of a tree, as a bottom-up list *)

  type enum =
    | Done
    | Next elt tree enum

  function enum_elements (e : enum) : list elt = match e with
    | Done -> Nil
    | Next x r e -> Cons x (elements r ++ enum_elements e)
  end

  (* the enum of a tree [t], prepended to a given enum [e] *)

  let rec enum t e variant { length (elements t) } =
    { }
    match t with
    | Empty -> e
    | Node l x r -> enum l (Next x r e)
    end
    { enum_elements result = elements t ++ enum_elements e }

  let rec eq_enum e1 e2 variant { length (enum_elements e1) } =
    { }
    match e1, e2 with
    | Done, Done ->
        True
    | Next x1 r1 e1, Next x2 r2 e2 ->
        x1 = x2 && eq_enum (enum r1 e1) (enum r2 e2)
    | _ ->
        False
    end
    { result=True <-> enum_elements e1 = enum_elements e2 }

  let same_fringe t1 t2 =
    { }
    eq_enum (enum t1 Done) (enum t2 Done)
    { result=True <-> elements t1 = elements t2 }

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/same_fringe.gui"
End:
*)
