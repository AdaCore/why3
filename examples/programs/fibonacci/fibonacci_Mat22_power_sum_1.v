(* Beware! Only edit allowed sections below    *)
(* This file is generated by Why3's Coq driver *)
Require Import ZArith.
Require Import Rbase.
Parameter ghost : forall (a:Type), Type.

Definition unit  := unit.

Parameter ignore: forall (a:Type), a  -> unit.

Implicit Arguments ignore.

Parameter label_ : Type.

Parameter at1: forall (a:Type), a -> label_  -> a.

Implicit Arguments at1.

Parameter old: forall (a:Type), a  -> a.

Implicit Arguments old.

Inductive t  :=
  | mk_t : Z -> Z -> Z -> Z -> t .

Definition a11(u:t): Z := match u with
  | mk_t a111 _ _ _ => a111
  end.

Definition a12(u:t): Z := match u with
  | mk_t _ a121 _ _ => a121
  end.

Definition a21(u:t): Z := match u with
  | mk_t _ _ a211 _ => a211
  end.

Definition a22(u:t): Z := match u with
  | mk_t _ _ _ a221 => a221
  end.

Definition mult(x:t) (y:t): t :=
  (mk_t (((a11 x) * (a11 y))%Z + ((a12 x) * (a21 y))%Z)%Z
  (((a11 x) * (a12 y))%Z + ((a12 x) * (a22 y))%Z)%Z
  (((a21 x) * (a11 y))%Z + ((a22 x) * (a21 y))%Z)%Z
  (((a21 x) * (a12 y))%Z + ((a22 x) * (a22 y))%Z)%Z).

Axiom Assoc : forall (x:t) (y:t) (z:t), ((mult (mult x y) z) = (mult x
  (mult y z))).

Parameter power: t -> Z  -> t.


Axiom Power_0 : forall (x:t), ((power x 0%Z) = (mk_t 1%Z 0%Z 0%Z 1%Z)).

Axiom Power_s : forall (x:t) (n:Z), (0%Z <= n)%Z -> ((power x
  (n + 1%Z)%Z) = (mult x (power x n))).

Axiom mult_id : forall (m:t), ((mult m (mk_t 1%Z 0%Z 0%Z 1%Z)) = m).

Axiom id_mult : forall (m:t), ((mult (mk_t 1%Z 0%Z 0%Z 1%Z) m) = m).

Definition p(n:Z): Prop := forall (x:t) (m:Z), (0%Z <= m)%Z -> ((power x
  (n + m)%Z) = (mult (power x n) (power x m))).

Axiom Induction : (forall (n:Z), (0%Z <= n)%Z -> ((forall (k:Z),
  ((0%Z <= k)%Z /\ (k <  n)%Z) -> (p k)) -> (p n))) -> forall (n:Z),
  (0%Z <= n)%Z -> (p n).

Theorem power_sum : forall (x:t) (n:Z) (m:Z), (0%Z <= n)%Z ->
  ((0%Z <= m)%Z -> ((power x (n + m)%Z) = (mult (power x n) (power x m)))).
(* YOU MAY EDIT THE PROOF BELOW *)
intuition.
apply Induction; auto.
unfold p.
intros.
assert (h: (n0 = 0 \/ n0>0)%Z) by omega.
destruct h.
subst n0.
rewrite Power_0.
symmetry.
apply id_mult.
replace (n0 + m0)%Z with ((n0-1) + (m0+1))%Z by omega.
rewrite H2.
rewrite Power_s.
rewrite <- Assoc.
replace (mult (power x0 (n0 - 1)) x0) with (mult (power x0 (n0-1)) (power x0 1)).
rewrite <- H2.
replace (n0 - 1 + 1)%Z with n0 by omega.
reflexivity.
omega.
omega.
apply f_equal.
replace 1%Z with (0+1)%Z by omega.
rewrite Power_s.
rewrite Power_0.
apply mult_id.
omega.
omega.
omega.
omega.
Qed.
(* DO NOT EDIT BELOW *)


