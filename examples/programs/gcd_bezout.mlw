module M

  use import int.Int
  use import int.ComputerDivision
  use import int.Gcd
  use import module ref.Ref

  let gcd (x:int) (y:int) =
    { x >= 0 /\ y >= 0 }
    let x = ref x in let y = ref y in
'Pre:
    let a = ref 1 in let b = ref 0 in
    let c = ref 0 in let d = ref 1 in
    while (!y > 0) do
       invariant { !x >= 0 /\ !y >= 0 /\
          (forall d:int. gcd !x !y d -> gcd (at !x 'Pre) (at !y 'Pre) d) /\
          !a * (at !x 'Pre) + !b * (at !y 'Pre) = !x /\
          !c * (at !x 'Pre) + !d * (at !y 'Pre) = !y }
       variant { !y }
       let r = mod !x !y in let q = div !x !y in
       x := !y; y := r;
       let ta = !a in let tb = !b in
       a := !c; b := !d;
       c := ta - !c * q; d := tb - !d * q
    done;
    !x
    { gcd x y result /\
      exists a b:int. a*x+b*y = result }

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/gcd_bezout"
End:
*)
