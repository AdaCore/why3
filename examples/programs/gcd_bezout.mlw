{
  use import int.ComputerDivision
  use import int.Gcd
}

let gcd (x:int) (y:int) =
  { x >= 0 and y >= 0 }
  let x = ref x in let y = ref y in
  label Pre:
  let a = ref 1 in let b = ref 0 in
  let c = ref 0 in let d = ref 1 in
  while (!y > 0) do 
     invariant { !x >= 0 and !y >= 0 and
        (forall d:int. gcd !x !y d -> gcd (at !x Pre) (at !y Pre) d) and 
        !a * (at !x Pre) + !b * (at !y Pre) = !x and
        !c * (at !x Pre) + !d * (at !y Pre) = !y }
     variant {!y} 
     let r = mod !x !y in let q = div !x !y in
     x := !y; y := r;
     let ta = !a in let tb = !b in
     a := !c; b := !d;
     c := ta - !c * q; d := tb - !d * q
  done;
  !x
  { gcd x y result and
    exists a b:int. a*x+b*y = result }

