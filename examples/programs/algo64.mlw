
(***
   	
Algorithm 64

C. A. R. Hoare 	 
Elliott Brothers Ltd., Hertfordshire, England, U.K.

Communications of the ACM  archive
Volume 4 ,  Issue 7  (July 1961) table of contents
Pages: 321 - 322   

***)

module Algo64

  use import int.Int
  use import module stdlib.Ref
  use import module stdlib.Array
  use import array.ArrayPermut
  clone import array.ArraySorted with type elt = int, logic le = (<=)
 
  (* Algorithm 63 *)

  parameter partition : 
    a : array int -> m:int -> n:int -> i:ref int -> j:ref int ->
    { 0 <= m < n < length a } 
    unit writes a i j
    { m <= j < i <= n and permut (old a) a m n and
      exists x:int.
        (forall r:int. m <= r <= j -> a[r] <= x) and
        (forall r:int. j < r < i -> a[r] = x) and
        (forall r:int. i <= r <= n -> a[r] >= x) }
 
  (* Algorithm 64 *)

  let rec quicksort (a:array int) (m:int) (n:int) : unit variant { n-m } =
    { 0 <= m <= n < length a }
    label Init:
    if m < n then begin
      let i = ref 0 in
      let j = ref 0 in
      partition a m n i j;
      label L1:
      quicksort a m !j;
      assert { permut (at a L1) a m n };
      label L2:
      quicksort a !i n;
      assert { permut (at a L2) a m n }
    end
    { permut (old a) a m n and sorted_sub a m n }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../.. examples/programs/algo64.gui"
End: 
*)


