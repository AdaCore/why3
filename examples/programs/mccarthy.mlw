
(* McCarthy's ``91'' function. *)

module McCarthy91

  use import int.Int

  (* traditional recursive implementation *)

  let rec f91 (n:int) : int variant { 101-n } =
    { }
    if n <= 100 then
      f91 (f91 (n + 11))
    else
      n - 10
    { (n <= 100 /\ result = 91) \/ (n >= 101 /\ result = n - 10) }


  (* non-recursive implementation using a while loop *)

  use import module ref.Ref
  use import int.Lex2

  function f (x: int) : int = if x >= 101 then x-10 else 91

  (* iter k x = f^k(x) *)
  clone import int.Iter with type t = int, function f = f

  let f91_nonrec (n0: int) =
    { }
    let e = ref 1 in
    let n = ref n0 in
    while !e > 0 do
      invariant { !e >= 0 /\ iter !e !n = f n0 }
      variant   { (101 - !n + 10 * !e, !e) } with lex
      if !n > 100 then begin
        n := !n - 10;
        e := !e - 1
      end else begin
        n := !n + 11;
        e := !e + 1
      end
    done;
    !n
    { result = f n0 }

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/mccarthy.gui"
End:
*)
