(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import ZArith.
Require Import Rbase.
Require int.Int.

(* Why3 assumption *)
Inductive list (a:Type) :=
  | Nil : list a
  | Cons : a -> (list a) -> list a.
Implicit Arguments Nil [[a]].
Implicit Arguments Cons [[a]].

(* Why3 assumption *)
Fixpoint length {a:Type}(l:(list a)) {struct l}: Z :=
  match l with
  | Nil => 0%Z
  | (Cons _ r) => (1%Z + (length r))%Z
  end.

Axiom Length_nonnegative : forall {a:Type}, forall (l:(list a)),
  (0%Z <= (length l))%Z.

Axiom Length_nil : forall {a:Type}, forall (l:(list a)),
  ((length l) = 0%Z) <-> (l = (Nil :(list a))).

(* Why3 assumption *)
Fixpoint infix_plpl {a:Type}(l1:(list a)) (l2:(list a)) {struct l1}: (list
  a) :=
  match l1 with
  | Nil => l2
  | (Cons x1 r1) => (Cons x1 (infix_plpl r1 l2))
  end.

Axiom Append_assoc : forall {a:Type}, forall (l1:(list a)) (l2:(list a))
  (l3:(list a)), ((infix_plpl l1 (infix_plpl l2
  l3)) = (infix_plpl (infix_plpl l1 l2) l3)).

Axiom Append_l_nil : forall {a:Type}, forall (l:(list a)), ((infix_plpl l
  (Nil :(list a))) = l).

Axiom Append_length : forall {a:Type}, forall (l1:(list a)) (l2:(list a)),
  ((length (infix_plpl l1 l2)) = ((length l1) + (length l2))%Z).

(* Why3 assumption *)
Fixpoint mem {a:Type}(x:a) (l:(list a)) {struct l}: Prop :=
  match l with
  | Nil => False
  | (Cons y r) => (x = y) \/ (mem x r)
  end.

Axiom mem_append : forall {a:Type}, forall (x:a) (l1:(list a)) (l2:(list a)),
  (mem x (infix_plpl l1 l2)) <-> ((mem x l1) \/ (mem x l2)).

Axiom mem_decomp : forall {a:Type}, forall (x:a) (l:(list a)), (mem x l) ->
  exists l1:(list a), exists l2:(list a), (l = (infix_plpl l1 (Cons x l2))).

(* Why3 assumption *)
Fixpoint reverse {a:Type}(l:(list a)) {struct l}: (list a) :=
  match l with
  | Nil => (Nil :(list a))
  | (Cons x r) => (infix_plpl (reverse r) (Cons x (Nil :(list a))))
  end.

Axiom reverse_append : forall {a:Type}, forall (l1:(list a)) (l2:(list a))
  (x:a), ((infix_plpl (reverse (Cons x l1)) l2) = (infix_plpl (reverse l1)
  (Cons x l2))).

Axiom reverse_reverse : forall {a:Type}, forall (l:(list a)),
  ((reverse (reverse l)) = l).

Axiom Reverse_length : forall {a:Type}, forall (l:(list a)),
  ((length (reverse l)) = (length l)).

(* Why3 assumption *)
Inductive option (a:Type) :=
  | None : option a
  | Some : a -> option a.
Implicit Arguments None [[a]].
Implicit Arguments Some [[a]].

Parameter nth: forall {a:Type}, Z -> (list a) -> (option a).

Axiom nth_def : forall {a:Type}, forall (n:Z) (l:(list a)),
  match l with
  | Nil => ((nth n l) = (None :(option a)))
  | (Cons x r) => ((n = 0%Z) -> ((nth n l) = (Some x))) /\ ((~ (n = 0%Z)) ->
      ((nth n l) = (nth (n - 1%Z)%Z r)))
  end.

Parameter m: Z.

Axiom m_positive : (0%Z < m)%Z.

Parameter n: Z.

Axiom n_nonnegative : (0%Z <= n)%Z.

(* Why3 assumption *)
Inductive shuffle{a:Type}  : (list a) -> (list a) -> (list a) -> Prop :=
  | Shuffle_nil_left : forall (l:(list a)), (shuffle l (Nil :(list a)) l)
  | Shuffle_nil_right : forall (l:(list a)), (shuffle (Nil :(list a)) l l)
  | Shuffle_cons_left : forall (x:a) (a1:(list a)) (b:(list a)) (c:(list a)),
      (shuffle a1 b c) -> (shuffle (Cons x a1) b (Cons x c))
  | Shuffle_cons_right : forall (x:a) (a1:(list a)) (b:(list a)) (c:(list
      a)), (shuffle a1 b c) -> (shuffle a1 (Cons x b) (Cons x c)).

Axiom shuffle_nil_nil_nil : forall {a:Type}, (shuffle (Nil :(list a))
  (Nil :(list a)) (Nil :(list a))).

Axiom shuffle_sym : forall {a:Type}, forall (a1:(list a)) (b:(list a))
  (c:(list a)), (shuffle a1 b c) -> (shuffle b a1 c).



(* Why3 goal *)
Theorem shuffle_length : forall {a:Type}, forall (a1:(list a)) (b:(list a))
  (c:(list a)), (shuffle a1 b c) ->
  (((length a1) + (length b))%Z = (length c)).
(* YOU MAY EDIT THE PROOF BELOW *)
induction 1; unfold length; fold @length; omega.
Qed.


