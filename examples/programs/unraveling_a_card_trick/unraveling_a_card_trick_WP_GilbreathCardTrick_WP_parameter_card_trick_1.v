(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import ZArith.
Require Import Rbase.
Definition unit  := unit.

Parameter qtmark : Type.

Parameter at1: forall (a:Type), a -> qtmark -> a.

Implicit Arguments at1.

Parameter old: forall (a:Type), a -> a.

Implicit Arguments old.

Definition implb(x:bool) (y:bool): bool := match (x,
  y) with
  | (true, false) => false
  | (_, _) => true
  end.

Inductive list (a:Type) :=
  | Nil : list a
  | Cons : a -> (list a) -> list a.
Set Contextual Implicit.
Implicit Arguments Nil.
Unset Contextual Implicit.
Implicit Arguments Cons.

Set Implicit Arguments.
Fixpoint infix_plpl (a:Type)(l1:(list a)) (l2:(list a)) {struct l1}: (list
  a) :=
  match l1 with
  | Nil => l2
  | (Cons x1 r1) => (Cons x1 (infix_plpl r1 l2))
  end.
Unset Implicit Arguments.

Axiom Append_assoc : forall (a:Type), forall (l1:(list a)) (l2:(list a))
  (l3:(list a)), ((infix_plpl l1 (infix_plpl l2
  l3)) = (infix_plpl (infix_plpl l1 l2) l3)).

Axiom Append_l_nil : forall (a:Type), forall (l:(list a)), ((infix_plpl l
  (Nil:(list a))) = l).

Set Implicit Arguments.
Fixpoint length (a:Type)(l:(list a)) {struct l}: Z :=
  match l with
  | Nil => 0%Z
  | (Cons _ r) => (1%Z + (length r))%Z
  end.
Unset Implicit Arguments.

Axiom Length_nonnegative : forall (a:Type), forall (l:(list a)),
  (0%Z <= (length l))%Z.

Axiom Length_nil : forall (a:Type), forall (l:(list a)),
  ((length l) = 0%Z) <-> (l = (Nil:(list a))).

Axiom Append_length : forall (a:Type), forall (l1:(list a)) (l2:(list a)),
  ((length (infix_plpl l1 l2)) = ((length l1) + (length l2))%Z).

Set Implicit Arguments.
Fixpoint mem (a:Type)(x:a) (l:(list a)) {struct l}: Prop :=
  match l with
  | Nil => False
  | (Cons y r) => (x = y) \/ (mem x r)
  end.
Unset Implicit Arguments.

Axiom mem_append : forall (a:Type), forall (x:a) (l1:(list a)) (l2:(list a)),
  (mem x (infix_plpl l1 l2)) <-> ((mem x l1) \/ (mem x l2)).

Axiom mem_decomp : forall (a:Type), forall (x:a) (l:(list a)), (mem x l) ->
  exists l1:(list a), exists l2:(list a), (l = (infix_plpl l1 (Cons x l2))).

Set Implicit Arguments.
Fixpoint reverse (a:Type)(l:(list a)) {struct l}: (list a) :=
  match l with
  | Nil => (Nil:(list a))
  | (Cons x r) => (infix_plpl (reverse r) (Cons x (Nil:(list a))))
  end.
Unset Implicit Arguments.

Axiom reverse_append : forall (a:Type), forall (l1:(list a)) (l2:(list a))
  (x:a), ((infix_plpl (reverse (Cons x l1)) l2) = (infix_plpl (reverse l1)
  (Cons x l2))).

Axiom reverse_reverse : forall (a:Type), forall (l:(list a)),
  ((reverse (reverse l)) = l).

Axiom Reverse_length : forall (a:Type), forall (l:(list a)),
  ((length (reverse l)) = (length l)).

Inductive t (a:Type) :=
  | mk_t : (list a) -> t a.
Implicit Arguments mk_t.

Definition elts (a:Type)(u:(t a)): (list a) :=
  match u with
  | (mk_t elts1) => elts1
  end.
Implicit Arguments elts.

Definition length1 (a:Type)(s:(t a)): Z := (length (elts s)).
Implicit Arguments length1.

Parameter m: Z.


Axiom m_positive : (0%Z <  m)%Z.

Parameter n: Z.


Axiom n_nonnegative : (0%Z <= n)%Z.

Inductive shuffle{a:Type}  : (list a) -> (list a) -> (list a) -> Prop :=
  | Shuffle_nil_left : forall (l:(list a)), (shuffle l (Nil:(list a)) l)
  | Shuffle_nil_right : forall (l:(list a)), (shuffle (Nil:(list a)) l l)
  | Shuffle_cons_left : forall (x:a) (a1:(list a)) (b:(list a)) (c:(list a)),
      (shuffle a1 b c) -> (shuffle (Cons x a1) b (Cons x c))
  | Shuffle_cons_right : forall (x:a) (a1:(list a)) (b:(list a)) (c:(list
      a)), (shuffle a1 b c) -> (shuffle a1 (Cons x b) (Cons x c)).
Implicit Arguments shuffle.

(* YOU MAY EDIT THE CONTEXT BELOW *)

(* DO NOT EDIT BELOW *)

Theorem WP_parameter_card_trick : forall (a:(list Z)),
  ((length a) = (n * m)%Z) -> forall (result:(list Z)), (result = (Nil:(list
  Z))) -> forall (result1:Z), ((0%Z <= result1)%Z /\
  (result1 <= (n * m)%Z)%Z) -> ((1%Z <= result1)%Z -> forall (d_:(list Z)),
  forall (a1:(list Z)),
  (((length a1) = (((n * m)%Z - (result1 + 1%Z)%Z)%Z + 1%Z)%Z) /\
  (((length d_) = ((result1 + 1%Z)%Z - 1%Z)%Z) /\
  (a = (infix_plpl (reverse d_) a1)))) -> ((a = (infix_plpl (reverse d_)
  a1)) -> forall (result2:(list Z)), (result2 = (Nil:(list Z))) ->
  exists aqt:(list Z), exists dqt:(list Z), (a1 = (infix_plpl (reverse aqt)
  a1)) /\ ((d_ = (infix_plpl (reverse dqt) d_)) /\ (shuffle aqt dqt
  result2)))).
(* YOU MAY EDIT THE PROOF BELOW *)
intuition.
exists Nil; exists Nil; intuition.
subst result2; apply Shuffle_nil_left.
Qed.
(* DO NOT EDIT BELOW *)


