
(* Integer square root *)

module Simple

  use import int.Int
  use import module ref.Ref

  function sqr (x:int) : int = x * x

  let isqrt (x:int) : int =
    { x >= 0 }
    let count = ref 0 in
    let sum = ref 1 in
    while !sum <= x do
      invariant { !count >= 0 /\ x >= sqr !count /\ !sum = sqr (!count+1) }
      variant   { x - !count }
      count := !count + 1;
      sum := !sum + 2 * !count + 1
    done;
    !count
    { result >= 0 /\ sqr result <= x /\ x < sqr (result + 1) }

  let main () =
    { }
    isqrt 17
    { result = 4 }

end

(* code and proof by Claude MarchÃ©, 2002 *)

module NewtonMethod

  use import int.Int
  use import int.ComputerDivision
  use import module ref.Ref

  let sqrt = fun (x : int) ->
    { x >= 0 }
    if x = 0 then 0 else
    if x <= 3 then 1 else
    let y = ref x in
    let z = ref (div (x+1) 2) in
    while !z < !y do
      invariant { !z > 0
               /\ !y > 0
               /\ !z = div (div x !y + !y) 2
               /\ x < (!y + 1) * (!y + 1)
               /\ x < (!z + 1) * (!z + 1) }
      variant { !y }
      y := !z;
      z := div (div x !z + !z) 2
    done;
    !y
    { result * result <= x < (result+1) * (result+1) }

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/isqrt.gui"
End:
*)
