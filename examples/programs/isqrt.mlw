module M

logic sqr (x:int) : int = x * x

let isqrt (x:int) =
  { x >= 0 }
  let count = ref 0 in
  let sum = ref 1 in
  while !sum <= x do
    invariant { !count >= 0 and
                x >= sqr !count and
                !sum = sqr (!count+1) }
    variant { x - !sum }
    count := !count + 1;
    sum := !sum + 2 * !count + 1
  done;
  !count
  { result >= 0 and sqr result <= x and x < sqr (result + 1) }

end

