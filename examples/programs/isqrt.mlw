module M

  use import int.Int
  use import module stdlib.Ref

  logic sqr (x:int) : int = x * x

  let isqrt (x:int) : int =
    { x >= 0 }
    let count = ref 0 in
    let sum = ref 1 in
    while !sum <= x do
      invariant { count >= 0 and x >= sqr count and sum = sqr (count+1) }
      variant   { x - count }
      count := !count + 1;
      sum := !sum + 2 * !count + 1
    done;
    !count
    { result >= 0 and sqr result <= x and x < sqr (result + 1) }

  let main () =
    { }
    let r = isqrt 42 in
    assert { r < 4 -> false };
    assert { r > 4 -> false };
    r
    { result = 4 }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../.. examples/programs/isqrt"
End: 
*)
