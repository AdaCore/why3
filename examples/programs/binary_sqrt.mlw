
(* Computing the square root (up to eps) using binary search

   Note: precondition 0. < eps is not necessary for soundness
   but it ensures termination. *)

module BinarySqrt

  use import real.Real

  let rec sqrt (r: real) (eps: real) : real =
    { 0. <= r /\ 0. < eps }
    if r < eps && 1. < eps then
      0.
    else
      let r' = sqrt r (2. * eps) in
      if (r' + eps) * (r' + eps) <= r then r' + eps else r'
   { result * result <= r < (result + eps) * (result + eps) }

end
