module M
(* How many integers 0 <= n < 10^18 have the property that the sum
   of the digits of n equals the sum of digits of 137n? *)

(* answer: 20444710234716473 *)

  use import int.Int
  use import module ref.Ref
  use import int.EuclideanDivision
  use import int.Power

(*
  logic sum_digits (n:int) : int =
    if n = 0 then 0 else sum_digits (div n 10) + mod n 10
*)
  logic sum_digits int : int

  axiom Sum_digits_def : forall n : int. sum_digits n =
    if n <= 0 then 0 else sum_digits (div n 10) + mod n 10

  (* the number of n st 0 <= n mod 10 < c and sd(n) = sd(137n+a)+b *)

  type int3 = (int,int,int)

  logic p (d:int3) (n:int) =
    let (a,b,c) = d in
    0 <= mod n 10 < c and sum_digits n = sum_digits (137 * n + a) + b

  clone int.NumOfParam as P with type param = int3, logic pr = p

  logic solution(a b m : int) : int = P.num_of (a,b,10) 0 (power 10 m)

  (* short cut for the number of n st n mod 10 = c and ... *)

  logic num_of_modc (d:int3) (x y:int) : int =
    let (a,b,c) = d in
    P.num_of (a,b,c+1) x y - P.num_of (a,b,c) x y

  (* helper lemmas *)

  lemma Base:
    forall a b : int. 0 <= a -> sum_digits a + b = 0 -> p (a,b,10) 0

  lemma Empty:
    forall a b x y : int. P.num_of (a,b,0) x y = 0

  lemma Induc:
    forall a b c : int. 0 <= a -> 0 <= c < 10 ->
    let x = 137 * c + a in
    let a' = div x 10 in
    let b' = mod x 10 + b - c in
    forall m : int. m > 0 ->
    solution a' b' (m-1) = num_of_modc (a,b,c) 0 (power 10 m)

  use import int.ComputerDivision

let rec sd n =
  { n >= 0 }
  if n = 0 then 0 else sd (div n 10) + mod n 10
  { result = sum_digits n }

(* f(m,a,b) = the number of 0 <= n < 10^m such that
   digitsum(137n+a) + b = digitsum(n). *)
let rec f m a b =
  { 0 <= m and 0 <= a }
  if m = 0 then begin
    (* only n = 0 is possible *)
    if sd a + b = 0 then 1 else 0
  end else begin
    let sum = ref 0 in
    let c = ref 0 in
    while !c <= 9 do (* n = 10n' + c *)
      invariant { 0 <= !c <= 10 and !sum = P.num_of (a,b,!c) 0 (power 10 m) }
      variant   { 10 - !c }
      let x = 137 * !c + a in
      let q = div x 10 in
      let r = mod x 10 in
      sum := !sum + f (m-1) q (r + b - !c);
      c := !c + 1
    done;
    !sum
  end
  { result = solution a b m }

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../.. examples/programs/talk290"
End:
*)
