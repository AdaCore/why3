module M

(* find a value in a sorted list *)

  use import list.Mem
  use import list.Sorted

  (* FIXME *)
  lemma Nil_not_Cons : forall x:int, l:list int. Nil <> Cons x l

  lemma Sorted_not_mem:
    forall x y : int, l : list int. 
    x < y -> sorted (Cons y l) -> not mem x (Cons y l)

let rec find x l = 
  { sorted l }
  match l with   
  | Nil -> False
  | Cons y r -> x = y || x > y && find x r
  end 
  { result=True <-> mem x l }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../.. examples/programs/sorted_list"
End: 
*)
