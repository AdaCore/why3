<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Eprover" version="2.0" timelimit="16" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="7" name="Eprover" version="1.8-001" timelimit="16" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="tortoise_and_hare.mlw"/>
<theory name="TortoiseAndHareAlgorithm">
 <goal name="x_in_range&#39;vc" expl="VC for x_in_range" proved="true">
 <proof prover="2"><result status="valid" time="0.22" steps="311"/></proof>
 </goal>
 <goal name="periodicity&#39;vc" expl="VC for periodicity" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="periodicity&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="13782"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="15091"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="14967"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="16968"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="35932"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="15585"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="13809"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="22991"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="28328"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.48" steps="824"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="51370"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.12" expl="out of loop bounds" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="15420"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.13" expl="unreachable point" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="13472"/></proof>
  </goal>
  <goal name="periodicity&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="13699"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="equality&#39;vc" expl="VC for equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="equality&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="9809"/></proof>
  </goal>
  <goal name="equality&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.03" steps="9496"/></proof>
  </goal>
  <goal name="equality&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="12791"/></proof>
  </goal>
  <goal name="equality&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="9613"/></proof>
  </goal>
  <goal name="equality&#39;vc.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="9585"/></proof>
  </goal>
  <goal name="equality&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="9602"/></proof>
  </goal>
  <goal name="equality&#39;vc.6" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="((k-1)*lambda &gt;= 0)">
   <goal name="equality&#39;vc.6.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="2.45"/></proof>
   </goal>
   <goal name="equality&#39;vc.6.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="9985"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="equality&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="13619"/></proof>
  </goal>
  <goal name="equality&#39;vc.8" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.03" steps="10057"/></proof>
  </goal>
  <goal name="equality&#39;vc.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="10057"/></proof>
  </goal>
  <goal name="equality&#39;vc.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="10232"/></proof>
  </goal>
  <goal name="equality&#39;vc.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="46486"/></proof>
  </goal>
  <goal name="equality&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18" steps="228900"/></proof>
  </goal>
  <goal name="equality&#39;vc.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="9759"/></proof>
  </goal>
  <goal name="equality&#39;vc.14" expl="unreachable point" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.07" steps="20158"/></proof>
  </goal>
  <goal name="equality&#39;vc.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="10061"/></proof>
  </goal>
  <goal name="equality&#39;vc.16" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.02" steps="9854"/></proof>
  </goal>
  <goal name="equality&#39;vc.17" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="17228"/></proof>
  </goal>
  <goal name="equality&#39;vc.18" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="23142"/></proof>
  </goal>
  <goal name="equality&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="80"/></proof>
  </goal>
  <goal name="equality&#39;vc.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="equality&#39;vc.20.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="15932"/></proof>
   </goal>
   <goal name="equality&#39;vc.20.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
   <goal name="equality&#39;vc.20.2" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((k-1) * lambda &gt;= 0)">
    <goal name="equality&#39;vc.20.2.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="2.65"/></proof>
    </goal>
    <goal name="equality&#39;vc.20.2.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.57"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="tortoise_and_hare&#39;vc" expl="VC for tortoise_and_hare">
 <transf name="split_vc" >
  <goal name="tortoise_and_hare&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="10126"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.05" steps="15473"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="13085"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="11282"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="21"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.5" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="397"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.6" expl="loop variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="10748"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tortoise_and_hare&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.04" steps="11098"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="10661"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.7.2" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="40797"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.7.3" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="21467"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.7.4" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="16658"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.8" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="62211"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.9" expl="assertion">
  <transf name="instantiate" arg1="Ensures" arg2="(n+n),n">
   <goal name="tortoise_and_hare&#39;vc.9.0" expl="assertion">
   <proof prover="1"><result status="valid" time="0.02" steps="36"/></proof>
   </goal>
  </transf>
  <transf name="instantiate" arg1="Ensures" arg2="(n1+n1),n1">
   <goal name="tortoise_and_hare&#39;vc.9.0" expl="assertion">
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.10" expl="assertion">
  <transf name="destruct" arg1="Assert">
   <goal name="tortoise_and_hare&#39;vc.10.0" expl="assertion">
   <transf name="replace" arg1="n" arg2="(k*lambda)">
    <goal name="tortoise_and_hare&#39;vc.10.0.0" expl="assertion">
    <transf name="instantiate" arg1="Ensures" arg2="(j+n),j">
     <goal name="tortoise_and_hare&#39;vc.10.0.0.0" expl="assertion">
     <proof prover="0"><result status="valid" time="0.14" steps="33574"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="tortoise_and_hare&#39;vc.10.0.1" expl="equality hypothesis">
    <proof prover="6"><result status="valid" time="0.02" steps="10645"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.02" steps="10810"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="42496"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="4105"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.14" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="11492"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.15" expl="loop variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="11388"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.02" steps="43"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="67486"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="48"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.19" expl="loop invariant preservation">
  <transf name="assert" arg1="(lam1 = 0)">
   <goal name="tortoise_and_hare&#39;vc.19.0" expl="asserted formula">
   <proof prover="6"><result status="valid" time="0.03" steps="12136"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.19.1" expl="loop invariant preservation">
   <transf name="assert" arg1="(x (n + i1) = x n)">
    <goal name="tortoise_and_hare&#39;vc.19.1.0" expl="asserted formula">
    <proof prover="6"><result status="valid" time="0.04" steps="12070"/></proof>
    </goal>
    <goal name="tortoise_and_hare&#39;vc.19.1.1" expl="loop invariant preservation">
    <transf name="instantiate" arg1="Ensures4" arg2="(n+i1),n">
     <goal name="tortoise_and_hare&#39;vc.19.1.1.0" expl="loop invariant preservation">
     <transf name="assert" arg1="(exists k. k &gt;= 1 /\ i1 = k * lambda)">
      <goal name="tortoise_and_hare&#39;vc.19.1.1.0.0" expl="asserted formula">
      <proof prover="6"><result status="valid" time="0.04" steps="12409"/></proof>
      </goal>
      <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1" expl="loop invariant preservation">
      <transf name="destruct" arg1="h">
       <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0" expl="loop invariant preservation">
       <transf name="assert" arg1="((k-1) * lambda &gt;= 0)">
        <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.0" expl="asserted formula">
        <proof prover="7"><result status="valid" time="1.93"/></proof>
        </goal>
        <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1" expl="loop invariant preservation">
        <transf name="assert" arg1="(i1 &gt;= lambda)">
         <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.0" expl="asserted formula">
         <proof prover="6"><result status="valid" time="0.04" steps="12541"/></proof>
         </goal>
         <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1" expl="loop invariant preservation">
         <transf name="case" arg1="(k=1)">
          <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1.0" expl="true case (loop invariant preservation)">
          <proof prover="6"><result status="valid" time="0.04" steps="12778"/></proof>
          </goal>
          <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1.1" expl="false case (loop invariant preservation)">
          <transf name="assert" arg1="(x (n + lambda) &lt;&gt; x n)">
           <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1.1.0" expl="asserted formula">
           <transf name="assert" arg1="(lambda &lt; i1)">
            <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1.1.0.0" expl="asserted formula">
            <proof prover="2"><result status="valid" time="0.74" steps="271"/></proof>
            </goal>
            <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1.1.0.1" expl="asserted formula">
            <proof prover="5"><result status="valid" time="0.03"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="tortoise_and_hare&#39;vc.19.1.1.0.1.0.1.1.1.1" expl="false case (loop invariant preservation)">
           <proof prover="6"><result status="valid" time="0.47" steps="93286"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.20" expl="loop variant decrease">
  <transf name="case" arg1="(i = mu+1)">
   <goal name="tortoise_and_hare&#39;vc.20.0" expl="true case (loop variant decrease)">
   <transf name="assert" arg1="(x mu = x (mu + n))">
    <goal name="tortoise_and_hare&#39;vc.20.0.0" expl="asserted formula">
    <proof prover="6"><result status="valid" time="0.05" steps="14003"/></proof>
    </goal>
    <goal name="tortoise_and_hare&#39;vc.20.0.1" expl="true case (loop variant decrease)">
    <proof prover="6"><result status="valid" time="0.12" steps="11390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.20.1" expl="false case (loop variant decrease)">
   <proof prover="5"><result status="valid" time="0.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.21" expl="loop invariant preservation">
  <transf name="replace" arg1="n" arg2="(2*n - n)">
   <goal name="tortoise_and_hare&#39;vc.21.0" expl="loop invariant preservation">
   <proof prover="2"><result status="valid" time="0.01" steps="39"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.21.1" expl="equality hypothesis">
   <proof prover="6"><result status="valid" time="0.02" steps="11231"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.22" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="tortoise_and_hare&#39;vc.22.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="27472"/></proof>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.22.1" expl="loop invariant preservation" proved="true">
   <proof prover="6" timelimit="5"><result status="valid" time="0.32" steps="58440"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="29593"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.25" expl="assertion">
  <transf name="instantiate" arg1="Ensures" arg2="(n+i),n">
   <goal name="tortoise_and_hare&#39;vc.25.0" expl="assertion">
   <proof prover="0"><result status="valid" time="0.13" steps="28020"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.26" expl="assertion">
  <transf name="case" arg1="(lam = 0)">
   <goal name="tortoise_and_hare&#39;vc.26.0" expl="true case (assertion)">
   <transf name="assert" arg1="(lambda &gt;= mu)">
    <goal name="tortoise_and_hare&#39;vc.26.0.0" expl="asserted formula">
    <transf name="case" arg1="(lambda &lt; mu)">
     <goal name="tortoise_and_hare&#39;vc.26.0.0.0" expl="true case (asserted formula)">
     <transf name="assert" arg1="(x (n + lambda) &lt;&gt; x n)">
      <goal name="tortoise_and_hare&#39;vc.26.0.0.0.0" expl="asserted formula">
      <proof prover="5"><result status="valid" time="0.03"/></proof>
      </goal>
      <goal name="tortoise_and_hare&#39;vc.26.0.0.0.1" expl="true case (asserted formula)">
      <transf name="assert" arg1="(x (n + lambda) = x n)">
       <goal name="tortoise_and_hare&#39;vc.26.0.0.0.1.0" expl="asserted formula">
       <transf name="instantiate" arg1="Ensures" arg2="(n+lambda),n">
        <goal name="tortoise_and_hare&#39;vc.26.0.0.0.1.0.0" expl="asserted formula">
        <proof prover="0"><result status="valid" time="0.06" steps="15378"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="tortoise_and_hare&#39;vc.26.0.0.0.1.1" expl="true case (asserted formula)">
       <proof prover="6"><result status="valid" time="0.03" steps="11194"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="tortoise_and_hare&#39;vc.26.0.0.1" expl="false case (asserted formula)">
     <proof prover="6"><result status="valid" time="0.02" steps="11169"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="tortoise_and_hare&#39;vc.26.0.1" expl="true case (assertion)">
    <transf name="destruct" arg1="Assert2">
     <goal name="tortoise_and_hare&#39;vc.26.0.1.0" expl="true case (assertion)">
     <transf name="assert" arg1="(n = lambda \/ n = 2*lambda)">
      <goal name="tortoise_and_hare&#39;vc.26.0.1.0.0" expl="asserted formula">
      <proof prover="1"><result status="valid" time="0.04" steps="147"/></proof>
      </goal>
      <goal name="tortoise_and_hare&#39;vc.26.0.1.0.1" expl="true case (assertion)">
      <proof prover="0"><result status="valid" time="0.10" steps="20161"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="tortoise_and_hare&#39;vc.26.1" expl="false case (assertion)">
   <proof prover="0"><result status="valid" time="0.05" steps="11790"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="11167"/></proof>
  </goal>
  <goal name="tortoise_and_hare&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="76726"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
