module Impl
  use int.Int
  use int.ComputerDivision
  use int.Div2
  use int.NumOf
  use bag.Bag
  use mach.int.Int63
  use mach.int.Refint63
  use import Vector.Sig as V (* Module mli de vocal traduit en mlw *)
  use seq.Seq
  use option.Option
  use vocal.Order
  use option.Option
  use ocaml.Pervasives

  use ocaml.Sys

  scope Make
    scope X
      type t
      val dummy : t
      function cmp (x y: t) : int63
      axiom is_pre_order: Order.is_pre_order cmp
      val compare (x : t) (y : t) : int63
        ensures { result = cmp x y }
    end

    type elt = X.t

    predicate le (x y: elt) = X.cmp x y <= 0

    function numocc (a: V.t elt) (c: elt) (l u: int) : int =
      numof (fun i -> a.view[i] = c) l u

    function numocc' (a : V.t elt) (c: elt) : int =
      numocc a c 0 (length a.view)

    predicate heap_order (a : V.t elt) = forall i.
      (0 < 2*i + 1 < length a.view -> le a.view[i] a.view[2*i + 1]) /\
      (0 < 2*i + 2 < length a.view -> le a.view[i] a.view[2*i + 2])

    (* Ã©ventuellement ici un lemma disant
       heap_order a ->
       forall i. 0 < i < length a.view -> le a.view[div (i-1) 2] a.view[i] *)

    type t = {
                      a : V.t elt;
      ghost mutable bag : bag elt;
    }
      invariant { length a.view = card bag }
      invariant { forall x. numocc' a x = nb_occ x bag }
      invariant { heap_order a } (* Heap order is preserved *)
      by { a = V.create (Some (0 : int63)) X.dummy; bag = empty_bag }

    function minimum (h : t) : elt (* = h.a.view[0] ? *)

    axiom min_def: forall h. card h.bag <> 0 -> minimum h = h.a.view[0]

    predicate is_minimum (x: elt) (h: t) =
      mem x h.bag && forall e. mem e h.bag -> X.cmp x e <= 0

    lemma num_exist:
      forall h x. numocc' h.a x > 0 ->
      exists i. 0 <= i < length h.a.view /\ h.a.view[i] = x

    let lemma min_coherent (h: t)
      requires { 0 < card h.bag }
      ensures  { is_minimum (minimum h) h }
    = let s = h.a.view in
      let n = length s in
      let rec lemma ismin (i: int)
        requires { 0 <= i < n } variant { i } ensures  { le s[0] s[i] }
      = if i > 0 then ismin (div (i-1) 2)
     in ()

    (* Useful lemmas for proving invariants, most of the work will be here *)

    predicate substitution (a1 a2: V.t elt) (i : int63) =
      length a1.view = length a2.view /\
      0 <= i < length a1.view /\
      (forall k. 0 <= k < length a1.view -> k <> i -> a1.view[k] = a2.view[k])

    lemma sub_occ_1: forall a1 a2 : V.t elt, i : int63, x : elt.
      substitution a1 a2 i ->
      (x <> a1.view[i] /\ x <> a2.view[i]) ->
      numocc' a1 x = numocc' a2 x

    lemma sub_occ_2: forall a1 a2 i.
      substitution a1 a2 i -> a1.view[i] <> a2.view[i] ->
      numocc' a1 a1.view[i]
    = numocc' a2 a1.view[i] + 1

    lemma sub_occ_3: forall a1 a2 i.
      substitution a1 a2 i -> a1.view[i] = a2.view[i] ->
      numocc' a1 a1.view[i]
    = numocc' a2 a1.view[i]

    let lemma sub_order (a1 a2 : V.t elt) (i : int63) =
      requires {substitution a1 a2 i}
      requires { heap_order a1 }
      requires { i > 0 -> X.cmp a1.view[div (i - 1) 2] a2.view[i] <= 0 }
      requires { 2*i + 1 < length a1.view -> X.cmp a1.view[2*i + 1] a2.view[i] >= 0 }
      requires { 2*i + 2 < length a1.view -> X.cmp a1.view[2*i + 2] a2.view[i] >= 0 }
      ensures { heap_order a2 }
      ()

    predicate pop (a1 a2: V.t elt) =
      length a2.view = length a1.view - 1 /\
      forall i. 0 <= i < length a2.view -> a1.view[i] = a2.view[i]

    lemma pop_occ_1: forall a1 a2 x.
      pop a1 a2 -> x <> a1.view[length a1.view - 1] ->
      numocc' a1 x = numocc' a2 x

    (* let lemma pop_occ_1 (a1 a2: V.t elt) (x: elt) *)
    (*   requires { pop a1 a2 } *)
    (*   requires { x <> a1.view[length a1.view - 1] } *)
    (*   ensures  { numocc a1 x 0 (length a1.view) *)
    (*            = numocc a2 x 0 (length a2.view) } *)
    (* = assert { numocc a1 x 0 (length (view a2)) *)
    (*          = numocc a2 x 0 (length (view a2)) } *)

    lemma pop_occ_2: forall a1 a2.
      pop a1 a2 ->
      numocc' a1 a1.view[length a1.view - 1] - 1
    = numocc' a2 a1.view[length a1.view - 1]

    lemma pop_order: forall a1 a2. pop a1 a2 -> heap_order a1 -> heap_order a2

    predicate push (a1 a2 : V.t elt ) =
      length a2.view = length a1.view + 1 /\
      forall i. 0 <= i < length a1.view -> a1.view[i] = a2.view[i]

    let ghost push_occ (a1 a2 : V.t elt) =
      requires { push a1 a2 }
      ensures { forall x. x <> a2.view[length a2.view - 1] -> numocc' a1 x = numocc' a2 x }
      ensures { numocc' a1 a2.view[length a2.view - 1] + 1 = numocc' a2 a2.view[length a2.view - 1] }
      ()

    let ghost push_order (a1 a2 : V.t elt) =
      requires { length a1.view > 0 }
      requires { push a1 a2 }
      requires { le a2.view[div (length a1.view - 1) 2] a2.view[length a1.view] }
      requires { heap_order a1 }
      ensures { heap_order a2 }
      ()

    lemma same_occ: forall b: bag elt, x a.
      x <> a -> nb_occ x (Bag.diff b (Bag.singleton a)) = nb_occ x b

    let ghost ancestor (a : V.t elt) (i : int) =
      requires { heap_order a }
      requires { 0 <= i < length a.view }
      ensures { i > 0 -> le a.view[div (i-1) 2] a.view[i] }
      ()

    let ghost children (a : V.t elt) (i : int) =
      requires { heap_order a }
      requires { 0 <= i < length a.view }
      ensures { 2*i+1 < length a.view -> le a.view[i] a.view[2*i+1] }
      ensures { 2*i+2 < length a.view -> le a.view[i] a.view[2*i+2] }
      ()

    let ghost trans (a : V.t elt) (i : int) =
       requires { 0 <= i < length a.view }
       requires { heap_order a }
       ensures {i > 0 /\ 2*i+1 < length a.view -> le a.view[div (i-1) 2] a.view[2*i+1] }
       ensures {i > 0 /\ 2*i+2 < length a.view -> le a.view[div (i-1) 2] a.view[2*i+2] }
       ancestor a i;
       children a i;
       ()

    let create () : t
      ensures { result.bag = empty_bag }
    = { a = V.create (Some (0 : int63)) X.dummy; bag = empty_bag }

    let is_empty (h : t) : bool
      ensures { result <-> h.bag = empty_bag }
    = V.is_empty h.a

    let size (h : t) : int63
      ensures { result = card h.bag }
    = V.length h.a

    exception Empty

    let find_min_exn (h : t) : elt
      raises  { Empty -> card h.bag = 0 }
      ensures { card h.bag > 0 /\ result = minimum h }
    = if V.is_empty h.a then raise Empty;
      V.get h.a 0

    let find_min (h : t) : option elt
      ensures { match result with
      | None   -> card h.bag = 0
      | Some x -> card h.bag > 0 && x = minimum h end }
    = if V.is_empty h.a then None else Some (V.get h.a 0)

(* REMARK : some post conditions may need the instantiation of sub_occ_1 *)
   let rec move_down (a : V.t elt) (i : int63) (x : elt) : unit
      requires { heap_order a }
      requires { 0 <= i < length a.view }
      requires { i > 0 -> le a.view[div (i - 1) 2] x }
      ensures  { heap_order a }
      ensures  { forall e. e <> x -> e <> (old a).view[i] -> numocc' a e = numocc' (old a) e }
      ensures  { let o = (old a).view[i] in
                 if x = o then
                   numocc' a x = numocc' (old a) x
                 else
                   numocc' a x = numocc' (old a) x + 1 /\
                   numocc' a o = numocc' (old a) o - 1 }
      ensures  { length a.view = length (old a).view } (* Needed for delete min *)
      variant  { length a.view - i }
    = let n = V.length a in
      let q = if n=1 then -1 else (n-2)/2 in
      if i <= q then begin (* 2i+1 exists *)
        let j =
          let j = 2 * i + 1 in
          if j + 1 < n && X.compare (V.get a (j+1)) (V.get a j) < 0 then j+1 else j in
        ancestor a (to_int i);
        children a (to_int i);
        let olda = pure {a} in
        if X.compare (V.get a j) x < 0 then begin
          V.set a i (V.get a j);
          assert { substitution (old a) a i };
          sub_order olda a i;
          assert { heap_order a };
          move_down a j x
        end else begin
          V.set a i x;
          assert { substitution (old a) a i };
          sub_order olda a i
        end
      end else begin (* 2i+1 outside *)
        V.set a i x;
        assert { substitution (old a) a i };
      end

    let extract_min_exn (h : t) : elt
      raises  { Empty -> card h.bag = 0 /\ h.bag = old h.bag }
      ensures { result = minimum (old h) }
      ensures { (old h).bag = add result h.bag }
      (* Property about order is guaranteed by the invariant *)
    = try
        let x = V.pop h.a in
        let n = V.length h.a in
        if n <> 0 then begin
          let min = V.get h.a 0 in
          assert { min = minimum (old h) };
          assert { card (Bag.diff h.bag (Bag.singleton min)) = card h.bag - 1 };
          move_down h.a 0 x;
          h.bag <- Bag.diff h.bag (Bag.singleton min);
          min
        end else begin
          h.bag <- empty_bag;
          x
        end
      with V.Empty -> raise Empty end

    let delete_min_exn (h: t) : unit
      raises  { Empty -> card h.bag = 0 /\ h.bag = old h.bag }
      ensures { (old h).bag = add (minimum (old h)) h.bag }
    = let _ = extract_min_exn h in
      ()

    let rec move_up (a : V.t elt) (i : int63) (x : elt)
      requires { heap_order a }
      requires { 0 <= i < length a.view }
      requires { 0 <= 2*i + 1 < length a.view -> le x a.view[2*i + 1] }
      requires { 0 <= 2*i + 2 < length a.view -> le x a.view[2*i + 2] }
      variant { to_int i }
      ensures { heap_order a }
      ensures { forall e. e <> (old a).view[i] -> e <> x -> numocc' a e = numocc' (old a) e }
      ensures  { let o = (old a).view[i] in
                 if x = o then
                   numocc' a x = numocc' (old a) x
                 else
                   numocc' a x = numocc' (old a) x + 1 /\
                   numocc' a o = numocc' (old a) o - 1 }
      ensures { length a.view = length (old a).view } (* Needed for add *)
    = let ghost olda = pure { a } in
      if i = 0 then begin
        V.set a i x;
        assert { substitution olda a i };
        sub_order olda a i
      end
      else begin
        let j = (i-1)/2 in
        let y = V.get a j in
        children a (to_int j);
        children a (to_int i);
        if X.compare y x > 0 then begin
          V.set a i y;
          assert { substitution olda a i };
          trans olda (to_int i);
          sub_order olda a i;
          move_up a j x
        end
        else begin
          V.set a i x;
          assert { substitution olda a i };
          sub_order olda a i
        end
      end

    let insert (x : elt) (h : t) : unit
      raises  { Invalid_argument -> card h.bag >= Sys.max_array_length }
      ensures { h.bag = add x (old h).bag }
    = if size h = Sys.max_array_length then raise Invalid_argument;
      let n = V.length h.a in
      let ghost olda = pure { h.a } in
      if n = 0 then
        V.push h.a x
      else begin
        let j = (n-1)/2 in
        let y = V.get h.a j in
        children h.a (to_int j);
        if X.compare y x > 0 then begin
          V.push h.a y;
          push_order olda h.a;
          push_occ olda h.a;
          assert { numocc' h.a x = numocc' olda x };
          move_up h.a j x
        end
        else begin
          V.push h.a x;
          push_occ olda h.a;
          push_order olda h.a
        end
      end;
      assert { numocc' h.a x = numocc' olda x + 1 };
      h.bag <- add x h.bag;
    end

end

module Correct

  use Impl

  clone PQueue.Sig with
    type Make.X.t = Make.X.t,
    function Make.X.cmp = Make.X.cmp,
    goal Make.X.is_pre_order,
    val  Make.X.compare = Make.X.compare,
    type Make.t = Make.t,
    val Make.create = Make.create,
    val Make.is_empty = Make.is_empty,
    val Make.size = Make.size,
    val Make.find_min = Make.find_min,
    val Make.find_min_exn = Make.find_min_exn,
    val Make.delete_min_exn = Make.delete_min_exn,
    val Make.extract_min_exn = Make.extract_min_exn,
    val Make.insert = Make.insert,
    function Make.minimum = Make.minimum,
    goal Make.min_def,
    exception Make.Empty = Make.Empty

end
