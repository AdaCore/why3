<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.4" timelimit="10" steplimit="0" memlimit="4000"/>
<prover id="3" name="Z3" version="4.4.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file name="../Vector_impl.mlw" proved="true">
<theory name="Impl" proved="true">
 <goal name="VC t" expl="VC for t" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.01" steps="101"/></proof>
 </goal>
 <goal name="VC create" expl="VC for create" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.14" steps="400"/></proof>
 </goal>
 <goal name="VC make" expl="VC for make" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.22" steps="902"/></proof>
 </goal>
 <goal name="VC init" expl="VC for init" proved="true">
 <proof prover="3"><result status="valid" time="0.59"/></proof>
 </goal>
 <goal name="VC length" expl="VC for length" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
 <goal name="VC get" expl="VC for get" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.02" steps="25"/></proof>
 </goal>
 <goal name="VC set" expl="VC for set" proved="true">
 <proof prover="3"><result status="valid" time="0.36"/></proof>
 </goal>
 <goal name="VC unsafe_resize" expl="VC for unsafe_resize" proved="true">
 <proof prover="3"><result status="valid" time="0.81"/></proof>
 </goal>
 <goal name="VC resize" expl="VC for resize" proved="true">
 <proof prover="3"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="VC clear" expl="VC for clear" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.02" steps="20"/></proof>
 </goal>
 <goal name="VC is_empty" expl="VC for is_empty" proved="true">
 <proof prover="3"><result status="valid" time="0.20"/></proof>
 </goal>
 <goal name="VC sub" expl="VC for sub" proved="true">
 <proof prover="1"><result status="valid" time="0.14"/></proof>
 </goal>
 <goal name="VC fill" expl="VC for fill" proved="true">
 <proof prover="1"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="VC blit" expl="VC for blit" proved="true">
 <proof prover="3"><result status="valid" time="0.14"/></proof>
 </goal>
 <goal name="VC append" expl="VC for append" proved="true">
 <proof prover="1"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="VC merge_right" expl="VC for merge_right" proved="true">
 <proof prover="1"><result status="valid" time="0.15"/></proof>
 </goal>
 <goal name="VC copy" expl="VC for copy" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="670"/></proof>
 </goal>
 <goal name="VC push" expl="VC for push" proved="true">
 <proof prover="3"><result status="valid" time="0.56"/></proof>
 </goal>
 <goal name="VC pop" expl="VC for pop" proved="true">
 <proof prover="1"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="VC pop_opt" expl="VC for pop_opt" proved="true">
 <proof prover="1"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="VC top" expl="VC for top" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="96"/></proof>
 </goal>
 <goal name="VC top_opt" expl="VC for top_opt" proved="true">
 <proof prover="0"><result status="valid" time="0.20" steps="1037"/></proof>
 </goal>
 <goal name="VC fold_left" expl="VC for fold_left" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC fold_left.0" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC fold_left.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC fold_left.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fold_left.3" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="3.58"/></proof>
  <transf name="introduce_premises" proved="true" >
   <goal name="VC fold_left.3.0" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="4.07"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC fold_left.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC fold_left.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC fold_right" expl="VC for fold_right" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC fold_right.0" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fold_right.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC fold_right.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fold_right.3" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="5.31"/></proof>
  </goal>
  <goal name="VC fold_right.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC fold_right.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map" expl="VC for map" proved="true">
 <proof prover="3"><result status="valid" time="0.58"/></proof>
 </goal>
 <goal name="VC mapi" expl="VC for mapi" proved="true">
 <proof prover="3"><result status="valid" time="0.86"/></proof>
 </goal>
</theory>
<theory name="Correct" proved="true">
 <goal name="Sig.VC t" expl="VC for t" proved="true">
 <proof prover="3"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="Sig.VC create" expl="VC for create" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="205"/></proof>
 </goal>
 <goal name="Sig.VC make" expl="VC for make" proved="true">
 <proof prover="3"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="Sig.VC init" expl="VC for init" proved="true">
 <proof prover="3"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="Sig.VC unsafe_resize" expl="VC for unsafe_resize" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="152"/></proof>
 </goal>
 <goal name="Sig.VC resize" expl="VC for resize" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.05" steps="146"/></proof>
 </goal>
 <goal name="Sig.VC clear" expl="VC for clear" proved="true">
 <proof prover="3"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="Sig.VC is_empty" expl="VC for is_empty" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="49"/></proof>
 </goal>
 <goal name="Sig.VC length" expl="VC for length" proved="true">
 <proof prover="3"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="Sig.VC get" expl="VC for get" proved="true">
 <proof prover="3"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="Sig.VC set" expl="VC for set" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="361"/></proof>
 </goal>
 <goal name="Sig.VC sub" expl="VC for sub" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="188"/></proof>
 </goal>
 <goal name="Sig.VC fill" expl="VC for fill" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="249"/></proof>
 </goal>
 <goal name="Sig.VC blit" expl="VC for blit" proved="true">
 <proof prover="0"><result status="valid" time="0.15" steps="360"/></proof>
 </goal>
 <goal name="Sig.VC append" expl="VC for append" proved="true">
 <proof prover="0"><result status="valid" time="0.84" steps="1245"/></proof>
 </goal>
 <goal name="Sig.VC merge_right" expl="VC for merge_right" proved="true">
 <proof prover="0"><result status="valid" time="0.80" steps="1707"/></proof>
 </goal>
 <goal name="Sig.VC map" expl="VC for map" proved="true">
 <proof prover="3"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="Sig.VC mapi" expl="VC for mapi" proved="true">
 <proof prover="3"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="Sig.VC copy" expl="VC for copy" proved="true">
 <proof prover="3"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="Sig.VC fold_left" expl="VC for fold_left" proved="true">
 <proof prover="3"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="Sig.VC fold_right" expl="VC for fold_right" proved="true">
 <proof prover="3"><result status="valid" time="0.01"/></proof>
 </goal>
 <goal name="Sig.VC push" expl="VC for push" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="196"/></proof>
 </goal>
 <goal name="Sig.VC pop" expl="VC for pop" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="274"/></proof>
 </goal>
 <goal name="Sig.VC pop_opt" expl="VC for pop_opt" proved="true">
 <proof prover="0"><result status="valid" time="0.36" steps="540"/></proof>
 </goal>
 <goal name="Sig.VC top" expl="VC for top" proved="true">
 <proof prover="3"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="Sig.VC top_opt" expl="VC for top_opt" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="127"/></proof>
 </goal>
</theory>
</file>
</why3session>
