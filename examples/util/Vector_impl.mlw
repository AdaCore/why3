module Impl

  use import mach.array.Array63 as A
  use int.Int
  use int.ComputerDivision
  use int.MinMax as MinMax
  use seq.Seq
  use seq.FoldLeft
  use seq.FoldRight
  use mach.int.MinMax63
  use mach.int.Int63
  use mach.int.Refint63

  use list.List
  use import list.Length as L
  use list.Nth
  use list.Append
  use option.Option
  use import map.Map as M
  use ref.Ref
  use seq.Seq

  use ocaml.Sys
  use ocaml.Pervasives

  type t 'a = {
           dummy: 'a;
    mutable size: int63;
    mutable data: A.array 'a;
    ghost mutable view: seq 'a;
  } invariant { length view = size }
    invariant { forall i. 0 <= i < size -> view[i] = data[i] }
    invariant { 0 <= size <= length data <= max_array_length }
    invariant { forall i. size <= i < length data -> data[i] = dummy }
    by {
      dummy = any 'a; size = zero; data = A.make zero (any 'a); view = empty;
    }

  let create (capacity [@ocaml:optional]: option int63)
             (dummy [@ocaml:named]: 'a) : t 'a
    requires { let capacity =
                 match capacity with None -> zero | Some c -> c end in
               0 <= capacity <= max_array_length }
    ensures  { result.size = 0 }
  = let capacity = match capacity with None -> zero | Some c -> c end in
    { dummy = dummy; size = zero; data = A.make capacity dummy; view = empty }

  let make (dummy [@ocaml:optional]: option 'a) (n: int63) (x: 'a) : t 'a
    requires { 0 <= n <= max_array_length }
    returns  { a -> n = a.size = A.length a.data }
    returns  { a -> forall i. 0 <= i < n -> Seq.([]) a.view i = x }
    returns  { a -> a.dummy = match dummy with None -> x | Some d -> d end }
  = let dummy = match dummy with None -> x | Some d -> d end in
    { dummy = dummy; size = n; data = A.make n x;
      view = Seq.create (to_int n) (fun _ -> x) }

  let init (dummy [@ocaml:named]: 'a) (n: int63) (f: int63 -> 'a) : t 'a
    requires { 0 <= n <= max_array_length }
    returns  { a -> n = a.size }
    returns  { a -> forall i: int63. 0 <= i < n -> Seq.([]) a.view i = f i }
  = let a = make None n dummy in
    for i = 0 to n - 1 do
      invariant { forall j:int63. 0 <= j < i -> Seq.([]) a.view j = f j }
      invariant { forall j. 0 <= j < i -> Seq.([]) a.view j = a.data[j] }
      invariant { Seq.length a.view = a.size }
      invariant { forall j. i <= j < A.length a.data ->
                            Seq.([]) a.view j = a.dummy = a.data[j] }
      A.([]<-) a.data i (f i);
      a.view <- Seq.set a.view (to_int i) (f i);
    done;
    a

  let length (a: t 'a) : int63
    returns  { n -> n = a.size }
  = a.size

  let get (a: t 'a) (i: int63) : 'a
    requires { 0 <= i < a.size }
    returns  { x -> x = Seq.([]) a.view i }
  = A.([]) a.data i

  let set (a: t 'a) (n: int63) (x: 'a) : unit
    requires { 0 <= n < a.size }
    ensures  { a.data.A.elts = (old a).data.A.elts[n <- x] }
  = A.([]<-) a.data n x; a.view <- Seq.set a.view (to_int n) x

  val ghost seq_fill (s: seq 'a) (ofs: int) (len: int) (v: 'a) : seq 'a
    requires { 0 <= ofs /\ 0 <= len /\ ofs + len <= Seq.length s }
    ensures  { Seq.length s = Seq.length result }
    ensures  { forall i. (0 <= i < ofs \/ ofs + len <= i < Seq.length s) ->
                         Seq.get s i = Seq.get result i }
    ensures  { forall i. ofs <= i < ofs + len -> Seq.get result i = v }

  let unsafe_resize (a: t 'a) (n: int63) : unit
    requires { 0 <= n <= max_array_length }
    ensures  { n = a.size }
    ensures  { forall i. 0 <= i < MinMax.min ((old a).size) n ->
                 Seq.([]) a.view i = Seq.([]) (old a).view i }
  = let n_old = A.length a.data in
    if n <= a.size then
      (* shrink *)
      if n < n_old / 4 then begin (* reallocate into a smaller array *)
        a.data <- A.sub a.data zero n;
        a.view <- a.view[.. to_int n] end
      else begin
        A.fill a.data n (a.size - n) a.dummy;
        a.view <- a.view[.. to_int n] end
    else begin
      (* grow *)
      if n > n_old then begin (* reallocate into a larger array *)
        let n_div2 = n / 2 in
        let n' =
          if n_div2 >= n_old then
            if max_array_length / 2 >= n_div2 then n
            else max_array_length
          else if max_array_length / 2 >= n_old then 2 * n_old
          else max_array_length in
        let a' = A.make n' a.dummy in
        A.blit a.data zero a' zero a.size;
        a.data <- a';
      end;
      let ghost dummy = a.dummy in
      let a_view' = Seq.create (to_int (n - a.size)) (fun _ -> dummy) in
      a.view <- Seq.(++) a.view a_view';
    end;
    a.size <- n

  let resize (a: t 'a) (n: int63) : unit
    ensures  { n = a.size }
    ensures  { forall i. 0 <= i < MinMax.min ((old a).size) n ->
                 Seq.([]) a.view i = Seq.([]) (old a).view i }
    raises   { Invalid_argument -> not (0 <= n <= max_array_length) }
  = if not (zero <= n <= max_array_length) then raise Invalid_argument;
    unsafe_resize a n

  (** Array interface *)

  let clear (a: t 'a) : unit
    ensures  { a.size = 0 }
  = unsafe_resize a zero

  let is_empty (a: t 'a) : bool
    returns  { r -> r <-> a.size = 0 }
  = length a = zero

  let sub (a: t 'a) (ofs n: int63) : t 'a
    requires { 0 <= ofs /\ 0 <= n /\ ofs + n <= a.size }
    returns  { r -> n = r.size }
    returns  { r -> forall i. 0 <= i < n ->
                      Seq.([]) r.view i = Seq.([]) a.view (ofs + i) }
  = { dummy = a.dummy; size = n; data = A.sub a.data ofs n;
      view = a.view[to_int ofs .. to_int (ofs + n)] }

  let fill (a: t 'a) (ofs n: int63) (x: 'a) : unit
    requires { 0 <= ofs /\ 0 <= n /\ ofs + n <= a.size }
    writes   { a.data.elts, a.view }
    ensures  { forall i. (0 <= i < ofs \/ ofs + n <= i < a.size) ->
                 Seq.([]) a.view i = Seq.([]) (old a).view i }
    ensures  { forall i. ofs <= i < ofs + n -> Seq.([]) a.view i = x }
  = A.fill a.data ofs n x;
    a.view <- seq_fill a.view (to_int ofs) (to_int n) x

  val ghost seq_blit (s1: seq 'a) (ofs1: int) (s2: seq 'a) (ofs2: int)
                     (len: int) : seq 'a
    requires { 0 <= ofs1 /\ 0 <= len /\ ofs1 + len <= Seq.length s1 }
    requires { 0 <= ofs2 /\             ofs2 + len <= Seq.length s2 }
    ensures  { result = Seq.create (Seq.length s2)
                 (fun i -> if 0 <= i < ofs2 ||
                              ofs2 + len <= i < Seq.length s2 then
                                Seq.([]) s2 i
                           else Seq.([]) s1 (ofs1 + i - ofs2)) }

  let blit (a1: t 'a) (ofs1: int63) (a2: t 'a) (ofs2: int63) (n: int63)
    requires { 0 <= n }
    requires { 0 <= ofs1 /\ ofs1 + n <= a1.size }
    requires { 0 <= ofs2 /\ ofs2 + n <= a2.size }
    writes   { a2.data.elts, a2.view }
    ensures  { forall i. (0 <= i < ofs2 \/ ofs2 + n <= i < a2.size) ->
                 Seq.([]) a2.view i = Seq.([]) (old a2).view i }
    ensures  { forall i. ofs2 <= i < ofs2 + n ->
                 Seq.([]) a2.view i = Seq.([]) (old a1).view (ofs1 + i - ofs2) }
  = A.blit a1.data ofs1 a2.data ofs2 n;
    a2.view <- seq_blit a1.view (to_int ofs1) a2.view (to_int ofs2) (to_int n)

  let append (a1: t 'a) (a2: t 'a)
    requires { a1.size + a2.size <= max_array_length }
    returns  { a3 -> a3.size = a1.size + a2.size }
    returns  { a3 -> forall i. 0 <= i < a1.size ->
                       Seq.([]) a3.view i = Seq.([]) a1.view i }
    returns  { a3 -> forall i. 0 <= i < a2.size ->
                       Seq.([]) a3.view (a1.size + i) = Seq.([]) a2.view i }
  = let n1 = length a1 in
    let n2 = length a2 in
    let a = make None (n1 + n2) a1.dummy in
    blit a1 zero a zero n1;
    blit a2 zero a n1   n2;
    a

  let merge_right (a1: t 'a) (a2: t 'a)
    (* requires disjoint a1 a2 *) (*fixme: disjoint is undefined *)
    requires { a1.size + a2.size <= max_array_length }
    ensures  { a2.size = 0 }
    ensures  { a1.size = (old a1).size + (old a2).size }
    ensures  { forall i. 0 <= i < (old a1).size ->
                 Seq.([]) a1.view i = Seq.([]) (old a1).view i }
    ensures  { forall i. (old a1).size <= i < (old a2).size + (old a1).size ->
                 Seq.([]) a1.view i
               = Seq.([]) (old a2).view (i - (old a1).size) }
  = let n1 = length a1 in
    let n2 = length a2 in
    let size = n1 + n2 in
    unsafe_resize a1 size;
    blit a2 zero a1 n1 n2;
    clear a2

(*
  predicate permitted (s: seq 'a) (a: t 'a) =
    Seq.length s <= a.size /\
    forall i. 0 <= i < Seq.length s -> Seq.get s i = Seq.get a.view i

  predicate complete (s: seq 'a) (a: t 'a) =
    Seq.length s = a.size

  scope Cursor

    type cursor 'a = {
          mutable index: int63;
    ghost mutable visited: seq 'a;
    } invariant { index = Seq.length visited }
      by { index = zero; visited = empty }

    let create (a: t 'a) : cursor 'a
      ensures  { permitted result.visited a }
      ensures  { result.visited = empty }
    = { index = zero; visited = empty }

    let next (c: cursor 'a) (a: t 'a) : 'a
      requires { not (complete c.visited a) }
      requires { permitted c.visited a }
      ensures  { permitted c.visited a }
      ensures  { c.visited == snoc (old c).visited result }
    = let x = get a c.index in
      c.index <- c.index + one;
      c.visited <- snoc c.visited x;
      x

    let has_next (c: cursor 'a) (a: t 'a) : bool
      requires { permitted c.visited a }
      ensures  { result <-> not (complete c.visited a) }
    = c.index < length a

  end
*)

  let copy (a1: t 'a) : t 'a
    returns  { a2 -> a2.size = a1.size }
    returns  { a2 -> forall i. 0 <= i < a1.size ->
                       Seq.([]) a2.view i = Seq.([]) a1.view i }
  = { dummy = a1.dummy; size = a1.size; data = A.copy a1.data; view = a1.view }

  (** Stack interface *)

  let push (a: t 'a) (x: 'a) : unit
    requires { a.size < max_array_length } (* Fixme ? *)
    ensures  { a.size = (old a).size + 1 }
    ensures  { Seq.([]) a.view (a.size - 1) = x }
    ensures  { forall i. 0 <= i < (old a).size ->
                 Seq.([]) a.view i = Seq.([]) (old a).view i }
  = let n = a.size in
    unsafe_resize a (n+one);
    a.view <- Seq.set a.view (to_int n) x;
    A.([]<-) a.data n x

  exception Empty

  let pop (a: t 'a) : 'a
    raises   { Empty -> a.size = (old a).size = 0 }
    returns  { _ -> a.size = (old a).size - 1 }
    returns  { x -> x = Seq.([]) (old a).view (a.size) }
    returns  { _ -> forall i. 0 <= i < a.size ->
                      Seq.([]) a.view i = Seq.([]) (old a).view i }
  = let n = length a - one in
    if n < zero then raise Empty;
    let r = A.([]) a.data n in
    unsafe_resize a n;
    r

  let pop_opt (a: t 'a) : option 'a
    returns  { r -> match r with
                    | None   -> a.size = (old a).size = 0
                    | Some x -> a.size = (old a).size - 1 /\
                                x = Seq.([]) (old a).view (a.size) /\
                                forall i. 0 <= i < a.size ->
                                  Seq.([]) a.view i
                                = Seq.([]) (old a).view i end }
  = let n = length a - one in
    if n < zero then None else begin
      let r = A.([]) a.data n in
      unsafe_resize a n;
      Some r
    end

  let top (a: t 'a) : 'a
    requires { 0 < a.size }
    returns  { x -> x = Seq.([]) a.view (a.size - 1) }
  = let n = length a in
    A.([]) a.data (n - one)

  let top_opt (a: t 'a) : option 'a
    returns  { r -> match r with
                    | None   -> a.size = 0
                    | Some x -> x = Seq.([]) a.view (a.size - 1) end }
  = let n = length a in
    if n = zero then None else Some (A.([]) a.data (n - one))

  let fold_left (a: t 'a) (f: 'b -> 'a -> 'b) (acc: 'b) : 'b
    ensures  { result = fold_left f acc a.view }
  = let r = ref acc in
    for i = 0 to length a - 1 do
      invariant { fold_left f acc a.view = fold_left f !r a.view[i ..] }
      r := f !r (get a i)
    done;
    !r

  let fold_right (a: t 'a) (f: 'a -> 'b -> 'b) (acc: 'b) : 'b
    ensures  { result = fold_right f a.view acc }
  = let n = length a in
    let r = ref acc in
    for i = n - 1 downto 0 do
      invariant { let todo = a.view[.. i + 1] in
                  fold_right f a.view acc = fold_right f todo !r }
      r := f (get a i) !r
    done;
    !r

  (* inlining code of [init]; Why3 refuses to use
     [fun i -> f (get a i)] as it says this is stateful *)
  let map (dummy [@ocaml:named]: 'b) (a: t 'a) (f: 'a -> 'b) : t 'b
    returns  { r -> a.size = r.size }
    returns  { r -> forall i. 0 <= i < a.size ->
                      Seq.([]) r.view i = f (Seq.([]) a.view i) }
  = let n = length a in
    let a_new = make None n dummy in
    for i = 0 to n - 1 do
      invariant { Seq.length a_new.view = A.length a_new.data }
      invariant { forall j. 0 <= j < i ->
                    Seq.([]) a_new.view j = f (Seq.([]) a.view j) }
      invariant { forall j. 0 <= j < i -> a_new.data[j] = f (a.data[j]) }
      invariant { forall j. i <= j < A.length a_new.data ->
                    Seq.([]) a_new.view j = dummy }
      invariant { forall j. i <= j < A.length a_new.data ->
                    a_new.data[j] = dummy }
      let x = get a i in
      A.([]<-) a_new.data i (f x);
      a_new.view <- Seq.set a_new.view (to_int i) (f x)
    done;
    a_new

  (* TODO? Use here a ghost copy of [f] so we do not need to
           reason about int63 in the specification? *)
  let mapi (dummy [@ocaml:named]: 'b) (a: t 'a) (f: int63 -> 'a -> 'b) : t 'b
    returns  { r -> a.size = r.size }
    returns  { r -> forall i: int63. 0 <= i < a.size ->
                      Seq.([]) r.view i = f i (Seq.([]) a.view i) }
  = let n = length a in
    let a_new = make None n dummy in
    for i = 0 to n - 1 do
      invariant { Seq.length a_new.view = A.length a_new.data }
      invariant { forall j: int63. 0 <= j < i ->
                    Seq.([]) a_new.view j = f j (Seq.([]) a.view j) }
      invariant { forall j. 0 <= j < i ->
                    Seq.([]) a_new.view j = a_new.data[j] }
      invariant { forall j. i <= j < A.length a_new.data ->
                    Seq.([]) a_new.view j = dummy }
      invariant { forall j. i <= j < A.length a_new.data ->
                    Seq.([]) a_new.view j = a_new.data[j] }
      let x = get a i in
      A.([]<-) a_new.data i (f i x);
      a_new.view <- Seq.set a_new.view (to_int i) (f i x)
    done;
    a_new

end

module Correct

  use int.Int
  use seq.Seq
  use seq.OfList
  use list.Nth
  use option.Option

  use Impl

  clone Vector.Sig with
    type t = t,
    val create = create,
    val make = make,
    val init = init,
    val resize = resize,
    val unsafe_resize = unsafe_resize,
    val clear = clear,
    val is_empty = is_empty,
    val length = length,
    val get = get,
    val set = set,
    val sub = sub,
    val fill = fill,
    val blit = blit,
    val append = append,
    val merge_right = merge_right,
    val map = map,
    val mapi = mapi,
    val copy = copy,
    val fold_left = fold_left,
    val fold_right = fold_right,
    val push = push,
    val pop = pop,
    val pop_opt = pop_opt,
    val top = top,
    val top_opt = top_opt

end

(*
 * Local Variables:
 * compile-command: "make Vector_impl.ide"
 * End:
 *)