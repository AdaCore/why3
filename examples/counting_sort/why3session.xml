<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="CVC4" version="1.2" timelimit="5" memlimit="1000"/>
<prover id="1" name="Coq" version="8.4pl4" timelimit="11" memlimit="1000"/>
<prover id="2" name="CVC3" version="2.4.1" timelimit="5" memlimit="0"/>
<prover id="3" name="Alt-Ergo" version="0.95.1" timelimit="5" memlimit="0"/>
<prover id="4" name="Z3" version="2.19" timelimit="10" memlimit="0"/>
<prover id="5" name="CVC3" version="2.2" timelimit="15" memlimit="1000"/>
<prover id="6" name="Z3" version="4.3.1" timelimit="5" memlimit="4000"/>
<prover id="7" name="Z3" version="3.2" timelimit="10" memlimit="0"/>
<prover id="8" name="Alt-Ergo" version="0.95.2" timelimit="5" memlimit="1000"/>
<file name="../counting_sort.mlw">
<theory name="Spec" sum="4866aa4ee305f82fc4cecaca145184e0">
 <goal name="eqlt">
 <proof prover="1" edited="counting_sort_WP_Spec_eqlt_2.v"><result status="valid" time="2.38"/></proof>
 </goal>
</theory>
<theory name="CountingSort" sum="865e6abe69816fef0093b6f9c8509aa7">
 <goal name="WP_parameter counting_sort" expl="VC for counting_sort">
 <transf name="split_goal">
  <goal name="WP_parameter counting_sort.1" expl="1. array creation size">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.2" expl="2. assertion">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.3" expl="3. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.4" expl="4. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.5" expl="5. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.6" expl="6. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.7" expl="7. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.8" expl="8. index in array bounds">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.9" expl="9. loop invariant preservation">
  <proof prover="2" timelimit="10"><result status="valid" time="0.08"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.10" expl="10. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.11" expl="11. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.12" expl="12. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.13" expl="13. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.14" expl="14. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.15" expl="15. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.16" expl="16. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.17" expl="17. loop invariant init">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.18" expl="18. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.19" expl="19. index in array bounds">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.20" expl="20. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.21" expl="21. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.22" expl="22. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.23" expl="23. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.24" expl="24. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.25" expl="25. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.03"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.26" expl="26. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.27" expl="27. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.28" expl="28. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.29" expl="29. assertion">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.11"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.30" expl="30. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.31" expl="31. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.32" expl="32. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.33" expl="33. index in array bounds">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="6"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.34" expl="34. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.35" expl="35. index in array bounds">
  <proof prover="8"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.36" expl="36. index in array bounds">
  <proof prover="2" timelimit="60" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="5"><result status="valid" time="0.01"/></proof>
  <proof prover="6" timelimit="15" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="7" timelimit="15" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.37" expl="37. loop invariant preservation">
  <proof prover="2" timelimit="10"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.38" expl="38. assertion">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.39" expl="39. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.40" expl="40. loop invariant init">
  <proof prover="0"><result status="valid" time="0.08"/></proof>
  <proof prover="2" memlimit="1000"><result status="valid" time="0.04"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.41" expl="41. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.42" expl="42. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.43" expl="43. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.44" expl="44. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.45" expl="45. index in array bounds">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.46" expl="46. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.10"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.47" expl="47. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.48" expl="48. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.49" expl="49. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="4.59"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.50" expl="50. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.51" expl="51. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.52" expl="52. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.53" expl="53. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.54" expl="54. loop invariant init">
  <proof prover="2" memlimit="1000"><result status="valid" time="3.15"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.55" expl="55. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.56" expl="56. index in array bounds">
  <proof prover="6" memlimit="1000"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.57" expl="57. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.58" expl="58. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.59" expl="59. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="2.79"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.60" expl="60. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter counting_sort.60.1" expl="1. loop invariant preservation">
   <proof prover="6" memlimit="1000"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter counting_sort.61" expl="61. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter counting_sort.61.1" expl="1. loop invariant preservation">
   <proof prover="6" memlimit="1000"><result status="valid" time="0.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter counting_sort.62" expl="62. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.63" expl="63. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.64" expl="64. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.65" expl="65. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.66" expl="66. assertion">
  <proof prover="3" memlimit="1000"><result status="valid" time="3.66"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.67" expl="67. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.68" expl="68. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InPlaceCountingSort" sum="0f7e194423cc9d616e20bf0dab301e13">
 <goal name="WP_parameter in_place_counting_sort" expl="VC for in_place_counting_sort">
 <transf name="split_goal">
  <goal name="WP_parameter in_place_counting_sort.1" expl="1. array creation size">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.2" expl="2. assertion">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.3" expl="3. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.4" expl="4. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.5" expl="5. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.6" expl="6. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.7" expl="7. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.8" expl="8. index in array bounds">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.9" expl="9. loop invariant preservation">
  <proof prover="2" timelimit="10"><result status="valid" time="0.08"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.10" expl="10. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.11" expl="11. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.12" expl="12. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.13" expl="13. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.14" expl="14. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.15" expl="15. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.16" expl="16. loop invariant init">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.17" expl="17. loop invariant init">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.18" expl="18. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.19" expl="19. index in array bounds">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.20" expl="20. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.21" expl="21. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.22" expl="22. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.04"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.23" expl="23. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.24" expl="24. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.25" expl="25. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.26" expl="26. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.27" expl="27. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.28" expl="28. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.29" expl="29. assertion">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.11"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.30" expl="30. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.31" expl="31. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.32" expl="32. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.33" expl="33. index in array bounds">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.34" expl="34. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.35" expl="35. index in array bounds">
  <proof prover="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.36" expl="36. index in array bounds">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.37" expl="37. loop invariant preservation">
  <proof prover="2" timelimit="10"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.38" expl="38. assertion">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.39" expl="39. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.40" expl="40. loop invariant init">
  <proof prover="0"><result status="valid" time="0.08"/></proof>
  <proof prover="2" memlimit="1000"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.41" expl="41. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.42" expl="42. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.43" expl="43. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.44" expl="44. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.45" expl="45. index in array bounds">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.46" expl="46. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.10"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.47" expl="47. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.48" expl="48. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.49" expl="49. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="4.67"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.50" expl="50. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.51" expl="51. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.52" expl="52. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.53" expl="53. loop invariant init">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.54" expl="54. loop invariant init">
  <proof prover="2" memlimit="1000"><result status="valid" time="3.25"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.55" expl="55. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.56" expl="56. index in array bounds">
  <proof prover="6"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.57" expl="57. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.58" expl="58. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.59" expl="59. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="2.47"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.60" expl="60. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter in_place_counting_sort.60.1" expl="1. loop invariant preservation">
   <proof prover="6" memlimit="1000"><result status="valid" time="0.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.61" expl="61. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter in_place_counting_sort.61.1" expl="1. loop invariant preservation">
   <proof prover="6" memlimit="1000"><result status="valid" time="0.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.62" expl="62. loop invariant preservation">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.63" expl="63. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  <proof prover="6" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.64" expl="64. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.65" expl="65. loop invariant preservation">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.66" expl="66. assertion">
  <proof prover="2" memlimit="1000"><result status="valid" time="0.08"/></proof>
  <proof prover="3" memlimit="1000"><result status="valid" time="3.74"/></proof>
  <proof prover="7" timelimit="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.67" expl="67. type invariant">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.68" expl="68. postcondition">
  <proof prover="3" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Harness" sum="bb8ec9d065aa47c0593e7a58c0ea4eb8">
 <goal name="WP_parameter harness" expl="VC for harness">
 <transf name="split_goal">
  <goal name="WP_parameter harness.1" expl="1. array creation size">
  <proof prover="3" timelimit="20"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter harness.2" expl="2. index in array bounds">
  <proof prover="3" timelimit="20"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter harness.3" expl="3. precondition">
  <proof prover="3" timelimit="20"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter harness.4" expl="4. assertion">
  <proof prover="7"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter harness.5" expl="5. assertion">
  <proof prover="7"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="WP_parameter harness.6" expl="6. assertion">
  <proof prover="4"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="WP_parameter harness.7" expl="7. assertion">
  <proof prover="4"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter harness.8" expl="8. assertion">
  <proof prover="2" timelimit="10"><result status="valid" time="0.54"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
