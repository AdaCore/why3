<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" memlimit="0"/>
<prover id="1" name="Alt-Ergo" version="0.95.1" timelimit="5" memlimit="0"/>
<prover id="2" name="Z3" version="2.19" timelimit="10" memlimit="0"/>
<prover id="3" name="CVC4" version="1.4" timelimit="6" memlimit="1000"/>
<prover id="4" name="CVC3" version="2.2" timelimit="15" memlimit="1000"/>
<prover id="5" name="Z3" version="4.3.1" timelimit="5" memlimit="4000"/>
<prover id="6" name="Z3" version="3.2" timelimit="10" memlimit="0"/>
<prover id="7" name="Alt-Ergo" version="0.95.2" timelimit="5" memlimit="1000"/>
<file name="../counting_sort.mlw">
<theory name="Spec" sum="36f9506a4494eadbd060233c2a1dcef6">
 <goal name="WP_parameter eqlt" expl="VC for eqlt">
 <proof prover="3"><result status="valid" time="0.18"/></proof>
 </goal>
</theory>
<theory name="CountingSort" sum="febc1f0682761802dbe3a33827771031">
 <goal name="WP_parameter counting_sort" expl="VC for counting_sort">
 <transf name="split_goal_wp">
  <goal name="WP_parameter counting_sort.1" expl="1. array creation size">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="5"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.2" expl="2. assertion">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.3" expl="3. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.4" expl="4. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.04"/></proof>
  <proof prover="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.5" expl="5. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.6" expl="6. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.7" expl="7. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.04" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.8" expl="8. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="11"/></proof>
  <proof prover="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.9" expl="9. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.08"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.10" expl="10. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.11" expl="11. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.12" expl="12. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter counting_sort.12.1" expl="1. loop invariant preservation">
   <proof prover="5" memlimit="1000"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter counting_sort.13" expl="13. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.14" expl="14. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.15" expl="15. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.16" expl="16. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.17" expl="17. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.18" expl="18. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.19" expl="19. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.20" expl="20. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.21" expl="21. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.22" expl="22. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.23" expl="23. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.24" expl="24. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.25" expl="25. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.03"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.26" expl="26. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.27" expl="27. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.28" expl="28. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.29" expl="29. assertion">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.11"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.30" expl="30. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.31" expl="31. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.06" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.32" expl="32. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.33" expl="33. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="5"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.34" expl="34. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.35" expl="35. index in array bounds">
  <proof prover="7"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.36" expl="36. index in array bounds">
  <proof prover="0" timelimit="60" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="4"><result status="valid" time="0.01"/></proof>
  <proof prover="5" timelimit="15" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="6" timelimit="15" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.37" expl="37. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.38" expl="38. assertion">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.39" expl="39. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.40" expl="40. loop invariant init">
  <proof prover="5" timelimit="11" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.41" expl="41. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.42" expl="42. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.43" expl="43. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.44" expl="44. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.45" expl="45. index in array bounds">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.46" expl="46. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.47" expl="47. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.48" expl="48. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.49" expl="49. loop invariant preservation">
  <proof prover="5" timelimit="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.50" expl="50. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.51" expl="51. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.52" expl="52. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.53" expl="53. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.54" expl="54. loop invariant init">
  <proof prover="5" timelimit="11" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.55" expl="55. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.56" expl="56. index in array bounds">
  <proof prover="5" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.57" expl="57. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="21"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.58" expl="58. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.59" expl="59. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.05" steps="33"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.60" expl="60. loop invariant preservation">
  <metas>
   <ts_pos name="real" arity="0" id="2"
    ip_theory="BuiltIn">
    <ip_library name="why3"/>
    <ip_library name="BuiltIn"/>
    <ip_qualid name="real"/>
   </ts_pos>
   <ts_pos name="pred" arity="1" id="8"
    ip_theory="HighOrd">
    <ip_library name="why3"/>
    <ip_library name="HighOrd"/>
    <ip_qualid name="pred"/>
   </ts_pos>
   <ts_pos name="tuple0" arity="0" id="20"
    ip_theory="Tuple0">
    <ip_library name="why3"/>
    <ip_library name="Tuple0"/>
    <ip_qualid name="tuple0"/>
   </ts_pos>
   <ts_pos name="unit" arity="0" id="21"
    ip_theory="Unit">
    <ip_library name="why3"/>
    <ip_library name="Unit"/>
    <ip_qualid name="unit"/>
   </ts_pos>
   <ts_pos name="&apos;mark" arity="0" id="54"
    ip_theory="Mark">
    <ip_library name="why3"/>
    <ip_library name="Mark"/>
    <ip_qualid name="&apos;mark"/>
   </ts_pos>
   <ts_pos name="ref" arity="1" id="5295"
    ip_theory="Ref">
    <ip_library name="ref"/>
    <ip_qualid name="ref"/>
   </ts_pos>
   <ls_pos name="infix =" id="10"
    ip_theory="BuiltIn">
    <ip_library name="why3"/>
    <ip_library name="BuiltIn"/>
    <ip_qualid name="infix ="/>
   </ls_pos>
   <ls_pos name="infix @" id="15"
    ip_theory="HighOrd">
    <ip_library name="why3"/>
    <ip_library name="HighOrd"/>
    <ip_qualid name="infix @"/>
   </ls_pos>
   <ls_pos name="zero" id="297"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="zero"/>
   </ls_pos>
   <ls_pos name="one" id="298"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="one"/>
   </ls_pos>
   <ls_pos name="infix &lt;" id="299"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="infix &lt;"/>
   </ls_pos>
   <ls_pos name="infix +" id="1468"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="infix +"/>
   </ls_pos>
   <ls_pos name="prefix -" id="1469"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="prefix -"/>
   </ls_pos>
   <ls_pos name="infix *" id="1470"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="infix *"/>
   </ls_pos>
   <ls_pos name="numof" id="1991"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="numof"/>
   </ls_pos>
   <ls_pos name="get" id="2250"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="get"/>
   </ls_pos>
   <ls_pos name="set" id="2253"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="set"/>
   </ls_pos>
   <ls_pos name="const" id="2304"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="const"/>
   </ls_pos>
   <ls_pos name="set" id="2699"
    ip_theory="Array">
    <ip_library name="array"/>
    <ip_qualid name="set"/>
   </ls_pos>
   <ls_pos name="mixfix [&lt;-]" id="2741"
    ip_theory="Array">
    <ip_library name="array"/>
    <ip_qualid name="mixfix [&lt;-]"/>
   </ls_pos>
   <ls_pos name="make" id="2842"
    ip_theory="Array">
    <ip_library name="array"/>
    <ip_qualid name="make"/>
   </ls_pos>
   <ls_pos name="sorted_sub" id="3031"
    ip_theory="IntArraySorted">
    <ip_library name="array"/>
    <ip_qualid name="sorted_sub"/>
   </ls_pos>
   <ls_pos name="sorted" id="3047"
    ip_theory="IntArraySorted">
    <ip_library name="array"/>
    <ip_qualid name="sorted"/>
   </ls_pos>
   <ls_pos name="k" id="5035" ip_theory="Spec">
    <ip_qualid name="k"/>
   </ls_pos>
   <ls_pos name="permut" id="5277"
    ip_theory="Spec">
    <ip_qualid name="permut"/>
   </ls_pos>
   <ls_pos name="prefix !" id="5301"
    ip_theory="Ref">
    <ip_library name="ref"/>
    <ip_qualid name="prefix !"/>
   </ls_pos>
   <pr_pos name="Assoc" id="1471"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Assoc"/>
   </pr_pos>
   <pr_pos name="Unit_def_l" id="1478"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Unit_def_l"/>
   </pr_pos>
   <pr_pos name="Unit_def_r" id="1481"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Unit_def_r"/>
   </pr_pos>
   <pr_pos name="Inv_def_l" id="1484"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Inv_def_l"/>
   </pr_pos>
   <pr_pos name="Inv_def_r" id="1487"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Inv_def_r"/>
   </pr_pos>
   <pr_pos name="Comm" id="1490"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Comm"/>
    <ip_qualid name="Comm"/>
   </pr_pos>
   <pr_pos name="Assoc" id="1495"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Assoc"/>
    <ip_qualid name="Assoc"/>
   </pr_pos>
   <pr_pos name="Mul_distr_l" id="1502"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Mul_distr_l"/>
   </pr_pos>
   <pr_pos name="Mul_distr_r" id="1509"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Mul_distr_r"/>
   </pr_pos>
   <pr_pos name="Comm" id="1527"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Comm"/>
    <ip_qualid name="Comm"/>
   </pr_pos>
   <pr_pos name="Unitary" id="1532"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Unitary"/>
   </pr_pos>
   <pr_pos name="NonTrivialRing" id="1535"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="NonTrivialRing"/>
   </pr_pos>
   <pr_pos name="Refl" id="1547"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Refl"/>
   </pr_pos>
   <pr_pos name="Trans" id="1550"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Trans"/>
   </pr_pos>
   <pr_pos name="Antisymm" id="1557"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Antisymm"/>
   </pr_pos>
   <pr_pos name="Total" id="1562"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Total"/>
   </pr_pos>
   <pr_pos name="ZeroLessOne" id="1567"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="ZeroLessOne"/>
   </pr_pos>
   <pr_pos name="CompatOrderAdd" id="1568"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CompatOrderAdd"/>
   </pr_pos>
   <pr_pos name="CompatOrderMult" id="1575"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CompatOrderMult"/>
   </pr_pos>
   <pr_pos name="Numof_empty" id="1995"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_empty"/>
   </pr_pos>
   <pr_pos name="Numof_right_add" id="2009"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_right_add"/>
   </pr_pos>
   <pr_pos name="Numof_bounds" id="2016"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_bounds"/>
   </pr_pos>
   <pr_pos name="Numof_append" id="2023"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_append"/>
   </pr_pos>
   <pr_pos name="Numof_left_no_add" id="2032"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_left_no_add"/>
   </pr_pos>
   <pr_pos name="Numof_left_add" id="2039"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_left_add"/>
   </pr_pos>
   <pr_pos name="Empty" id="2046"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Empty"/>
   </pr_pos>
   <pr_pos name="Full" id="2055"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Full"/>
   </pr_pos>
   <pr_pos name="numof_increasing" id="2064"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="numof_increasing"/>
   </pr_pos>
   <pr_pos name="numof_strictly_increasing" id="2073"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="numof_strictly_increasing"/>
   </pr_pos>
   <pr_pos name="Select_eq" id="2286"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="Select_eq"/>
   </pr_pos>
   <pr_pos name="Const" id="2306"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="Const"/>
   </pr_pos>
   <pr_pos name="k_positive" id="5036"
    ip_theory="Spec">
    <ip_qualid name="k_positive"/>
   </pr_pos>
   <pr_pos name="eqlt" id="5272" ip_theory="Spec">
    <ip_qualid name="eqlt"/>
   </pr_pos>
   <meta name="remove_logic">
    <meta_arg_ls id="10"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="15"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="297"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="298"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="299"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1468"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1469"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1470"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1991"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2250"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2253"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2304"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2699"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2741"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2842"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="3031"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="3047"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="5035"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="5277"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="5301"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1471"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1478"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1481"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1484"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1487"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1490"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1495"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1502"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1509"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1527"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1532"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1535"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1547"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1550"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1557"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1562"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1567"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1568"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1575"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1995"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2009"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2016"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2023"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2032"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2039"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2046"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2055"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2064"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2073"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2286"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2306"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="5036"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="5272"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="2"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="8"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="20"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="21"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="54"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="5295"/>
   </meta>
   <goal name="WP_parameter counting_sort.60" expl="60. loop invariant preservation">
   <transf name="eliminate_builtin">
    <goal name="WP_parameter counting_sort.60.1" expl="1. loop invariant preservation">
    <proof prover="2" timelimit="6" memlimit="1000"><result status="valid" time="0.19"/></proof>
    <proof prover="5" timelimit="6" memlimit="1000"><result status="valid" time="0.04"/></proof>
    </goal>
   </transf>
   </goal>
  </metas>
  </goal>
  <goal name="WP_parameter counting_sort.61" expl="61. loop invariant preservation">
  <proof prover="5" memlimit="1000"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.62" expl="62. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.63" expl="63. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.04" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.64" expl="64. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.65" expl="65. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.66" expl="66. assertion">
  <proof prover="3" timelimit="11"><result status="valid" time="0.07"/></proof>
  <proof prover="5" timelimit="11" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.67" expl="67. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.68" expl="68. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InPlaceCountingSort" sum="f304df24de45c8e662b8fc20629c9d4d">
 <goal name="WP_parameter in_place_counting_sort" expl="VC for in_place_counting_sort">
 <transf name="split_goal_wp">
  <goal name="WP_parameter in_place_counting_sort.1" expl="1. array creation size">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="3"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.2" expl="2. assertion">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="5"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.3" expl="3. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="6"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.4" expl="4. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.05"/></proof>
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.5" expl="5. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.6" expl="6. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.7" expl="7. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.8" expl="8. index in array bounds">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.05" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.9" expl="9. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.08"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.10" expl="10. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.11" expl="11. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.12" expl="12. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.16" steps="116"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.13" expl="13. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.14" expl="14. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.15" expl="15. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.16" expl="16. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.17" expl="17. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.18" expl="18. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.19" expl="19. index in array bounds">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.20" expl="20. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.21" expl="21. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.22" expl="22. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.04"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.23" expl="23. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter in_place_counting_sort.23.1" expl="1. loop invariant preservation">
   <proof prover="5" memlimit="1000"><result status="valid" time="0.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.24" expl="24. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter in_place_counting_sort.24.1" expl="1. loop invariant preservation">
   <proof prover="5" memlimit="1000"><result status="valid" time="0.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.25" expl="25. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.26" expl="26. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.27" expl="27. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.28" expl="28. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.29" expl="29. assertion">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.11"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.30" expl="30. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.31" expl="31. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.05" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.32" expl="32. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.33" expl="33. index in array bounds">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.34" expl="34. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.35" expl="35. index in array bounds">
  <proof prover="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.36" expl="36. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.37" expl="37. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.38" expl="38. assertion">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="5"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.39" expl="39. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="5"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.40" expl="40. loop invariant init">
  <proof prover="3"><result status="valid" time="2.66"/></proof>
  <proof prover="5" timelimit="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.41" expl="41. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.42" expl="42. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.43" expl="43. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.44" expl="44. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.45" expl="45. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.46" expl="46. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.47" expl="47. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.48" expl="48. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.49" expl="49. loop invariant preservation">
  <proof prover="5" timelimit="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.50" expl="50. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.51" expl="51. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.52" expl="52. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.53" expl="53. loop invariant init">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.54" expl="54. loop invariant init">
  <proof prover="5" timelimit="6" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.55" expl="55. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.56" expl="56. index in array bounds">
  <proof prover="5"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.57" expl="57. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.58" expl="58. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.59" expl="59. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.05" steps="31"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.60" expl="60. loop invariant preservation">
  <transf name="introduce_premises">
   <goal name="WP_parameter in_place_counting_sort.60.1" expl="1.">
   <proof prover="2" timelimit="11" memlimit="1000"><result status="valid" time="0.29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.61" expl="61. loop invariant preservation">
  <proof prover="5" timelimit="6" memlimit="1000"><result status="valid" time="3.17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.62" expl="62. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.63" expl="63. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.03" steps="13"/></proof>
  <proof prover="5" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.64" expl="64. loop invariant preservation">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.01" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.65" expl="65. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.66" expl="66. assertion">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.08"/></proof>
  <proof prover="6" timelimit="5" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.67" expl="67. type invariant">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.68" expl="68. postcondition">
  <proof prover="1" memlimit="1000"><result status="valid" time="0.04" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Harness" sum="ff03e63effc79a3b1114a738f539d403">
 <goal name="WP_parameter harness" expl="VC for harness">
 <transf name="split_goal_wp">
  <goal name="WP_parameter harness.1" expl="1. array creation size">
  <proof prover="1" timelimit="20"><result status="valid" time="0.02" steps="2"/></proof>
  </goal>
  <goal name="WP_parameter harness.2" expl="2. index in array bounds">
  <proof prover="1" timelimit="20"><result status="valid" time="0.02" steps="3"/></proof>
  </goal>
  <goal name="WP_parameter harness.3" expl="3. precondition">
  <proof prover="1" timelimit="20"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter harness.4" expl="4. assertion">
  <proof prover="6"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="WP_parameter harness.5" expl="5. assertion">
  <proof prover="6"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="WP_parameter harness.6" expl="6. assertion">
  <proof prover="2"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="WP_parameter harness.7" expl="7. assertion">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter harness.8" expl="8. assertion">
  <proof prover="0" timelimit="10"><result status="valid" time="2.02"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
