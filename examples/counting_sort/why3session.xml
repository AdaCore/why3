<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" memlimit="0"/>
<prover id="3" name="CVC4" version="1.4" timelimit="6" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="0.99.1" timelimit="5" memlimit="0"/>
<prover id="9" name="Z3" version="4.3.2" timelimit="5" memlimit="4000"/>
<file name="../counting_sort.mlw" expanded="true">
<theory name="Spec" sum="227a671f435b8af65efe11a2ebab055e" expanded="true">
 <goal name="WP_parameter eqlt" expl="VC for eqlt">
 <proof prover="3"><result status="valid" time="0.18"/></proof>
 </goal>
</theory>
<theory name="CountingSort" sum="0f7bd60a895daf4d1fc19f6a63895fe3" expanded="true">
 <goal name="WP_parameter counting_sort" expl="VC for counting_sort">
 <transf name="split_goal_wp">
  <goal name="WP_parameter counting_sort.1" expl="1. array creation size">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="5"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.2" expl="2. assertion">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.3" expl="3. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.4" expl="4. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.04"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.5" expl="5. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.6" expl="6. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.7" expl="7. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.04" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.8" expl="8. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="13"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.9" expl="9. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.08"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.36" steps="112"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.10" expl="10. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.11" expl="11. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.12" expl="12. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter counting_sort.12.1" expl="1. loop invariant preservation">
   <proof prover="9" memlimit="1000"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter counting_sort.13" expl="13. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.14" expl="14. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.15" expl="15. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.16" expl="16. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="21"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.17" expl="17. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.18" expl="18. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.19" expl="19. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.20" expl="20. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.21" expl="21. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.22" expl="22. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.23" expl="23. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.24" expl="24. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="23"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.25" expl="25. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.03"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="48"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.26" expl="26. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.27" expl="27. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.28" expl="28. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="29"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.29" expl="29. assertion">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.11"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="40"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.30" expl="30. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.31" expl="31. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.06" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.32" expl="32. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.33" expl="33. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="9"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.34" expl="34. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.35" expl="35. index in array bounds">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.36" expl="36. index in array bounds">
  <proof prover="0" timelimit="60" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="9" timelimit="15" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.37" expl="37. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.38" expl="38. assertion">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.39" expl="39. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.40" expl="40. loop invariant init">
  <proof prover="9" timelimit="11" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.41" expl="41. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.42" expl="42. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.43" expl="43. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.44" expl="44. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.45" expl="45. index in array bounds">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.46" expl="46. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.47" expl="47. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.48" expl="48. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.49" expl="49. loop invariant preservation">
  <proof prover="9" timelimit="6" memlimit="1000"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.50" expl="50. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.51" expl="51. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="15"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.52" expl="52. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.53" expl="53. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.54" expl="54. loop invariant init">
  <proof prover="9" timelimit="11" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.55" expl="55. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.56" expl="56. index in array bounds">
  <proof prover="9" memlimit="1000"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.57" expl="57. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.58" expl="58. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="47"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.59" expl="59. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.05" steps="39"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.60" expl="60. loop invariant preservation">
  <metas>
   <ts_pos name="real" arity="0" id="2"
    ip_theory="BuiltIn">
    <ip_library name="why3"/>
    <ip_library name="BuiltIn"/>
    <ip_qualid name="real"/>
   </ts_pos>
   <ts_pos name="pred" arity="1" id="8"
    ip_theory="HighOrd">
    <ip_library name="why3"/>
    <ip_library name="HighOrd"/>
    <ip_qualid name="pred"/>
   </ts_pos>
   <ts_pos name="tuple0" arity="0" id="20"
    ip_theory="Tuple0">
    <ip_library name="why3"/>
    <ip_library name="Tuple0"/>
    <ip_qualid name="tuple0"/>
   </ts_pos>
   <ts_pos name="unit" arity="0" id="21"
    ip_theory="Unit">
    <ip_library name="why3"/>
    <ip_library name="Unit"/>
    <ip_qualid name="unit"/>
   </ts_pos>
   <ts_pos name="&apos;mark" arity="0" id="64"
    ip_theory="Mark">
    <ip_library name="why3"/>
    <ip_library name="Mark"/>
    <ip_qualid name="&apos;mark"/>
   </ts_pos>
   <ts_pos name="ref" arity="1" id="5368"
    ip_theory="Ref">
    <ip_library name="ref"/>
    <ip_qualid name="ref"/>
   </ts_pos>
   <ls_pos name="infix =" id="10"
    ip_theory="BuiltIn">
    <ip_library name="why3"/>
    <ip_library name="BuiltIn"/>
    <ip_qualid name="infix ="/>
   </ls_pos>
   <ls_pos name="infix @" id="15"
    ip_theory="HighOrd">
    <ip_library name="why3"/>
    <ip_library name="HighOrd"/>
    <ip_qualid name="infix @"/>
   </ls_pos>
   <ls_pos name="zero" id="307"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="zero"/>
   </ls_pos>
   <ls_pos name="one" id="308"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="one"/>
   </ls_pos>
   <ls_pos name="infix &lt;" id="309"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="infix &lt;"/>
   </ls_pos>
   <ls_pos name="infix +" id="1478"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="infix +"/>
   </ls_pos>
   <ls_pos name="prefix -" id="1479"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="prefix -"/>
   </ls_pos>
   <ls_pos name="infix *" id="1480"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="infix *"/>
   </ls_pos>
   <ls_pos name="numof" id="2001"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="numof"/>
   </ls_pos>
   <ls_pos name="get" id="2337"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="get"/>
   </ls_pos>
   <ls_pos name="set" id="2340"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="set"/>
   </ls_pos>
   <ls_pos name="set" id="2787"
    ip_theory="Array">
    <ip_library name="array"/>
    <ip_qualid name="set"/>
   </ls_pos>
   <ls_pos name="mixfix [&lt;-]" id="2829"
    ip_theory="Array">
    <ip_library name="array"/>
    <ip_qualid name="mixfix [&lt;-]"/>
   </ls_pos>
   <ls_pos name="sorted_sub" id="3108"
    ip_theory="IntArraySorted">
    <ip_library name="array"/>
    <ip_qualid name="sorted_sub"/>
   </ls_pos>
   <ls_pos name="sorted" id="3124"
    ip_theory="IntArraySorted">
    <ip_library name="array"/>
    <ip_qualid name="sorted"/>
   </ls_pos>
   <ls_pos name="k" id="5112" ip_theory="Spec">
    <ip_qualid name="k"/>
   </ls_pos>
   <ls_pos name="permut" id="5350"
    ip_theory="Spec">
    <ip_qualid name="permut"/>
   </ls_pos>
   <ls_pos name="prefix !" id="5374"
    ip_theory="Ref">
    <ip_library name="ref"/>
    <ip_qualid name="prefix !"/>
   </ls_pos>
   <pr_pos name="Assoc" id="1481"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Assoc"/>
   </pr_pos>
   <pr_pos name="Unit_def_l" id="1488"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Unit_def_l"/>
   </pr_pos>
   <pr_pos name="Unit_def_r" id="1491"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Unit_def_r"/>
   </pr_pos>
   <pr_pos name="Inv_def_l" id="1494"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Inv_def_l"/>
   </pr_pos>
   <pr_pos name="Inv_def_r" id="1497"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Inv_def_r"/>
   </pr_pos>
   <pr_pos name="Comm" id="1500"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CommutativeGroup"/>
    <ip_qualid name="Comm"/>
    <ip_qualid name="Comm"/>
   </pr_pos>
   <pr_pos name="Assoc" id="1505"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Assoc"/>
    <ip_qualid name="Assoc"/>
   </pr_pos>
   <pr_pos name="Mul_distr_l" id="1512"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Mul_distr_l"/>
   </pr_pos>
   <pr_pos name="Mul_distr_r" id="1519"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Mul_distr_r"/>
   </pr_pos>
   <pr_pos name="Comm" id="1537"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Comm"/>
    <ip_qualid name="Comm"/>
   </pr_pos>
   <pr_pos name="Unitary" id="1542"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Unitary"/>
   </pr_pos>
   <pr_pos name="NonTrivialRing" id="1545"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="NonTrivialRing"/>
   </pr_pos>
   <pr_pos name="Refl" id="1557"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Refl"/>
   </pr_pos>
   <pr_pos name="Trans" id="1560"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Trans"/>
   </pr_pos>
   <pr_pos name="Antisymm" id="1567"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Antisymm"/>
   </pr_pos>
   <pr_pos name="Total" id="1572"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="Total"/>
   </pr_pos>
   <pr_pos name="ZeroLessOne" id="1577"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="ZeroLessOne"/>
   </pr_pos>
   <pr_pos name="CompatOrderAdd" id="1578"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CompatOrderAdd"/>
   </pr_pos>
   <pr_pos name="CompatOrderMult" id="1585"
    ip_theory="Int">
    <ip_library name="int"/>
    <ip_qualid name="CompatOrderMult"/>
   </pr_pos>
   <pr_pos name="Numof_empty" id="2005"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_empty"/>
   </pr_pos>
   <pr_pos name="Numof_right_add" id="2019"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_right_add"/>
   </pr_pos>
   <pr_pos name="Numof_bounds" id="2026"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_bounds"/>
   </pr_pos>
   <pr_pos name="Numof_append" id="2033"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_append"/>
   </pr_pos>
   <pr_pos name="Numof_left_no_add" id="2042"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_left_no_add"/>
   </pr_pos>
   <pr_pos name="Numof_left_add" id="2049"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Numof_left_add"/>
   </pr_pos>
   <pr_pos name="Empty" id="2056"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Empty"/>
   </pr_pos>
   <pr_pos name="Full" id="2065"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="Full"/>
   </pr_pos>
   <pr_pos name="numof_increasing" id="2074"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="numof_increasing"/>
   </pr_pos>
   <pr_pos name="numof_strictly_increasing" id="2083"
    ip_theory="NumOf">
    <ip_library name="int"/>
    <ip_qualid name="numof_strictly_increasing"/>
   </pr_pos>
   <pr_pos name="Select_eq" id="2373"
    ip_theory="Map">
    <ip_library name="map"/>
    <ip_qualid name="Select_eq"/>
   </pr_pos>
   <pr_pos name="k_positive" id="5113"
    ip_theory="Spec">
    <ip_qualid name="k_positive"/>
   </pr_pos>
   <pr_pos name="eqlt" id="5345" ip_theory="Spec">
    <ip_qualid name="eqlt"/>
   </pr_pos>
   <meta name="remove_logic">
    <meta_arg_ls id="10"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="15"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="307"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="308"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="309"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1478"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1479"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="1480"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2001"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2337"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2340"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2787"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="2829"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="3108"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="3124"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="5112"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="5350"/>
   </meta>
   <meta name="remove_logic">
    <meta_arg_ls id="5374"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1481"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1488"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1491"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1494"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1497"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1500"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1505"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1512"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1519"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1537"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1542"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1545"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1557"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1560"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1567"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1572"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1577"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1578"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="1585"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2005"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2019"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2026"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2033"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2042"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2049"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2056"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2065"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2074"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2083"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="2373"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="5113"/>
   </meta>
   <meta name="remove_prop">
    <meta_arg_pr id="5345"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="2"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="8"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="20"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="21"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="64"/>
   </meta>
   <meta name="remove_type">
    <meta_arg_ts id="5368"/>
   </meta>
   <goal name="WP_parameter counting_sort.60" expl="60. loop invariant preservation">
   <transf name="eliminate_builtin">
    <goal name="WP_parameter counting_sort.60.1" expl="1. loop invariant preservation">
    <proof prover="9" timelimit="6" memlimit="1000"><result status="valid" time="0.29"/></proof>
    </goal>
   </transf>
   </goal>
  </metas>
  </goal>
  <goal name="WP_parameter counting_sort.61" expl="61. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter counting_sort.61.1" expl="1. loop invariant preservation">
   <proof prover="9" timelimit="30" memlimit="1000"><result status="valid" time="0.21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter counting_sort.62" expl="62. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.63" expl="63. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.04" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.64" expl="64. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.65" expl="65. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.66" expl="66. assertion">
  <proof prover="3" timelimit="11"><result status="valid" time="0.07"/></proof>
  <proof prover="9" timelimit="11" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.67" expl="67. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter counting_sort.68" expl="68. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InPlaceCountingSort" sum="0d74062acc3a45fa8663d2128f038a8f" expanded="true">
 <goal name="WP_parameter in_place_counting_sort" expl="VC for in_place_counting_sort">
 <transf name="split_goal_wp">
  <goal name="WP_parameter in_place_counting_sort.1" expl="1. array creation size">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="3"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.2" expl="2. assertion">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.3" expl="3. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.4" expl="4. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.05"/></proof>
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.5" expl="5. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.6" expl="6. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.7" expl="7. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.8" expl="8. index in array bounds">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.05" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.9" expl="9. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.08"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.22" steps="140"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.10" expl="10. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.11" expl="11. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.12" expl="12. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.16" steps="157"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.13" expl="13. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.14" expl="14. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.15" expl="15. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.16" expl="16. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.17" expl="17. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.18" expl="18. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.19" expl="19. index in array bounds">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.20" expl="20. assertion">
  <proof prover="0" timelimit="10" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="3" timelimit="10"><result status="valid" time="0.02"/></proof>
  <proof prover="8" timelimit="10" memlimit="1000"><result status="valid" time="0.02" steps="23"/></proof>
  <proof prover="9" timelimit="10" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.21" expl="21. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.22" expl="22. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="21"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.23" expl="23. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.04"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.24" expl="24. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter in_place_counting_sort.24.1" expl="1. loop invariant preservation">
   <proof prover="9" memlimit="1000"><result status="valid" time="0.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.25" expl="25. loop invariant preservation">
  <transf name="inline_goal">
   <goal name="WP_parameter in_place_counting_sort.25.1" expl="1. loop invariant preservation">
   <proof prover="9" memlimit="1000"><result status="valid" time="0.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.26" expl="26. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="54"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.27" expl="27. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.28" expl="28. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.29" expl="29. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.30" expl="30. assertion">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.11"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="38"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.31" expl="31. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.32" expl="32. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.05" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.33" expl="33. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.34" expl="34. index in array bounds">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.35" expl="35. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.36" expl="36. index in array bounds">
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.37" expl="37. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.38" expl="38. loop invariant preservation">
  <proof prover="0" timelimit="10"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.39" expl="39. assertion">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.40" expl="40. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="7"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.41" expl="41. loop invariant init">
  <proof prover="3"><result status="valid" time="3.44"/></proof>
  <proof prover="9" timelimit="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.42" expl="42. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.43" expl="43. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.44" expl="44. loop invariant init">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.45" expl="45. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.46" expl="46. index in array bounds">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.47" expl="47. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.48" expl="48. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.49" expl="49. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.50" expl="50. loop invariant preservation">
  <proof prover="9" timelimit="6" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.51" expl="51. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.52" expl="52. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.53" expl="53. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="17"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.54" expl="54. loop invariant init">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.55" expl="55. loop invariant init">
  <proof prover="9" timelimit="6" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.56" expl="56. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.57" expl="57. index in array bounds">
  <proof prover="9"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.58" expl="58. assertion">
  <proof prover="0" timelimit="10" memlimit="1000"><result status="valid" time="6.43"/></proof>
  <proof prover="3" timelimit="10"><result status="valid" time="5.81"/></proof>
  <proof prover="8" timelimit="10" memlimit="1000"><result status="valid" time="0.29" steps="116"/></proof>
  <proof prover="9" timelimit="10" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.59" expl="59. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.60" expl="60. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="45"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.61" expl="61. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.05" steps="37"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.62" expl="62. loop invariant preservation">
  <proof prover="9" timelimit="10" memlimit="1000"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.63" expl="63. loop invariant preservation">
  <proof prover="9" timelimit="15" memlimit="1000"><result status="valid" time="10.77"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.64" expl="64. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.65" expl="65. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.03" steps="16"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.66" expl="66. loop invariant preservation">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.67" expl="67. loop invariant preservation">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.01"/></proof>
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.68" expl="68. assertion">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.08"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.69" expl="69. type invariant">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="WP_parameter in_place_counting_sort.70" expl="70. postcondition">
  <proof prover="8" memlimit="1000"><result status="valid" time="0.04" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Harness" sum="b1ab92c80626a80698a772b732a57a00" expanded="true">
 <goal name="WP_parameter harness" expl="VC for harness">
 <transf name="split_goal_wp">
  <goal name="WP_parameter harness.1" expl="1. array creation size">
  <proof prover="8" timelimit="20"><result status="valid" time="0.02" steps="2"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.00"/></proof>
  </goal>
  <goal name="WP_parameter harness.2" expl="2. index in array bounds">
  <proof prover="8" timelimit="20"><result status="valid" time="0.02" steps="5"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter harness.3" expl="3. precondition">
  <proof prover="8" timelimit="20"><result status="valid" time="0.02" steps="19"/></proof>
  <proof prover="9" memlimit="1000"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="WP_parameter harness.4" expl="4. assertion">
  <proof prover="9" timelimit="30" memlimit="1000"><result status="valid" time="13.20"/></proof>
  </goal>
  <goal name="WP_parameter harness.5" expl="5. assertion">
  <proof prover="9" memlimit="1000"><result status="valid" time="1.35"/></proof>
  </goal>
  <goal name="WP_parameter harness.6" expl="6. assertion">
  <proof prover="9" memlimit="1000"><result status="valid" time="6.91"/></proof>
  </goal>
  <goal name="WP_parameter harness.7" expl="7. assertion">
  <proof prover="9" memlimit="1000"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="WP_parameter harness.8" expl="8. assertion">
  <proof prover="9" memlimit="1000"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
