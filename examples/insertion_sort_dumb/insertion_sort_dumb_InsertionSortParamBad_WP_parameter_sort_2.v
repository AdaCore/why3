(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.
Require map.Map.

(* Why3 assumption *)
Inductive array (a:Type) {a_WT:WhyType a} :=
  | mk_array : Z -> (map.Map.map Z a) -> array a.
Axiom array_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (array a).
Existing Instance array_WhyType.
Implicit Arguments mk_array [[a] [a_WT]].

(* Why3 assumption *)
Definition elts {a:Type} {a_WT:WhyType a}(v:(array a)): (map.Map.map Z a) :=
  match v with
  | (mk_array x x1) => x1
  end.

(* Why3 assumption *)
Definition length {a:Type} {a_WT:WhyType a}(v:(array a)): Z :=
  match v with
  | (mk_array x x1) => x
  end.

(* Why3 assumption *)
Definition get {a:Type} {a_WT:WhyType a}(a1:(array a)) (i:Z): a :=
  (map.Map.get (elts a1) i).

(* Why3 assumption *)
Definition exchange {a:Type} {a_WT:WhyType a}(a1:(map.Map.map Z a))
  (a2:(map.Map.map Z a)) (i:Z) (j:Z): Prop := ((map.Map.get a1
  i) = (map.Map.get a2 j)) /\ (((map.Map.get a2 i) = (map.Map.get a1 j)) /\
  forall (k:Z), ((~ (k = i)) /\ ~ (k = j)) -> ((map.Map.get a1
  k) = (map.Map.get a2 k))).

(* Why3 assumption *)
Inductive permut_sub{a:Type} {a_WT:WhyType a}  : (map.Map.map Z a)
  -> (map.Map.map Z a) -> Z -> Z -> Prop :=
  | permut_refl : forall (a1:(map.Map.map Z a)), forall (l:Z) (u:Z),
      (permut_sub a1 a1 l u)
  | permut_sym : forall (a1:(map.Map.map Z a)) (a2:(map.Map.map Z a)),
      forall (l:Z) (u:Z), (permut_sub a1 a2 l u) -> (permut_sub a2 a1 l u)
  | permut_trans : forall (a1:(map.Map.map Z a)) (a2:(map.Map.map Z a))
      (a3:(map.Map.map Z a)), forall (l:Z) (u:Z), (permut_sub a1 a2 l u) ->
      ((permut_sub a2 a3 l u) -> (permut_sub a1 a3 l u))
  | permut_exchange : forall (a1:(map.Map.map Z a)) (a2:(map.Map.map Z a)),
      forall (l:Z) (u:Z) (i:Z) (j:Z), ((l <= i)%Z /\ (i < u)%Z) ->
      (((l <= j)%Z /\ (j < u)%Z) -> ((exchange a1 a2 i j) -> (permut_sub a1
      a2 l u))).

(* Why3 assumption *)
Definition permut {a:Type} {a_WT:WhyType a}(a1:(array a)) (a2:(array
  a)): Prop := ((length a1) = (length a2)) /\ (permut_sub (elts a1) (elts a2)
  0%Z (length a1)).

Axiom param : Type.
Parameter param_WhyType : WhyType param.
Existing Instance param_WhyType.

Axiom elt : Type.
Parameter elt_WhyType : WhyType elt.
Existing Instance elt_WhyType.

Parameter le: param -> elt -> elt -> Prop.

Axiom le_asym : forall (p:param) (x:elt) (y:elt), (~ (le p x y)) -> (le p y
  x).

(* Why3 assumption *)
Definition sorted_sub(p:param) (a:(array elt)) (l:Z) (u:Z): Prop :=
  forall (i1:Z) (i2:Z), (((l <= i1)%Z /\ (i1 <= i2)%Z) /\ (i2 < u)%Z) ->
  (le p (get a i1) (get a i2)).

Require Import Why3.
Ltac ae := why3 "alt-ergo" timelimit 2.

(* Why3 goal *)
Theorem WP_parameter_sort : forall (p:param) (a:Z), forall (a1:(map.Map.map Z
  elt)), let a2 := (mk_array a a1) in ((0%Z <= (a - 1%Z)%Z)%Z ->
  forall (a3:(map.Map.map Z elt)), let a4 := (mk_array a a3) in forall (i:Z),
  ((0%Z <= i)%Z /\ (i <= (a - 1%Z)%Z)%Z) -> (((permut a2 a4) /\ (sorted_sub p
  a4 0%Z i)) -> forall (j:Z) (a5:(map.Map.map Z elt)), let a6 := (mk_array a
  a5) in (((((((0%Z <= j)%Z /\ (j <= i)%Z) /\ (permut a2 a6)) /\
  (sorted_sub p a6 0%Z j)) /\ (sorted_sub p a6 j (i + 1%Z)%Z)) /\
  forall (k1:Z) (k2:Z), (((0%Z <= k1)%Z /\ (k1 < j)%Z) /\
  (((j + 1%Z)%Z <= k2)%Z /\ (k2 <= i)%Z)) -> (le p (map.Map.get a5 k1)
  (map.Map.get a5 k2))) -> ((0%Z < j)%Z -> (((0%Z <= j)%Z /\ (j < a)%Z) ->
  (((0%Z <= (j - 1%Z)%Z)%Z /\ ((j - 1%Z)%Z < a)%Z) -> ((~ (le p
  (map.Map.get a5 (j - 1%Z)%Z) (map.Map.get a5 j))) -> (((0%Z <= j)%Z /\
  (j < a)%Z) -> (((0%Z <= (j - 1%Z)%Z)%Z /\ ((j - 1%Z)%Z < a)%Z) ->
  (((0%Z <= j)%Z /\ (j < a)%Z) -> forall (a7:(map.Map.map Z elt)),
  (a7 = (map.Map.set a5 j (map.Map.get a5 (j - 1%Z)%Z))) ->
  (((0%Z <= (j - 1%Z)%Z)%Z /\ ((j - 1%Z)%Z < a)%Z) -> forall (a8:(map.Map.map
  Z elt)), (a8 = (map.Map.set a7 (j - 1%Z)%Z (map.Map.get a5 j))) ->
  ((exchange a5 a8 (j - 1%Z)%Z j) -> forall (j1:Z), (j1 = (j - 1%Z)%Z) ->
  (sorted_sub p (mk_array a a8) j1 (i + 1%Z)%Z))))))))))))).
intros p a a1 a2 h1 a3 a4 i (h2,h3) (h4,h5) j a5 a6
(((((h6,h7),h8),h9),h10),h11) h12 (h13,h14) (h15,h16) h17 (h18,h19) (h20,h21)
(h22,h23) a7 h24 (h25,h26) a8 h27 h28 j1 h29.
unfold sorted_sub,get in *.
simpl in *.
ae.
Qed.


