module M
  use import ref.Ref

  use import int.Int

  function projf1 "model_trace:.projf1" (l : int) : int
  =
  l+10

  function projf2 "model_trace:projf2" (l : int) : int
  =
  l-10

  meta "inline : no" function projf1
  meta "model_projection" function projf1

  meta "inline : no" function projf2
  meta "model_projection" function projf2

  val y "model_projected" "model" "model_trace:y" :ref int

  let incr ( x23 "model" "model_trace:x23" : ref int ): unit
  ensures { "model_vc" "model_func" !x23 = old !x23 + 2 + !y }
  =
  (*#"/home/cmarche/recherche/why/tests/c/binary_search.c" 62 27 32#*)
  y := !y + 1;
  x23 := !x23 + 1;
  x23 := !x23 + 1

  let test_loop ( x "model" "model_trace:x" : ref int ): unit
  ensures { !x < old !x }
  =
  incr x;
  while "model" "model_trace:cond" !x > 0 do invariant { !x >= 0 } variant { !x } x := !x - 1 done

  use import map.Map
  let test_map (x "model" : ref (map int int)) : unit
  ensures { !x[0] <> !x[1] }
  =
  x := Map.set !x 0 3


  type r = {f:int; g:bool}
  let test_record1 (x "model" "model_trace:x" : r) : int
  ensures { "model_vc" "model_func" result = 1 }
  =
  if x.g then
    x.f
  else
    1

  let test_record2 (x "model" "model_trace:x" : ref r) : unit
  ensures { !x.g }
  =
  x := { !x with f = 6}

  let test_record3 (x "model" "model_trace:x" : ref r) : r
  ensures { "model_vc" "model_func" result.g }
  =
  x := { !x with f = 6 };
  !x

  val re "model" : ref r

  let test_record4 (x "model" "model_trace:x" : ref r) : r
  ensures { "model_vc" "model_func" result = !re }
  =
  x := { !x with f = 6 };
  !x

end
