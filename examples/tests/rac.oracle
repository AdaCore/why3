Execution of Local.c0 : () -> ()
  Assertion failed at examples/tests/rac.mlw, line 8, characters 13-19
    Term: x > 10
    Variables: {x -> 1; _ -> ()}
Execution of Local.c1 : () -> ()
  result: ()
  globals: 
Execution of Local.c2 : () -> ()
  Assertion failed at examples/tests/rac.mlw, line 19, characters 13-19
    Term: contents x > 10
    Variables: {x -> ref'mk 1; _ -> ()}
Execution of Local.c_or : () -> ()
  result: ()
  globals: 
Execution of Local.f2 : () -> ()
  Precondition of f2_aux failed at examples/tests/rac.mlw, line 33, characters 22-30
    Defined at examples/tests/rac.mlw, line 25, characters 15-20
    Term: contents x = 0
    Variables: {x -> ref'mk 42; z -> ref'mk 42}
Execution of Local.f3 : () -> ()
  result: ()
  globals: 
Execution of Global.c2 : () -> ()
  Assertion failed at examples/tests/rac.mlw, line 47, characters 13-19
    Term: contents x > 10
    Variables: {x -> ref'mk 0; _ -> ()}
Assertion cannot be evaluated at examples/tests/rac.mlw, line 64, characters 13-34
  Term: forall x:int. ((ggg @ x) @ 1) = x
  Variables: {x -> ref'mk 0; _ -> (); _1 -> ()}
Execution of Functions.f1 : () -> ()
  Assertion failed at examples/tests/rac.mlw, line 65, characters 13-28
    Term: fff 0 = ((ggg @ 0) @ 1)
    Variables: {x -> ref'mk 0; _ -> (); _1 -> (); _2 -> ()}
Execution of Functions.f2 : () -> ()
  result: ()
  globals: x -> (ref'mk 0)
Execution of Functions.f3 : () -> ()
  Loop invariant preservation failed at examples/tests/rac.mlw, line 74, characters 18-32
    Term: contents x = 0 || contents x = 1
    Variables: {x -> ref'mk 2; i -> 1; o -> 5; o1 -> 0}
Execution of Functions.f4 : () -> ()
  Loop invariant preservation failed at examples/tests/rac.mlw, line 81, characters 18-24
    Term: 5 >= contents x
    Variables: {x -> ref'mk 6}
Execution of Functions.f5a : () -> ()
  Precondition of f5_aux failed at examples/tests/rac.mlw, line 92, characters 12-20
    Defined at examples/tests/rac.mlw, line 87, characters 15-20
    Term: y > 0
    Variables: {x -> ref'mk 0; y -> 0; o -> 0}
Execution of Functions.f5b : () -> ()
  Postcondition of f5_aux failed at examples/tests/rac.mlw, line 97, characters 12-20
    Defined at examples/tests/rac.mlw, line 88, characters 14-24
    Term: result = 1
    Variables: {x -> ref'mk 0; y -> 2; _ -> 1; o -> 2; result -> 2}
Execution of Functions.f5c : () -> ()
  Precondition of f5_aux failed at examples/tests/rac.mlw, line 101, characters 12-20
    Defined at examples/tests/rac.mlw, line 87, characters 15-20
    Term: y > 0
    Variables: {x -> ref'mk 0; y -> 0; o -> 0}
Execution of Functions.f6 : () -> ()
  Exceptional postcondition of f6_aux failed at examples/tests/rac.mlw, line 111, characters 8-17
    Defined at examples/tests/rac.mlw, line 106, characters 39-44
    Term: j = contents x
    Variables: {x -> ref'mk 1; _ -> (); o -> (); j -> 0}
Execution of Functions.f7 : () -> ()
  result: ()
  globals: x -> (ref'mk 1)
Execution of Functions.f8 : () -> ()
  Assertion failed at examples/tests/rac.mlw, line 123, characters 13-18
    Term: contents r = 1
    Variables: {x -> ref'mk 0; r -> ref'mk 0}
Execution of Functions.f9 : () -> ()
  Precondition of f9_aux failed at examples/tests/rac.mlw, line 134, characters 12-23
    Defined at examples/tests/rac.mlw, line 126, characters 15-21
    Term: not contents x = y
    Variables: {x1 -> ref'mk 0; x -> ref'mk 42; y -> 42; r -> ref'mk 42;
      _ -> 42; o -> 42}
Execution of PolyRefContracts.f1 : () -> ()
  result: ()
  globals: myref -> (ref'mk 0)
Execution of PolyRefContracts.f2a : () -> int
  result: 1
  globals: myref -> (ref'mk 1)
Execution of PolyRefContracts.f2b : () -> int
  Precondition of f2_aux failed at examples/tests/rac.mlw, line 159, characters 4-20
    Defined at examples/tests/rac.mlw, line 147, characters 15-29
    Term: not contents argref = argx
    Variables: {argref -> ref'mk 0; argx -> 0; argy -> 1; myref -> ref'mk 0;
      o -> 1; o1 -> 0}
Execution of PolyRefContracts.f2c : () -> int
  Postcondition of f2_aux failed at examples/tests/rac.mlw, line 162, characters 4-20
    Defined at examples/tests/rac.mlw, line 149, characters 14-27
    Term: result = argy
    Variables: {argref -> ref'mk 1; argx -> 1; argy1 -> 2; myref -> ref'mk 1;
      o -> 2; o1 -> 1; result1 -> 1; argy -> 2; result -> 1}
Execution of Record.f0 : () -> int
  result: 14
  globals: 
