
use int.Int
use ref.Ref
let f (z: int) =
  let ref x1 = z in
  let ref x2 = 0 in
  let ref i = 0 in
  while i < 2 do
    variant { 2 - i }
    invariant { i > 0 -> x1 >= 0 }
    if i = 0 then
      x1 <- x1 + 1
    else
      x2 <- x2 + 1;
    i <- i + 1
  done

(*
counterexamle: x1 = -2 at the beggining of the loop
It is a true counterexample because the underspecification (weak loop invariant);
If the program is interpreted (w. rac) from the initial state, it does not fail,
because it doesn't reach an iteration where x1 = -2.
If the particular iteration given by the counterexample is interpreted, then the
invariant will fail, and we can conclude that the program is underspecified.
*)

