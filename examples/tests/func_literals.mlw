
constant a1 : int -> int = [||]
constant a2 : int -> int = [|1|]
constant a3 : int -> int = [|1;2|]
constant a4 : int -> int = [|1;2;3;4;5;6;7|]

constant b1 : int -> int = [|0 => 1|]
constant b2 : int -> int = [|0 => 1; 1 => 2|]
constant b3 : int -> int = [|5 => 50; 1 => 10|]
constant b4 : int -> int = [|0 => 1; 1 => 2; 2 => 3; 3 => 4|]

constant c1 : int -> int = [|_ => 1|]
constant c2 : int -> int = [|0 => 1; _ => 2|]
constant c3 : int -> int = [|5 => 50; _ => 10|]
constant c4 : int -> int = [|0 => 1; 1 => 2; 2 => 3; _ => 4|]

use int.Int
function z (x: int) : int = x + x

function d1 (_: int) : int -> int = [||]
function d2 (x: int) : int -> int = [|1; x|]
function d3 (x: int) : int -> int = [|1; x; x + 1|]
function d4 (x: int) : int -> int = [|1; x; x + 1; z x |]
function d5 (x: int) : int -> int = d4 (x+1)

function e1 (x: int) : int -> int = [|0 => 1; 1 => x|]
function e2 (x: int) : int -> int = [|0 => 1; 1 => x; 2 => x + 1|]
function e3 (x: int) : int -> int = [|5 => 1; 1 => x; 10 => x + 1; _ => z x |]
function e4 (x: int) : int -> int = e3 (x+1)

constant f1 : int -> int = [|1;|]
constant f2 : int -> int = [|1 => 1;|]
constant f3 : int -> int = [|1 => 1;1 => 1;|]
constant f4 : int -> int = [|_ => 1;|]
constant f5 : int -> int = [|1 => 1;2 => 2;_ => -1;|]

goal g1:
  let a = [| 0 => 1 |] in
  let b = [| 1 => 2 |] in
  a 2 = b 2

goal g2:
  let a = [| 0 => 1; 1 => 2 |] in
  let b = [| 0 => 1; 1 => -2 |] in
  a 0 = b 0 &&
  a 1 = - (b 1) &&
  a 2 = b 3

goal g3:
  [|1|] = [|1|]

let w (x: int) = x + x

(* val function any_function (int,'a): 'b *)

(* let f0' (x: int) = fun _x -> any_function (1,_x) *)
let f0 ()                 = [| |]
let f1 ()                 = [| _ => 1 |]
let f2 ()                 = [| _ => "foo" |]
let f3 (x: int)           = [| _ => x|]
let f4 (x: string)        = [| _ => x |]
let f5 ()                 = [| 0 => 1 |]
let f6 ()                 = [| 0 => "foo" |]

use string.OCaml                                   (* required for '=' *)
let f7 (): string -> int  = [| "bar" => 1 |]       (* type required, or *)
let f8 ()                 = [| "bar" => (1:int) |] (* type required *)
let f9 ()                 = [| "bar" => "foo" |]
let f10 (): string -> int = [| "bar" => 1; _ => 0 |]       (* type required, or *)
let f11 ()                = [| "bar" => (1:int); _ => 0 |] (* type required *)
let f12 ()                = [| "bar" => "foo"; _ => "baz" |]
let f13 (x: int) = [| "a" => 1; "b" => x; "c" => x + 1; _ => w x |]

use int.Int                                        (* required for '=' *)
let f14 (x: int) : int -> int = [| 2 => 1; 3 => x; -1 => x + 1; _ => 0 |]
let f15 (x: int) = f13 (x+1)
