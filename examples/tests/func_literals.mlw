use int.Int
use seq.Seq

(* should not be proved *)
goal g1:
  let a = [| 0 => 1 |] in
  let b = [| 1 => 2 |] in
  a 2 = b 2

goal g2:
  let a = [| 0 => 1; 1 => 2 |] in
  let b = [| 0 => 1; 1 => -2 |] in
  a 0 = b 0     /\ (* proved *)
  a 1 = - (b 1) /\ (* proved *)
  a 2 = b 3     /\ (* should not be proved *)
  a 3 = b 3     /\ (* should not be proved *)
  a 3 <> b 3       (* should not be proved *)

goal g3:
  [|1|] = [|1|] (* cannot be proved *)

(* can be proved: altergo *)
let seq_ok1 (_: int): seq int
  ensures { result = create 4 [|0;1;2;3|] }
= create 4 [|0;1;2;3|]

(* can be proved: altergo, z3, cvc4 *)
let seq_ok2 (_: int): seq int
  ensures { result == create 4 [|0;1;2;3|] }
= create 4 [|0;1;2;3|]

(* can be proved: altergo, z3 *)
let seq_ok3 (default: int) : seq int
  ensures { result = create 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]}
= create 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]

(* can be proved: altergo, z3 *)
let seq_ok4 (default: int) : seq int
  ensures { result == create 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]}
= create 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]

use array.Init
use array.ToSeq

(* can be proved, cvc4 after some transformations *)
let array_ok1 (_: int): array int
  ensures { to_seq result = create 4 [|0;1;2;3|] }
= init 4 [|0;1;2;3|]

(* can be proved: altergo, z3 *)
let array_ok2 (_: int): array int
  ensures { to_seq result == create 4 [|0;1;2;3|] }
= init 4 [|0;1;2;3|]

(* can be proved *)
let array_ok3 (default: int) : array int
  ensures { to_seq result = create 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]}
= init 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]

(* can be proved: altergo, z3 *)
let array_ok4 (default: int) : array int
  ensures { to_seq result == create 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]}
= init 4 [|0 => 0; 1 => 1; 2 => 2; 3 => 3; _ => default |]
