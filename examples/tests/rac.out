
* Local
** Local.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 7, characters 13-19
Assertion is ok at examples/tests/rac.mlw, line 8, characters 13-37
Assertion has failed at examples/tests/rac.mlw, line 9, characters 13-18
- Term: x = 0
- Variables: x -> 1
** Local.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 14, characters 16-18
Postcondition of ref'mk is ok
Postcondition of ref is ok at examples/tests/rac.mlw, line 14, characters 16-18
Assertion is ok at examples/tests/rac.mlw, line 15, characters 13-20
result: () = ()
globals: 
** Local.test3
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of ref'mk is ok
Postcondition of ref is ok at examples/tests/rac.mlw, line 18, characters 16-17
Assertion is ok at examples/tests/rac.mlw, line 19, characters 13-19
Assertion has failed at examples/tests/rac.mlw, line 20, characters 13-19
- Term: contents x > 10
- Variables: x -> (ref'mk 1)
** Local.test4
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 23, characters 13-28
result: () = ()
globals: 
** Local.test5
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of True is ok at examples/tests/rac.mlw, line 26, characters 12-16
Assertion is ok at examples/tests/rac.mlw, line 27, characters 13-21
result: () = ()
globals: 

* Global
** Global.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 37, characters 13-18
Postcondition of contents is ok at examples/tests/rac.mlw, line 38, characters 9-10
Postcondition of (+) is ok at examples/tests/rac.mlw, line 38, characters 9-14
Assertion is ok at examples/tests/rac.mlw, line 39, characters 13-18
result: () = ()
globals: x -> (ref'mk 1), y -> (ref'mk 0)

* Functions
** Functions.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 57, characters 13-27
Assertion is ok at examples/tests/rac.mlw, line 58, characters 13-30
Assertion has failed at examples/tests/rac.mlw, line 59, characters 13-35
- Term: f1_aux 0 = ((f1_aux' @ 0) @ 1)
- Variables: 
** Functions.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 63, characters 13-29
result: () = ()
globals: x -> (ref'mk 0)
** Functions.test3a
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 7-9
Precondition of test3_aux has failed at examples/tests/rac.mlw, line 71, characters 4-15
- Defined at examples/tests/rac.mlw, line 66, characters 15-20
- Term: y > 0
- Variables: y -> 0
** Functions.test3b
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 7-9
Precondition of test3_aux is ok at examples/tests/rac.mlw, line 74, characters 12-23
- Defined at examples/tests/rac.mlw, line 66, characters 15-20
Postcondition of test3_aux is ok at examples/tests/rac.mlw, line 74, characters 12-23
- Defined at examples/tests/rac.mlw, line 67, characters 14-24
Precondition of test3_aux is ok at examples/tests/rac.mlw, line 75, characters 4-15
- Defined at examples/tests/rac.mlw, line 66, characters 15-20
Postcondition of test3_aux has failed at examples/tests/rac.mlw, line 75, characters 4-15
- Defined at examples/tests/rac.mlw, line 67, characters 14-24
- Term: result = 1
- Variables: result -> 2
** Functions.test4
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 85, characters 18-20
Exceptional postcondition of test4_aux has failed at examples/tests/rac.mlw, line 85, characters 8-20
- Defined at examples/tests/rac.mlw, line 80, characters 20-25
- Term: j = contents x
- Variables: j -> 42, x -> (ref'mk 1)
** Functions.test5
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of contents is ok at examples/tests/rac.mlw, line 90, characters 9-10
Postcondition of (+) is ok at examples/tests/rac.mlw, line 90, characters 9-14
Postcondition of test5_aux is ok at examples/tests/rac.mlw, line 93, characters 4-15
- Defined at examples/tests/rac.mlw, line 89, characters 14-27
Postcondition of contents is ok at examples/tests/rac.mlw, line 90, characters 9-10
Postcondition of (+) is ok at examples/tests/rac.mlw, line 90, characters 9-14
Postcondition of test5_aux has failed at examples/tests/rac.mlw, line 94, characters 4-15
- Defined at examples/tests/rac.mlw, line 89, characters 14-27
- Term: contents x = (contents x1 + 1)
- Variables: x -> (ref'mk 3), x1 -> (ref'mk 1)
** Functions.test6
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of ref'mk is ok
Postcondition of ref is ok at examples/tests/rac.mlw, line 103, characters 16-17
Precondition of test6_aux is ok at examples/tests/rac.mlw, line 104, characters 12-26
- Defined at examples/tests/rac.mlw, line 97, characters 15-21
Postcondition of contents is ok at examples/tests/rac.mlw, line 100, characters 4-5
Postcondition of test6_aux is ok at examples/tests/rac.mlw, line 104, characters 12-26
- Defined at examples/tests/rac.mlw, line 98, characters 14-24
Precondition of test6_aux has failed at examples/tests/rac.mlw, line 105, characters 12-26
- Defined at examples/tests/rac.mlw, line 97, characters 15-21
- Term: not contents x = y
- Variables: x -> (ref'mk 42), y -> 42

* Loops
** Loops.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Precondition of test1 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 114, characters 26-31
Loop invariant initialization is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
Postcondition of Tuple0 is ok at examples/tests/rac.mlw, line 116, characters 31-31
Loop invariant preservation is ok at examples/tests/rac.mlw, line 116, characters 18-29
result: () = ()
globals: x -> (ref'mk 0)
** Loops.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Precondition of test2 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 119, characters 26-31
Loop invariant initialization is ok at examples/tests/rac.mlw, line 121, characters 18-32
Postcondition of contents is ok at examples/tests/rac.mlw, line 122, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 122, characters 11-16
Loop invariant preservation is ok at examples/tests/rac.mlw, line 121, characters 18-32
Postcondition of contents is ok at examples/tests/rac.mlw, line 122, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 122, characters 11-16
Loop invariant preservation has failed at examples/tests/rac.mlw, line 121, characters 18-32
- Term: contents x = 0 || contents x = 1
- Variables: x -> (ref'mk 2)
** Loops.test3
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Loop invariant initialization is ok at examples/tests/rac.mlw, line 128, characters 18-24
Postcondition of contents is ok at examples/tests/rac.mlw, line 126, characters 10-11
Postcondition of (<) is ok at examples/tests/rac.mlw, line 126, characters 10-16
Postcondition of contents is ok at examples/tests/rac.mlw, line 129, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 129, characters 11-16
Loop invariant preservation is ok at examples/tests/rac.mlw, line 128, characters 18-24
Loop invariant initialization is ok at examples/tests/rac.mlw, line 128, characters 18-24
Postcondition of contents is ok at examples/tests/rac.mlw, line 126, characters 10-11
Postcondition of (<) is ok at examples/tests/rac.mlw, line 126, characters 10-16
Postcondition of contents is ok at examples/tests/rac.mlw, line 129, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 129, characters 11-16
Loop invariant preservation is ok at examples/tests/rac.mlw, line 128, characters 18-24
Loop invariant initialization is ok at examples/tests/rac.mlw, line 128, characters 18-24
Postcondition of contents is ok at examples/tests/rac.mlw, line 126, characters 10-11
Postcondition of (<) is ok at examples/tests/rac.mlw, line 126, characters 10-16
Postcondition of contents is ok at examples/tests/rac.mlw, line 129, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 129, characters 11-16
Loop invariant preservation is ok at examples/tests/rac.mlw, line 128, characters 18-24
Loop invariant initialization is ok at examples/tests/rac.mlw, line 128, characters 18-24
Postcondition of contents is ok at examples/tests/rac.mlw, line 126, characters 10-11
Postcondition of (<) is ok at examples/tests/rac.mlw, line 126, characters 10-16
Postcondition of contents is ok at examples/tests/rac.mlw, line 129, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 129, characters 11-16
Loop invariant preservation is ok at examples/tests/rac.mlw, line 128, characters 18-24
Loop invariant initialization is ok at examples/tests/rac.mlw, line 128, characters 18-24
Postcondition of contents is ok at examples/tests/rac.mlw, line 126, characters 10-11
Postcondition of (<) is ok at examples/tests/rac.mlw, line 126, characters 10-16
Postcondition of contents is ok at examples/tests/rac.mlw, line 129, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 129, characters 11-16
Loop invariant preservation is ok at examples/tests/rac.mlw, line 128, characters 18-24
Loop invariant initialization is ok at examples/tests/rac.mlw, line 128, characters 18-24
Postcondition of contents is ok at examples/tests/rac.mlw, line 126, characters 10-11
Postcondition of (<) is ok at examples/tests/rac.mlw, line 126, characters 10-16
Postcondition of contents is ok at examples/tests/rac.mlw, line 129, characters 11-12
Postcondition of (+) is ok at examples/tests/rac.mlw, line 129, characters 11-16
Loop invariant preservation has failed at examples/tests/rac.mlw, line 128, characters 18-24
- Term: 5 >= contents x
- Variables: x -> (ref'mk 6)

* Aliasing
** Aliasing.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of r'mk is ok at examples/tests/rac.mlw, line 140, characters 12-22
Assertion is ok at examples/tests/rac.mlw, line 143, characters 13-44
Postcondition of value is ok at examples/tests/rac.mlw, line 144, characters 13-20
Postcondition of value is ok at examples/tests/rac.mlw, line 144, characters 4-11
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 144, characters 4-20
result: (int, int) = (100, 100)
globals: 
** Aliasing.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of True is ok at examples/tests/rac.mlw, line 157, characters 25-29
Postcondition of r'mk is ok at examples/tests/rac.mlw, line 147, characters 12-22
Assertion is ok at examples/tests/rac.mlw, line 153, characters 13-27
Postcondition of value is ok at examples/tests/rac.mlw, line 154, characters 13-20
Postcondition of value is ok at examples/tests/rac.mlw, line 154, characters 4-11
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 154, characters 4-20
Assertion is ok at examples/tests/rac.mlw, line 158, characters 13-32
Postcondition of False is ok at examples/tests/rac.mlw, line 159, characters 25-30
Postcondition of r'mk is ok at examples/tests/rac.mlw, line 147, characters 12-22
Assertion is ok at examples/tests/rac.mlw, line 153, characters 13-27
Postcondition of value is ok at examples/tests/rac.mlw, line 154, characters 13-20
Postcondition of value is ok at examples/tests/rac.mlw, line 154, characters 4-11
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 154, characters 4-20
Assertion is ok at examples/tests/rac.mlw, line 160, characters 13-32
result: () = ()
globals: 

* RecordMutGhost
** RecordMutGhost.test
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 5-7
Postcondition of t'mk is ok at examples/tests/rac.mlw, line 212, characters 12-43
Assertion is ok at examples/tests/rac.mlw, line 213, characters 13-20
Assertion is ok at examples/tests/rac.mlw, line 214, characters 13-22
Postcondition of f is ok at examples/tests/rac.mlw, line 215, characters 20-23
Assertion is ok at examples/tests/rac.mlw, line 216, characters 13-23
Postcondition of f is ok at examples/tests/rac.mlw, line 217, characters 20-23
Postcondition of (=) is ok at examples/tests/rac.mlw, line 215, characters 47-52
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 217, characters 20-25
Postcondition of (+) is ok at examples/tests/rac.mlw, line 217, characters 4-25
result: int = 43
globals: 

* PolyContext
** PolyContext.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of poly is ok at examples/tests/rac.mlw, line 227, characters 4-10
- Defined at examples/tests/rac.mlw, line 222, characters 26-27
Postcondition of test1 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 226, characters 12-14
result: int = 42
globals: 
** PolyContext.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of poly is ok at examples/tests/rac.mlw, line 231, characters 4-10
- Defined at examples/tests/rac.mlw, line 222, characters 26-27
Postcondition of poly' is ok at examples/tests/rac.mlw, line 235, characters 4-11
- Defined at examples/tests/rac.mlw, line 222, characters 26-27
Postcondition of test2 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 234, characters 12-14
result: int = 42
globals: 

* PolyRefContracts
** PolyRefContracts.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of ref'mk is ok
Postcondition of ref is ok at examples/tests/rac.mlw, line 243, characters 12-17
Postcondition of contents is ok at WHY3DATA/stdlib/ref.mlw, line 18, characters 33-43
Postcondition of (!) is ok at examples/tests/rac.mlw, line 244, characters 9-11
Postcondition of (+) is ok at examples/tests/rac.mlw, line 244, characters 9-15
Postcondition of (:=) is ok at examples/tests/rac.mlw, line 244, characters 4-15
- Defined at WHY3DATA/stdlib/ref.mlw, line 20, characters 39-44
result: () = ()
globals: myref -> (ref'mk 0)
** PolyRefContracts.test2a
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 7-9
Precondition of test2_aux is ok at examples/tests/rac.mlw, line 256, characters 4-23
- Defined at examples/tests/rac.mlw, line 247, characters 15-29
Postcondition of contents is ok at examples/tests/rac.mlw, line 251, characters 4-10
Postcondition of test2_aux is ok at examples/tests/rac.mlw, line 256, characters 4-23
- Defined at examples/tests/rac.mlw, line 248, characters 14-27
Postcondition of test2_aux is ok at examples/tests/rac.mlw, line 256, characters 4-23
- Defined at examples/tests/rac.mlw, line 249, characters 14-27
result: int = 1
globals: myref -> (ref'mk 1)
** PolyRefContracts.test2b
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 7-9
Precondition of test2_aux has failed at examples/tests/rac.mlw, line 259, characters 4-23
- Defined at examples/tests/rac.mlw, line 247, characters 15-29
- Term: not contents argref = argx
- Variables: argref -> (ref'mk 0), argx -> 0
** PolyRefContracts.test2c
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 7-9
Precondition of test2_aux is ok at examples/tests/rac.mlw, line 262, characters 4-23
- Defined at examples/tests/rac.mlw, line 247, characters 15-29
Postcondition of contents is ok at examples/tests/rac.mlw, line 251, characters 4-10
Postcondition of test2_aux is ok at examples/tests/rac.mlw, line 262, characters 4-23
- Defined at examples/tests/rac.mlw, line 248, characters 14-27
Postcondition of test2_aux has failed at examples/tests/rac.mlw, line 262, characters 4-23
- Defined at examples/tests/rac.mlw, line 249, characters 14-27
- Term: result = argy
- Variables: argy -> 2, result -> 1

* RecordPoly
** RecordPoly.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of t1'mk is ok at examples/tests/rac.mlw, line 270, characters 12-18
Assertion is ok at examples/tests/rac.mlw, line 271, characters 13-20
Assertion is ok at examples/tests/rac.mlw, line 273, characters 13-22
result: () = ()
globals: 
** RecordPoly.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of t2'mk is ok at examples/tests/rac.mlw, line 277, characters 12-39
Assertion is ok at examples/tests/rac.mlw, line 278, characters 13-25
Assertion is ok at examples/tests/rac.mlw, line 279, characters 13-25
Postcondition of f is ok at examples/tests/rac.mlw, line 280, characters 20-23
Assertion is ok at examples/tests/rac.mlw, line 281, characters 13-26
Assertion is ok at examples/tests/rac.mlw, line 282, characters 13-25
result: () = ()
globals: 
** RecordPoly.test3
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of t3'mk is ok at examples/tests/rac.mlw, line 295, characters 12-52
Assertion is ok at examples/tests/rac.mlw, line 296, characters 13-28
Postcondition of False is ok at examples/tests/rac.mlw, line 297, characters 15-20
Precondition of update is ok at examples/tests/rac.mlw, line 297, characters 4-20
- Defined at examples/tests/rac.mlw, line 287, characters 15-31
Postcondition of elts is ok at examples/tests/rac.mlw, line 290, characters 22-28
Postcondition of update is ok at examples/tests/rac.mlw, line 297, characters 4-20
- Defined at examples/tests/rac.mlw, line 288, characters 14-77
Postcondition of update is ok at examples/tests/rac.mlw, line 297, characters 4-20
- Defined at examples/tests/rac.mlw, line 289, characters 14-26
Assertion is ok at examples/tests/rac.mlw, line 298, characters 13-29
Assertion is ok at examples/tests/rac.mlw, line 299, characters 13-28
Assertion has failed at examples/tests/rac.mlw, line 300, characters 13-29
- Term: (elts r @ 1) = False
- Variables: r -> (t3'mk ({i -> 3;
                            x -> false;
                            f -> (fun _ -> true)} fun j -> if j =' i then x
                            else f j)
                   5)

* PolyFunc
** PolyFunc.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of mk is ok at examples/tests/rac.mlw, line 309, characters 6-10
Postcondition of test1 is ok at command line expression to execute, line 1, characters 0-8
result: int -> int = ({v -> 0} fun _ -> v)
globals: 
** PolyFunc.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of t'mk is ok at examples/tests/rac.mlw, line 320, characters 12-27
Postcondition of f is ok at examples/tests/rac.mlw, line 317, characters 22-25
Postcondition of map_update is ok at examples/tests/rac.mlw, line 317, characters 11-29
Postcondition of f is ok at examples/tests/rac.mlw, line 323, characters 11-14
Postcondition of (=) is ok at examples/tests/rac.mlw, line 314, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 314, characters 41-44
Postcondition of (@) is ok at examples/tests/rac.mlw, line 323, characters 11-16
Postcondition of f is ok at examples/tests/rac.mlw, line 323, characters 4-7
Postcondition of (=) is ok at examples/tests/rac.mlw, line 314, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 323, characters 4-9
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 323, characters 4-16
result: (int, int) = (111, 0)
globals: 

* ArrayExec
** ArrayExec.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of array'mk is ok at examples/tests/rac.mlw, line 349, characters 12-48
Postcondition of elts is ok at examples/tests/rac.mlw, line 350, characters 14-20
Postcondition of (@) is ok at examples/tests/rac.mlw, line 350, characters 14-22
Postcondition of elts is ok at examples/tests/rac.mlw, line 350, characters 4-10
Postcondition of (@) is ok at examples/tests/rac.mlw, line 350, characters 4-12
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 350, characters 4-22
Postcondition of test1 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 349, characters 4-74
result: (int, int) = (0, 0)
globals: 
** ArrayExec.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of array'mk is ok at examples/tests/rac.mlw, line 353, characters 12-48
Postcondition of elts is ok at examples/tests/rac.mlw, line 354, characters 23-29
Postcondition of elts is ok at examples/tests/rac.mlw, line 355, characters 14-20
Postcondition of (=) is ok at examples/tests/rac.mlw, line 354, characters 53-58
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 354, characters 72-75
Postcondition of (@) is ok at examples/tests/rac.mlw, line 355, characters 14-22
Postcondition of elts is ok at examples/tests/rac.mlw, line 355, characters 4-10
Postcondition of (=) is ok at examples/tests/rac.mlw, line 354, characters 53-58
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 355, characters 4-12
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 355, characters 4-22
result: (int, int) = (11, 0)
globals: 
** ArrayExec.test3
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of array'mk is ok at examples/tests/rac.mlw, line 336, characters 4-33
Postcondition of make is ok at examples/tests/rac.mlw, line 358, characters 12-21
Postcondition of make is ok at examples/tests/rac.mlw, line 358, characters 12-21
- Defined at examples/tests/rac.mlw, line 334, characters 14-31
Postcondition of make is ok at examples/tests/rac.mlw, line 358, characters 12-21
- Defined at examples/tests/rac.mlw, line 335, characters 14-55
Postcondition of elts is ok at examples/tests/rac.mlw, line 346, characters 27-33
Postcondition of map_update is ok at examples/tests/rac.mlw, line 346, characters 16-37
Postcondition of elts is ok at examples/tests/rac.mlw, line 341, characters 41-47
Postcondition of (=) is ok at examples/tests/rac.mlw, line 339, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 339, characters 41-44
Postcondition of (@) is ok at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of ([]) is ok at examples/tests/rac.mlw, line 360, characters 10-14
- Defined at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of elts is ok at examples/tests/rac.mlw, line 341, characters 41-47
Postcondition of (=) is ok at examples/tests/rac.mlw, line 339, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of ([]) is ok at examples/tests/rac.mlw, line 360, characters 4-8
- Defined at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 360, characters 4-14
result: (int, int) = (10, 0)
globals: 
** ArrayExec.test4
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of array'mk is ok at examples/tests/rac.mlw, line 336, characters 4-33
Postcondition of make is ok at examples/tests/rac.mlw, line 363, characters 12-21
Postcondition of make is ok at examples/tests/rac.mlw, line 363, characters 12-21
- Defined at examples/tests/rac.mlw, line 334, characters 14-31
Postcondition of make is ok at examples/tests/rac.mlw, line 363, characters 12-21
- Defined at examples/tests/rac.mlw, line 335, characters 14-55
Assertion is ok at examples/tests/rac.mlw, line 364, characters 13-26
Postcondition of elts is ok at examples/tests/rac.mlw, line 341, characters 41-47
Postcondition of (@) is ok at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of ([]) is ok at examples/tests/rac.mlw, line 365, characters 12-16
- Defined at examples/tests/rac.mlw, line 341, characters 41-49
Assertion is ok at examples/tests/rac.mlw, line 366, characters 13-18
Postcondition of elts is ok at examples/tests/rac.mlw, line 346, characters 27-33
Postcondition of map_update is ok at examples/tests/rac.mlw, line 346, characters 16-37
Postcondition of elts is ok at examples/tests/rac.mlw, line 341, characters 41-47
Postcondition of (=) is ok at examples/tests/rac.mlw, line 339, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 339, characters 41-44
Postcondition of (@) is ok at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of ([]) is ok at examples/tests/rac.mlw, line 368, characters 12-16
- Defined at examples/tests/rac.mlw, line 341, characters 41-49
Assertion is ok at examples/tests/rac.mlw, line 369, characters 13-18
Postcondition of elts is ok at examples/tests/rac.mlw, line 341, characters 41-47
Postcondition of (=) is ok at examples/tests/rac.mlw, line 339, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of ([]) is ok at examples/tests/rac.mlw, line 370, characters 12-16
- Defined at examples/tests/rac.mlw, line 341, characters 41-49
Assertion is ok at examples/tests/rac.mlw, line 371, characters 13-19
Postcondition of elts is ok at examples/tests/rac.mlw, line 341, characters 41-47
Postcondition of (=) is ok at examples/tests/rac.mlw, line 339, characters 23-28
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of (@) is ok at examples/tests/rac.mlw, line 339, characters 41-44
Postcondition of (@) is ok at examples/tests/rac.mlw, line 341, characters 41-49
Postcondition of ([]) is ok at examples/tests/rac.mlw, line 372, characters 12-16
- Defined at examples/tests/rac.mlw, line 341, characters 41-49
Assertion has failed at examples/tests/rac.mlw, line 373, characters 13-19
- Term: x = 11
- Variables: x -> 0

* Ghost
** Ghost.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of t'mk is ok at examples/tests/rac.mlw, line 409, characters 12-30
Assertion is ok at examples/tests/rac.mlw, line 410, characters 13-37
Postcondition of i2 is ok at examples/tests/rac.mlw, line 411, characters 11-15
Postcondition of i1 is ok at examples/tests/rac.mlw, line 411, characters 5-9
Postcondition of Tuple2 is ok at examples/tests/rac.mlw, line 411, characters 4-16
Postcondition of test1 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 409, characters 4-91
result: (int, int) = (123, 456)
globals: 
** Ghost.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Postcondition of (=) is ok at examples/tests/rac.mlw, line 414, characters 7-12
- Defined at WHY3DATA/stdlib/int.mlw, line 16, characters 39-55
Postcondition of f1 is ok at examples/tests/rac.mlw, line 417, characters 18-24
- Defined at examples/tests/rac.mlw, line 414, characters 4-30
Postcondition of (+) is ok at examples/tests/rac.mlw, line 418, characters 4-9
Postcondition of test2 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 418, characters 4-9
result: int = 457
globals: 

* Predicates
** Predicates.test1
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 428, characters 13-19
Assertion is ok at examples/tests/rac.mlw, line 430, characters 13-15
Postcondition of True is ok
Assertion is ok at examples/tests/rac.mlw, line 432, characters 13-15
Assertion is ok at examples/tests/rac.mlw, line 434, characters 13-19
result: () = ()
globals: 
** Predicates.test2
Postcondition of Tuple0 is ok at command line expression to execute, line 1, characters 6-8
Assertion is ok at examples/tests/rac.mlw, line 438, characters 13-15
Assertion is ok at examples/tests/rac.mlw, line 440, characters 13-18
Assertion is ok at examples/tests/rac.mlw, line 442, characters 13-15
Postcondition of Tuple3 is ok at examples/tests/rac.mlw, line 443, characters 4-15
Postcondition of test2 is ok at command line expression to execute, line 1, characters 0-8
- Defined at examples/tests/rac.mlw, line 437, characters 4-163
result: (bool, int, bool) = ((term: True), 0, (term: True))
globals: 
