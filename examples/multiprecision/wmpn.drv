module sqrt.Sqrt1

  prelude "
#include \"sqrtinit.h\"

uint64_t rsa_estimate (uint64_t a) {
  uint64_t abits, x0;
  abits = a >> 55;
  x0 = 0x100 | invsqrttab[abits - 0x80];
  return x0;
}
"

end

module powm.Powm

prelude "#include \"binverttab.h\"

uint64_t binvert_limb_table (uint64_t n) {
  return (uint64_t)binverttab[n];
}
"

end

module mach.int.UInt64GMP

  prelude "
typedef unsigned __int128 uint128_t;

struct __mul64_double_result
{ uint64_t __field_0;
  uint64_t __field_1;
};

struct __mul64_double_result mul64_double(uint64_t x, uint64_t y)
{
  uint128_t z = (uint128_t)x * (uint128_t)y;
  struct __mul64_double_result result = { z, z >> 64 };
  return result;
}

uint64_t div64_2by1(uint64_t ul, uint64_t uh, uint64_t d)
{
  return (((uint128_t)uh << 64) | ul) / d;
}
"

  interface "
typedef unsigned __int128 uint128_t;

struct __mul64_double_result
{ uint64_t __field_0;
  uint64_t __field_1;
};

static inline struct __mul64_double_result mul64_double(uint64_t x, uint64_t y)
{
  uint128_t z = (uint128_t)x * (uint128_t)y;
  struct __mul64_double_result result = { z, z >> 64 };
  return result;
}

static inline uint64_t div64_2by1(uint64_t ul, uint64_t uh, uint64_t d)
{
  return (((uint128_t)uh << 64) | ul) / d;
}
"

(* "
static struct __mul64_double_result mul64_double(uint64_t x, uint64_t y)
{
  struct __mul64_double_result result;
  umul_ppmm(result.__field_1,result.__field_0,x,y);
  return result;
}

static uint64_t div64_2by1(uint64_t ul, uint64_t uh, uint64_t d)
{
  uint64_t q;
  uint64_t _dummy __attribute__((unused));
  udiv_qrnnd(q,_dummy,uh,ul,d);
  return q;
}
" *)

  syntax val mul_double "mul64_double"
  syntax val div2by1 "div64_2by1"

end

module ptralias.Alias

  prelude "
struct __open_sep_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_rx_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_ry_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_rxy_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_sep_result open_sep (uint64_t * r, uint64_t * x, int32_t sx,
                                   uint64_t * y, int32_t sy)
{
  struct __open_sep_result result;
  result.__field_0 = r;
  result.__field_1 = x;
  result.__field_2 = y;
  return result;
}


struct __open_rx_result open_rx (uint64_t * x, int32_t sx,
                                 uint64_t * y, int32_t sy)
{
  struct __open_rx_result result;
  result.__field_0 = x;
  result.__field_1 = x;
  result.__field_2 = y;
  return result;
}

struct __open_ry_result open_ry (uint64_t * x, int32_t sx,
                                 uint64_t * y, int32_t sy)
{
  struct __open_ry_result result;
  result.__field_0 = y;
  result.__field_1 = x;
  result.__field_2 = y;
  return result;
}

struct __open_rxy_result open_rxy (uint64_t * x, int32_t sx)
{
  struct __open_rxy_result result;
  result.__field_0 = x;
  result.__field_1 = x;
  result.__field_2 = x;
  return result;
}
"

  interface "
struct __open_sep_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_rx_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_ry_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_rxy_result
{ uint64_t *__field_0;
  uint64_t *__field_1;
  uint64_t *__field_2;
};

struct __open_sep_result open_sep (uint64_t * r, uint64_t * x, int32_t sx,
                                   uint64_t * y, int32_t sy);

struct __open_rx_result open_rx (uint64_t * x, int32_t sx,
                                 uint64_t * y, int32_t sy);

struct __open_ry_result open_ry (uint64_t * x, int32_t sx,
                                 uint64_t * y, int32_t sy);

struct __open_rxy_result open_rxy (uint64_t * x, int32_t sx);
"

  syntax val open_sep "open_sep"
  syntax val open_rx "open_rx"
  syntax val open_ry "open_ry"
  syntax val open_rxy "open_rxy"
  syntax val close_sep "IGNORE3(%1,%2,%4)" prec 1 15 15 15
  syntax val close_rx "IGNORE3(%1,%2,%4)" prec 1 15 15 15
  syntax val close_ry "IGNORE3(%1,%2,%4)" prec 1 15 15 15
  syntax val close_rxy "IGNORE3(%1,%2,%4)" prec 1 15 15 15

end

module mpz.Z

prelude "
typedef struct
{
  int _alloc;
  int _size;
  uint64_t * _ptr;
} __mpz_struct;

typedef __mpz_struct *mpz_ptr;

#define SIZ(x) ((x)->_size)
#define ALLOC(x) ((x)->_alloc)
#define PTR(x) ((x)->_ptr)

void wmpz_init (mpz_ptr x) {
  ALLOC(x) = 1;
  SIZ(x) = 0;
  PTR(x) = malloc(1);
  PTR(x)[0] = 0;
}

void wmpz_clear (mpz_ptr x)
{
  free (PTR(x));
}
"

interface "
typedef struct
{
  int _alloc;
  int _size;
  uint64_t * _ptr;
} __mpz_struct;

typedef __mpz_struct *mpz_ptr;

#define SIZ(x) ((x)->_size)
#define ALLOC(x) ((x)->_alloc)
#define PTR(x) ((x)->_ptr)

void wmpz_init (mpz_ptr x);
void wmpz_clear (mpz_ptr x);
"

  syntax type mpz_ptr "mpz_ptr"
  syntax val mpz_eq "%1 == %2" prec 7 15 14
  syntax val size_of "SIZ(%1)" prec 1 15
  syntax val set_size "SIZ(%1) = %2" prec 14 15 14
  syntax val set_size_0 "SIZ(%1) = 0" prec 14 15
  syntax val wmpz_minus "SIZ(%1) = -SIZ(%1)" prec 14 15 15
  syntax val set_alloc "ALLOC(%1) = %2" prec 14 15 14
  syntax val set_ptr "PTR(%1) = %2" prec 14 15 14
  syntax val get_read_ptr "PTR(%1)" prec 1 15
  syntax val get_write_ptr "PTR(%1)" prec 1 15
  syntax val release_reader "(void)(%1)" prec 2 15
  syntax val release_writer "(void)(%1)" prec 2 15
  syntax val wmpz_init "wmpz_init(%0)" prec 2 15
  syntax val wmpz_clear "wmpz_clear"

end