module sqrt.Sqrt1

  prelude "\n\
#include \"sqrtinit.h\"\n\
\n\
uint64_t rsa_estimate (uint64_t a) {\n\
  uint64_t abits, x0;\n\
  abits = a >> 55;\n\
  x0 = 0x100 | invsqrttab[abits - 0x80];\n\
  return x0;\n\
}\n\
"

end

module powm.Powm

prelude "#include \"binverttab.h\"\n\
\n\
uint64_t binvert_limb_table (uint64_t n) {\n\
  return (uint64_t)binverttab[n];\n\
}\n\
"

end

module mach.int.UInt64GMP

  prelude "\n\
typedef unsigned __int128 uint128_t;\n\
\n\
struct __mul64_double_result\n\
{ uint64_t __field_0;\n\
  uint64_t __field_1;\n\
};\n\
\n\
struct __mul64_double_result mul64_double(uint64_t x, uint64_t y)\n\
{\n\
  uint128_t z = (uint128_t)x * (uint128_t)y;\n\
  struct __mul64_double_result result = { z, z >> 64 };\n\
  return result;\n\
}\n\
\n\
uint64_t div64_2by1(uint64_t ul, uint64_t uh, uint64_t d)\n\
{\n\
  return (((uint128_t)uh << 64) | ul) / d;\n\
}\n\
"

  interface "\n\
typedef unsigned __int128 uint128_t;\n\
\n\
struct __mul64_double_result\n\
{ uint64_t __field_0;\n\
  uint64_t __field_1;\n\
};\n\
\n\
static inline struct __mul64_double_result mul64_double(uint64_t x, uint64_t y)\n\
{\n\
  uint128_t z = (uint128_t)x * (uint128_t)y;\n\
  struct __mul64_double_result result = { z, z >> 64 };\n\
  return result;\n\
}\n\
\n\
static inline uint64_t div64_2by1(uint64_t ul, uint64_t uh, uint64_t d)\n\
{\n\
  return (((uint128_t)uh << 64) | ul) / d;\n\
}\n\
"

(* "
static struct __mul64_double_result mul64_double(uint64_t x, uint64_t y)
{
  struct __mul64_double_result result;
  umul_ppmm(result.__field_1,result.__field_0,x,y);
  return result;
}

static uint64_t div64_2by1(uint64_t ul, uint64_t uh, uint64_t d)
{
  uint64_t q;
  uint64_t _dummy __attribute__((unused));
  udiv_qrnnd(q,_dummy,uh,ul,d);
  return q;
}
" *)

  syntax val mul_double "mul64_double"
  syntax val div2by1 "div64_2by1"

end

module add_alias.AddAlias

  prelude "\n\
struct __open_sep_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_rx_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_ry_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_rxy_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_sep_result open_sep (uint64_t * r, uint64_t * x, int32_t sx,\n\
                                   uint64_t * y, int32_t sy)\n\
{\n\
  struct __open_sep_result result;\n\
  result.__field_0 = r;\n\
  result.__field_1 = x;\n\
  result.__field_2 = y;\n\
  return result;\n\
}\n\
\n\
\n\
struct __open_rx_result open_rx (uint64_t * x, int32_t sx,\n\
                                 uint64_t * y, int32_t sy)\n\
{\n\
  struct __open_sep_result result;\n\
  result.__field_0 = x;\n\
  result.__field_1 = x;\n\
  result.__field_2 = y;\n\
  return result;\n\
}\n\
\n\
struct __open_ry_result open_ry (uint64_t * x, int32_t sx,\n\
                                 uint64_t * y, int32_t sy)\n\
{\n\
  struct __open_sep_result result;\n\
  result.__field_0 = y;\n\
  result.__field_1 = x;\n\
  result.__field_2 = y;\n\
  return result;\n\
}\n\
\n\
struct __open_rxy_result open_rxy (uint64_t * x, int32_t sx)\n\
{\n\
  struct __open_sep_result result;\n\
  result.__field_0 = x;\n\
  result.__field_1 = x;\n\
  result.__field_2 = x;\n\
  return result;\n\
}\n\
"

  interface "\n\
struct __open_sep_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_rx_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_ry_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_rxy_result\n\
{ uint64_t *__field_0;\n\
  uint64_t *__field_1;\n\
  uint64_t *__field_2;\n\
}\n\
\n\
struct __open_sep_result open_sep (uint64_t * r, uint64_t * x, int32_t sx,\n\
                                   uint64_t * y, int32_t sy);\n\
\n\
struct __open_rx_result open_rx (uint64_t * x, int32_t sx,\n\
                                 uint64_t * y, int32_t sy);\n\
\n\
struct __open_ry_result open_ry (uint64_t * x, int32_t sx,\n\
                                 uint64_t * y, int32_t sy);\n\
\n\
struct __open_rxy_result open_rxy (uint64_t * x, int32_t sx);\n\
"

  syntax val open_sep "open_sep"
  syntax val open_rx "open_rx"
  syntax val open_ry "open_ry"
  syntax val open_rxy "open_rxy"
  syntax val close_sep "IGNORE3(%1,%2,%4)"
  syntax val close_rx "IGNORE3(%1,%2,%4)"
  syntax val close_ry "IGNORE3(%1,%2,%4)"
  syntax val close_rxy "IGNORE3(%1,%2,%4)"




end