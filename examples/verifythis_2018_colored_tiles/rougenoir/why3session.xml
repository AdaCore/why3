<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="1" name="CVC4" version="1.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="1.30" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.5.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file name="../rougenoir.mlw" proved="true">
<theory name="ColoredTiles" proved="true">
 <goal name="valid_contr" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="6"/></proof>
 </goal>
 <goal name="colo_0" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="colo_0.0" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="colo_0.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="colo_0.2" proved="true">
  <transf name="unfold" proved="true" arg1="colorings0">
   <goal name="colo_0.2.0" proved="true">
   <transf name="rewrite" proved="true" arg1="add_spec">
    <goal name="colo_0.2.0.0" proved="true">
    <proof prover="3"><result status="valid" time="0.23"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="colo_1" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="colo_1.0" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="colo_1.1" proved="true">
  <proof prover="3"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="colo_1.2" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="colo_1.3" proved="true">
  <transf name="unfold" proved="true" arg1="colorings1">
   <goal name="colo_1.3.0" proved="true">
   <transf name="rewrite" proved="true" arg1="add_spec">
    <goal name="colo_1.3.0.0" proved="true">
    <transf name="left" proved="true" >
     <goal name="colo_1.3.0.0.0" proved="true">
     <proof prover="3"><result status="valid" time="0.04"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="colo_2" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="colo_2.0" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="colo_2.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="colo_2.2" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="colo_2.3" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="colo_2.4" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="colo_2.5" proved="true">
  <transf name="subst" proved="true" arg1="colorings2">
   <goal name="colo_2.5.0" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="colo_2.5.0.0" proved="true">
    <transf name="rewrite" proved="true" arg1="add_spec">
     <goal name="colo_2.5.0.0.0" proved="true">
     <transf name="left" proved="true" >
      <goal name="colo_2.5.0.0.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.05"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="colo_3" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="colo_3.0" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="colo_3.1" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="colo_3.2" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="colo_3.3" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="colo_3.4" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="colo_3.5" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="colo_3.6" proved="true">
  <proof prover="2"><result status="valid" time="0.45" steps="1584"/></proof>
  </goal>
  <goal name="colo_3.7" proved="true">
  <proof prover="3"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="colo_3.8" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="colo_3.9" proved="true">
  <proof prover="3"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="colo_3.10" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="colo_3.11" proved="true">
  <transf name="subst" proved="true" arg1="colorings3">
   <goal name="colo_3.11.0" proved="true">
   <transf name="rewrite" proved="true" arg1="add_spec">
    <goal name="colo_3.11.0.0" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="colo_3.11.0.0.0" proved="true">
     <transf name="case" proved="true" arg1="c[0]=Black">
      <goal name="colo_3.11.0.0.0.0" expl="true case" proved="true">
      <transf name="right" proved="true" >
       <goal name="colo_3.11.0.0.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="add_spec">
        <goal name="colo_3.11.0.0.0.0.0.0" proved="true">
        <transf name="left" proved="true" >
         <goal name="colo_3.11.0.0.0.0.0.0.0" proved="true">
         <proof prover="3"><result status="valid" time="0.03"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="colo_3.11.0.0.0.1" expl="false case" proved="true">
      <transf name="left" proved="true" >
       <goal name="colo_3.11.0.0.0.1.0" proved="true">
       <proof prover="3"><result status="valid" time="0.04"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC valid_split_fb" expl="VC for valid_split_fb" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC valid_split_fb.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC valid_split_fb.1" expl="VC for valid_split_fb" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC valid_split_fb.1.0" expl="VC for valid_split_fb" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC valid_split_fb.1.1" expl="VC for valid_split_fb" proved="true">
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
   <goal name="VC valid_split_fb.1.2" expl="VC for valid_split_fb" proved="true">
   <proof prover="1"><result status="valid" time="0.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC valid_split_fb.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="201"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC valid_restrict" expl="VC for valid_restrict" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC valid_restrict.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC valid_restrict.0.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.18"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC first_black_tile" expl="VC for first_black_tile" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC first_black_tile.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC first_black_tile.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC first_black_tile.2" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC first_black_tile.3" expl="VC for first_black_tile" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC first_black_tile.3.0" expl="VC for first_black_tile" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC first_black_tile.3.1" expl="VC for first_black_tile" proved="true">
   <proof prover="3"><result status="valid" time="0.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_black_tile.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="VC first_black_tile.5" expl="VC for first_black_tile" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="VC first_black_tile.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.28" steps="518"/></proof>
  </goal>
  <goal name="VC first_black_tile.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="219"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC addleft" expl="VC for addleft" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC addleft.0" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC addleft.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="addleft_fb" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="addleft_fb.0" proved="true">
  <transf name="induction" proved="true" arg1="nr">
   <goal name="addleft_fb.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="addleft_fb.0.1" expl="recursive case" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="addleft_fb.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mapaddleft_fb" proved="true">
 <proof prover="3"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="VC bij_image" expl="VC for bij_image" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC bij_image.0" expl="VC for bij_image" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC bij_image.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bij_cardinal" expl="VC for bij_cardinal" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC bij_cardinal.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC bij_cardinal.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC bij_cardinal.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC bij_cardinal.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ext" proved="true">
 <proof prover="3"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="app_eq" proved="true">
 <proof prover="3"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="VC addleft_result" expl="VC for addleft_result" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC addleft_result.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC addleft_result.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC addleft_result.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC addleft_result.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC addleft_result.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC addleft_result.5" expl="assertion" proved="true">
  <transf name="subst" proved="true" arg1="o">
   <goal name="VC addleft_result.5.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC addleft_result.5.0.0" expl="assertion" proved="true">
    <transf name="subst" proved="true" arg1="o1">
     <goal name="VC addleft_result.5.0.0.0" expl="assertion" proved="true">
     <transf name="subst" proved="true" arg1="o">
      <goal name="VC addleft_result.5.0.0.0.0" expl="assertion" proved="true">
      <transf name="unfold" proved="true" arg1="cnrm">
       <goal name="VC addleft_result.5.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="app_eq">
        <goal name="VC addleft_result.5.0.0.0.0.0.0" proved="true">
        <proof prover="3"><result status="valid" time="0.01"/></proof>
        </goal>
        <goal name="VC addleft_result.5.0.0.0.0.0.1" proved="true">
        <transf name="apply" proved="true" arg1="ext">
         <goal name="VC addleft_result.5.0.0.0.0.0.1.0" proved="true">
         <proof prover="2"><result status="valid" time="0.02" steps="51"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC addleft_result.6" expl="assertion" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC addleft_result.6.0" expl="VC for addleft_result" proved="true">
   <proof prover="2"><result status="valid" time="0.66" steps="377"/></proof>
   </goal>
   <goal name="VC addleft_result.6.1" expl="VC for addleft_result" proved="true">
   <transf name="apply" proved="true" arg1="ext">
    <goal name="VC addleft_result.6.1.0" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="8"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC addleft_result.7" expl="assertion" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC addleft_result.7.0" expl="VC for addleft_result" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC addleft_result.7.1" expl="VC for addleft_result" proved="true">
   <transf name="subst" proved="true" arg1="o">
    <goal name="VC addleft_result.7.1.0" expl="VC for addleft_result" proved="true">
    <transf name="rewrite" proved="true" arg1="&lt;-" arg2="H1">
     <goal name="VC addleft_result.7.1.0.0" expl="VC for addleft_result" proved="true">
     <proof prover="3"><result status="valid" time="0.02"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC addleft_result.7.2" expl="VC for addleft_result" proved="true">
   <transf name="rewrite" proved="true" arg1="cons_def">
    <goal name="VC addleft_result.7.2.0" expl="VC for addleft_result" proved="true">
    <transf name="rewrite" proved="true" arg1="cons_def">
     <goal name="VC addleft_result.7.2.0.0" expl="VC for addleft_result" proved="true">
     <transf name="rewrite" proved="true" arg1="cons_def">
      <goal name="VC addleft_result.7.2.0.0.0" expl="VC for addleft_result" proved="true">
      <transf name="rewrite" proved="true" arg1="associative">
       <goal name="VC addleft_result.7.2.0.0.0.0" expl="VC for addleft_result" proved="true">
       <transf name="apply" proved="true" arg1="app_eq">
        <goal name="VC addleft_result.7.2.0.0.0.0.0" proved="true">
        <proof prover="3"><result status="valid" time="0.02"/></proof>
        </goal>
        <goal name="VC addleft_result.7.2.0.0.0.0.1" proved="true">
        <transf name="apply" proved="true" arg1="app_eq">
         <goal name="VC addleft_result.7.2.0.0.0.0.1.0" proved="true">
         <transf name="apply" proved="true" arg1="ext">
          <goal name="VC addleft_result.7.2.0.0.0.0.1.0.0" proved="true">
          <proof prover="2"><result status="valid" time="0.02" steps="9"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC addleft_result.7.2.0.0.0.0.1.1" proved="true">
         <proof prover="3"><result status="valid" time="0.01"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC addleft_result.7.3" expl="VC for addleft_result" proved="true">
   <transf name="subst" proved="true" arg1="o">
    <goal name="VC addleft_result.7.3.0" expl="VC for addleft_result" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC addleft_result.7.3.0.0" expl="VC for addleft_result" proved="true">
     <transf name="apply" proved="true" arg1="app_eq">
      <goal name="VC addleft_result.7.3.0.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.03"/></proof>
      </goal>
      <goal name="VC addleft_result.7.3.0.0.1" proved="true">
      <transf name="apply" proved="true" arg1="ext">
       <goal name="VC addleft_result.7.3.0.0.1.0" proved="true">
       <proof prover="2"><result status="valid" time="0.02" steps="9"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC addleft_result.7.4" expl="VC for addleft_result" proved="true">
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC addleft_result.8" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC addleft_result.8.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(nr = 0)">
    <goal name="VC addleft_result.8.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="VC addleft_result.8.0.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC addleft_result.8.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="apply" proved="true" arg1="H">
      <goal name="VC addleft_result.8.0.1.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.02"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC addleft_bijective" expl="VC for addleft_bijective" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC addleft_bijective.0" expl="VC for addleft_bijective" proved="true">
  <transf name="unfold" proved="true" arg1="rmleft">
   <goal name="VC addleft_bijective.0.0" expl="VC for addleft_bijective" proved="true">
   <proof prover="2"><result status="valid" time="0.71" steps="193"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC addleft_bijective.1" expl="VC for addleft_bijective" proved="true">
  <proof prover="2"><result status="valid" time="0.17" steps="202"/></proof>
  </goal>
  <goal name="VC addleft_bijective.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mapaddleft_card" expl="VC for mapaddleft_card" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC mapaddleft_card.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC mapaddleft_card.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC mapaddleft_card.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC addleft_valid" expl="VC for addleft_valid" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC addleft_valid.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC addleft_valid.1" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC addleft_valid.1.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="7.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC addleft_valid.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC addleft_valid.3" expl="VC for addleft_valid" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC addleft_valid.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC addleft_valid.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mapaddleft_valid" expl="VC for mapaddleft_valid" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="VC mapaddleft_valid.0" expl="VC for mapaddleft_valid" proved="true">
  <transf name="split_goal_wp" proved="true" >
   <goal name="VC mapaddleft_valid.0.0" expl="assertion" proved="true">
   <transf name="split_intros_goal_wp" proved="true" >
    <goal name="VC mapaddleft_valid.0.0.0" expl="VC for mapaddleft_valid" proved="true">
    <proof prover="3"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="VC mapaddleft_valid.0.0.1" expl="VC for mapaddleft_valid" proved="true">
    <proof prover="3"><result status="valid" time="0.21"/></proof>
    </goal>
    <goal name="VC mapaddleft_valid.0.0.2" expl="VC for mapaddleft_valid" proved="true">
    <proof prover="3"><result status="valid" time="0.02"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mapaddleft_valid.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.01"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mapaddleft_length" expl="VC for mapaddleft_length" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="VC mapaddleft_length.0" expl="VC for mapaddleft_length" proved="true">
  <transf name="split_goal_wp" proved="true" >
   <goal name="VC mapaddleft_length.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="119"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC disjoint_union" expl="VC for disjoint_union" proved="true">
 <transf name="split_goal_wp" proved="true" >
  <goal name="VC disjoint_union.0" expl="assertion" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC disjoint_union.0.0" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.0.1" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.0.2" expl="VC for disjoint_union" proved="true">
   <proof prover="2"><result status="valid" time="0.02" steps="67"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC disjoint_union.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC disjoint_union.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC disjoint_union.3" expl="assertion" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC disjoint_union.3.0" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.1" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.2" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.3" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.4" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.5" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.6" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.7" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.8" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.9" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.10" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.11" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.12" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.13" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.14" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.15" expl="VC for disjoint_union" proved="true">
   <proof prover="2"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
   <goal name="VC disjoint_union.3.16" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC disjoint_union.4" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC disjoint_union.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC disjoint_union.4.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC disjoint_union.4.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02"/></proof>
    </goal>
    <goal name="VC disjoint_union.4.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02"/></proof>
    </goal>
    <goal name="VC disjoint_union.4.1.2" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02"/></proof>
    </goal>
    <goal name="VC disjoint_union.4.1.3" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC disjoint_union.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC enum" expl="VC for enum" proved="true">
 <transf name="split_intros_goal_wp" proved="true" >
  <goal name="VC enum.0" expl="array creation size" proved="true">
  <proof prover="3"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC enum.1" expl="array creation size" proved="true">
  <proof prover="3"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="VC enum.2" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.3" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.4" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.19" steps="621"/></proof>
  </goal>
  <goal name="VC enum.5" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.6" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.7" expl="VC for enum" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC enum.7.0" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.26" steps="401"/></proof>
   </goal>
   <goal name="VC enum.7.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.09" steps="320"/></proof>
   </goal>
   <goal name="VC enum.7.2" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.75" steps="1198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.8" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.9" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.10" expl="VC for enum" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC enum.10.0" expl="VC for enum" proved="true">
   <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="4.36" steps="3059"/></proof>
   </goal>
   <goal name="VC enum.10.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.24" steps="762"/></proof>
   </goal>
   <goal name="VC enum.10.2" expl="VC for enum" proved="true">
   <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="7.88" steps="8921"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.11" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.12" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.13" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall m:array (set2 coloring), i v. m[i &lt;- v][i] = v)">
   <goal name="VC enum.13.0" proved="true">
   <proof prover="2"><result status="valid" time="0.03" steps="30"/></proof>
   </goal>
   <goal name="VC enum.13.1" expl="assertion" proved="true">
   <transf name="subst" proved="true" arg1="sets">
    <goal name="VC enum.13.1.0" expl="assertion" proved="true">
    <transf name="subst" proved="true" arg1="o">
     <goal name="VC enum.13.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.14" expl="VC for enum" proved="true">
  <transf name="case" proved="true" arg1="i=3">
   <goal name="VC enum.14.0" expl="true case" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="VC enum.14.0.0" expl="true case" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC enum.14.0.0.0" expl="true case" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC enum.14.0.0.0.0" expl="VC for enum" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="VC enum.14.0.0.0.0.0" expl="VC for enum" proved="true">
       <transf name="apply" proved="true" arg1="colo_31">
        <goal name="VC enum.14.0.0.0.0.0.0" proved="true">
        <proof prover="3"><result status="valid" time="0.02"/></proof>
        </goal>
        <goal name="VC enum.14.0.0.0.0.0.1" proved="true">
        <proof prover="3"><result status="valid" time="0.01"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC enum.14.0.0.0.1" expl="VC for enum" proved="true">
      <proof prover="2"><result status="valid" time="0.55" steps="1383"/></proof>
      </goal>
      <goal name="VC enum.14.0.0.0.2" expl="VC for enum" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="VC enum.14.0.0.0.2.0" expl="VC for enum" proved="true">
       <transf name="apply" proved="true" arg1="colo_3">
        <goal name="VC enum.14.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="H">
        </transf>
        </goal>
        <goal name="VC enum.14.0.0.0.2.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.44" steps="1383"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC enum.14.1" expl="false case" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC enum.14.1.0" expl="VC for enum" proved="true">
    <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.24" steps="578"/></proof>
    </goal>
    <goal name="VC enum.14.1.1" expl="VC for enum" proved="true">
    <proof prover="2"><result status="valid" time="0.44" steps="994"/></proof>
    </goal>
    <goal name="VC enum.14.1.2" expl="VC for enum" proved="true">
    <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.74" steps="1510"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.15" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC enum.15.0" expl="assertion" proved="true">
   <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="1.94" steps="2366"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.16" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.17" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="457"/></proof>
  </goal>
  <goal name="VC enum.18" expl="VC for enum" proved="true">
  <transf name="assert" proved="true" arg1="(i=0\/i=1\/i=2\/i=3)">
   <goal name="VC enum.18.0" proved="true">
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
   <goal name="VC enum.18.1" expl="VC for enum" proved="true">
   <transf name="revert" proved="true" arg1="h">
    <goal name="VC enum.18.1.0" expl="VC for enum" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC enum.18.1.0.0" expl="VC for enum" proved="true">
     <proof prover="2"><result status="valid" time="0.34" steps="573"/></proof>
     </goal>
     <goal name="VC enum.18.1.0.1" expl="VC for enum" proved="true">
     <proof prover="2"><result status="valid" time="0.56" steps="954"/></proof>
     </goal>
     <goal name="VC enum.18.1.0.2" expl="VC for enum" proved="true">
     <proof prover="2"><result status="valid" time="0.75" steps="1333"/></proof>
     </goal>
     <goal name="VC enum.18.1.0.3" expl="VC for enum" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="VC enum.18.1.0.3.0" expl="VC for enum" proved="true">
      <transf name="replace" proved="true" arg1="i" arg2="3">
       <goal name="VC enum.18.1.0.3.0.0" expl="VC for enum" proved="true">
       <transf name="replace" proved="true" arg1="sets[3]" arg2="colorings3">
        <goal name="VC enum.18.1.0.3.0.0.0" expl="VC for enum" proved="true">
        <transf name="rewrite" proved="true" arg1="H7">
         <goal name="VC enum.18.1.0.3.0.0.0.0" expl="VC for enum" proved="true">
         <proof prover="2"><result status="valid" time="0.02" steps="34"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC enum.18.1.0.3.0.0.1" proved="true">
        <transf name="apply" proved="true" arg1="H20">
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC enum.18.1.0.3.0.1" proved="true">
       <proof prover="3"><result status="valid" time="0.01"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.19" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.20" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.21" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.22" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="140"/></proof>
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.24" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.25" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.26" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC enum.27" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
  <goal name="VC enum.28" expl="VC for enum" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC enum.28.0" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC enum.28.1" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.16"/></proof>
   </goal>
   <goal name="VC enum.28.2" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.23" steps="490"/></proof>
   </goal>
   <goal name="VC enum.28.3" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="VC enum.28.4" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.08"/></proof>
   </goal>
   <goal name="VC enum.28.5" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.03" steps="50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.29" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.30" expl="VC for enum" proved="true">
  <transf name="case" proved="true" arg1="i=n">
   <goal name="VC enum.30.0" expl="true case" proved="true">
   <proof prover="3"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC enum.30.1" expl="false case" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC enum.30.1.0" expl="VC for enum" proved="true">
    <proof prover="2"><result status="valid" time="0.65" steps="902"/></proof>
    </goal>
    <goal name="VC enum.30.1.1" expl="VC for enum" proved="true">
    <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="2.86" steps="4862"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.31" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="125"/></proof>
  </goal>
  <goal name="VC enum.32" expl="VC for enum" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC enum.32.0" expl="VC for enum" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC enum.32.0.0" expl="VC for enum" proved="true">
    <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="1.92" steps="2853"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC enum.32.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.03" steps="55"/></proof>
   </goal>
   <goal name="VC enum.32.2" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.90" steps="1926"/></proof>
   </goal>
   <goal name="VC enum.32.3" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.33" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="140"/></proof>
  </goal>
  <goal name="VC enum.34" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.35" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.36" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.37" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.38" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.41" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC enum.42" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.44" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.46" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.47" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.48" expl="VC for enum" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC enum.48.0" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="168"/></proof>
   </goal>
   <goal name="VC enum.48.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.30" steps="604"/></proof>
   </goal>
   <goal name="VC enum.48.2" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC enum.48.3" expl="VC for enum" proved="true">
   <transf name="case" proved="true" arg1="i&lt;k">
    <goal name="VC enum.48.3.0" expl="true case" proved="true">
    <proof prover="2"><result status="valid" time="0.09" steps="285"/></proof>
    </goal>
    <goal name="VC enum.48.3.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="i=k">
     <goal name="VC enum.48.3.1.0" expl="false case (true case)" proved="true">
     <proof prover="2"><result status="valid" time="0.58" steps="781"/></proof>
     </goal>
     <goal name="VC enum.48.3.1.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(get1 c i = get1 c[k+1 ..] (i-k-1))">
      <goal name="VC enum.48.3.1.1.0" proved="true">
      <proof prover="3"><result status="valid" time="0.65"/></proof>
      </goal>
      <goal name="VC enum.48.3.1.1.1" expl="false case" proved="true">
      <proof prover="1"><result status="valid" time="0.41"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC enum.48.4" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.18" steps="353"/></proof>
   </goal>
   <goal name="VC enum.48.5" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC enum.48.6" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.09"/></proof>
   </goal>
   <goal name="VC enum.48.7" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.49" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.50" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.51" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.52" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="59"/></proof>
  </goal>
  <goal name="VC enum.53" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="59"/></proof>
  </goal>
  <goal name="VC enum.54" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="170"/></proof>
  </goal>
  <goal name="VC enum.55" expl="VC for enum" proved="true">
  <transf name="apply" proved="true" arg1="H21">
   <goal name="VC enum.55.0" proved="true">
   <proof prover="3"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC enum.55.1" proved="true">
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.56" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="157"/></proof>
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC enum.57" expl="VC for enum" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC enum.57.0" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.38" steps="656"/></proof>
   </goal>
   <goal name="VC enum.57.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.54" steps="664"/></proof>
   </goal>
   <goal name="VC enum.57.2" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.51" steps="747"/></proof>
   </goal>
   <goal name="VC enum.57.3" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="172"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.58" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="170"/></proof>
  </goal>
  <goal name="VC enum.59" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.60" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.61" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="295"/></proof>
  </goal>
  <goal name="VC enum.62" expl="assertion" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="VC enum.62.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="VC enum.62.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.46" steps="1513"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.63" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.64" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="VC enum.65" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.66" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="VC enum.67" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC enum.68" expl="VC for enum" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC enum.68.0" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.28" steps="367"/></proof>
   </goal>
   <goal name="VC enum.68.1" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="1.40"/></proof>
   </goal>
   <goal name="VC enum.68.2" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="1.31" steps="1813"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.69" expl="VC for enum" proved="true">
  <transf name="split_intros_goal_wp" proved="true" >
   <goal name="VC enum.69.0" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.07"/></proof>
   </goal>
   <goal name="VC enum.69.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="171"/></proof>
   </goal>
   <goal name="VC enum.69.2" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC enum.69.3" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.10" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.70" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="59"/></proof>
  </goal>
  <goal name="VC enum.71" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="59"/></proof>
  </goal>
  <goal name="VC enum.72" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="779"/></proof>
  </goal>
  <goal name="VC enum.73" expl="VC for enum" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC enum.73.0" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.79" steps="1337"/></proof>
   </goal>
   <goal name="VC enum.73.1" expl="VC for enum" proved="true">
   <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="3.74" steps="4861"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC enum.74" expl="VC for enum" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="861"/></proof>
  </goal>
  <goal name="VC enum.75" expl="VC for enum" proved="true">
  <proof prover="3"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC enum.76" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="380"/></proof>
  </goal>
  <goal name="VC enum.77" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="29"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
