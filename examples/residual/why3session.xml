<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="4" name="Alt-Ergo" version="2.5.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC5" version="1.1.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Z3" version="4.13.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="residual.mlw"/>
<theory name="Residual" proved="true">
 <goal name="accepts_epsilon&#39;vc" expl="VC for accepts_epsilon" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="accepts_epsilon&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.025215" steps="55"/></proof>
  </goal>
  <goal name="accepts_epsilon&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.016158" steps="66"/></proof>
  </goal>
  <goal name="accepts_epsilon&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.013549" steps="55"/></proof>
  </goal>
  <goal name="accepts_epsilon&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.016700" steps="69"/></proof>
  </goal>
  <goal name="accepts_epsilon&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="accepts_epsilon&#39;vc.4.0" expl="VC for accepts_epsilon" proved="true">
   <proof prover="6" timelimit="1"><result status="valid" time="0.046116" steps="126850"/></proof>
   </goal>
   <goal name="accepts_epsilon&#39;vc.4.1" expl="VC for accepts_epsilon" proved="true">
   <proof prover="4"><result status="valid" time="0.037417" steps="449"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inversion_mem_star_gen" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inversion_mem_star_gen.0" proved="true">
  <proof prover="4"><result status="valid" time="0.007178" steps="16"/></proof>
  </goal>
  <goal name="inversion_mem_star_gen.1" proved="true">
  <proof prover="4"><result status="valid" time="0.007327" steps="19"/></proof>
  </goal>
  <goal name="inversion_mem_star_gen.2" proved="true">
  <proof prover="4"><result status="valid" time="0.010358" steps="19"/></proof>
  </goal>
  <goal name="inversion_mem_star_gen.3" proved="true">
  <proof prover="4"><result status="valid" time="0.006841" steps="19"/></proof>
  </goal>
  <goal name="inversion_mem_star_gen.4" proved="true">
  <proof prover="4"><result status="valid" time="0.014160" steps="25"/></proof>
  </goal>
  <goal name="inversion_mem_star_gen.5" proved="true">
  <proof prover="4"><result status="valid" time="0.014574" steps="61"/></proof>
  </goal>
  <goal name="inversion_mem_star_gen.6" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inversion_mem_star_gen.6.0" proved="true">
   <transf name="case" proved="true" arg1="(w1 = empty)">
    <goal name="inversion_mem_star_gen.6.0.0" expl="true case" proved="true">
    <proof prover="4"><result status="valid" time="0.013836" steps="146"/></proof>
    </goal>
    <goal name="inversion_mem_star_gen.6.0.1" expl="false case" proved="true">
    <transf name="exists" proved="true" arg1="w1[1..]">
     <goal name="inversion_mem_star_gen.6.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="w2">
      <goal name="inversion_mem_star_gen.6.0.1.0.0" proved="true">
      <proof prover="4"><result status="valid" time="0.121475" steps="1800"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inversion_mem_star" proved="true">
 <proof prover="4"><result status="valid" time="0.023392" steps="56"/></proof>
 </goal>
 <goal name="residual&#39;vc" expl="VC for residual" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="residual&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.020942" steps="64"/></proof>
  </goal>
  <goal name="residual&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.016649" steps="68"/></proof>
  </goal>
  <goal name="residual&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.019908" steps="64"/></proof>
  </goal>
  <goal name="residual&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.014786" steps="68"/></proof>
  </goal>
  <goal name="residual&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="residual&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="3.271157" steps="2626528"/></proof>
   </goal>
   <goal name="residual&#39;vc.4.1" expl="assertion" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.887163" steps="130334"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="residual&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.018219" steps="64"/></proof>
  </goal>
  <goal name="residual&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="residual&#39;vc.6.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="residual&#39;vc.6.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.034848" steps="409"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.0.1" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.040839" steps="406"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.0.2" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.053307" steps="899"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.0.3" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.079408" steps="1152"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.0.4" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="residual&#39;vc.6.0.4.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.105265" steps="1622"/></proof>
     </goal>
     <goal name="residual&#39;vc.6.0.4.1" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.163633" steps="2516"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="residual&#39;vc.6.0.5" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.146338" steps="2256"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="residual&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="split_goal_right" proved="true" >
    <goal name="residual&#39;vc.6.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="residual&#39;vc.6.1.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.038926" steps="361"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="residual&#39;vc.6.1.1" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.030960" steps="387"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.1.2" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="residual&#39;vc.6.1.2.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.033840" steps="445"/></proof>
     </goal>
     <goal name="residual&#39;vc.6.1.2.1" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.031779" steps="380"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="residual&#39;vc.6.1.3" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.055093" steps="429"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.1.4" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="residual&#39;vc.6.1.4.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.115098" steps="1538"/></proof>
     </goal>
     <goal name="residual&#39;vc.6.1.4.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="1.496747" steps="189595"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="residual&#39;vc.6.1.5" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.015682" steps="84"/></proof>
    </goal>
   </transf>
   <transf name="split_vc" proved="true" >
    <goal name="residual&#39;vc.6.1.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.037188" steps="361"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.1.1" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.033042" steps="387"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.1.2" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.043116" steps="597"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.1.3" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.033280" steps="415"/></proof>
    </goal>
    <goal name="residual&#39;vc.6.1.4" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="residual&#39;vc.6.1.4.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.104677" steps="1538"/></proof>
     </goal>
     <goal name="residual&#39;vc.6.1.4.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="1.572106" steps="189595"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="residual&#39;vc.6.1.5" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.020990" steps="74"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decide_mem&#39;vc" expl="VC for decide_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decide_mem&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.340184" steps="4573"/></proof>
  </goal>
  <goal name="decide_mem&#39;vc.1" expl="loop invariant preservation" proved="true">
  <transf name="assert" proved="true" arg1="(w[i..] == cons w[i] w[i+1..])">
   <goal name="decide_mem&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.036854" steps="303"/></proof>
   </goal>
   <goal name="decide_mem&#39;vc.1.1" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.011101" steps="35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decide_mem&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.023577" steps="63"/></proof>
  </goal>
  <goal name="decide_mem&#39;vc.3" expl="VC for decide_mem" proved="true">
  <proof prover="4"><result status="valid" time="0.017138" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ResidualOCaml" proved="true">
 <goal name="decide&#39;vc" expl="VC for decide" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decide&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.020655" steps="28"/></proof>
  </goal>
  <goal name="decide&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.460152" steps="5962"/></proof>
  </goal>
  <goal name="decide&#39;vc.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.016686" steps="21"/></proof>
  </goal>
  <goal name="decide&#39;vc.3" expl="loop invariant preservation" proved="true">
  <transf name="assert" proved="true" arg1="((w.str)[i..] == cons (get w.str i) w.str[i+1..])">
   <goal name="decide&#39;vc.3.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.041379" steps="427"/></proof>
   </goal>
   <goal name="decide&#39;vc.3.1" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.010667" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decide&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.018554" steps="102"/></proof>
  </goal>
  <goal name="decide&#39;vc.5" expl="VC for decide" proved="true">
  <proof prover="4"><result status="valid" time="0.011683" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
