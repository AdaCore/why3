<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="2" name="Alt-Ergo" version="1.30" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Coq" version="8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Z3" version="4.5.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file name="../vstte12_tree_reconstruction.mlw" expanded="true">
<theory name="Tree" sum="7e400f0e91e1fc7b7f018ec3cf42cbac">
 <goal name="VC depths" expl="VC for depths">
 <transf name="split_goal_wp">
 </transf>
 </goal>
 <goal name="depths_head" expl="">
 <transf name="induction_ty_lex">
  <goal name="depths_head.1" expl="">
  <proof prover="2"><result status="valid" time="0.01" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC depths_unique" expl="VC for depths_unique">
 <proof prover="2"><result status="valid" time="0.10" steps="623"/></proof>
 </goal>
 <goal name="depths_prefix" expl="">
 <transf name="induction_ty_lex">
  <goal name="depths_prefix.1" expl="">
  <proof prover="2"><result status="valid" time="0.02" steps="98"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="depths_prefix_simple" expl="">
 <proof prover="6"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="VC depths_subtree" expl="VC for depths_subtree">
 <proof prover="2"><result status="valid" time="0.21" steps="516"/></proof>
 </goal>
 <goal name="depths_unique2" expl="">
 <proof prover="3"><result status="valid" time="0.01"/></proof>
 </goal>
</theory>
<theory name="TreeReconstruction" sum="d7d53a63a64b25f67528805a88fbb19c">
 <goal name="VC build_rec" expl="VC for build_rec">
 <transf name="split_goal_wp">
  <goal name="VC build_rec.1" expl="exceptional postcondition">
  <proof prover="2"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="VC build_rec.2" expl="exceptional postcondition">
  <proof prover="3"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC build_rec.3" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.00" steps="28"/></proof>
  </goal>
  <goal name="VC build_rec.4" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.01" steps="43"/></proof>
  </goal>
  <goal name="VC build_rec.5" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.02" steps="77"/></proof>
  </goal>
  <goal name="VC build_rec.6" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.00" steps="17"/></proof>
  </goal>
  <goal name="VC build_rec.7" expl="exceptional postcondition">
  <proof prover="5" edited="vstte12_tree_reconstruction_TreeReconstruction_VC_build_rec_1.v"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="VC build_rec.8" expl="exceptional postcondition">
  <proof prover="5" edited="vstte12_tree_reconstruction_TreeReconstruction_VC_build_rec_2.v"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC build" expl="VC for build">
 <proof prover="6"><result status="valid" time="0.23"/></proof>
 </goal>
</theory>
<theory name="Harness" sum="f15e2e8a7c20b6e36f5fcd1cc933cac3">
 <goal name="VC harness" expl="VC for harness">
 <transf name="split_goal_wp">
  <goal name="VC harness.1" expl="postcondition">
  <proof prover="5" edited="vstte12_tree_reconstruction_Harness_VC_harness_1.v"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC harness.2" expl="exceptional postcondition">
  <proof prover="5" edited="vstte12_tree_reconstruction_Harness_VC_harness_2.v"><result status="valid" time="0.35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC harness2" expl="VC for harness2">
 <proof prover="5" edited="vstte12_tree_reconstruction_Harness_VC_harness2_1.v"><result status="valid" time="0.49"/></proof>
 </goal>
</theory>
<theory name="ZipperBasedTermination" sum="89553317964cdba1890b8baeb7b3a7d9">
 <goal name="VC tc" expl="VC for tc">
 <proof prover="2"><result status="valid" time="0.05" steps="249"/></proof>
 </goal>
</theory>
<theory name="ZipperBased" sum="32314bbe5cc6e19caf109d7a7ec1cb9d">
 <goal name="forest_depths_append" expl="">
 <proof prover="5" timelimit="10" memlimit="0" edited="vstte12_tree_reconstruction_WP_ZipperBased_forest_depths_append_1.v"><result status="valid" time="0.48"/></proof>
 </goal>
 <goal name="g_append" expl="">
 <proof prover="5" timelimit="20" memlimit="0" edited="vstte12_tree_reconstruction_WP_ZipperBased_g_append_1.v"><result status="valid" time="0.97"/></proof>
 </goal>
 <goal name="right_nil" expl="">
 <proof prover="5" timelimit="29" memlimit="0" edited="vstte12_tree_reconstruction_WP_ZipperBased_right_nil_1.v"><result status="valid" time="2.67"/></proof>
 </goal>
 <goal name="main_lemma" expl="">
 <proof prover="2"><result status="valid" time="0.02" steps="107"/></proof>
 <metas>
  <ts_pos name="real" arity="0" id="real" ip_theory="BuiltIn">
   <ip_library name="why3"/>
   <ip_library name="BuiltIn"/>
   <ip_qualid name="real"/>
  </ts_pos>
  <ts_pos name="bool" arity="0" id="bool" ip_theory="Bool">
   <ip_library name="why3"/>
   <ip_library name="Bool"/>
   <ip_qualid name="bool"/>
  </ts_pos>
  <ts_pos name="tuple0" arity="0" id="tuple0" ip_theory="Tuple0">
   <ip_library name="why3"/>
   <ip_library name="Tuple0"/>
   <ip_qualid name="tuple0"/>
  </ts_pos>
  <ts_pos name="unit" arity="0" id="unit" ip_theory="Unit">
   <ip_library name="why3"/>
   <ip_library name="Unit"/>
   <ip_qualid name="unit"/>
  </ts_pos>
  <ls_pos name="infix =" id="infix =" ip_theory="BuiltIn">
   <ip_library name="why3"/>
   <ip_library name="BuiltIn"/>
   <ip_qualid name="infix ="/>
  </ls_pos>
  <ls_pos name="zero" id="zero" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="zero"/>
  </ls_pos>
  <ls_pos name="one" id="one" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="one"/>
  </ls_pos>
  <ls_pos name="prefix -" id="prefix -" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="prefix -"/>
  </ls_pos>
  <ls_pos name="infix +" id="infix +" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix +"/>
  </ls_pos>
  <ls_pos name="infix *" id="infix *" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix *"/>
  </ls_pos>
  <ls_pos name="infix &lt;" id="infix &lt;" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix &lt;"/>
  </ls_pos>
  <ls_pos name="infix -" id="infix -" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix -"/>
  </ls_pos>
  <ls_pos name="infix &gt;" id="infix &gt;" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix &gt;"/>
  </ls_pos>
  <ls_pos name="infix &lt;=" id="infix &lt;=" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix &lt;="/>
  </ls_pos>
  <ls_pos name="infix &gt;=" id="infix &gt;=" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="infix &gt;="/>
  </ls_pos>
  <ls_pos name="is_nil" id="is_nil" ip_theory="List">
   <ip_library name="list"/>
   <ip_qualid name="is_nil"/>
  </ls_pos>
  <ls_pos name="length" id="length" ip_theory="Length">
   <ip_library name="list"/>
   <ip_qualid name="length"/>
  </ls_pos>
  <ls_pos name="mem" id="mem" ip_theory="Mem">
   <ip_library name="list"/>
   <ip_qualid name="mem"/>
  </ls_pos>
  <ls_pos name="infix ++" id="infix ++" ip_theory="Append">
   <ip_library name="list"/>
   <ip_qualid name="infix ++"/>
  </ls_pos>
  <ls_pos name="reverse" id="reverse" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="reverse"/>
  </ls_pos>
  <ls_pos name="depths" id="depths" ip_theory="Tree">
   <ip_qualid name="depths"/>
  </ls_pos>
  <ls_pos name="forest_depths" id="forest_depths" ip_theory="ZipperBased">
   <ip_qualid name="forest_depths"/>
  </ls_pos>
  <pr_pos name="Assoc" id="Assoc" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Assoc"/>
  </pr_pos>
  <pr_pos name="Unit_def_l" id="Unit_def_l" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Unit_def_l"/>
  </pr_pos>
  <pr_pos name="Unit_def_r" id="Unit_def_r" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Unit_def_r"/>
  </pr_pos>
  <pr_pos name="Inv_def_l" id="Inv_def_l" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Inv_def_l"/>
  </pr_pos>
  <pr_pos name="Inv_def_r" id="Inv_def_r" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Inv_def_r"/>
  </pr_pos>
  <pr_pos name="Comm" id="Comm" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Comm"/>
  </pr_pos>
  <pr_pos name="Assoc" id="Assoc1" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="MulAssoc"/>
   <ip_qualid name="Assoc"/>
  </pr_pos>
  <pr_pos name="Mul_distr_l" id="Mul_distr_l" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Mul_distr_l"/>
  </pr_pos>
  <pr_pos name="Mul_distr_r" id="Mul_distr_r" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Mul_distr_r"/>
  </pr_pos>
  <pr_pos name="Comm" id="Comm1" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="MulComm"/>
   <ip_qualid name="Comm"/>
  </pr_pos>
  <pr_pos name="Unitary" id="Unitary" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Unitary"/>
  </pr_pos>
  <pr_pos name="NonTrivialRing" id="NonTrivialRing" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="NonTrivialRing"/>
  </pr_pos>
  <pr_pos name="Refl" id="Refl" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Refl"/>
  </pr_pos>
  <pr_pos name="Trans" id="Trans" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Trans"/>
  </pr_pos>
  <pr_pos name="Antisymm" id="Antisymm" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Antisymm"/>
  </pr_pos>
  <pr_pos name="Total" id="Total" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="Total"/>
  </pr_pos>
  <pr_pos name="ZeroLessOne" id="ZeroLessOne" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="ZeroLessOne"/>
  </pr_pos>
  <pr_pos name="CompatOrderAdd" id="CompatOrderAdd" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="CompatOrderAdd"/>
  </pr_pos>
  <pr_pos name="CompatOrderMult" id="CompatOrderMult" ip_theory="Int">
   <ip_library name="int"/>
   <ip_qualid name="CompatOrderMult"/>
  </pr_pos>
  <pr_pos name="is_nil_spec" id="is_nil_spec" ip_theory="List">
   <ip_library name="list"/>
   <ip_qualid name="is_nil_spec"/>
  </pr_pos>
  <pr_pos name="Length_nonnegative" id="Length_nonnegative"
   ip_theory="Length">
   <ip_library name="list"/>
   <ip_qualid name="Length_nonnegative"/>
  </pr_pos>
  <pr_pos name="Length_nil" id="Length_nil" ip_theory="Length">
   <ip_library name="list"/>
   <ip_qualid name="Length_nil"/>
  </pr_pos>
  <pr_pos name="Append_assoc" id="Append_assoc" ip_theory="Append">
   <ip_library name="list"/>
   <ip_qualid name="Append_assoc"/>
  </pr_pos>
  <pr_pos name="Append_l_nil" id="Append_l_nil" ip_theory="Append">
   <ip_library name="list"/>
   <ip_qualid name="Append_l_nil"/>
  </pr_pos>
  <pr_pos name="Append_length" id="Append_length" ip_theory="Append">
   <ip_library name="list"/>
   <ip_qualid name="Append_length"/>
  </pr_pos>
  <pr_pos name="mem_append" id="mem_append" ip_theory="Append">
   <ip_library name="list"/>
   <ip_qualid name="mem_append"/>
  </pr_pos>
  <pr_pos name="mem_decomp" id="mem_decomp" ip_theory="Append">
   <ip_library name="list"/>
   <ip_qualid name="mem_decomp"/>
  </pr_pos>
  <pr_pos name="reverse_append" id="reverse_append" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="reverse_append"/>
  </pr_pos>
  <pr_pos name="reverse_cons" id="reverse_cons" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="reverse_cons"/>
  </pr_pos>
  <pr_pos name="cons_reverse" id="cons_reverse" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="cons_reverse"/>
  </pr_pos>
  <pr_pos name="reverse_reverse" id="reverse_reverse" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="reverse_reverse"/>
  </pr_pos>
  <pr_pos name="reverse_mem" id="reverse_mem" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="reverse_mem"/>
  </pr_pos>
  <pr_pos name="Reverse_length" id="Reverse_length" ip_theory="Reverse">
   <ip_library name="list"/>
   <ip_qualid name="Reverse_length"/>
  </pr_pos>
  <pr_pos name="depths_head" id="depths_head" ip_theory="Tree">
   <ip_qualid name="depths_head"/>
  </pr_pos>
  <pr_pos name="depths_unique" id="depths_unique" ip_theory="Tree">
   <ip_qualid name="depths_unique"/>
  </pr_pos>
  <pr_pos name="depths_prefix" id="depths_prefix" ip_theory="Tree">
   <ip_qualid name="depths_prefix"/>
  </pr_pos>
  <pr_pos name="depths_prefix_simple" id="depths_prefix_simple"
   ip_theory="Tree">
   <ip_qualid name="depths_prefix_simple"/>
  </pr_pos>
  <pr_pos name="depths_subtree" id="depths_subtree" ip_theory="Tree">
   <ip_qualid name="depths_subtree"/>
  </pr_pos>
  <pr_pos name="depths_unique2" id="depths_unique2" ip_theory="Tree">
   <ip_qualid name="depths_unique2"/>
  </pr_pos>
  <pr_pos name="forest_depths_append" id="forest_depths_append"
   ip_theory="ZipperBased">
   <ip_qualid name="forest_depths_append"/>
  </pr_pos>
  <pr_pos name="g_append" id="g_append" ip_theory="ZipperBased">
   <ip_qualid name="g_append"/>
  </pr_pos>
  <pr_pos name="right_nil" id="right_nil" ip_theory="ZipperBased">
   <ip_qualid name="right_nil"/>
  </pr_pos>
  <meta name="remove_logic">
   <meta_arg_ls id="infix ="/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="zero"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="one"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="prefix -"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix +"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix *"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix &lt;"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix -"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix &gt;"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix &lt;="/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix &gt;="/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="is_nil"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="length"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="mem"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="infix ++"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="reverse"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="depths"/>
  </meta>
  <meta name="remove_logic">
   <meta_arg_ls id="forest_depths"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Assoc"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Unit_def_l"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Unit_def_r"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Inv_def_l"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Inv_def_r"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Comm"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Assoc1"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Mul_distr_l"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Mul_distr_r"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Comm1"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Unitary"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="NonTrivialRing"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Refl"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Trans"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Antisymm"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Total"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="ZeroLessOne"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="CompatOrderAdd"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="CompatOrderMult"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="is_nil_spec"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Length_nonnegative"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Length_nil"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Append_assoc"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Append_l_nil"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Append_length"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="mem_append"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="mem_decomp"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="reverse_append"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="reverse_cons"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="cons_reverse"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="reverse_reverse"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="reverse_mem"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="Reverse_length"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="depths_head"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="depths_unique"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="depths_prefix"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="depths_prefix_simple"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="depths_subtree"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="depths_unique2"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="forest_depths_append"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="g_append"/>
  </meta>
  <meta name="remove_prop">
   <meta_arg_pr id="right_nil"/>
  </meta>
  <meta name="remove_type">
   <meta_arg_ts id="real"/>
  </meta>
  <meta name="remove_type">
   <meta_arg_ts id="bool"/>
  </meta>
  <meta name="remove_type">
   <meta_arg_ts id="tuple0"/>
  </meta>
  <meta name="remove_type">
   <meta_arg_ts id="unit"/>
  </meta>
  <goal name="main_lemma" expl="">
  <transf name="eliminate_builtin">
   <goal name="main_lemma.1" expl="">
   <proof prover="2"><result status="valid" time="0.02" steps="37"/></proof>
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
  </transf>
  </goal>
 </metas>
 </goal>
 <goal name="VC tc" expl="VC for tc">
 <transf name="split_goal_wp">
  <goal name="VC tc.1" expl="exceptional postcondition">
  <proof prover="3"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC tc.2" expl="postcondition">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC tc.3" expl="exceptional postcondition">
  <proof prover="3"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC tc.4" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
  <goal name="VC tc.5" expl="precondition">
  <proof prover="2"><result status="valid" time="0.08" steps="302"/></proof>
  </goal>
  <goal name="VC tc.6" expl="postcondition">
  <proof prover="3"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC tc.7" expl="exceptional postcondition">
  <proof prover="3"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC tc.8" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="VC tc.9" expl="precondition">
  <proof prover="2"><result status="valid" time="0.40" steps="715"/></proof>
  </goal>
  <goal name="VC tc.10" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="VC tc.11" expl="exceptional postcondition">
  <proof prover="2"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="VC tc.12" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.01" steps="32"/></proof>
  </goal>
  <goal name="VC tc.13" expl="precondition">
  <proof prover="2"><result status="valid" time="0.13" steps="371"/></proof>
  </goal>
  <goal name="VC tc.14" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="VC tc.15" expl="exceptional postcondition">
  <proof prover="2"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="VC tc.16" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
  <goal name="VC tc.17" expl="precondition">
  <proof prover="2"><result status="valid" time="0.29" steps="990"/></proof>
  </goal>
  <goal name="VC tc.18" expl="postcondition">
  <proof prover="3"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="VC tc.19" expl="exceptional postcondition">
  <proof prover="3"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC tc.20" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC tc.21" expl="precondition">
  <proof prover="2"><result status="valid" time="0.74" steps="1486"/></proof>
  </goal>
  <goal name="VC tc.22" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="VC tc.23" expl="exceptional postcondition">
  <proof prover="2"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_leaf" expl="VC for map_leaf">
 <proof prover="2"><result status="valid" time="0.01" steps="5"/></proof>
 </goal>
 <goal name="map_leaf_depths" expl="">
 <transf name="induction_ty_lex">
  <goal name="map_leaf_depths.1" expl="">
  <proof prover="3"><result status="valid" time="0.11"/></proof>
  <proof prover="6"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map_leaf_only_leaf" expl="">
 <transf name="induction_ty_lex">
  <goal name="map_leaf_only_leaf.1" expl="">
  <proof prover="2"><result status="valid" time="0.00" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC build" expl="VC for build">
 <proof prover="2"><result status="valid" time="0.02" steps="139"/></proof>
 </goal>
</theory>
</file>
</why3session>
