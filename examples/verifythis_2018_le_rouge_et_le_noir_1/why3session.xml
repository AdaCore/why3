<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.5.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.3.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="verifythis_2018_le_rouge_et_le_noir_1.mlw"/>
<theory name="ColoredTiles" proved="true">
 <goal name="valid_contr" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="6"/></proof>
 </goal>
 <goal name="colo_0" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="colo_0.0" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="28954"/></proof>
  </goal>
  <goal name="colo_0.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="25303"/></proof>
  </goal>
  <goal name="colo_0.2" proved="true">
  <transf name="unfold" proved="true" arg1="colorings0">
   <goal name="colo_0.2.0" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="19041"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="colo_1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="colo_1.0" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="29974"/></proof>
  </goal>
  <goal name="colo_1.1" proved="true">
  <proof prover="3"><result status="valid" time="0.13" steps="28369"/></proof>
  </goal>
  <goal name="colo_1.2" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="47132"/></proof>
  </goal>
  <goal name="colo_1.3" proved="true">
  <transf name="unfold" proved="true" arg1="colorings1">
   <goal name="colo_1.3.0" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="19502"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="colo_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="colo_2.0" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="30460"/></proof>
  </goal>
  <goal name="colo_2.1" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="30464"/></proof>
  </goal>
  <goal name="colo_2.2" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="28933"/></proof>
  </goal>
  <goal name="colo_2.3" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="65039"/></proof>
  </goal>
  <goal name="colo_2.4" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="49590"/></proof>
  </goal>
  <goal name="colo_2.5" proved="true">
  <transf name="subst" proved="true" arg1="colorings2">
   <goal name="colo_2.5.0" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="colo_2.5.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="19127"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="colo_3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="colo_3.0" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="31200"/></proof>
  </goal>
  <goal name="colo_3.1" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="44687"/></proof>
  </goal>
  <goal name="colo_3.2" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="31199"/></proof>
  </goal>
  <goal name="colo_3.3" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="31653"/></proof>
  </goal>
  <goal name="colo_3.4" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="31323"/></proof>
  </goal>
  <goal name="colo_3.5" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="31203"/></proof>
  </goal>
  <goal name="colo_3.6" proved="true">
  <proof prover="0"><result status="valid" time="0.26" steps="1198"/></proof>
  </goal>
  <goal name="colo_3.7" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="71793"/></proof>
  </goal>
  <goal name="colo_3.8" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="59772"/></proof>
  </goal>
  <goal name="colo_3.9" proved="true">
  <proof prover="3"><result status="valid" time="0.08" steps="83227"/></proof>
  </goal>
  <goal name="colo_3.10" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="56408"/></proof>
  </goal>
  <goal name="colo_3.11" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="36067"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="valid_split_fb&#39;vc" expl="VC for valid_split_fb" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="valid_split_fb&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="33937"/></proof>
  </goal>
  <goal name="valid_split_fb&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="valid_split_fb&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="33749"/></proof>
   </goal>
   <goal name="valid_split_fb&#39;vc.1.1" expl="VC for valid_split_fb" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="28900"/></proof>
   </goal>
   <goal name="valid_split_fb&#39;vc.1.2" expl="VC for valid_split_fb" proved="true">
   <proof prover="1"><result status="valid" time="0.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="valid_split_fb&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="160"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="valid_restrict&#39;vc" expl="VC for valid_restrict" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="valid_restrict&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="valid_restrict&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.18" steps="164085"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="first_black_tile&#39;vc" expl="VC for first_black_tile" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="first_black_tile&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="32868"/></proof>
  </goal>
  <goal name="first_black_tile&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="34061"/></proof>
  </goal>
  <goal name="first_black_tile&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="37918"/></proof>
  </goal>
  <goal name="first_black_tile&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="first_black_tile&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="40174"/></proof>
   </goal>
   <goal name="first_black_tile&#39;vc.3.1" expl="VC for first_black_tile" proved="true">
   <proof prover="3"><result status="valid" time="0.16" steps="110736"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="first_black_tile&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="first_black_tile&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="first_black_tile&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28" steps="681"/></proof>
  </goal>
  <goal name="first_black_tile&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="230"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="addleft&#39;vc" expl="VC for addleft" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="addleft&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="27561"/></proof>
  </goal>
  <goal name="addleft&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="64044"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="addleft_fb" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="addleft_fb.0" proved="true">
  <transf name="induction" proved="true" arg1="nr">
   <goal name="addleft_fb.0.0" expl="base case" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="30892"/></proof>
   </goal>
   <goal name="addleft_fb.0.1" expl="recursive case" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="addleft_fb.0.1.0" expl="recursive case" proved="true">
    <proof prover="3"><result status="valid" time="0.24" steps="346240"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mapaddleft_fb" proved="true">
 <proof prover="3"><result status="valid" time="0.05" steps="63621"/></proof>
 </goal>
 <goal name="bij_image&#39;vc" expl="VC for bij_image" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bij_image&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="50938"/></proof>
  </goal>
  <goal name="bij_image&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.07" steps="123463"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bij_cardinal&#39;vc" expl="VC for bij_cardinal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="bij_cardinal&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="41042"/></proof>
  </goal>
  <goal name="bij_cardinal&#39;vc.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="41690"/></proof>
  </goal>
  <goal name="bij_cardinal&#39;vc.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="42448"/></proof>
  </goal>
  <goal name="bij_cardinal&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="40517"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="ext" proved="true">
 <proof prover="3"><result status="valid" time="0.02" steps="33756"/></proof>
 </goal>
 <goal name="app_eq" proved="true">
 <proof prover="3"><result status="valid" time="0.04" steps="34902"/></proof>
 </goal>
 <goal name="addleft_result&#39;vc" expl="VC for addleft_result" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="addleft_result&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="67113"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="16694"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="23569"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22162"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="23843"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="24369"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="addleft_result&#39;vc.6.0" expl="VC for addleft_result" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="58164"/></proof>
   </goal>
   <goal name="addleft_result&#39;vc.6.1" expl="VC for addleft_result" proved="true">
   <proof prover="2"><result status="valid" time="0.09" steps="28044"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addleft_result&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.16" steps="38832"/></proof>
  </goal>
  <goal name="addleft_result&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="addleft_result&#39;vc.8.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.08" steps="24827"/></proof>
   </goal>
   <goal name="addleft_result&#39;vc.8.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.09" steps="28293"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="addleft_bijective&#39;vc" expl="VC for addleft_bijective" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="addleft_bijective&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.35" steps="187"/></proof>
  </goal>
  <goal name="addleft_bijective&#39;vc.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="rmleft">
   <goal name="addleft_bijective&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="162"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addleft_bijective&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="42579"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mapaddleft_card&#39;vc" expl="VC for mapaddleft_card" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="mapaddleft_card&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="3300"/></proof>
  </goal>
  <goal name="mapaddleft_card&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="3848"/></proof>
  </goal>
  <goal name="mapaddleft_card&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="45642"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="addleft_valid&#39;vc" expl="VC for addleft_valid" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="addleft_valid&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="34363"/></proof>
  </goal>
  <goal name="addleft_valid&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="addleft_valid&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="4.88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="addleft_valid&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="58220"/></proof>
  </goal>
  <goal name="addleft_valid&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="62128"/></proof>
  </goal>
  <goal name="addleft_valid&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="75300"/></proof>
  </goal>
  <goal name="addleft_valid&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="40417"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mapaddleft_valid&#39;vc" expl="VC for mapaddleft_valid" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="mapaddleft_valid&#39;vc.0" expl="VC for mapaddleft_valid" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mapaddleft_valid&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="mapaddleft_valid&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="45937"/></proof>
    </goal>
    <goal name="mapaddleft_valid&#39;vc.0.0.1" expl="VC for mapaddleft_valid" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="70464"/></proof>
    </goal>
    <goal name="mapaddleft_valid&#39;vc.0.0.2" expl="VC for mapaddleft_valid" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="38630"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="mapaddleft_valid&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="3354"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mapaddleft_length&#39;vc" expl="VC for mapaddleft_length" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="mapaddleft_length&#39;vc.0" expl="VC for mapaddleft_length" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mapaddleft_length&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="disjoint_union&#39;vc" expl="VC for disjoint_union" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="disjoint_union&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="disjoint_union&#39;vc.0.0" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="52510"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.0.1" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="39651"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.0.2" expl="VC for disjoint_union" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="disjoint_union&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="44790"/></proof>
  </goal>
  <goal name="disjoint_union&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="44758"/></proof>
  </goal>
  <goal name="disjoint_union&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="disjoint_union&#39;vc.3.0" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="3472"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.1" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="43393"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.2" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="43446"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.3" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="153587"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.4" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="43829"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.5" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="43413"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.6" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="43661"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.7" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="51942"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.8" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="51182"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.9" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="51080"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.10" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.05" steps="51917"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.11" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="43692"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.12" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.05" steps="43383"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.13" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="44158"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.14" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="44198"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.15" expl="VC for disjoint_union" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="5"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.3.16" expl="VC for disjoint_union" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="39843"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="disjoint_union&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="disjoint_union&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="44165"/></proof>
   </goal>
   <goal name="disjoint_union&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="disjoint_union&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="46168"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="disjoint_union&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="56"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="enum&#39;vc" expl="VC for enum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="enum&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="3562"/></proof>
  </goal>
  <goal name="enum&#39;vc.1" expl="array creation size" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="3620"/></proof>
  </goal>
  <goal name="enum&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="15870"/></proof>
  </goal>
  <goal name="enum&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="16172"/></proof>
  </goal>
  <goal name="enum&#39;vc.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="131"/></proof>
  </goal>
  <goal name="enum&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="39626"/></proof>
  </goal>
  <goal name="enum&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="39881"/></proof>
  </goal>
  <goal name="enum&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="enum&#39;vc.7.0" expl="VC for enum" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.22" steps="252"/></proof>
   </goal>
   <goal name="enum&#39;vc.7.1" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.09" steps="257"/></proof>
   </goal>
   <goal name="enum&#39;vc.7.2" expl="VC for enum" proved="true">
   <proof prover="0" timelimit="10"><result status="valid" time="0.56" steps="598"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="40722"/></proof>
  </goal>
  <goal name="enum&#39;vc.9" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="40998"/></proof>
  </goal>
  <goal name="enum&#39;vc.10" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="i=3">
   <goal name="enum&#39;vc.10.0" expl="true case (assertion)" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="enum&#39;vc.10.0.0" expl="true case (assertion)" proved="true">
    <transf name="rewrite" proved="true" arg1="Ensures">
     <goal name="enum&#39;vc.10.0.0.0" expl="true case (assertion)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="enum&#39;vc.10.0.0.0.0" expl="VC for enum" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="enum&#39;vc.10.0.0.0.0.0" expl="VC for enum" proved="true">
       <proof prover="3"><result status="valid" time="0.02" steps="24219"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="enum&#39;vc.10.0.0.0.1" expl="VC for enum" proved="true">
      <proof prover="0"><result status="valid" time="0.01" steps="22"/></proof>
      </goal>
      <goal name="enum&#39;vc.10.0.0.0.2" expl="VC for enum" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="enum&#39;vc.10.0.0.0.2.0" expl="VC for enum" proved="true">
       <proof prover="3"><result status="valid" time="0.01" steps="18838"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="enum&#39;vc.10.1" expl="false case (assertion)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="enum&#39;vc.10.1.0" expl="VC for enum" proved="true">
    <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="0.35" steps="671"/></proof>
    </goal>
    <goal name="enum&#39;vc.10.1.1" expl="VC for enum" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="562"/></proof>
    </goal>
    <goal name="enum&#39;vc.10.1.2" expl="VC for enum" proved="true">
    <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="3.94" steps="5549"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="41815"/></proof>
  </goal>
  <goal name="enum&#39;vc.12" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="42091"/></proof>
  </goal>
  <goal name="enum&#39;vc.13" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall m:array (fset coloring), i v. m[i &lt;- v][i] = v)">
   <goal name="enum&#39;vc.13.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.05" steps="210"/></proof>
   </goal>
   <goal name="enum&#39;vc.13.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.10" steps="28289"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.14" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="i=3">
   <goal name="enum&#39;vc.14.0" expl="true case (assertion)" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="enum&#39;vc.14.0.0" expl="true case (assertion)" proved="true">
    <transf name="rewrite" proved="true" arg1="Assert">
     <goal name="enum&#39;vc.14.0.0.0" expl="true case (assertion)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="enum&#39;vc.14.0.0.0.0" expl="VC for enum" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="enum&#39;vc.14.0.0.0.0.0" expl="VC for enum" proved="true">
       <transf name="apply" proved="true" arg1="colo_31">
        <goal name="enum&#39;vc.14.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.01" steps="6160"/></proof>
        </goal>
        <goal name="enum&#39;vc.14.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.01" steps="5162"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="enum&#39;vc.14.0.0.0.1" expl="VC for enum" proved="true">
      <proof prover="0"><result status="valid" time="0.18" steps="540"/></proof>
      </goal>
      <goal name="enum&#39;vc.14.0.0.0.2" expl="VC for enum" proved="true">
      <transf name="introduce_premises" proved="true" >
       <goal name="enum&#39;vc.14.0.0.0.2.0" expl="VC for enum" proved="true">
       <transf name="apply" proved="true" arg1="colo_3">
        <goal name="enum&#39;vc.14.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.17" steps="540"/></proof>
        </goal>
        <goal name="enum&#39;vc.14.0.0.0.2.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="enum&#39;vc.14.1" expl="false case (assertion)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="enum&#39;vc.14.1.0" expl="VC for enum" proved="true">
    <proof prover="0"><result status="valid" time="0.21" steps="674"/></proof>
    </goal>
    <goal name="enum&#39;vc.14.1.1" expl="VC for enum" proved="true">
    <proof prover="0"><result status="valid" time="0.23" steps="929"/></proof>
    </goal>
    <goal name="enum&#39;vc.14.1.2" expl="VC for enum" proved="true">
    <proof prover="0"><result status="valid" time="0.51" steps="1671"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="enum&#39;vc.15.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="0.41" steps="1297"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.16" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="36"/></proof>
  </goal>
  <goal name="enum&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.12" steps="209"/></proof>
  </goal>
  <goal name="enum&#39;vc.18" expl="loop invariant init" proved="true">
  <transf name="assert" proved="true" arg1="(i=0\/i=1\/i=2\/i=3)">
   <goal name="enum&#39;vc.18.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="0.02" steps="32"/></proof>
   <proof prover="3"><result status="valid" time="0.05" steps="50111"/></proof>
   </goal>
   <goal name="enum&#39;vc.18.1" expl="loop invariant init" proved="true">
   <transf name="revert" proved="true" arg1="h">
    <goal name="enum&#39;vc.18.1.0" expl="loop invariant init" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="enum&#39;vc.18.1.0.0" expl="loop invariant init" proved="true">
     <proof prover="0"><result status="valid" time="0.22" steps="228"/></proof>
     </goal>
     <goal name="enum&#39;vc.18.1.0.1" expl="loop invariant init" proved="true">
     <proof prover="0"><result status="valid" time="0.26" steps="226"/></proof>
     </goal>
     <goal name="enum&#39;vc.18.1.0.2" expl="loop invariant init" proved="true">
     <proof prover="0"><result status="valid" time="0.24" steps="224"/></proof>
     </goal>
     <goal name="enum&#39;vc.18.1.0.3" expl="loop invariant init" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="enum&#39;vc.18.1.0.3.0" expl="loop invariant init" proved="true">
      <transf name="replace" proved="true" arg1="i" arg2="3">
       <goal name="enum&#39;vc.18.1.0.3.0.0" expl="loop invariant init" proved="true">
       <transf name="replace" proved="true" arg1="sets[3]" arg2="colorings3">
        <goal name="enum&#39;vc.18.1.0.3.0.0.0" expl="loop invariant init" proved="true">
        <transf name="rewrite" proved="true" arg1="Assert">
         <goal name="enum&#39;vc.18.1.0.3.0.0.0.0" expl="loop invariant init" proved="true">
         <proof prover="4"><result status="valid" time="0.02" steps="65"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="enum&#39;vc.18.1.0.3.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="Ensures">
         <goal name="enum&#39;vc.18.1.0.3.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="0.17" steps="42148"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="enum&#39;vc.18.1.0.3.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.02" steps="5586"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.19" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="51721"/></proof>
  </goal>
  <goal name="enum&#39;vc.20" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="51711"/></proof>
  </goal>
  <goal name="enum&#39;vc.21" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="52445"/></proof>
  </goal>
  <goal name="enum&#39;vc.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="51724"/></proof>
  </goal>
  <goal name="enum&#39;vc.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="4516"/></proof>
  </goal>
  <goal name="enum&#39;vc.24" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="52636"/></proof>
  </goal>
  <goal name="enum&#39;vc.25" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="52636"/></proof>
  </goal>
  <goal name="enum&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
  <goal name="enum&#39;vc.27" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
  <goal name="enum&#39;vc.28" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="enum&#39;vc.28.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="52887"/></proof>
   </goal>
   <goal name="enum&#39;vc.28.1" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.13" steps="146010"/></proof>
   </goal>
   <goal name="enum&#39;vc.28.2" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.70" steps="806828"/></proof>
   </goal>
   <goal name="enum&#39;vc.28.3" expl="VC for enum" proved="true">
   <proof prover="1"><result status="valid" time="0.25"/></proof>
   </goal>
   <goal name="enum&#39;vc.28.4" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.19" steps="325"/></proof>
   </goal>
   <goal name="enum&#39;vc.28.5" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.29" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="enum&#39;vc.30" expl="loop invariant init" proved="true">
  <transf name="case" proved="true" arg1="i=n">
   <goal name="enum&#39;vc.30.0" expl="true case (loop invariant init)" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="53282"/></proof>
   </goal>
   <goal name="enum&#39;vc.30.1" expl="false case (loop invariant init)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="enum&#39;vc.30.1.0" expl="VC for enum" proved="true">
    <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="0.20" steps="411"/></proof>
    </goal>
    <goal name="enum&#39;vc.30.1.1" expl="VC for enum" proved="true">
    <proof prover="0"><result status="valid" time="0.17" steps="431"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.31" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="73086"/></proof>
  </goal>
  <goal name="enum&#39;vc.32" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="enum&#39;vc.32.0" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.69" steps="1021"/></proof>
   </goal>
   <goal name="enum&#39;vc.32.1" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="65"/></proof>
   </goal>
   <goal name="enum&#39;vc.32.2" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="694"/></proof>
   </goal>
   <goal name="enum&#39;vc.32.3" expl="loop invariant init" proved="true">
   <proof prover="1"><result status="valid" time="0.12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.33" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="enum&#39;vc.34" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="64815"/></proof>
  </goal>
  <goal name="enum&#39;vc.35" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="55266"/></proof>
  </goal>
  <goal name="enum&#39;vc.36" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="55266"/></proof>
  </goal>
  <goal name="enum&#39;vc.37" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="65737"/></proof>
  </goal>
  <goal name="enum&#39;vc.38" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="enum&#39;vc.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="46744"/></proof>
  </goal>
  <goal name="enum&#39;vc.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="4900"/></proof>
  </goal>
  <goal name="enum&#39;vc.41" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="65978"/></proof>
  </goal>
  <goal name="enum&#39;vc.42" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="55455"/></proof>
  </goal>
  <goal name="enum&#39;vc.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="4934"/></proof>
  </goal>
  <goal name="enum&#39;vc.44" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="66069"/></proof>
  </goal>
  <goal name="enum&#39;vc.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="46863"/></proof>
  </goal>
  <goal name="enum&#39;vc.46" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="66469"/></proof>
  </goal>
  <goal name="enum&#39;vc.47" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="enum&#39;vc.48" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="enum&#39;vc.48.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="181"/></proof>
   </goal>
   <goal name="enum&#39;vc.48.1" expl="VC for enum" proved="true">
   <proof prover="5"><result status="valid" time="0.36" steps="804"/></proof>
   </goal>
   <goal name="enum&#39;vc.48.2" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.31" steps="356870"/></proof>
   </goal>
   <goal name="enum&#39;vc.48.3" expl="VC for enum" proved="true">
   <transf name="case" proved="true" arg1="i&lt;k">
    <goal name="enum&#39;vc.48.3.0" expl="true case" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="285"/></proof>
    </goal>
    <goal name="enum&#39;vc.48.3.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="i=k">
     <goal name="enum&#39;vc.48.3.1.0" expl="false case (true case)" proved="true">
     <proof prover="0"><result status="valid" time="0.33" steps="591"/></proof>
     </goal>
     <goal name="enum&#39;vc.48.3.1.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(get1 c i = get1 c[k+1 ..] (i-k-1))">
      <goal name="enum&#39;vc.48.3.1.1.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.32" steps="420557"/></proof>
      </goal>
      <goal name="enum&#39;vc.48.3.1.1.1" expl="false case" proved="true">
      <proof prover="1"><result status="valid" time="0.21"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="enum&#39;vc.48.4" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.15" steps="338"/></proof>
   </goal>
   <goal name="enum&#39;vc.48.5" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="147"/></proof>
   </goal>
   <goal name="enum&#39;vc.48.6" expl="VC for enum" proved="true">
   <proof prover="3"><result status="valid" time="0.05" steps="87296"/></proof>
   </goal>
   <goal name="enum&#39;vc.48.7" expl="VC for enum" proved="true">
   <proof prover="1"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.49" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="56991"/></proof>
  </goal>
  <goal name="enum&#39;vc.50" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="enum&#39;vc.51" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="57264"/></proof>
  </goal>
  <goal name="enum&#39;vc.52" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="59"/></proof>
  </goal>
  <goal name="enum&#39;vc.53" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="59"/></proof>
  </goal>
  <goal name="enum&#39;vc.54" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="173"/></proof>
  </goal>
  <goal name="enum&#39;vc.55" expl="loop invariant preservation" proved="true">
  <transf name="apply" proved="true" arg1="LoopInvariant4">
   <goal name="enum&#39;vc.55.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="24578"/></proof>
   </goal>
   <goal name="enum&#39;vc.55.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="39548"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.56" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="161"/></proof>
  </goal>
  <goal name="enum&#39;vc.57" expl="loop invariant preservation" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="enum&#39;vc.57.0" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.28" steps="618"/></proof>
   </goal>
   <goal name="enum&#39;vc.57.1" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.36" steps="641"/></proof>
   </goal>
   <goal name="enum&#39;vc.57.2" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.30" steps="774"/></proof>
   </goal>
   <goal name="enum&#39;vc.57.3" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="175"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.58" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="176"/></proof>
  </goal>
  <goal name="enum&#39;vc.59" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="46125"/></proof>
  </goal>
  <goal name="enum&#39;vc.60" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="50"/></proof>
  </goal>
  <goal name="enum&#39;vc.61" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="307"/></proof>
  </goal>
  <goal name="enum&#39;vc.62" expl="assertion" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="enum&#39;vc.62.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="enum&#39;vc.62.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.52" steps="2234"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.63" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="57109"/></proof>
  </goal>
  <goal name="enum&#39;vc.64" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="57109"/></proof>
  </goal>
  <goal name="enum&#39;vc.65" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="57874"/></proof>
  </goal>
  <goal name="enum&#39;vc.66" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="94864"/></proof>
  </goal>
  <goal name="enum&#39;vc.67" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="58314"/></proof>
  </goal>
  <goal name="enum&#39;vc.68" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="enum&#39;vc.68.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.16" steps="332"/></proof>
   </goal>
   <goal name="enum&#39;vc.68.1" expl="VC for enum" proved="true">
   <proof prover="2"><result status="valid" time="0.20" steps="39153"/></proof>
   </goal>
   <goal name="enum&#39;vc.68.2" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.06" steps="156"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.69" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="enum&#39;vc.69.0" expl="VC for enum" proved="true">
   <proof prover="1"><result status="valid" time="0.16"/></proof>
   </goal>
   <goal name="enum&#39;vc.69.1" expl="VC for enum" proved="true">
   <proof prover="1"><result status="valid" time="0.29"/></proof>
   </goal>
   <goal name="enum&#39;vc.69.2" expl="VC for enum" proved="true">
   <proof prover="1"><result status="valid" time="0.12"/></proof>
   </goal>
   <goal name="enum&#39;vc.69.3" expl="VC for enum" proved="true">
   <proof prover="0"><result status="valid" time="0.22" steps="339"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.70" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="enum&#39;vc.71" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="60"/></proof>
  </goal>
  <goal name="enum&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="0.33" steps="828"/></proof>
  </goal>
  <goal name="enum&#39;vc.73" expl="loop invariant preservation" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="enum&#39;vc.73.0" expl="VC for enum" proved="true">
   <proof prover="0" timelimit="10" memlimit="4000"><result status="valid" time="0.62" steps="1254"/></proof>
   </goal>
   <goal name="enum&#39;vc.73.1" expl="VC for enum" proved="true">
   <proof prover="0" timelimit="10"><result status="valid" time="0.36" steps="534"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="enum&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="0.38" steps="475"/></proof>
  </goal>
  <goal name="enum&#39;vc.75" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="74653"/></proof>
  </goal>
  <goal name="enum&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11" steps="380"/></proof>
  </goal>
  <goal name="enum&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="29"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
