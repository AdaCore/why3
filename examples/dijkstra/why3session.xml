<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.4.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="DijkstraShortestPath" proved="true">
 <goal name="relax&#39;vc" expl="VC for relax" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="12363"/></proof>
 </goal>
 <goal name="Length_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Length_nonneg.0" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="6059"/></proof>
  </goal>
  <goal name="Length_nonneg.1" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="10371"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Path_inversion" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="9559"/></proof>
 </goal>
 <goal name="Path_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_shortest_path.0" proved="true">
  <transf name="induction" proved="true" arg1="d">
   <goal name="Path_shortest_path.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.02" steps="7760"/></proof>
   </goal>
   <goal name="Path_shortest_path.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="15237"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Main_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="22127"/></proof>
 </goal>
 <goal name="Completeness_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Completeness_lemma.0" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="9891"/></proof>
  </goal>
  <goal name="Completeness_lemma.1" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="10916"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit.0" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="10328"/></proof>
  </goal>
  <goal name="inside_or_exit.1" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="39008"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="12522"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="26"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.05" steps="13110"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="13357"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.05" steps="11734"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="11741"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="63"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="13616"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="15228"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="11972"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="17933"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="13937"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.6.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.6.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="147"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.04" steps="14068"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.2" expl="VC for shortest_path_code" proved="true">
    <transf name="unfold" proved="true" arg1="subset">
     <goal name="shortest_path_code&#39;vc.6.0.2.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.18" steps="22757"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="148"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.05" steps="16937"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="258"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.11" steps="16816"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="shortest_path_code&#39;vc.7.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.7.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.09" steps="24321"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.06" steps="439"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="13586"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="assertion" proved="true">
  <transf name="destruct" proved="true" arg1="Ensures">
   <goal name="shortest_path_code&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="195735"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.9.1" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.05" steps="485"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="18162"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="18401"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.12.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.12.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.12.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.07" steps="19473"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.1" expl="VC for shortest_path_code" proved="true">
     <transf name="case" proved="true" arg1="(v=src)">
      <goal name="shortest_path_code&#39;vc.12.0.0.1.0" expl="true case" proved="true">
      <proof prover="2"><result status="valid" time="0.24" steps="34045"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.12.0.0.1.1" expl="false case" proved="true">
      <proof prover="4"><result status="valid" time="0.07" steps="870"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.04" steps="14093"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.25" steps="33523"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.05" steps="15601"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="4"><result status="valid" time="0.09" steps="1213"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.6" expl="VC for shortest_path_code" proved="true">
     <transf name="case" proved="true" arg1="(v=v1)">
      <goal name="shortest_path_code&#39;vc.12.0.0.6.0" expl="true case" proved="true">
      <proof prover="5"><result status="valid" time="0.86" steps="5580"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.12.0.0.6.1" expl="false case" proved="true">
      <proof prover="4"><result status="valid" time="0.21" steps="1997"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="shortest_path_code&#39;vc.13.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.13.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.13.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.20" steps="39958"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.13.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1" timelimit="5"><result status="valid" time="0.36" steps="3654"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="21976"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="13584"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.16" steps="24842"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.36" steps="646587"/></proof>
  <proof prover="1"><result status="valid" time="0.76" steps="3102"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="14558"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.41" steps="50874"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
