<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="dijkstra.mlw"/>
<theory name="DijkstraShortestPath" proved="true">
 <goal name="VC relax" expl="VC for relax" proved="true">
 <proof prover="2"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="Length_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Length_nonneg.0" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="Length_nonneg.1" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Path_inversion" proved="true">
 <proof prover="2"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="Path_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_shortest_path.0" proved="true">
  <transf name="induction" proved="true" arg1="d">
   <goal name="Path_shortest_path.0.0" expl="base case" proved="true">
   <proof prover="2"><result status="valid" time="0.02"/></proof>
   </goal>
   <goal name="Path_shortest_path.0.1" expl="recursive case" proved="true">
   <proof prover="2"><result status="valid" time="0.06"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Main_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.14"/></proof>
 </goal>
 <goal name="Completeness_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Completeness_lemma.0" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="Completeness_lemma.1" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit.0" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="inside_or_exit.1" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC shortest_path_code" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC shortest_path_code.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="VC shortest_path_code.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC shortest_path_code.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.06"/></proof>
    </goal>
    <goal name="VC shortest_path_code.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="26"/></proof>
    </goal>
    <goal name="VC shortest_path_code.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.05"/></proof>
    </goal>
    <goal name="VC shortest_path_code.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.06"/></proof>
    </goal>
    <goal name="VC shortest_path_code.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.05"/></proof>
    </goal>
    <goal name="VC shortest_path_code.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.03"/></proof>
    </goal>
    <goal name="VC shortest_path_code.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="63"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shortest_path_code.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC shortest_path_code.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC shortest_path_code.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC shortest_path_code.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC shortest_path_code.5" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC shortest_path_code.6" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="VC shortest_path_code.6.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC shortest_path_code.6.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="147"/></proof>
    </goal>
    <goal name="VC shortest_path_code.6.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="VC shortest_path_code.6.0.2" expl="VC for shortest_path_code" proved="true">
    <transf name="unfold" proved="true" arg1="subset">
     <goal name="VC shortest_path_code.6.0.2.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.18"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC shortest_path_code.6.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="148"/></proof>
    </goal>
    <goal name="VC shortest_path_code.6.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.05"/></proof>
    </goal>
    <goal name="VC shortest_path_code.6.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="258"/></proof>
    </goal>
    <goal name="VC shortest_path_code.6.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.11"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shortest_path_code.7" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="VC shortest_path_code.7.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC shortest_path_code.7.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.09"/></proof>
    </goal>
    <goal name="VC shortest_path_code.7.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.06" steps="439"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shortest_path_code.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC shortest_path_code.9" expl="assertion" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC shortest_path_code.9.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.11"/></proof>
   </goal>
   <goal name="VC shortest_path_code.9.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.10" steps="458"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shortest_path_code.10" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC shortest_path_code.11" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC shortest_path_code.12" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="VC shortest_path_code.12.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="H7">
    <goal name="VC shortest_path_code.12.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC shortest_path_code.12.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.06"/></proof>
     </goal>
     <goal name="VC shortest_path_code.12.0.0.1" expl="VC for shortest_path_code" proved="true">
     <transf name="case" proved="true" arg1="(v=src)">
      <goal name="VC shortest_path_code.12.0.0.1.0" expl="true case" proved="true">
      <proof prover="2"><result status="valid" time="0.19"/></proof>
      </goal>
      <goal name="VC shortest_path_code.12.0.0.1.1" expl="false case" proved="true">
      <proof prover="1"><result status="valid" time="0.06" steps="748"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC shortest_path_code.12.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.02"/></proof>
     </goal>
     <goal name="VC shortest_path_code.12.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.18"/></proof>
     </goal>
     <goal name="VC shortest_path_code.12.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.04"/></proof>
     </goal>
     <goal name="VC shortest_path_code.12.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="1"><result status="valid" time="0.08" steps="1160"/></proof>
     </goal>
     <goal name="VC shortest_path_code.12.0.0.6" expl="VC for shortest_path_code" proved="true">
     <transf name="case" proved="true" arg1="(v=v1)">
      <goal name="VC shortest_path_code.12.0.0.6.0" expl="true case" proved="true">
      <transf name="remove" proved="true" arg1="real,bool,tuple0,unit,ref,map,zero,one,(-_),( * ),(-),(&gt;),get,const,(==),is_empty,empty,singleton,remove,union,union_def,inter,inter_def,diff,diff_def,pick,disjoint,filter,filter_def,map,map_def,cardinal,(!),create,inv_succ,inv_succ2,dst,q2,visited2,d3,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,extensionality,subset_refl,subset_trans,is_empty_empty,empty_is_empty,mem_singleton,remove_def,add_remove,remove_add,subset_remove,subset_union_1,subset_union_2,subset_inter_1,subset_inter_2,subset_diff,pick_def,disjoint_inter_empty,disjoint_diff_eq,disjoint_diff_s2,subset_filter,mem_map,cardinal_nonneg,cardinal_empty,cardinal_add,cardinal_remove,cardinal_subset,subset_eq,cardinal1,cardinal_union,cardinal_inter_disjoint,cardinal_diff,cardinal_filter,cardinal_map,choose_spec,create_spec,g_succ_spec,weight_spec,Length_nonneg,Path_inversion,Path_shortest_path,Main_lemma,Completeness_lemma,inside_or_exit,H,H1,H2,H4,H6,H7,H10,H11,H13,H14,H16,H17,H19,H20,H22,H23,H24,H26,H27,H28,H29,H30">
       <goal name="VC shortest_path_code.12.0.0.6.0.0" expl="true case" proved="true">
       <proof prover="1"><result status="valid" time="0.32" steps="701"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC shortest_path_code.12.0.0.6.1" expl="false case" proved="true">
      <proof prover="1"><result status="valid" time="0.20" steps="2039"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shortest_path_code.13" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="VC shortest_path_code.13.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC shortest_path_code.13.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC shortest_path_code.13.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.20"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC shortest_path_code.13.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1" timelimit="5"><result status="valid" time="0.36" steps="3654"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shortest_path_code.14" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC shortest_path_code.15" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC shortest_path_code.16" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC shortest_path_code.17" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  <proof prover="1"><result status="valid" time="0.76" steps="3102"/></proof>
  </goal>
  <goal name="VC shortest_path_code.18" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC shortest_path_code.19" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
