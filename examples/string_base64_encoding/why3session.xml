<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="7" name="Alt-Ergo" version="2.4.3" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="string_base64_encoding.mlw"/>
<theory name="Base64" proved="true">
 <goal name="int2b64&#39;vc" expl="VC for int2b64" proved="true">
 <proof prover="4"><result status="valid" time="0.088528" steps="647"/></proof>
 <proof prover="7" timelimit="1"><result status="valid" time="0.050000" steps="1044"/></proof>
 </goal>
 <goal name="eq_symbol&#39;vc" expl="VC for eq_symbol" proved="true">
 <proof prover="4"><result status="valid" time="0.016446" steps="12"/></proof>
 <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="12"/></proof>
 </goal>
 <goal name="int2b64_valid_4_char" proved="true">
 <proof prover="4"><result status="valid" time="0.039943" steps="249"/></proof>
 <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="291"/></proof>
 </goal>
 <goal name="b642int&#39;vc" expl="VC for b642int" proved="true">
 <proof prover="4"><result status="valid" time="0.290723" steps="2052"/></proof>
 <proof prover="7" timelimit="1"><result status="valid" time="0.290000" steps="3954"/></proof>
 </goal>
 <goal name="b642int_int2b64" proved="true">
 <proof prover="4"><result status="valid" time="0.063530" steps="647"/></proof>
 <proof prover="7" timelimit="1"><result status="valid" time="0.050000" steps="797"/></proof>
 </goal>
 <goal name="get_pad&#39;vc" expl="VC for get_pad" proved="true">
 <proof prover="4"><result status="valid" time="0.219832" steps="1505"/></proof>
 </goal>
 <goal name="calc_pad_mod3" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="calc_pad_mod3.0" proved="true">
  <transf name="case" proved="true" arg1="(mod (length s) 3 = 0)">
   <goal name="calc_pad_mod3.0.0" expl="true case" proved="true">
   <proof prover="4"><result status="valid" time="0.020261" steps="36"/></proof>
   <proof prover="7"><result status="valid" time="0.020000" steps="83"/></proof>
   </goal>
   <goal name="calc_pad_mod3.0.1" expl="false case" proved="true">
   <transf name="case" proved="true" arg1="(mod (length s) 3 = 1)">
    <goal name="calc_pad_mod3.0.1.0" expl="false case (true case)" proved="true">
    <proof prover="4"><result status="valid" time="0.025648" steps="108"/></proof>
    <proof prover="7"><result status="valid" time="0.020000" steps="136"/></proof>
    </goal>
    <goal name="calc_pad_mod3.0.1.1" expl="false case" proved="true">
    <transf name="assert" proved="true" arg1="(mod (length s) 3 = 2)">
     <goal name="calc_pad_mod3.0.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.010000" steps="27911"/></proof>
     <proof prover="6"><result status="valid" time="0.106203" steps="11110"/></proof>
     </goal>
     <goal name="calc_pad_mod3.0.1.1.1" expl="false case" proved="true">
     <proof prover="4"><result status="valid" time="0.028807" steps="110"/></proof>
     <proof prover="7"><result status="valid" time="0.030000" steps="139"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="calc_pad&#39;vc" expl="VC for calc_pad" proved="true">
 <proof prover="4"><result status="valid" time="0.129477" steps="818"/></proof>
 <proof prover="7"><result status="valid" time="0.477624" steps="5115"/></proof>
 </goal>
 <goal name="encoding_valid_b64&#39;vc" expl="VC for encoding_valid_b64" proved="true">
 <proof prover="4"><result status="valid" time="0.163563" steps="2126"/></proof>
 <proof prover="7"><result status="valid" time="1.102384" steps="14655"/></proof>
 </goal>
 <goal name="decode_unique&#39;vc" expl="VC for decode_unique" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decode_unique&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode_unique&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.020000" steps="48438"/></proof>
   <transf name="remove" proved="true" arg1="real,bool,tuple0,unit,buffer,zero,one,(&gt;),empty,concat,lt,le,s_at,substring,prefixof,suffixof,contains,indexof,replace,replaceall,to_int,is_digit,from_int,code,get,eq_string,make,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int1,in_bounds,max_int,min_int,str,int2b64,valid_b64,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,concat_assoc,concat_empty,length_empty,length_concat,lt_empty,lt_not_com,lt_ref,lt_trans,le_empty,le_ref,lt_le,lt_le_eq,le_trans,at_out_of_range,at_empty,at_length,concat_at,substring_out_of_range,substring_of_length_zero_or_less,substring_of_empty,substring_smaller,substring_smaller_x,substring_length,substring_at,substring_substring,concat_substring,prefixof_substring,prefixof_concat,prefixof_empty,prefixof_empty2,suffixof_substring,suffixof_concat,suffixof_empty,suffixof_empty2,contains_prefixof,contains_suffixof,contains_empty,contains_empty2,contains_substring,contains_concat,contains_at,indexof_empty,indexof_empty1,indexof_contains,contains_indexof,not_contains_indexof,substring_indexof,indexof_out_of_range,indexof_in_range,indexof_contains_substring,replace_empty,replace_not_contains,replace_empty2,replace_substring_indexof,replaceall_empty1,not_contains_replaceall,to_int_gt_minus_1,to_int_empty,from_int_negative,from_int_to_int,char&#39;invariant,code,code_chr,chr_code,get,substring_get,concat_first,concat_second,extensionality,make_length,make_contents,to_int_in_bounds,extensionality1,max_int&#39;def,min_int&#39;def,int2b64_valid_4_char,b642int_int2b64,calc_pad_mod3,encoding_valid_b64">
    <goal name="decode_unique&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.010000" steps="15869"/></proof>
    <proof prover="4"><result status="valid" time="0.066564" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="decode_unique&#39;vc.0.1" expl="assertion" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.020000" steps="59217"/></proof>
   <transf name="remove" proved="true" arg1="real,bool,tuple0,unit,buffer,zero,one,(&gt;),abs,empty,concat,lt,le,s_at,substring,prefixof,suffixof,contains,indexof,replace,replaceall,to_int,is_digit,from_int,code,get,eq_string,make,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int1,in_bounds,max_int,min_int,str,int2b64,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,concat_assoc,concat_empty,length_empty,length_concat,lt_empty,lt_not_com,lt_ref,lt_trans,le_empty,le_ref,lt_le,lt_le_eq,le_trans,at_out_of_range,at_empty,at_length,concat_at,substring_out_of_range,substring_of_length_zero_or_less,substring_of_empty,substring_smaller,substring_smaller_x,substring_length,substring_at,substring_substring,concat_substring,prefixof_substring,prefixof_concat,prefixof_empty,prefixof_empty2,suffixof_substring,suffixof_concat,suffixof_empty,suffixof_empty2,contains_prefixof,contains_suffixof,contains_empty,contains_empty2,contains_substring,contains_concat,contains_at,indexof_empty,indexof_empty1,indexof_contains,contains_indexof,not_contains_indexof,substring_indexof,indexof_out_of_range,indexof_in_range,indexof_contains_substring,replace_empty,replace_not_contains,replace_empty2,replace_substring_indexof,replaceall_empty1,not_contains_replaceall,to_int_gt_minus_1,to_int_empty,from_int_negative,from_int_to_int,char&#39;invariant,code,code_chr,chr_code,get,substring_get,concat_first,concat_second,extensionality,make_length,make_contents,to_int_in_bounds,extensionality1,max_int&#39;def,min_int&#39;def,int2b64_valid_4_char,b642int_int2b64,H1,H2">
    <goal name="decode_unique&#39;vc.0.1.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.010000" steps="20493"/></proof>
    <proof prover="4"><result status="valid" time="0.203165" steps="711"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="decode_unique&#39;vc.0.2" expl="assertion" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.020000" steps="65126"/></proof>
   <transf name="remove" proved="true" arg1="real,bool,tuple0,unit,buffer,zero,one,(&gt;),empty,concat,lt,le,s_at,substring,prefixof,suffixof,contains,indexof,replace,replaceall,to_int,is_digit,from_int,code,get,eq_string,make,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int1,in_bounds,max_int,min_int,str,int2b64,valid_b64,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,concat_assoc,concat_empty,length_empty,length_concat,lt_empty,lt_not_com,lt_ref,lt_trans,le_empty,le_ref,lt_le,lt_le_eq,le_trans,at_out_of_range,at_empty,at_length,concat_at,substring_out_of_range,substring_of_length_zero_or_less,substring_of_empty,substring_smaller,substring_smaller_x,substring_length,substring_at,substring_substring,concat_substring,prefixof_substring,prefixof_concat,prefixof_empty,prefixof_empty2,suffixof_substring,suffixof_concat,suffixof_empty,suffixof_empty2,contains_prefixof,contains_suffixof,contains_empty,contains_empty2,contains_substring,contains_concat,contains_at,indexof_empty,indexof_empty1,indexof_contains,contains_indexof,not_contains_indexof,substring_indexof,indexof_out_of_range,indexof_in_range,indexof_contains_substring,replace_empty,replace_not_contains,replace_empty2,replace_substring_indexof,replaceall_empty1,not_contains_replaceall,to_int_gt_minus_1,to_int_empty,from_int_negative,from_int_to_int,char&#39;invariant,code,code_chr,chr_code,get,substring_get,concat_first,concat_second,extensionality,make_length,make_contents,to_int_in_bounds,extensionality1,max_int&#39;def,min_int&#39;def,int2b64_valid_4_char,b642int_int2b64,encoding_valid_b64,H1,H2,H3">
    <goal name="decode_unique&#39;vc.0.2.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.010000" steps="19056"/></proof>
    <proof prover="4"><result status="valid" time="0.189891" steps="877"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="decode_unique&#39;vc.1" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="Assert" arg2="(div i 3)">
   <goal name="decode_unique&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.145992" steps="1810"/></proof>
   <proof prover="7"><result status="valid" time="0.080000" steps="679"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode_unique&#39;vc.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="extensionality">
   <goal name="decode_unique&#39;vc.2.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.050182" steps="201"/></proof>
   <proof prover="7"><result status="valid" time="0.110000" steps="776"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="encode_unique&#39;vc" expl="VC for encode_unique" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="encode_unique&#39;vc.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.028685" steps="30"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="31"/></proof>
  </goal>
  <goal name="encode_unique&#39;vc.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode_unique&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H3">
    <goal name="encode_unique&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H12" arg2="i">
      <goal name="encode_unique&#39;vc.1.0.0.0.0" expl="assertion" proved="true">
      <proof prover="7"><result status="valid" time="2.556551" steps="23344"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.1.1" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H5">
    <goal name="encode_unique&#39;vc.1.1.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.1.1.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H14" arg2="i">
      <goal name="encode_unique&#39;vc.1.1.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H13" arg2="i">
       <goal name="encode_unique&#39;vc.1.1.0.0.0.0" expl="assertion" proved="true">
       <proof prover="7" timelimit="20"><result status="valid" time="7.473166" steps="57404"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.1.2" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H7">
    <goal name="encode_unique&#39;vc.1.2.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.1.2.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H14" arg2="i">
      <goal name="encode_unique&#39;vc.1.2.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H15" arg2="i">
       <goal name="encode_unique&#39;vc.1.2.0.0.0.0" expl="assertion" proved="true">
       <proof prover="7" timelimit="60"><result status="valid" time="24.413353" steps="172484"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.1.3" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H8">
    <goal name="encode_unique&#39;vc.1.3.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.1.3.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H15" arg2="i">
      <goal name="encode_unique&#39;vc.1.3.0.0.0" expl="assertion" proved="true">
      <proof prover="7" timelimit="60"><result status="valid" time="3.917174" steps="35124"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.1.4" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H7">
    <goal name="encode_unique&#39;vc.1.4.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.1.4.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H14" arg2="i">
      <goal name="encode_unique&#39;vc.1.4.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H15" arg2="i">
       <goal name="encode_unique&#39;vc.1.4.0.0.0.0" expl="assertion" proved="true">
       <proof prover="7" timelimit="60"><result status="valid" time="3.042084" steps="28052"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.1.5" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.277526" steps="2679"/></proof>
   <proof prover="7"><result status="valid" time="0.224266" steps="2866"/></proof>
   </goal>
   <goal name="encode_unique&#39;vc.1.6" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H5">
    <goal name="encode_unique&#39;vc.1.6.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.1.6.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H13" arg2="i">
      <goal name="encode_unique&#39;vc.1.6.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H14" arg2="i">
       <goal name="encode_unique&#39;vc.1.6.0.0.0.0" expl="assertion" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="encode_unique&#39;vc.1.6.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="4"><result status="valid" time="0.028544" steps="27"/></proof>
        <proof prover="7"><result status="valid" time="0.010000" steps="27"/></proof>
        </goal>
        <goal name="encode_unique&#39;vc.1.6.0.0.0.0.1" expl="assertion" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst1">
         <goal name="encode_unique&#39;vc.1.6.0.0.0.0.1.0" expl="destruct premise" proved="true">
         <proof prover="4"><result status="valid" time="0.020728" steps="29"/></proof>
         <proof prover="7"><result status="valid" time="0.010000" steps="30"/></proof>
         </goal>
         <goal name="encode_unique&#39;vc.1.6.0.0.0.0.1.1" expl="assertion" proved="true">
         <transf name="eliminate_let" proved="true" >
          <goal name="encode_unique&#39;vc.1.6.0.0.0.0.1.1.0" expl="assertion" proved="true">
          <transf name="case" proved="true" arg1="(i*3+1 &lt; length s1)">
           <goal name="encode_unique&#39;vc.1.6.0.0.0.0.1.1.0.0" expl="true case (assertion)" proved="true">
           <proof prover="4"><result status="valid" time="0.019758" steps="30"/></proof>
           <proof prover="7"><result status="valid" time="0.010000" steps="30"/></proof>
           </goal>
           <goal name="encode_unique&#39;vc.1.6.0.0.0.0.1.1.0.1" expl="false case (assertion)" proved="true">
           <proof prover="7"><result status="valid" time="0.939152" steps="11258"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.1.7" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.239548" steps="1668"/></proof>
   <proof prover="7"><result status="valid" time="0.197243" steps="1971"/></proof>
   </goal>
   <goal name="encode_unique&#39;vc.1.8" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.237988" steps="1930"/></proof>
   <proof prover="7"><result status="valid" time="0.280000" steps="2032"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode_unique&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode_unique&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H2">
    <goal name="encode_unique&#39;vc.2.0.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.2.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H11" arg2="i">
      <goal name="encode_unique&#39;vc.2.0.0.0.0" expl="assertion" proved="true">
      <proof prover="7"><result status="valid" time="1.367487" steps="16091"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.2.1" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H4">
    <goal name="encode_unique&#39;vc.2.1.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.2.1.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H12" arg2="i">
      <goal name="encode_unique&#39;vc.2.1.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H13" arg2="i">
       <goal name="encode_unique&#39;vc.2.1.0.0.0.0" expl="assertion" proved="true">
       <proof prover="7" timelimit="30"><result status="valid" time="7.420309" steps="52422"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.2.2" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H6">
    <goal name="encode_unique&#39;vc.2.2.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.2.2.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H13" arg2="i">
      <goal name="encode_unique&#39;vc.2.2.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H14" arg2="i">
       <goal name="encode_unique&#39;vc.2.2.0.0.0.0" expl="assertion" proved="true">
       <proof prover="7" timelimit="60"><result status="valid" time="21.523556" steps="166323"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.2.3" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H7">
    <goal name="encode_unique&#39;vc.2.3.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.2.3.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H14" arg2="i">
      <goal name="encode_unique&#39;vc.2.3.0.0.0" expl="assertion" proved="true">
      <proof prover="7" timelimit="15"><result status="valid" time="2.297958" steps="20082"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.2.4" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H6">
    <goal name="encode_unique&#39;vc.2.4.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.2.4.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H13" arg2="i">
      <goal name="encode_unique&#39;vc.2.4.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H14" arg2="i">
       <goal name="encode_unique&#39;vc.2.4.0.0.0.0" expl="assertion" proved="true">
       <proof prover="7" timelimit="30"><result status="valid" time="4.713172" steps="35495"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.2.5" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.316230" steps="4748"/></proof>
   <proof prover="7"><result status="valid" time="0.278743" steps="3229"/></proof>
   </goal>
   <goal name="encode_unique&#39;vc.2.6" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="encoding" arg2="in" arg3="H4">
    <goal name="encode_unique&#39;vc.2.6.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="encode_unique&#39;vc.2.6.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="H12" arg2="i">
      <goal name="encode_unique&#39;vc.2.6.0.0.0" expl="assertion" proved="true">
      <transf name="instantiate" proved="true" arg1="H13" arg2="i">
       <goal name="encode_unique&#39;vc.2.6.0.0.0.0" expl="assertion" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="encode_unique&#39;vc.2.6.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="4"><result status="valid" time="0.019954" steps="27"/></proof>
        <proof prover="7"><result status="valid" time="0.010000" steps="27"/></proof>
        </goal>
        <goal name="encode_unique&#39;vc.2.6.0.0.0.0.1" expl="assertion" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst1">
         <goal name="encode_unique&#39;vc.2.6.0.0.0.0.1.0" expl="destruct premise" proved="true">
         <proof prover="4"><result status="valid" time="0.024916" steps="29"/></proof>
         <proof prover="7"><result status="valid" time="0.010000" steps="30"/></proof>
         </goal>
         <goal name="encode_unique&#39;vc.2.6.0.0.0.0.1.1" expl="assertion" proved="true">
         <transf name="eliminate_let" proved="true" >
          <goal name="encode_unique&#39;vc.2.6.0.0.0.0.1.1.0" expl="assertion" proved="true">
          <transf name="case" proved="true" arg1="(i*3+1 &lt; length s1)">
           <goal name="encode_unique&#39;vc.2.6.0.0.0.0.1.1.0.0" expl="true case (assertion)" proved="true">
           <proof prover="4"><result status="valid" time="0.029082" steps="30"/></proof>
           <proof prover="7"><result status="valid" time="0.020000" steps="30"/></proof>
           </goal>
           <goal name="encode_unique&#39;vc.2.6.0.0.0.0.1.1.0.1" expl="false case (assertion)" proved="true">
           <proof prover="7"><result status="valid" time="1.480410" steps="19917"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="encode_unique&#39;vc.2.7" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.239904" steps="1784"/></proof>
   <proof prover="7"><result status="valid" time="0.220844" steps="2114"/></proof>
   </goal>
   <goal name="encode_unique&#39;vc.2.8" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.191111" steps="2134"/></proof>
   <proof prover="7"><result status="valid" time="0.180000" steps="2269"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode_unique&#39;vc.3" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="Assert" arg2="i">
   <goal name="encode_unique&#39;vc.3.0" expl="assertion" proved="true">
   <transf name="instantiate" proved="true" arg1="Assert1" arg2="i">
    <goal name="encode_unique&#39;vc.3.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="encode_unique&#39;vc.3.0.0.0" expl="VC for encode_unique" proved="true">
     <proof prover="4"><result status="valid" time="0.034064" steps="26"/></proof>
     <proof prover="7"><result status="valid" time="0.020000" steps="26"/></proof>
     </goal>
     <goal name="encode_unique&#39;vc.3.0.0.1" expl="VC for encode_unique" proved="true">
     <proof prover="4"><result status="valid" time="0.024953" steps="28"/></proof>
     <proof prover="7"><result status="valid" time="0.020000" steps="28"/></proof>
     </goal>
     <goal name="encode_unique&#39;vc.3.0.0.2" expl="VC for encode_unique" proved="true">
     <proof prover="4"><result status="valid" time="0.028507" steps="29"/></proof>
     <proof prover="7"><result status="valid" time="0.020000" steps="30"/></proof>
     </goal>
     <goal name="encode_unique&#39;vc.3.0.0.3" expl="VC for encode_unique" proved="true">
     <proof prover="4"><result status="valid" time="0.027657" steps="30"/></proof>
     <proof prover="7"><result status="valid" time="0.020000" steps="30"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="encode_unique&#39;vc.4" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="Assert" arg2="(div i 4)">
   <goal name="encode_unique&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.291858" steps="3146"/></proof>
   <proof prover="7"><result status="valid" time="0.040000" steps="259"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode_unique&#39;vc.5" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.039951" steps="86"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="113"/></proof>
  </goal>
  <goal name="encode_unique&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.027004" steps="18"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="encode&#39;vc" expl="VC for encode" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="encode&#39;vc.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.012142" steps="13"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.060000" steps="13"/></proof>
  </goal>
  <goal name="encode&#39;vc.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.023137" steps="49"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="48"/></proof>
  </goal>
  <goal name="encode&#39;vc.2" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.2.0" expl="loop invariant init" proved="true">
   <proof prover="4"><result status="valid" time="0.020466" steps="14"/></proof>
   <proof prover="7"><result status="valid" time="0.010000" steps="14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.029379" steps="15"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="15"/></proof>
  </goal>
  <goal name="encode&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.033834" steps="107"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="158"/></proof>
  </goal>
  <goal name="encode&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.023439" steps="21"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="21"/></proof>
  </goal>
  <goal name="encode&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.027962" steps="69"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="64"/></proof>
  </goal>
  <goal name="encode&#39;vc.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.043664" steps="206"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.030000" steps="266"/></proof>
  </goal>
  <goal name="encode&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.033854" steps="74"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="68"/></proof>
  </goal>
  <goal name="encode&#39;vc.9" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.040267" steps="168"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.040000" steps="301"/></proof>
  </goal>
  <goal name="encode&#39;vc.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.020117" steps="34"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="34"/></proof>
  </goal>
  <goal name="encode&#39;vc.11" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.026779" steps="37"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="37"/></proof>
  </goal>
  <goal name="encode&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.056387" steps="213"/></proof>
  <proof prover="7"><result status="valid" time="0.090000" steps="788"/></proof>
  </goal>
  <goal name="encode&#39;vc.13" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.023326" steps="42"/></proof>
  <proof prover="7"><result status="valid" time="0.030000" steps="42"/></proof>
  </goal>
  <goal name="encode&#39;vc.14" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.065257" steps="328"/></proof>
  <proof prover="7"><result status="valid" time="0.150000" steps="1271"/></proof>
  </goal>
  <goal name="encode&#39;vc.15" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.022972" steps="47"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="47"/></proof>
  </goal>
  <goal name="encode&#39;vc.16" expl="integer overflow" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.16.0" expl="integer overflow" proved="true">
   <proof prover="4"><result status="valid" time="0.103332" steps="472"/></proof>
   <proof prover="7"><result status="valid" time="0.150946" steps="1544"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.17" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.083415" steps="502"/></proof>
  <proof prover="7"><result status="valid" time="0.160000" steps="1902"/></proof>
  </goal>
  <goal name="encode&#39;vc.18" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.152562" steps="1368"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.398375" steps="4076"/></proof>
  </goal>
  <goal name="encode&#39;vc.19" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.032830" steps="58"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.100000" steps="58"/></proof>
  </goal>
  <goal name="encode&#39;vc.20" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.093803" steps="624"/></proof>
  <proof prover="7"><result status="valid" time="0.730189" steps="6192"/></proof>
  </goal>
  <goal name="encode&#39;vc.21" expl="division by zero" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.21.0" expl="division by zero" proved="true">
   <proof prover="4"><result status="valid" time="0.024974" steps="62"/></proof>
   <proof prover="7"><result status="valid" time="0.020000" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.22" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.163272" steps="859"/></proof>
  <proof prover="7"><result status="valid" time="1.063433" steps="9661"/></proof>
  </goal>
  <goal name="encode&#39;vc.23" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.142912" steps="881"/></proof>
  <proof prover="7"><result status="valid" time="0.587204" steps="4336"/></proof>
  </goal>
  <goal name="encode&#39;vc.24" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.516230" steps="5022"/></proof>
  <proof prover="7"><result status="valid" time="0.630835" steps="4620"/></proof>
  </goal>
  <goal name="encode&#39;vc.25" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.027668" steps="73"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="73"/></proof>
  </goal>
  <goal name="encode&#39;vc.26" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="58112"/></proof>
  <proof prover="4"><result status="valid" time="0.198596" steps="1151"/></proof>
  </goal>
  <goal name="encode&#39;vc.27" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div (length r - 3) 4)">
   <goal name="encode&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.169899" steps="973"/></proof>
   <proof prover="7"><result status="valid" time="0.276755" steps="2248"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.28" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div (length r - 2) 4)">
   <goal name="encode&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.262224" steps="42109"/></proof>
   <proof prover="7"><result status="valid" time="0.268987" steps="2395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.29" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.205756" steps="1010"/></proof>
   <proof prover="7"><result status="valid" time="0.280000" steps="1580"/></proof>
   </goal>
   <goal name="encode&#39;vc.29.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.180052" steps="31285"/></proof>
   <proof prover="7" timelimit="15"><result status="valid" time="0.376070" steps="3423"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.30" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.524455" steps="4514"/></proof>
  <proof prover="7"><result status="valid" time="0.745544" steps="6059"/></proof>
  </goal>
  <goal name="encode&#39;vc.31" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.084025" steps="501"/></proof>
  <proof prover="7"><result status="valid" time="0.080000" steps="613"/></proof>
  </goal>
  <goal name="encode&#39;vc.32" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.32.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="2.891344" steps="3385"/></proof>
   </goal>
   <goal name="encode&#39;vc.32.1" expl="assertion" proved="true">
   <proof prover="7" timelimit="15"><result status="valid" time="2.495454" steps="26453"/></proof>
   </goal>
   <goal name="encode&#39;vc.32.2" expl="assertion" proved="true">
   <proof prover="7" timelimit="15"><result status="valid" time="5.596118" steps="48443"/></proof>
   </goal>
   <goal name="encode&#39;vc.32.3" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.827928" steps="5930"/></proof>
   <proof prover="7"><result status="valid" time="0.628937" steps="6341"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.33" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.059175" steps="88667"/></proof>
  <proof prover="7"><result status="valid" time="2.982019" steps="28081"/></proof>
  </goal>
  <goal name="encode&#39;vc.34" expl="loop variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.037785" steps="128"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="129"/></proof>
  </goal>
  <goal name="encode&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.037807" steps="127"/></proof>
  <proof prover="7"><result status="valid" time="0.030000" steps="127"/></proof>
  </goal>
  <goal name="encode&#39;vc.36" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.106429" steps="604"/></proof>
  <proof prover="7"><result status="valid" time="0.140000" steps="908"/></proof>
  </goal>
  <goal name="encode&#39;vc.37" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.37.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.040060" steps="133"/></proof>
   <proof prover="7"><result status="valid" time="0.030000" steps="133"/></proof>
   </goal>
   <goal name="encode&#39;vc.37.1" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.817499" steps="6540"/></proof>
   <proof prover="7"><result status="valid" time="0.727882" steps="6893"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.38" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="encode&#39;vc.38.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.387770" steps="5110"/></proof>
   <proof prover="7"><result status="valid" time="0.481020" steps="5997"/></proof>
   </goal>
   <goal name="encode&#39;vc.38.1" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.633102" steps="7478"/></proof>
   <proof prover="7"><result status="valid" time="0.612137" steps="6985"/></proof>
   </goal>
   <goal name="encode&#39;vc.38.2" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.938459" steps="11225"/></proof>
   <proof prover="7"><result status="valid" time="0.780622" steps="9039"/></proof>
   </goal>
   <goal name="encode&#39;vc.38.3" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="1.070565" steps="12191"/></proof>
   <proof prover="7"><result status="valid" time="0.851184" steps="9026"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.39" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div (length r - 2) 4)">
   <goal name="encode&#39;vc.39.0" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.394414" steps="4741"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.40" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div (length r - 3) 4)">
   <goal name="encode&#39;vc.40.0" expl="assertion" proved="true">
   <proof prover="7"><result status="valid" time="0.441984" steps="4596"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="encode&#39;vc.41" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.057824" steps="279"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.120000" steps="441"/></proof>
  </goal>
  <goal name="encode&#39;vc.42" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.104072" steps="508"/></proof>
  <proof prover="7"><result status="valid" time="0.140000" steps="1424"/></proof>
  </goal>
  <goal name="encode&#39;vc.43" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.059836" steps="235"/></proof>
  <proof prover="7"><result status="valid" time="0.040000" steps="301"/></proof>
  </goal>
  <goal name="encode&#39;vc.44" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="encoding">
   <goal name="encode&#39;vc.44.0" expl="VC for encode" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="encode&#39;vc.44.0.0" expl="VC for encode" proved="true">
    <proof prover="4"><result status="valid" time="0.159877" steps="935"/></proof>
    <proof prover="7"><result status="valid" time="0.274726" steps="2550"/></proof>
    </goal>
    <goal name="encode&#39;vc.44.0.1" expl="VC for encode" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="i">
     <goal name="encode&#39;vc.44.0.1.0" expl="VC for encode" proved="true">
     <transf name="remove" proved="true" arg1="Assert">
      <goal name="encode&#39;vc.44.0.1.0.0" expl="VC for encode" proved="true">
      <transf name="remove" proved="true" arg1="Assert">
       <goal name="encode&#39;vc.44.0.1.0.0.0" expl="VC for encode" proved="true">
       <proof prover="7" timelimit="10"><result status="valid" time="3.997578" steps="36646"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="encode&#39;vc.44.0.2" expl="VC for encode" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="i">
     <goal name="encode&#39;vc.44.0.2.0" expl="VC for encode" proved="true">
     <transf name="remove" proved="true" arg1="Assert">
      <goal name="encode&#39;vc.44.0.2.0.0" expl="VC for encode" proved="true">
      <transf name="remove" proved="true" arg1="Assert">
       <goal name="encode&#39;vc.44.0.2.0.0.0" expl="VC for encode" proved="true">
       <proof prover="2"><result status="valid" time="3.864043" steps="4778"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="encode&#39;vc.44.0.3" expl="VC for encode" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="i">
     <goal name="encode&#39;vc.44.0.3.0" expl="VC for encode" proved="true">
     <transf name="remove" proved="true" arg1="Assert">
      <goal name="encode&#39;vc.44.0.3.0.0" expl="VC for encode" proved="true">
      <transf name="remove" proved="true" arg1="Assert">
       <goal name="encode&#39;vc.44.0.3.0.0.0" expl="VC for encode" proved="true">
       <proof prover="7" timelimit="20"><result status="valid" time="5.566720" steps="42529"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="encode&#39;vc.44.0.4" expl="VC for encode" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; b -&gt; valid_b64_char r2[i*4] &amp;&amp; valid_b64_char r2[i*4+1] &amp;&amp; valid_b64_char r2[i*4+2] &amp;&amp; valid_b64_char r2[i*4+3])">
     <goal name="encode&#39;vc.44.0.4.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="i">
      <goal name="encode&#39;vc.44.0.4.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="encode&#39;vc.44.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.030000" steps="84093"/></proof>
       </goal>
       <goal name="encode&#39;vc.44.0.4.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.030000" steps="85942"/></proof>
       </goal>
       <goal name="encode&#39;vc.44.0.4.0.0.2" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.030000" steps="87596"/></proof>
       </goal>
       <goal name="encode&#39;vc.44.0.4.0.0.3" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.030000" steps="88223"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="encode&#39;vc.44.0.4.1" expl="VC for encode" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; o -&gt; r[i] = r1[i] = r2[i])">
      <goal name="encode&#39;vc.44.0.4.1.0" expl="asserted formula" proved="true">
      <proof prover="4"><result status="valid" time="0.095374" steps="437"/></proof>
      <proof prover="7"><result status="valid" time="0.170000" steps="934"/></proof>
      </goal>
      <goal name="encode&#39;vc.44.0.4.1.1" expl="VC for encode" proved="true">
      <transf name="instantiate" proved="true" arg1="h1" arg2="(div i 4)">
       <goal name="encode&#39;vc.44.0.4.1.1.0" expl="VC for encode" proved="true">
       <transf name="remove" proved="true" arg1="Assert">
        <goal name="encode&#39;vc.44.0.4.1.1.0.0" expl="VC for encode" proved="true">
        <transf name="remove" proved="true" arg1="Assert">
         <goal name="encode&#39;vc.44.0.4.1.1.0.0.0" expl="VC for encode" proved="true">
         <proof prover="7"><result status="valid" time="0.943589" steps="10809"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="encode&#39;vc.44.0.5" expl="VC for encode" proved="true">
    <transf name="assert" proved="true" arg1="(get_pad r = padding)">
     <goal name="encode&#39;vc.44.0.5.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; length r1 -&gt; r1[i] &lt;&gt; eq_symbol)">
      <goal name="encode&#39;vc.44.0.5.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; 64 -&gt; int2b64 i &lt;&gt; eq_symbol)">
       <goal name="encode&#39;vc.44.0.5.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.260000" steps="33545"/></proof>
       <proof prover="4"><result status="valid" time="0.084165" steps="500"/></proof>
       </goal>
       <goal name="encode&#39;vc.44.0.5.0.0.1" expl="asserted formula" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="encode&#39;vc.44.0.5.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div i 4)">
         <goal name="encode&#39;vc.44.0.5.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="4"><result status="valid" time="1.313549" steps="17407"/></proof>
         <proof prover="7"><result status="valid" time="0.542254" steps="5645"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="encode&#39;vc.44.0.5.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.446124" steps="60001"/></proof>
      <proof prover="4"><result status="valid" time="0.216521" steps="1696"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="encode&#39;vc.44.0.5.1" expl="VC for encode" proved="true">
     <proof prover="4"><result status="valid" time="0.084654" steps="454"/></proof>
     <proof prover="7"><result status="valid" time="0.300000" steps="3044"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="encode&#39;vc.44.0.6" expl="VC for encode" proved="true">
    <proof prover="4"><result status="valid" time="0.037555" steps="108"/></proof>
    <proof prover="7"><result status="valid" time="0.030000" steps="139"/></proof>
    </goal>
    <goal name="encode&#39;vc.44.0.7" expl="VC for encode" proved="true">
    <transf name="assert" proved="true" arg1="(get_pad r = padding)">
     <goal name="encode&#39;vc.44.0.7.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; length r1 -&gt; r1[i] &lt;&gt; eq_symbol)">
      <goal name="encode&#39;vc.44.0.7.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; 64 -&gt; int2b64 i &lt;&gt; eq_symbol)">
       <goal name="encode&#39;vc.44.0.7.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.180000" steps="33033"/></proof>
       <proof prover="4"><result status="valid" time="0.100205" steps="565"/></proof>
       </goal>
       <goal name="encode&#39;vc.44.0.7.0.0.1" expl="asserted formula" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="encode&#39;vc.44.0.7.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div i 4)">
         <goal name="encode&#39;vc.44.0.7.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="4"><result status="valid" time="1.131744" steps="15256"/></proof>
         <proof prover="7"><result status="valid" time="0.616313" steps="5935"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="encode&#39;vc.44.0.7.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.383687" steps="57692"/></proof>
      <proof prover="4"><result status="valid" time="0.240383" steps="1381"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="encode&#39;vc.44.0.7.1" expl="VC for encode" proved="true">
     <proof prover="4"><result status="valid" time="0.070833" steps="489"/></proof>
     <proof prover="7"><result status="valid" time="0.196156" steps="2333"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="encode&#39;vc.44.0.8" expl="VC for encode" proved="true">
    <proof prover="4"><result status="valid" time="0.048367" steps="225"/></proof>
    <proof prover="7"><result status="valid" time="0.080000" steps="446"/></proof>
    </goal>
    <goal name="encode&#39;vc.44.0.9" expl="VC for encode" proved="true">
    <proof prover="4"><result status="valid" time="0.049314" steps="112"/></proof>
    <proof prover="7"><result status="valid" time="0.050000" steps="143"/></proof>
    </goal>
    <goal name="encode&#39;vc.44.0.10" expl="VC for encode" proved="true">
    <transf name="assert" proved="true" arg1="(get_pad r = padding)">
     <goal name="encode&#39;vc.44.0.10.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; length r1 -&gt; r1[i] &lt;&gt; eq_symbol)">
      <goal name="encode&#39;vc.44.0.10.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; 64 -&gt; int2b64 i &lt;&gt; eq_symbol)">
       <goal name="encode&#39;vc.44.0.10.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.310000" steps="36722"/></proof>
       <proof prover="4"><result status="valid" time="0.101442" steps="560"/></proof>
       </goal>
       <goal name="encode&#39;vc.44.0.10.0.0.1" expl="asserted formula" proved="true">
       <transf name="introduce_premises" proved="true" >
        <goal name="encode&#39;vc.44.0.10.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant" arg2="(div i 4)">
         <goal name="encode&#39;vc.44.0.10.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="7"><result status="valid" time="0.534270" steps="5803"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="encode&#39;vc.44.0.10.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.207371" steps="33272"/></proof>
      <proof prover="3"><result status="valid" time="0.240000" steps="33024"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="encode&#39;vc.44.0.10.1" expl="VC for encode" proved="true">
     <proof prover="4"><result status="valid" time="0.024552" steps="49"/></proof>
     <proof prover="7"><result status="valid" time="0.020000" steps="49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="decode&#39;vc" expl="VC for decode" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="decode&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.020000" steps="34550"/></proof>
  <proof prover="1"><result status="valid" time="0.171813" steps="26993"/></proof>
  </goal>
  <goal name="decode&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.020374" steps="17"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="17"/></proof>
  </goal>
  <goal name="decode&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.018261" steps="18"/></proof>
  <proof prover="7"><result status="valid" time="0.010000" steps="18"/></proof>
  </goal>
  <goal name="decode&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.017020" steps="21"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="21"/></proof>
  </goal>
  <goal name="decode&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.027800" steps="51"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="48"/></proof>
  </goal>
  <goal name="decode&#39;vc.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.031965" steps="117"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="149"/></proof>
  </goal>
  <goal name="decode&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.024225" steps="59"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="56"/></proof>
  </goal>
  <goal name="decode&#39;vc.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.037293" steps="139"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="174"/></proof>
  </goal>
  <goal name="decode&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.028916" steps="67"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="66"/></proof>
  </goal>
  <goal name="decode&#39;vc.9" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.037892" steps="126"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.030000" steps="243"/></proof>
  </goal>
  <goal name="decode&#39;vc.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.028787" steps="38"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="38"/></proof>
  </goal>
  <goal name="decode&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.061981" steps="392"/></proof>
   <proof prover="7" timelimit="30"><result status="valid" time="0.080000" steps="475"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode&#39;vc.12" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.030701" steps="41"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="41"/></proof>
  </goal>
  <goal name="decode&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.051575" steps="338"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="505"/></proof>
  </goal>
  <goal name="decode&#39;vc.14" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.103881" steps="745"/></proof>
  <proof prover="7" timelimit="20"><result status="valid" time="0.140000" steps="1222"/></proof>
  </goal>
  <goal name="decode&#39;vc.15" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.064620" steps="635"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.060000" steps="461"/></proof>
  </goal>
  <goal name="decode&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.207332" steps="2803"/></proof>
  <proof prover="7"><result status="valid" time="0.075176" steps="1685"/></proof>
  </goal>
  <goal name="decode&#39;vc.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.124764" steps="1380"/></proof>
   <proof prover="7"><result status="valid" time="0.160000" steps="1636"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode&#39;vc.18" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.028505" steps="53"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="54"/></proof>
  </goal>
  <goal name="decode&#39;vc.19" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.137625" steps="1362"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.090000" steps="1279"/></proof>
  </goal>
  <goal name="decode&#39;vc.20" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.237644" steps="3930"/></proof>
  <proof prover="7" timelimit="10"><result status="valid" time="0.260000" steps="2261"/></proof>
  </goal>
  <goal name="decode&#39;vc.21" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.028739" steps="58"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="58"/></proof>
  </goal>
  <goal name="decode&#39;vc.22" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.155198" steps="568"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.230000" steps="2119"/></proof>
  </goal>
  <goal name="decode&#39;vc.23" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.188681" steps="2029"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.370000" steps="3881"/></proof>
  </goal>
  <goal name="decode&#39;vc.24" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="1.104279" steps="7338"/></proof>
  <proof prover="7"><result status="valid" time="0.517406" steps="4424"/></proof>
  </goal>
  <goal name="decode&#39;vc.25" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.641437" steps="4190"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.441299" steps="3914"/></proof>
  </goal>
  <goal name="decode&#39;vc.26" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.451967" steps="5117"/></proof>
  <proof prover="7"><result status="valid" time="0.236279" steps="3815"/></proof>
  </goal>
  <goal name="decode&#39;vc.27" expl="division by zero" proved="true">
  <proof prover="4"><result status="valid" time="0.028535" steps="71"/></proof>
  <proof prover="7"><result status="valid" time="0.020000" steps="72"/></proof>
  </goal>
  <goal name="decode&#39;vc.28" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.179267" steps="914"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.454478" steps="4848"/></proof>
  </goal>
  <goal name="decode&#39;vc.29" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.668632" steps="3180"/></proof>
  <proof prover="7"><result status="valid" time="0.205909" steps="2085"/></proof>
  </goal>
  <goal name="decode&#39;vc.30" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.128517" steps="21991"/></proof>
  <proof prover="7"><result status="valid" time="0.462106" steps="4478"/></proof>
  </goal>
  <goal name="decode&#39;vc.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.282276" steps="36259"/></proof>
  </goal>
  <goal name="decode&#39;vc.32" expl="precondition" proved="true">
  <proof prover="7" timelimit="10"><result status="valid" time="4.754873" steps="49166"/></proof>
  </goal>
  <goal name="decode&#39;vc.33" expl="precondition" proved="true">
  <proof prover="7" timelimit="15"><result status="valid" time="4.993427" steps="43019"/></proof>
  </goal>
  <goal name="decode&#39;vc.34" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.253450" steps="1597"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.245992" steps="3166"/></proof>
  </goal>
  <goal name="decode&#39;vc.35" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode&#39;vc.35.0" expl="assertion" proved="true">
   <proof prover="7" timelimit="20"><result status="valid" time="4.725957" steps="45362"/></proof>
   </goal>
   <goal name="decode&#39;vc.35.1" expl="assertion" proved="true">
   <proof prover="7" timelimit="20"><result status="valid" time="8.585242" steps="76517"/></proof>
   </goal>
   <goal name="decode&#39;vc.35.2" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.180189" steps="2040"/></proof>
   <proof prover="7"><result status="valid" time="1.186593" steps="8848"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode&#39;vc.36" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.319861" steps="2109"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.419647" steps="4453"/></proof>
  </goal>
  <goal name="decode&#39;vc.37" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode&#39;vc.37.0" expl="loop variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.041647" steps="122"/></proof>
   <proof prover="7" timelimit="10"><result status="valid" time="0.020000" steps="122"/></proof>
   </goal>
   <goal name="decode&#39;vc.37.1" expl="loop variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.036265" steps="122"/></proof>
   <proof prover="7"><result status="valid" time="0.030000" steps="122"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode&#39;vc.38" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.229273" steps="2404"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.432449" steps="4947"/></proof>
  </goal>
  <goal name="decode&#39;vc.39" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.043096" steps="123"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.010000" steps="123"/></proof>
  </goal>
  <goal name="decode&#39;vc.40" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode&#39;vc.40.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.078282" steps="497"/></proof>
   <proof prover="7" timelimit="15"><result status="valid" time="0.110000" steps="696"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode&#39;vc.41" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="decode&#39;vc.41.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.294550" steps="1808"/></proof>
   <proof prover="7"><result status="valid" time="0.393595" steps="4690"/></proof>
   </goal>
   <goal name="decode&#39;vc.41.1" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.251794" steps="1585"/></proof>
   <proof prover="7"><result status="valid" time="0.368775" steps="4210"/></proof>
   </goal>
   <goal name="decode&#39;vc.41.2" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.335209" steps="2151"/></proof>
   <proof prover="7"><result status="valid" time="0.730602" steps="6938"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="decode&#39;vc.42" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.035298" steps="143"/></proof>
  <proof prover="7"><result status="valid" time="0.050000" steps="145"/></proof>
  </goal>
  <goal name="decode&#39;vc.43" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.039485" steps="146"/></proof>
  <proof prover="7" timelimit="1"><result status="valid" time="0.020000" steps="135"/></proof>
  </goal>
  <goal name="decode&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.179731" steps="2303"/></proof>
  <proof prover="7"><result status="valid" time="1.119734" steps="11291"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decode_encode&#39;vc" expl="VC for decode_encode" proved="true">
 <proof prover="4"><result status="valid" time="0.020206" steps="172"/></proof>
 <proof prover="7"><result status="valid" time="0.090000" steps="710"/></proof>
 </goal>
</theory>
</file>
</why3session>
