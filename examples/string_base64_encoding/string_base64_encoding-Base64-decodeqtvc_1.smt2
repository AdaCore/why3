;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; generated by SMT-LIB strings
;;; SMT-LIB2: integer arithmetic
;; CompatOrderMult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (=> (<= x y) (=> (<= 0 z) (<= (* x z) (* y z))))))

(declare-fun abs1 (Int) Int)

;; abs'def
  (assert
  (forall ((x Int)) (ite (<= 0 x) (= (abs1 x) x) (= (abs1 x) (- x)))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

(declare-sort int63 0)

(declare-fun int63qtint (int63) Int)

;; int63'axiom
  (assert
  (forall ((i int63))
  (and (<= (- 4611686018427387904) (int63qtint i))
  (<= (int63qtint i) 4611686018427387903))))

;; concat_substring
  (assert
  (forall ((s String) (ofs Int) (len Int) (lenqt Int))
  (=> (and (<= 0 ofs) (<= ofs (str.len s)))
  (=> (<= 0 len)
  (=> (<= (+ ofs len) (str.len s))
  (=> (<= 0 lenqt)
  (=>
  (and (<= 0 (+ (+ ofs len) lenqt)) (<= (+ (+ ofs len) lenqt) (str.len s)))
  (= (str.++ (str.substr s ofs len) (str.substr s (+ ofs len) lenqt)) (str.substr s ofs (+ len lenqt))))))))))

(declare-sort char 0)

(declare-fun content (char) String)

;; char_eq
  (assert
  (forall ((c1 char) (c2 char)) (=> (= (content c1) (content c2)) (= c1 c2))))

(declare-fun code (char) Int)

(declare-fun chr (Int) char)

(declare-fun get (String Int) char)

(declare-fun next_m3 (Int) Int)

;; next_m3'def
  (assert
  (forall ((i Int))
  (ite (= (mod1 i 3) 0) (= (next_m3 i) i)
  (ite (= (mod1 i 3) 1) (= (next_m3 i) (+ i 2)) (= (next_m3 i) (+ i 1))))))

(declare-fun get_pad (String) Int)

;; get_pad'def
  (assert
  (forall ((s String))
  (ite (and (<= 1 (str.len s)) (= (get s (- (str.len s) 1)) (chr 61)))
  (ite (and (<= 2 (str.len s)) (= (get s (- (str.len s) 2)) (chr 61)))
  (= (get_pad s) 2) (= (get_pad s) 1)) (= (get_pad s) 0))))

(declare-fun s () String)

;; Requires
  (assert (= (mod1 (str.len s) 4) 0))

(declare-fun r () String)

;; LoopInvariant
  (assert (= (mod1 (str.len r) 3) 0))

(declare-fun o () int63)

;; Assert
  (assert (= (str.len r) (div1 (* (str.len s) 3) 4)))

(declare-fun o1 () int63)

(declare-fun o2 () int63)

(declare-fun o3 () int63)

;; h
  (assert
  (= (str.len (str.substr r 0 (int63qtint o3))) (- (div1 (* (str.len s) 3) 4) 
  (get_pad s))))

(assert
;; decodeqtvc
 ;; File "/home/claudio/why3/examples/string_base64_encoding.mlw", line 209, characters 15-21
  (not (= (str.len s) 0)))
(check-sat)
