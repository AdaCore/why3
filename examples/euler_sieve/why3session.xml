<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="3.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.2.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="11" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="euler_sieve.mlw"/>
<theory name="ArithmeticResults" proved="true">
 <goal name="mult_croissance_locale&#39;vc" expl="VC for mult_croissance_locale" proved="true">
 <proof prover="9"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
 <goal name="mult_croissance&#39;vc" expl="VC for mult_croissance" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="14"/></proof>
 </goal>
 <goal name="comp_mult_2&#39;vc" expl="VC for comp_mult_2" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
 <goal name="div_croissance_locale1&#39;vc" expl="VC for div_croissance_locale1" proved="true">
 <proof prover="10"><result status="valid" time="0.27" steps="49175"/></proof>
 </goal>
 <goal name="div_croissance1&#39;vc" expl="VC for div_croissance1" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="div_croissance_locale2&#39;vc" expl="VC for div_croissance_locale2" proved="true">
 <proof prover="10"><result status="valid" time="0.24" steps="56152"/></proof>
 </goal>
 <goal name="div_croissance2&#39;vc" expl="VC for div_croissance2" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
 </goal>
 <goal name="div_mult_1&#39;vc" expl="VC for div_mult_1" proved="true">
 <proof prover="10"><result status="valid" time="0.28" steps="61421"/></proof>
 </goal>
 <goal name="mult_borne_sous_exp&#39;vc" expl="VC for mult_borne_sous_exp" proved="true">
 <proof prover="9"><result status="valid" time="0.30" steps="387"/></proof>
 </goal>
 <goal name="sq_ineq&#39;vc" expl="VC for sq_ineq" proved="true">
 <proof prover="10"><result status="valid" time="0.18" steps="42266"/></proof>
 </goal>
</theory>
<theory name="DivisibilityResults" proved="true">
 <goal name="divides_div&#39;vc" expl="VC for divides_div" proved="true">
 <proof prover="9"><result status="valid" time="0.05" steps="77"/></proof>
 </goal>
 <goal name="divides_inf&#39;vc" expl="VC for divides_inf" proved="true">
 <proof prover="9"><result status="valid" time="0.04" steps="68"/></proof>
 </goal>
 <goal name="not_prime_divider_limits&#39;vc" expl="VC for not_prime_divider_limits" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="46"/></proof>
 </goal>
 <goal name="no_prod_impl_no_divider&#39;vc" expl="VC for no_prod_impl_no_divider" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="no_prod_impl_no_divider&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(exists k:int. (2 &lt;= k /\ k &lt; n) /\ not k = i /\ divides k i)">
   <goal name="no_prod_impl_no_divider&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="no_prod_impl_no_divider&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <transf name="introduce_exists" proved="true" >
      <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="assert" proved="true" arg1="(exists l:int. l * k = i)">
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
       </goal>
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1" expl="destruct premise" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
        <transf name="exists" proved="true" arg1="k">
         <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l">
          <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0" proved="true">
          <transf name="case" proved="true" arg1="(l = i)">
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="true case" proved="true">
           <transf name="assert" proved="true" arg1="(k = 1)">
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.08"/></proof>
            </goal>
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.1" expl="true case" proved="true">
            <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="false case" proved="true">
           <proof prover="9"><result status="valid" time="2.81" steps="443"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="no_prod_impl_no_divider&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_prime_impl_divisor_under_sqrt&#39;vc" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="162"/></proof>
 </goal>
</theory>
<theory name="EulerSieveSpec" proved="true">
 <goal name="conservation_all_eliminated_marked_on_marked_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_marked_change" proved="true">
 <proof prover="9"><result status="valid" time="0.06" steps="177"/></proof>
 </goal>
 <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="51"/></proof>
    </goal>
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.53" steps="1741"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieve" proved="true">
 <goal name="multiples_of_marked_are_marked&#39;vc" expl="VC for multiples_of_marked_are_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiples_of_marked_are_marked&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiples_of_marked_are_marked&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.4" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <proof prover="8"><result status="valid" time="0.04"/></proof>
    <transf name="remove" proved="true" arg1="Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,H13,H12,Requires,H11,H10,H9,H8,H7,H6,H5,H4,H3,H">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="8"><result status="valid" time="0.01"/></proof>
     <proof prover="10"><result status="valid" time="0.03" steps="3542"/></proof>
     <proof prover="11"><result status="valid" time="0.01" steps="7557"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.5" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="assert" proved="true" arg1="(k * (i * j) = i*j + (k-1)*(i*j))">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="29"/></proof>
    </goal>
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="assert" proved="true" arg1="((k-1)*(i*j) &gt;= 0)">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.1" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.6" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="1"><result status="valid" time="0.04"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),even,([]),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,Assoc1,Unit_def_r,Mul_distr_l,Refl,Trans,Div_unique,Div_bound,Div_minus1_left,Div_sign_pos,even_not_odd,odd_not_even,even_odd,odd_2k1,divides_left,divides_oppr_rev,divides_multl,divides_multr,divides_mod_euclidean,mod_divides_computer,prime_divisors,odd_prime,mult_croissance_locale,comp_mult_2,sq_ineq,divides_div,no_prod_impl_no_divider,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change">
      <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
      <proof prover="1"><result status="valid" time="0.03"/></proof>
      <proof prover="3"><result status="valid" time="0.11"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prev_and_new_impl_all_multiples_marked&#39;vc" expl="VC for prev_and_new_impl_all_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires2">
    <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="151"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.6" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.7" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="256"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.9" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="82"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="120"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_only_multiples_marked&#39;vc" expl="VC for conservation_only_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_only_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="234"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="137"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.3" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="conservation_only_multiples_marked&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_only_multiples_marked&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(k = i * j)">
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="61"/></proof>
     </goal>
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="172"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples&#39;vc" expl="VC for conservation_previously_marked_multiples" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_previously_marked_multiples&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="67"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.2.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="234"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.50"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.5.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples_on_marked_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_previously_marked_multiples_on_marked_change.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples_on_marked_change.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.13"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Unitary,NonTrivialRing,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_inf,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples">
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1.0" proved="true">
      <proof prover="3"><result status="valid" time="0.04"/></proof>
      <proof prover="4" timelimit="1"><result status="valid" time="0.03"/></proof>
      <proof prover="9"><result status="valid" time="0.10" steps="522"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2" proved="true">
     <transf name="inline_all" proved="true" >
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2.0" proved="true">
      <proof prover="11"><result status="valid" time="0.43" steps="1005269"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_not_marked_impl_next_not_marked&#39;vc" expl="VC for conservation_not_marked_impl_next_not_marked" proved="true">
 <proof prover="9"><result status="valid" time="0.33" steps="430"/></proof>
 </goal>
 <goal name="unchanged_other_elements&#39;vc" expl="VC for unchanged_other_elements" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="67"/></proof>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="141"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_products&#39;vc" expl="VC for remove_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_products&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="130"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="63"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="76"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="200"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="81"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="80"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.9" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.32" steps="334"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="84"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="88"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.12" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="90"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.3" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.13" steps="93"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="91"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="91"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="95"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="2.20" steps="429"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.15.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.12" steps="97"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="93"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="97"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.3" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.82" steps="436"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.15.1" expl="VC for remove_products" proved="true">
   <proof prover="0"><result status="valid" time="1.08" steps="740"/></proof>
   <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),all_eliminated_marked,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,ordered,all_inf_or_eq,max,marked_old,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H28,H27,H26,Requires12,Requires11,Requires10,Requires9,Ensures7,Ensures6,H25,H24,H23,H22,H21,H20,H19,H16,Requires8,Requires7,Requires6,Requires5,Requires3,Requires2,Requires1,Requires,H15,H14,Ensures4,H13,H12,H10,H9,Ensures3,H7,Ensures,H2,H1,H3">
    <goal name="remove_products&#39;vc.15.1.0" expl="VC for remove_products" proved="true">
    <proof prover="0"><result status="valid" time="0.17" steps="243"/></proof>
    <proof prover="9"><result status="valid" time="0.20" steps="275"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="20065"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="10" timelimit="10"><result status="valid" time="7.29" steps="595505"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.16.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.64" steps="428"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="76419"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.19" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="99"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="100"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.22" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.22.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.22.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.22.2" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="76175"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="262488"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.22.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.24" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.05"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="294"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="116"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.29" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.29.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.29.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.71" steps="636"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.3" expl="VC for remove_products" proved="true">
    <proof prover="9"><result status="valid" time="0.15" steps="117"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.4" expl="VC for remove_products" proved="true">
    <transf name="case" proved="true" arg1="(j &lt; x)">
     <goal name="remove_products&#39;vc.29.0.4.0" expl="true case" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.29.0.4.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="all_eliminated_marked_partial" arg2="in" arg3="Requires4">
      <goal name="remove_products&#39;vc.29.0.4.1.0" expl="false case" proved="true">
      <proof prover="3" timelimit="10"><result status="valid" time="7.39"/></proof>
      <proof prover="10" timelimit="10"><result status="valid" time="7.11" steps="571172"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.30" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="83071"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="293953"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="84165"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="293760"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="61400"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="326681"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="61037"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="287375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.32.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.32.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="124"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.42" steps="598"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.32.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.32.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.32.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="642"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="659"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="124"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.40" steps="610"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="124"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.92" steps="496"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.34" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="124"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.35" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="63795"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.36" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.37" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.37.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.37.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="131"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="131"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="remove_products&#39;vc.37.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="remove" proved="true" arg1="H24,H23,H22">
      <goal name="remove_products&#39;vc.37.0.3.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="3.29" steps="683"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.37.0.3.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; div (length marked_old - 1) n -&gt; i &lt;&gt; p -&gt; (nexts t)[i] = (nexts t1)[i])">
      <goal name="remove_products&#39;vc.37.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.20" steps="147"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.37.0.3.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.37.0.3.1.1.0" expl="false case (precondition)" proved="true">
       <proof prover="11"><result status="valid" time="2.54" steps="4542824"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.38" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="631"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.39" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.39.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.39.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="135"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="135"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="131"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.19" steps="135"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.39.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.39.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.39.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.64" steps="99941"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.40" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="133"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.47" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="113674"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="242119"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.48" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.48.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.48.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="75272"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="256039"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.49.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="75262"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="226700"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="57022"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="242714"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.50" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.50.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="109"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.29" steps="430"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.50.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.50.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.50.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.36" steps="469"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.34" steps="462"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.14" steps="109"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.27" steps="420"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="109"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.51" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="449"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.52" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.53" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="459"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.54" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="270152"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.55" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="115"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.56" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="116"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.57" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.57.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.57.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="118"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="118"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="116"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="118"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.57.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.57.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.57.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.52" steps="89539"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.58" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="118"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.65" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.65.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.1" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="197372"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.59" steps="529"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="283"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="82"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.66.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="61613"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="203091"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.55" steps="564"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="63630"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="195341"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="74"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="226752"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.71" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.71.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.06" steps="80"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="80"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.2" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="76"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.3" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="prime_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="remove_products&#39;vc.71.0.3.0" expl="postcondition" proved="true">
     <transf name="split_all_right" proved="true" >
      <goal name="remove_products&#39;vc.71.0.3.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; (nexts t)[x])">
       <goal name="remove_products&#39;vc.71.0.3.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.08" steps="94"/></proof>
       </goal>
       <goal name="remove_products&#39;vc.71.0.3.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.16" steps="313"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.73" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.73.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="60352"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="191703"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="74"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="2.17" steps="1023"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="62625"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="186262"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="70"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="213396"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="72"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="72"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="75"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="74"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.80" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="79"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,t&#39;invariant,H2,H1,H,Requires4,Requires3,Requires1,Ensures1,Ensures,Requires">
   <goal name="remove_products&#39;vc.81.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.00" steps="16"/></proof>
   <proof prover="9"><result status="valid" time="0.00" steps="32"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="25630"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.83" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.84" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.84.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="38962"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="128296"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.84.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.87" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.87.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="179"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="55788"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.2" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="45533"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="176053"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.88" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.88.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.20" steps="49404"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="174336"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="55289"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="177021"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.8" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="201041"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.89" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.89.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.89.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="46428"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="196584"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.1" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="177850"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.2" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(n * n &gt; n)">
     <goal name="remove_products&#39;vc.89.0.2.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="178923"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.2.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.22" steps="58089"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.89.0.3" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="41567"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="171553"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.4" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="189745"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.5" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.16" steps="42545"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="177280"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.90" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="190769"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.91" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.14" steps="41658"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="176513"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.92" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="50795"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.93" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.74"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H4,H3,H2,Requires8,Requires7,Requires6,Requires5,Ensures5,Ensures4,Ensures3,Ensures2,H,Ensures1,Ensures,Assert,Requires3,Requires2,Requires1,Requires">
   <goal name="remove_products&#39;vc.93.0" expl="precondition" proved="true">
   <proof prover="8" timelimit="1"><result status="valid" time="0.02"/></proof>
   <proof prover="9"><result status="valid" time="0.10" steps="174"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="7753"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.94" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.94.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.94.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="42677"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="179536"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="45947"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="173050"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="41324"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="187556"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.95" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.95.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.95.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.95.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.20" steps="49500"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="214160"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
     <proof prover="10"><result status="valid" time="0.11" steps="42679"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="62880"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="212361"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.26" steps="56861"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.96" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.96.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.96.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="42692"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="199531"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="46208"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="174394"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="57"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="41357"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="163806"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="193091"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.96.0.4.0" expl="precondition" proved="true">
     <proof prover="11"><result status="valid" time="0.24" steps="589239"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.97" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="41428"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="174237"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.98" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46763"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="173863"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.99" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39241"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11991"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.100" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39244"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11996"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.101" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39247"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12001"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.102" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="39250"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12006"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39253"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12011"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.104" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="62378"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="190763"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.105" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40187"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12418"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.106" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40193"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12423"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.107" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47734"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="179974"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.108" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40204"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12433"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.109" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="40207"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12438"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39161"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="11954"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39164"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11959"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39167"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11964"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.113" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.113.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.113.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures5">
     <goal name="remove_products&#39;vc.113.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Ensures5" arg2="k">
      <goal name="remove_products&#39;vc.113.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.71" steps="295"/></proof>
      <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H8,H6,Requires3,Requires2,Requires1,Requires,Ensures16,Ensures15,Ensures14,Ensures13,H5,Ensures12,Ensures11,Assert,Ensures10,Ensures9,Ensures8,Ensures7,Ensures6,Ensures5,Ensures4,Ensures3,Ensures2,Ensures1,Ensures">
       <goal name="remove_products&#39;vc.113.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="61"/></proof>
       <proof prover="9"><result status="valid" time="0.05" steps="91"/></proof>
       <proof prover="11"><result status="valid" time="0.02" steps="29704"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="previously_marked_multiples_impl_prime&#39;vc" expl="VC for previously_marked_multiples_impl_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="previously_marked_multiples_impl_prime&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="307418"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.1" expl="VC for previously_marked_multiples_impl_prime" proved="true">
   <proof prover="9"><result status="valid" time="0.42" steps="631"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="previously_marked_multiples_impl_prime&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="41360"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="141083"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="only_multiples_marked_impl_not_marked&#39;vc" expl="VC for only_multiples_marked_impl_not_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="73"/></proof>
  </goal>
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="402"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveImpl" proved="true">
 <goal name="conservation_inv_arr_on_mark&#39;vc" expl="VC for conservation_inv_arr_on_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_mark&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="144"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="37944"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="179"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="38187"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="159493"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abs arr[i] = abs arr[i &lt;- - arr[i]][i])">
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.16" steps="141"/></proof>
   <proof prover="10"><result status="valid" time="0.16" steps="38680"/></proof>
   <proof prover="11"><result status="valid" time="0.05" steps="154552"/></proof>
   </goal>
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i)">
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="181"/></proof>
    <proof prover="10"><result status="valid" time="0.16" steps="38793"/></proof>
    </goal>
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="1.80" steps="722"/></proof>
    <proof prover="10"><result status="valid" time="0.19" steps="44169"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_arr_on_jump&#39;vc" expl="VC for conservation_inv_arr_on_jump" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_jump&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="33920"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10423"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="35890"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="141431"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.26" steps="347"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="39757"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="3.29" steps="335"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="40055"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="4.62" steps="2820"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="29852"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8764"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="34714"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="17862"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="34600"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10612"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39610"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12565"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39957"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="20898"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40008"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="20935"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.00" steps="28"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39916"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12728"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="29"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="40044"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="20963"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="170"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="46784"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="136"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="49953"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="42648"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="200472"/></proof>
  </goal>
  <goal name="t&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="42760"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="85820"/></proof>
  </goal>
  <goal name="t&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="135"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46759"/></proof>
  </goal>
  <goal name="t&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="4.58" steps="2465"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="51855"/></proof>
  </goal>
  <goal name="t&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.12" steps="825"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52329"/></proof>
  </goal>
  <goal name="t&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="135"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48134"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="218717"/></proof>
  </goal>
  <goal name="t&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.28" steps="883"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="49916"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="276055"/></proof>
  </goal>
  <goal name="t&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.18" steps="637"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48657"/></proof>
  </goal>
  <goal name="t&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="1112"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="52270"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="35790"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="132394"/></proof>
  </goal>
  <goal name="create&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="32412"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9842"/></proof>
  </goal>
  <goal name="create&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="36104"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="134250"/></proof>
  </goal>
  <goal name="create&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="81"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="36215"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="134752"/></proof>
  </goal>
  <goal name="create&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="34348"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="131703"/></proof>
  </goal>
  <goal name="create&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="37864"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11882"/></proof>
  </goal>
  <goal name="create&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="39829"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="175929"/></proof>
  </goal>
  <goal name="create&#39;vc.7" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48357"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="210800"/></proof>
  </goal>
  <goal name="create&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="45834"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="211414"/></proof>
  </goal>
  <goal name="create&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="141"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="52061"/></proof>
  </goal>
  <goal name="create&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46061"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="216093"/></proof>
  </goal>
  <goal name="create&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49128"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="216038"/></proof>
  </goal>
  <goal name="create&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50804"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="233433"/></proof>
  </goal>
  <goal name="create&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50923"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="236198"/></proof>
  </goal>
  <goal name="create&#39;vc.14" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="47"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="49471"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="219135"/></proof>
  </goal>
  <goal name="create&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="2.45" steps="2543"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="53014"/></proof>
  </goal>
  <goal name="create&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49021"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="214367"/></proof>
  </goal>
  <goal name="create&#39;vc.17" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43571"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14068"/></proof>
  </goal>
  <goal name="create&#39;vc.18" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49291"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="216196"/></proof>
  </goal>
  <goal name="create&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43603"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="23799"/></proof>
  </goal>
  <goal name="create&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="45932"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="217510"/></proof>
  </goal>
  <goal name="create&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="53259"/></proof>
  </goal>
  <goal name="create&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="45"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51780"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="228857"/></proof>
  </goal>
  <goal name="create&#39;vc.23" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="55103"/></proof>
  </goal>
  <goal name="create&#39;vc.24" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="62058"/></proof>
  </goal>
  <goal name="create&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="52792"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="228147"/></proof>
  </goal>
  <goal name="create&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="227"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="53865"/></proof>
  </goal>
  <goal name="create&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="497"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55416"/></proof>
  </goal>
  <goal name="create&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.28" steps="1424"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57222"/></proof>
  </goal>
  <goal name="create&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.65" steps="846"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56560"/></proof>
  </goal>
  <goal name="create&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.08" steps="1144"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57825"/></proof>
  </goal>
  <goal name="create&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.07" steps="1208"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57095"/></proof>
  </goal>
  <goal name="create&#39;vc.32" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="3.31" steps="2304"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56326"/></proof>
  </goal>
  <goal name="create&#39;vc.33" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="59052"/></proof>
  </goal>
  <goal name="create&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="43755"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14158"/></proof>
  </goal>
  <goal name="create&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="432"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="56568"/></proof>
  </goal>
  <goal name="create&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="264"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57266"/></proof>
  </goal>
  <goal name="create&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57760"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="242008"/></proof>
  </goal>
  <goal name="create&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="676"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55732"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="263432"/></proof>
  </goal>
  <goal name="create&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.24" steps="787"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58841"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="263113"/></proof>
  </goal>
  <goal name="create&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="558"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57544"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="242676"/></proof>
  </goal>
  <goal name="create&#39;vc.41" expl="out of loop bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="55310"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="238055"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_next&#39;vc" expl="VC for set_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47623"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="205675"/></proof>
  </goal>
  <goal name="set_next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="37"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47676"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="206070"/></proof>
  </goal>
  <goal name="set_next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="39"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47806"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="206602"/></proof>
  </goal>
  <goal name="set_next&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47879"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="207858"/></proof>
  </goal>
  <goal name="set_next&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47921"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="208225"/></proof>
  </goal>
  <goal name="set_next&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47995"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="208344"/></proof>
  </goal>
  <goal name="set_next&#39;vc.6" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="37095"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11553"/></proof>
  </goal>
  <goal name="set_next&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="188"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="42278"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="175178"/></proof>
  </goal>
  <goal name="set_next&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="49808"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="211978"/></proof>
  </goal>
  <goal name="set_next&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47357"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="204484"/></proof>
  </goal>
  <goal name="set_next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47370"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="205963"/></proof>
  </goal>
  <goal name="set_next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="48415"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="218110"/></proof>
  </goal>
  <goal name="set_next&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="48742"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="216705"/></proof>
  </goal>
  <goal name="set_next&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="51098"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="223860"/></proof>
  </goal>
  <goal name="set_next&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="55290"/></proof>
  </goal>
  <goal name="set_next&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="61"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49118"/></proof>
  </goal>
  <goal name="set_next&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="52382"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="226218"/></proof>
  </goal>
  <goal name="set_next&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.18" steps="1205"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="54739"/></proof>
  </goal>
  <goal name="set_next&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="574"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="52231"/></proof>
  </goal>
  <goal name="set_next&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="58624"/></proof>
  </goal>
  <goal name="set_next&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="65727"/></proof>
  </goal>
  <goal name="set_next&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="62198"/></proof>
  </goal>
  <goal name="set_next&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.27" steps="61116"/></proof>
  </goal>
  <goal name="set_next&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="55749"/></proof>
  </goal>
  <goal name="set_next&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="64085"/></proof>
  </goal>
  <goal name="set_next&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="41557"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="105118"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_next&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="32597"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9875"/></proof>
  </goal>
  <goal name="get_next&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="114"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="37249"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="149606"/></proof>
  </goal>
  <goal name="get_next&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="83"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="44411"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="186308"/></proof>
  </goal>
  <goal name="get_next&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44943"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="188303"/></proof>
  </goal>
  <goal name="get_next&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="140"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="46757"/></proof>
  </goal>
  <goal name="get_next&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44942"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="188162"/></proof>
  </goal>
  <goal name="get_next&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="724"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50926"/></proof>
  </goal>
  <goal name="get_next&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="221"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="89457"/></proof>
  </goal>
  <goal name="get_next&#39;vc.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &gt;= 3)">
   <goal name="get_next&#39;vc.8.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
   <proof prover="10"><result status="valid" time="0.10" steps="36457"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="11298"/></proof>
   </goal>
   <goal name="get_next&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i &lt; max t - 1)">
    <goal name="get_next&#39;vc.8.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.05" steps="45"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="45204"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="201625"/></proof>
    </goal>
    <goal name="get_next&#39;vc.8.1.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(i = max t)">
     <goal name="get_next&#39;vc.8.1.1.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="47"/></proof>
     <proof prover="10"><result status="valid" time="0.14" steps="42125"/></proof>
     <proof prover="11"><result status="valid" time="0.06" steps="179932"/></proof>
     </goal>
     <goal name="get_next&#39;vc.8.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="190"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="54620"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="324731"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mark&#39;vc" expl="VC for set_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mark&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="32597"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9875"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="119"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="37203"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="149470"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47330"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="205329"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47414"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="205622"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47503"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="206035"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47586"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="207510"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="87"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45207"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="190525"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="44"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="56443"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="203472"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="197"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50013"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="46475"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="194932"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="40214"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="177271"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45956"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="193311"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="43416"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="184659"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.13" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="105"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="46274"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="197899"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="44"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48245"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="213343"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="47"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48524"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="212406"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="125"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="49055"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="218757"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="49079"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="219078"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="51782"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="227812"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="49096"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="220937"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49435"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="260"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="53747"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="53625"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="241011"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51128"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="224588"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="59210"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="61733"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="61496"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="67885"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="55340"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="76"/></proof>
  <proof prover="10"><result status="valid" time="0.37" steps="69984"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="42495"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="108428"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46718"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="202862"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="39"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47005"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="202070"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48406"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="213944"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48507"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="213983"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="48416"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="215379"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48533"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="215701"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48856"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="223"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52775"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="64"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="52729"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="233429"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="50319"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="219338"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="52322"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="354"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="57710"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="53772"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="248649"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="57209"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="247250"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="54568"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="66321"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="261367"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="41250"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="103971"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mark&#39;vc" expl="VC for get_mark" proved="true">
 <proof prover="9"><result status="valid" time="0.20" steps="337"/></proof>
 </goal>
 <goal name="get_max&#39;vc" expl="VC for get_max" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="24"/></proof>
 <proof prover="10"><result status="valid" time="0.14" steps="36750"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="133968"/></proof>
 </goal>
 <goal name="EulerSieve.t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="39457"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="143026"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="39435"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="143059"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="50440"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="196378"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="44881"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="169429"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="45084"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="170302"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="39440"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="143245"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="18"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="45707"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="183354"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46109"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="185180"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="44016"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="164408"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="44368"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="165745"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="44305"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="165757"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="35152"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="18548"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="44489"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14004"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="44510"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="23761"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="61673"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="220021"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="221097"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51902"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="218068"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.set_next&#39;refn&#39;vc" expl="VC for set_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.10" steps="206"/></proof>
 <proof prover="10"><result status="valid" time="0.16" steps="49183"/></proof>
 </goal>
 <goal name="EulerSieve.get_next&#39;refn&#39;vc" expl="VC for get_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="37540"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="141354"/></proof>
 </goal>
 <goal name="EulerSieve.set_mark&#39;refn&#39;vc" expl="VC for set_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
 <proof prover="10"><result status="valid" time="0.18" steps="43536"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="161008"/></proof>
 </goal>
 <goal name="EulerSieve.get_mark&#39;refn&#39;vc" expl="VC for get_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="37540"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="141354"/></proof>
 </goal>
 <goal name="EulerSieve.get_max&#39;refn&#39;vc" expl="VC for get_max&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
 <proof prover="10"><result status="valid" time="0.10" steps="35235"/></proof>
 <proof prover="11"><result status="valid" time="0.01" steps="10662"/></proof>
 </goal>
 <goal name="euler_sieve&#39;vc" expl="VC for euler_sieve" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_sieve&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="36365"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="19513"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="48839"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="229112"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="45958"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14619"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="45961"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14624"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="45964"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14629"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="45967"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14634"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="48842"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="122551"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="258"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="60791"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="257673"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="49075"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="25100"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="364"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="56446"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="244369"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.10" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="403"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="68"/></proof>
   <proof prover="10"><result status="valid" time="0.18" steps="48933"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="231504"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.24" steps="56974"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="270384"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Ensures5">
    <goal name="euler_sieve&#39;vc.11.2.0" expl="precondition" proved="true">
    <transf name="split_premise_right" proved="true" >
     <goal name="euler_sieve&#39;vc.11.2.0.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
      <goal name="euler_sieve&#39;vc.11.2.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.10" steps="76"/></proof>
      <proof prover="11"><result status="valid" time="0.10" steps="296331"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.11.2.0.0.1" expl="precondition" proved="true">
      <proof prover="11"><result status="valid" time="0.13" steps="408881"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50148"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="253584"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="72823"/></proof>
   <proof prover="11"><result status="valid" time="0.26" steps="668773"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.13.1" expl="VC for euler_sieve" proved="true">
   <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures4">
    <goal name="euler_sieve&#39;vc.13.1.0" expl="VC for euler_sieve" proved="true">
    <transf name="remove" proved="true" arg1="zero1,one1,(-),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Refl,CompatOrderAdd,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H18,H17,Ensures13,H16,H15,H14,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H13,H10,H9,Requires4,Requires3,Requires2,Requires,H8,Ensures7,Ensures6,Ensures5,H5,Ensures2,Ensures1,H3,Assert,Ensures,H12,H11,H7,H6">
     <goal name="euler_sieve&#39;vc.13.1.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="109"/></proof>
     <proof prover="11"><result status="valid" time="0.03" steps="46015"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.13.2" expl="VC for euler_sieve" proved="true">
   <proof prover="3" timelimit="10"><result status="valid" time="9.32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="4.61" steps="749"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="69098"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="312415"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="56662"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="248061"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="46509"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14844"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="49362"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="248211"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="49374"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="248984"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.19.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="euler_sieve&#39;vc.19.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.19.0.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="57270"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="291120"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.1" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.28" steps="63814"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="278627"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.2" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="74"/></proof>
     <proof prover="10"><result status="valid" time="0.18" steps="53636"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="249699"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.3" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="1.50" steps="337"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="379064"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.20" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.20.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="51275"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="260792"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.17" steps="49462"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="248380"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.2" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.80" steps="110501"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="75"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="46388"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14784"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Requires">
     <goal name="euler_sieve&#39;vc.20.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.20.0.4.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.11" steps="83"/></proof>
       <proof prover="11"><result status="valid" time="0.10" steps="297302"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.1" expl="precondition" proved="true">
       <proof prover="11"><result status="valid" time="0.14" steps="438652"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.5" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="50380"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="254675"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="359"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59180"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="49121"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="231788"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.23" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="3.09"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Refl,Trans,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H17,H16,H15,Ensures13,H14,H13,H12,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H11,H10,H9,H8,Requires4,Requires3,Requires2,Requires1,Requires,H7,H6,Ensures7,Ensures6,Ensures4,H5,H4,Ensures2,Ensures1,H3,Ensures,H2">
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="0.08"/></proof>
   <proof prover="9"><result status="valid" time="0.03" steps="187"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="50678"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="239834"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.25" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.1" expl="VC for euler_sieve" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="288295"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.91" steps="407"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="242047"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="71"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.17" steps="51676"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="242525"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="71"/></proof>
   <proof prover="10"><result status="valid" time="0.23" steps="58089"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="283142"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.26" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.66" steps="574"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.73" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.68" steps="332"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="93"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="269079"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.57" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.46" steps="318"/></proof>
   <proof prover="10"><result status="valid" time="0.29" steps="67452"/></proof>
   <proof prover="11"><result status="valid" time="0.11" steps="324345"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="2.20" steps="549"/></proof>
   <proof prover="10"><result status="valid" time="0.31" steps="71990"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="321984"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.27.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall j k. 2 &lt;= j &lt; (nexts t)[n] -&gt; 2 &lt;= k &lt; length (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.27.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.47" steps="310"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.27.1.1" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.29" steps="64268"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="45694"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14492"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="45712"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="14499"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="169"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="634"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H6,H5,H4,H3,H2,Ensures4,Ensures3,Ensures2,Ensures1,H,Requires2,Requires1,Requires">
   <goal name="euler_sieve&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="67"/></proof>
   <proof prover="9"><result status="valid" time="0.11" steps="162"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="10131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.32" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.32.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.22" steps="53607"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="234511"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="52695"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="228524"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="45664"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14468"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(mod i 2 = 0)">
     <goal name="euler_sieve&#39;vc.32.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="case" proved="true" arg1="(i &lt; max - 1)">
      <goal name="euler_sieve&#39;vc.32.0.3.0.0" expl="true case (precondition)" proved="true">
      <transf name="instantiate" proved="true" arg1="Ensures1" arg2="i">
       <goal name="euler_sieve&#39;vc.32.0.3.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="10"><result status="valid" time="0.43" steps="90236"/></proof>
       <proof prover="11"><result status="valid" time="0.10" steps="319642"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="euler_sieve&#39;vc.32.0.3.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.06" steps="44"/></proof>
      <proof prover="10"><result status="valid" time="0.21" steps="53296"/></proof>
      <proof prover="11"><result status="valid" time="0.08" steps="233346"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.32.0.3.1" expl="false case (precondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.18" steps="141"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="65936"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="943"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="72368"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.34" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="223"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57252"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.35" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.35.0" expl="true case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="0.19" steps="206"/></proof>
   <proof prover="10"><result status="valid" time="0.24" steps="58221"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="254665"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.35.1" expl="false case (assertion)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.35.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="47191"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="15114"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.1" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="47210"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="15125"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.2" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.80" steps="907"/></proof>
    <proof prover="10"><result status="valid" time="0.46" steps="95343"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.36" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.12" steps="1228"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58344"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.37" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="55208"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="250961"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.38" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="54664"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="247962"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.39" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="47306"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15243"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.40" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="270"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="58193"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="264543"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.41" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="47370"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15288"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.42" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.42.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.42.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="55924"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="265917"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.39" steps="177"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="60042"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="286089"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.1" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.60" steps="341"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="59848"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="297128"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.22" steps="275"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="59649"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="285016"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="153"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="59652"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="274160"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.4.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
     <proof prover="10"><result status="valid" time="0.23" steps="56270"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="273771"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="570"/></proof>
     <proof prover="10"><result status="valid" time="0.31" steps="65887"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="430"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="74134"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="293277"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.43" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="156"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="55321"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="256853"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="373"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="59382"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="206"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="60862"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="60883"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="266882"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="445"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="62403"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="345893"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.48" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="56662"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="258127"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.49" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="71"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="57172"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.50" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57506"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="267103"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.51" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="48035"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15581"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.52" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="293"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57140"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.53" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="189"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="57122"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.54" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="192"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="58080"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="298719"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.55" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58286"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="307099"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.56" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="339"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="65919"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.57" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58352"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="285306"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.58" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="218"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58652"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="322720"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.59" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="224"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58803"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308962"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.60" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="1019"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="69209"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.61" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.61.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.61.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.61.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.61.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.36" steps="85316"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.62" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.62.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.34" steps="1142"/></proof>
   <proof prover="10"><result status="valid" time="0.30" steps="66621"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="537686"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.53" steps="1144"/></proof>
   <proof prover="10"><result status="valid" time="0.37" steps="78920"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.80" steps="978"/></proof>
   <proof prover="10"><result status="valid" time="0.29" steps="67131"/></proof>
   <proof prover="11"><result status="valid" time="0.11" steps="381029"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.63" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="52305"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="261001"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.64" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="407211"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.65" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.32" steps="525"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="69807"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.66" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="107"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="60496"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="315752"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.67" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="109"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="81434"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.68" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="88731"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.69" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="410"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="67469"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.70" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
   <goal name="euler_sieve&#39;vc.70.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.70.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.56" steps="417"/></proof>
    <proof prover="10"><result status="valid" time="2.16" steps="240397"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.70.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.54" steps="402"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="403180"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.71" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="68980"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="409882"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="50194"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="28017"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="50210"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="28026"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="53304"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="265518"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="50245"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="16543"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.76" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.76.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.76.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.08" steps="415"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="70283"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.31" steps="416"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="68643"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.05" steps="409"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="70320"/></proof>
     <proof prover="11"><result status="valid" time="0.22" steps="659906"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.93" steps="421"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="69104"/></proof>
     <proof prover="11"><result status="valid" time="0.14" steps="455027"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.52" steps="1263"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="69282"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="390"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="70219"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="413286"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.01" steps="416"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="0.14"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,Refl,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H39,H38,Ensures18,H37,H36,H35,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H34,H33,Ensures12,Assert3,Assert2,Assert1,H30,H29,Ensures11,H28,H27,H26,H25,H24,LoopInvariant9,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,Ensures10,Ensures9,H23,Ensures8,Ensures7,H22,Ensures6,H17,Ensures5,Ensures4,H16,Ensures3,Ensures2,Assert,Ensures,LoopInvariant1,LoopInvariant,H32,H31,H21,H20,H19,H18,H14,H13,H12,H11,H10,H9,H8,H7,H6,H4">
      <goal name="euler_sieve&#39;vc.76.0.5.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.02"/></proof>
      <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
      <proof prover="10"><result status="valid" time="0.04" steps="5333"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="26979"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.22" steps="1177"/></proof>
     <proof prover="10"><result status="valid" time="0.39" steps="74581"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.77" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="86593"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="84740"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.79" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="697"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="71705"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.80" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="980"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="71261"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.81" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.81.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.46" steps="952"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="73189"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="51287"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="274336"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.83" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57751"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="277826"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.84" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58365"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="287865"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="226"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="58701"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="304946"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="101"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.87" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="58902"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="289364"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.88" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="389"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="60430"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="320599"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.89" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="78815"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="334171"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.90" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="380"/></proof>
  <proof prover="10"><result status="valid" time="0.35" steps="75773"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="325426"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.91" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="395"/></proof>
  <proof prover="10"><result status="valid" time="0.40" steps="80416"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="329189"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.92" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="348"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="60724"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="313741"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.93" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59983"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="315473"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.94.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.94.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.90" steps="892"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69526"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="437670"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="69545"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="438667"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="761"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69309"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="360797"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.41" steps="492"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="69312"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="359215"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.94.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.94.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="82335"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
         <proof prover="10"><result status="valid" time="0.24" steps="61001"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="383528"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="2.39"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H33,H32,Ensures18,H31,H30,H29,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H28,H27,Assert2,Assert1,H24,H23,Ensures10,H22,H21,H20,H19,H18,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H17,Ensures7,Ensures6,H16,Ensures5,H11,Ensures4,Ensures3,H10,H9,Ensures2,Ensures1,Ensures,H8,LoopInvariant1,LoopInvariant,H26,H25,H15,H14,H13,H12,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="3193"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="11322"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.18" steps="523916"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.95" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.95.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.95.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(j = cnt1)">
     <goal name="euler_sieve&#39;vc.95.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="2.34"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H32,H31,Ensures17,H30,H29,H28,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H27,H26,Ensures11,Assert3,Assert2,Assert1,H23,H22,H20,H19,H18,H17,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant7,LoopInvariant5,LoopInvariant4,LoopInvariant3,Ensures9,Ensures8,H16,Ensures7,Ensures6,H15,Ensures5,H10,H9,H8,Ensures1,Ensures,H7,Assert,LoopInvariant2,LoopInvariant1,LoopInvariant,H25,H24,H14,H13,H12,H11,H6,H4">
      <goal name="euler_sieve&#39;vc.95.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.10"/></proof>
      <proof prover="9"><result status="valid" time="0.08" steps="158"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="40871"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.95.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.38" steps="1234"/></proof>
     <proof prover="10"><result status="valid" time="0.33" steps="72541"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.96" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.96.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.96.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.96.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.96.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.96.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.62" steps="106344"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="764"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="71609"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.98.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.60" steps="1365"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.99" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.99.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.99.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.74" steps="841"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="73207"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.99.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.99.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.49" steps="91332"/></proof>
    <proof prover="11"><result status="valid" time="0.30" steps="837734"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.99.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="8"><result status="valid" time="1.66"/></proof>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures5,H6,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,Assert,LoopInvariant8,LoopInvariant7,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant1,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.18" steps="183"/></proof>
     </goal>
    </transf>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Ensures11,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="8" timelimit="1"><result status="valid" time="0.05"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.100" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="51198"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="261445"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.101" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57566"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="264399"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.102" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58149"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="288882"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="215"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="58521"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="296099"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.104" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="65559"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.105" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58632"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="274911"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.106" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58660"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="286348"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.107" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="374"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59677"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="306310"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.108" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="62263"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="299204"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.109" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="52134"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="253133"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.110" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="58932"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300399"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.111" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="103"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59158"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="307869"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.112" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59506"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="312789"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.113" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.113.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.113.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.70" steps="1381"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="70951"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="423981"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="70063"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="424546"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.69" steps="1013"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="70790"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="354173"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.35" steps="375"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="70024"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="352657"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.113.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.113.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.42" steps="82474"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="94"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="60923"/></proof>
         <proof prover="11"><result status="valid" time="0.13" steps="375527"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="1.16"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H27,H26,Ensures18,H25,H24,H23,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="3192"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="11322"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.14" steps="468980"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.114" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.114.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.114.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.114.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.114.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.114.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.17" steps="1368"/></proof>
        <proof prover="10"><result status="valid" time="0.31" steps="71166"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.29" steps="592"/></proof>
        <proof prover="10"><result status="valid" time="0.27" steps="62333"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.115" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.115.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.115.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.115.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.115.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.17" steps="374"/></proof>
       <proof prover="10"><result status="valid" time="0.27" steps="61343"/></proof>
       <proof prover="11"><result status="valid" time="0.16" steps="472416"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="1.33" steps="1203"/></proof>
       <proof prover="10"><result status="valid" time="0.31" steps="72646"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.116" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="535"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="72389"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.117" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; cnt1)">
   <goal name="euler_sieve&#39;vc.117.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.78" steps="1076"/></proof>
   <proof prover="10"><result status="valid" time="0.33" steps="72356"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.117.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="1.13" steps="1282"/></proof>
   <proof prover="10"><result status="valid" time="0.37" steps="78349"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.118" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.118.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.118.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.64" steps="838"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="74314"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.118.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.118.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="99626"/></proof>
    <proof prover="11"><result status="valid" time="0.30" steps="768910"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.118.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="5.06" steps="1445"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.119" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="75"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57656"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="260918"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="282"/></proof>
  <proof prover="10"><result status="valid" time="0.74" steps="128565"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.22" steps="824"/></proof>
  <proof prover="10"><result status="valid" time="1.14" steps="145032"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.122" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="310"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="68385"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.123" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.41" steps="85974"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.124" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="221"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.125" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="258"/></proof>
  <proof prover="10"><result status="valid" time="2.20" steps="326745"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="357670"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.126" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="55013"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.127" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="53004"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="233042"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.128" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="52438"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="237499"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.129" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="46244"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14782"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.130" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="186"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="55099"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.131" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="46308"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14827"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.132" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.132.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.132.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="44"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="53798"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="255891"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.33" steps="143"/></proof>
     <proof prover="10"><result status="valid" time="0.24" steps="57001"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="263353"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.1" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.37" steps="263"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="56873"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="269569"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.13" steps="199"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="56656"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="257660"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.08" steps="121"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="56659"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="256698"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.4.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.06" steps="48"/></proof>
     <proof prover="10"><result status="valid" time="0.22" steps="54144"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="263129"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.79" steps="798"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="62854"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="356532"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="254"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69735"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="270849"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.133" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="116"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="53057"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="246457"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.134" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="305"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56298"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="250714"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.135" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="164"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57540"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="264034"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.136" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57556"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="253174"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.137" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.37" steps="577"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58897"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="317700"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.138" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="54360"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="247664"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.139" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="54458"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="248270"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.140" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="55184"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="256787"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.141" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="46973"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15120"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.142" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="240"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="54786"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.143" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="162"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="54798"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.144" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="165"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55736"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="285306"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.145" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="173"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55947"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="293417"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.146" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="277"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="62066"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="318627"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.147" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56027"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="278365"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.148" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="191"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56323"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308061"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.149" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="197"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56489"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="299418"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.150" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="995"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="65576"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.151" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.151.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.151.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.151.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.151.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="78894"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.152" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.152.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="838"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="62975"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="535994"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.06" steps="1148"/></proof>
   <proof prover="10"><result status="valid" time="0.36" steps="74776"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="321"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="62241"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="365323"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.153" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="51191"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="254167"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.154" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="3.30" steps="329797"/></proof>
  <proof prover="11"><result status="valid" time="0.14" steps="409034"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.155" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.03" steps="422"/></proof>
  <proof prover="10"><result status="valid" time="0.39" steps="77339"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.156" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="58160"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="309683"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="76047"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.158" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.42" steps="82646"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="357"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="63542"/></proof>
  <proof prover="11"><result status="valid" time="0.19" steps="550239"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="745"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="65410"/></proof>
  <proof prover="11"><result status="valid" time="0.13" steps="377970"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.162" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="49132"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="27354"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="49148"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27363"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="52175"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="258660"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="49183"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="16082"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.166.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.166.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.92" steps="369"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="66012"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.25" steps="368"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="65487"/></proof>
     <proof prover="11"><result status="valid" time="0.51" steps="1151353"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.64" steps="364"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="66037"/></proof>
     <proof prover="11"><result status="valid" time="0.20" steps="572628"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.68" steps="375"/></proof>
     <proof prover="10"><result status="valid" time="0.28" steps="65277"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="391879"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.25" steps="1154"/></proof>
    <proof prover="10"><result status="valid" time="0.28" steps="66554"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.40" steps="341"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66403"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="370948"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.91" steps="369"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="71930"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9" timelimit="10"><result status="valid" time="9.37" steps="5018"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.33" steps="1288"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="68019"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="70918"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.168" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.85" steps="2022"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="79974"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.169" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="578"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="68085"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.170" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.05" steps="830"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="67976"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.171" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.93" steps="150921"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.172" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="50158"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="267439"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.173" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55455"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="271013"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56040"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="280889"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.175" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="199"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56372"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="294855"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.176" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.177" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="56578"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="282756"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.178" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="372"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56993"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="311804"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.179" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="723"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="71929"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="317933"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.180" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="318"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="70728"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="309929"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="318"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="74063"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="319235"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="308"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="57183"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="304000"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.183" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57623"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="305641"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.184.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.184.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.12" steps="1047"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66794"/></proof>
    <proof prover="11"><result status="valid" time="0.14" steps="386765"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="3.41" steps="1880"/></proof>
    <proof prover="10"><result status="valid" time="0.29" steps="65967"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="387741"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.44" steps="664"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66683"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="327667"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.34" steps="435"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="65716"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="326354"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.184.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.184.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.36" steps="76876"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.11" steps="95"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="59114"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="368595"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="9"><result status="valid" time="4.60" steps="3495"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.16" steps="468512"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.185.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.185.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(j = cnt1)">
     <goal name="euler_sieve&#39;vc.185.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="3.50" steps="3803"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.185.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.30" steps="463"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="68156"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.186" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.186.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.186.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.186.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.186.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.186.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="9"><result status="valid" time="3.73" steps="2247"/></proof>
         <proof prover="10"><result status="valid" time="0.50" steps="98149"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="663"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="67736"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.188.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.63" steps="1727"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.189" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.189.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.189.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.53" steps="752"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="68258"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.189.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.189.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="69481"/></proof>
    <proof prover="11"><result status="valid" time="0.29" steps="798048"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.189.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="1.76" steps="1184"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.190" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50069"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="254165"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.191" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55278"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="257404"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.192" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="76"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55827"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="280049"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.193" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="188"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56187"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="286794"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.194" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="79"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="62502"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.195" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="56305"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="268104"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.196" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56347"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="269075"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.197" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.16" steps="331"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56738"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300145"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.198" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="85"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59810"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="289628"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.199" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="51005"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="246520"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.200" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56612"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="291034"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.201" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56846"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="288813"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.202" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="93"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57143"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="292463"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.203" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.203.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.203.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.30" steps="67678"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="364427"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.23" steps="986"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="66773"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="365340"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="897"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="67573"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="316066"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.28" steps="330"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66727"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="314828"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.203.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.203.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.37" steps="77143"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.10" steps="88"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="59036"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="360680"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="1.55"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.03" steps="3137"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="10989"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.14" steps="409400"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.204" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.204.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.204.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.204.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.204.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.204.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.88" steps="2134"/></proof>
        <proof prover="10"><result status="valid" time="0.28" steps="67799"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.14" steps="349"/></proof>
        <proof prover="10"><result status="valid" time="0.26" steps="59545"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.205" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.205.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.205.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.205.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.205.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.13" steps="414"/></proof>
       <proof prover="10"><result status="valid" time="0.26" steps="58899"/></proof>
       <proof prover="11"><result status="valid" time="0.14" steps="413092"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.71" steps="1036"/></proof>
       <proof prover="10"><result status="valid" time="0.30" steps="68024"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.206" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="461"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="68495"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.207" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="2.33" steps="2302"/></proof>
  <proof prover="10"><result status="valid" time="0.50" steps="100831"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.208" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.208.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.208.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.77" steps="1239"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="70348"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.208.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.208.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.46" steps="92945"/></proof>
    <proof prover="11"><result status="valid" time="0.27" steps="732452"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.208.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="2.46" steps="1395"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.209" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="55333"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="252714"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.210" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="401"/></proof>
  <proof prover="10"><result status="valid" time="0.68" steps="118131"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.211" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.13" steps="1288"/></proof>
  <proof prover="10"><result status="valid" time="0.88" steps="126949"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.212" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="261"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="64837"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.213" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="126533"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
