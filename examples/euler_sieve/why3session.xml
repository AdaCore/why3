<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="3.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.7.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.2.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="11" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="euler_sieve.mlw"/>
<theory name="ArithmeticResults" proved="true">
 <goal name="mult_croissance_locale&#39;vc" expl="VC for mult_croissance_locale" proved="true">
 <proof prover="9"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
 <goal name="mult_croissance&#39;vc" expl="VC for mult_croissance" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
 </goal>
 <goal name="comp_mult_2&#39;vc" expl="VC for comp_mult_2" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
 <goal name="div_croissance_locale1&#39;vc" expl="VC for div_croissance_locale1" proved="true">
 <proof prover="10"><result status="valid" time="0.27" steps="49174"/></proof>
 </goal>
 <goal name="div_croissance1&#39;vc" expl="VC for div_croissance1" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="div_croissance_locale2&#39;vc" expl="VC for div_croissance_locale2" proved="true">
 <proof prover="10"><result status="valid" time="0.24" steps="56147"/></proof>
 </goal>
 <goal name="div_croissance2&#39;vc" expl="VC for div_croissance2" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
 </goal>
 <goal name="div_mult_1&#39;vc" expl="VC for div_mult_1" proved="true">
 <proof prover="10"><result status="valid" time="0.28" steps="61420"/></proof>
 </goal>
 <goal name="mult_borne_sous_exp&#39;vc" expl="VC for mult_borne_sous_exp" proved="true">
 <proof prover="9"><result status="valid" time="0.30" steps="387"/></proof>
 </goal>
 <goal name="sq_ineq&#39;vc" expl="VC for sq_ineq" proved="true">
 <proof prover="10"><result status="valid" time="0.18" steps="42239"/></proof>
 </goal>
</theory>
<theory name="DivisibilityResults" proved="true">
 <goal name="divides_div&#39;vc" expl="VC for divides_div" proved="true">
 <proof prover="9"><result status="valid" time="0.05" steps="77"/></proof>
 </goal>
 <goal name="divides_inf&#39;vc" expl="VC for divides_inf" proved="true">
 <proof prover="9"><result status="valid" time="0.04" steps="68"/></proof>
 </goal>
 <goal name="not_prime_divider_limits&#39;vc" expl="VC for not_prime_divider_limits" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="46"/></proof>
 </goal>
 <goal name="no_prod_impl_no_divider&#39;vc" expl="VC for no_prod_impl_no_divider" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="no_prod_impl_no_divider&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(exists k:int. (2 &lt;= k /\ k &lt; n) /\ not k = i /\ divides k i)">
   <goal name="no_prod_impl_no_divider&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="no_prod_impl_no_divider&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <transf name="introduce_exists" proved="true" >
      <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="assert" proved="true" arg1="(exists l:int. l * k = i)">
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
       </goal>
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1" expl="destruct premise" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
        <transf name="exists" proved="true" arg1="k">
         <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l">
          <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0" proved="true">
          <transf name="case" proved="true" arg1="(l = i)">
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="true case" proved="true">
           <transf name="assert" proved="true" arg1="(k = 1)">
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.08"/></proof>
            </goal>
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.1" expl="true case" proved="true">
            <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="false case" proved="true">
           <proof prover="9"><result status="valid" time="2.92" steps="443"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="no_prod_impl_no_divider&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_prime_impl_divisor_under_sqrt&#39;vc" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="162"/></proof>
 </goal>
</theory>
<theory name="EulerSieveSpec" proved="true">
 <goal name="conservation_all_eliminated_marked_on_marked_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_marked_change" proved="true">
 <proof prover="9"><result status="valid" time="0.06" steps="177"/></proof>
 </goal>
 <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="51"/></proof>
    </goal>
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.53" steps="1741"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieve" proved="true">
 <goal name="multiples_of_marked_are_marked&#39;vc" expl="VC for multiples_of_marked_are_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiples_of_marked_are_marked&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiples_of_marked_are_marked&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.4" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <proof prover="8"><result status="valid" time="0.04"/></proof>
    <transf name="remove" proved="true" arg1="Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,H13,H12,Requires,H11,H10,H9,H8,H7,H6,H5,H4,H3,H">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="8"><result status="valid" time="0.01"/></proof>
     <proof prover="10"><result status="valid" time="0.03" steps="3101"/></proof>
     <proof prover="11"><result status="valid" time="0.01" steps="5786"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.5" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="assert" proved="true" arg1="(k * (i * j) = i*j + (k-1)*(i*j))">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="29"/></proof>
    </goal>
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="assert" proved="true" arg1="((k-1)*(i*j) &gt;= 0)">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.1" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.6" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="1"><result status="valid" time="0.04"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),even,([]),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,Assoc1,Unit_def_r,Mul_distr_l,Refl,Trans,Div_unique,Div_bound,Div_minus1_left,Div_sign_pos,even_not_odd,odd_not_even,even_odd,odd_2k1,divides_left,divides_oppr_rev,divides_multl,divides_multr,divides_mod_euclidean,mod_divides_computer,prime_divisors,odd_prime,mult_croissance_locale,comp_mult_2,sq_ineq,divides_div,no_prod_impl_no_divider,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change">
      <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
      <proof prover="1"><result status="valid" time="0.03"/></proof>
      <proof prover="3"><result status="valid" time="0.11"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prev_and_new_impl_all_multiples_marked&#39;vc" expl="VC for prev_and_new_impl_all_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires2">
    <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="151"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.6" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.7" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="256"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.9" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="82"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="120"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_only_multiples_marked&#39;vc" expl="VC for conservation_only_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_only_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="234"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="137"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.3" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="conservation_only_multiples_marked&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_only_multiples_marked&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(k = i * j)">
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="61"/></proof>
     </goal>
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="172"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples&#39;vc" expl="VC for conservation_previously_marked_multiples" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_previously_marked_multiples&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="67"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.2.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="234"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.50"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.5.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples_on_marked_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_previously_marked_multiples_on_marked_change.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples_on_marked_change.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.13"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Unitary,NonTrivialRing,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_inf,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples">
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1.0" proved="true">
      <proof prover="3"><result status="valid" time="0.04"/></proof>
      <proof prover="4" timelimit="1"><result status="valid" time="0.03"/></proof>
      <proof prover="9"><result status="valid" time="0.10" steps="522"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2" proved="true">
     <transf name="inline_all" proved="true" >
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2.0" proved="true">
      <proof prover="11"><result status="valid" time="0.43" steps="991294"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_not_marked_impl_next_not_marked&#39;vc" expl="VC for conservation_not_marked_impl_next_not_marked" proved="true">
 <proof prover="9"><result status="valid" time="0.33" steps="430"/></proof>
 </goal>
 <goal name="unchanged_other_elements&#39;vc" expl="VC for unchanged_other_elements" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="67"/></proof>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="175"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="236"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="281"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_products&#39;vc" expl="VC for remove_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_products&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="130"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="63"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="87"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="461"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="215"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="91"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.8.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.9" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.32" steps="351"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="100"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.12" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.3" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="100"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.13" steps="104"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="412"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="102"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="102"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="106"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="1.44" steps="446"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.15.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.12" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.3" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.82" steps="453"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.15.1" expl="VC for remove_products" proved="true">
   <proof prover="0"><result status="valid" time="1.36" steps="768"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="10" timelimit="10"><result status="valid" time="8.31" steps="596952"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.16.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.64" steps="446"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="76300"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="106"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="107"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.19" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="112"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="49576"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.24" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.05"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="310"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.29" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.29.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.29.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.71" steps="636"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.3" expl="VC for remove_products" proved="true">
    <proof prover="9"><result status="valid" time="0.15" steps="128"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.4" expl="VC for remove_products" proved="true">
    <transf name="case" proved="true" arg1="(j &lt; x)">
     <goal name="remove_products&#39;vc.29.0.4.0" expl="true case" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="131"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.29.0.4.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="all_eliminated_marked_partial" arg2="in" arg3="Requires4">
      <goal name="remove_products&#39;vc.29.0.4.1.0" expl="false case" proved="true">
      <proof prover="10" timelimit="10"><result status="valid" time="7.72" steps="575453"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.30" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="83058"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="309275"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="84175"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="309040"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="61164"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="341971"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="60792"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="302655"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.32.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.32.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.42" steps="607"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.32.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.32.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.32.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="651"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="668"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.40" steps="619"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.32.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="32791"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.92" steps="514"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.34" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="135"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.35" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="63574"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.36" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.37" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.37.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.37.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="remove_products&#39;vc.37.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="remove" proved="true" arg1="H24,H23,H22">
      <goal name="remove_products&#39;vc.37.0.3.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="2.66" steps="712"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.37.0.3.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; div (length marked_old - 1) n -&gt; i &lt;&gt; p -&gt; (nexts t)[i] = (nexts t1)[i])">
      <goal name="remove_products&#39;vc.37.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.20" steps="158"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.37.0.3.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.37.0.3.1.1.0" expl="false case (precondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.52" steps="682935"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.38" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="648"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.39" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.39.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.39.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.19" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.39.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.39.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.39.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.64" steps="99173"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.40" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.47" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="114222"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="256662"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.48" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.48.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.48.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="75255"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="270506"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.49.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="75245"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="241130"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="56779"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="257331"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.50" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.50.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.29" steps="437"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.50.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.50.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.50.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.36" steps="477"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.34" steps="472"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.14" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.27" steps="429"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.50.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.08" steps="31664"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.51" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="466"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.52" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.53" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.74" steps="475"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.54" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="284585"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.55" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="126"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.56" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.57" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.57.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.57.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.57.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.57.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.57.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.52" steps="88775"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.58" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="129"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.65" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.65.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.1" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="210943"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.59" steps="547"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="300"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.66.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="61580"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="216684"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.76" steps="583"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="63619"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="208983"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="240410"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.71" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.71.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.06" steps="91"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.2" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.3" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="prime_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="remove_products&#39;vc.71.0.3.0" expl="postcondition" proved="true">
     <transf name="split_all_right" proved="true" >
      <goal name="remove_products&#39;vc.71.0.3.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; (nexts t)[x])">
       <goal name="remove_products&#39;vc.71.0.3.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
       </goal>
       <goal name="remove_products&#39;vc.71.0.3.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.16" steps="330"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.73" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.73.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="60288"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="210921"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.2" expl="VC for remove_products" proved="true">
   <proof prover="6"><result status="valid" time="1.95" steps="28086"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="62679"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="205829"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="81"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="233574"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.80" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="79"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,t&#39;invariant,H2,H1,H,Requires4,Requires3,Requires1,Ensures1,Ensures,Requires">
   <goal name="remove_products&#39;vc.81.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.00" steps="16"/></proof>
   <proof prover="9"><result status="valid" time="0.00" steps="32"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="17286"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.83" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.84" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.84.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="38182"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="122577"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.84.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.87" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.87.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="179"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="55060"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.2" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="44805"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="170798"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.88" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.88.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.20" steps="48676"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="169078"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="54561"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="171763"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.8" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="195816"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.89" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.89.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.89.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="45711"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="191380"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.1" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="172601"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.2" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(n * n &gt; n)">
     <goal name="remove_products&#39;vc.89.0.2.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="173671"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.2.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.22" steps="57361"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.89.0.3" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="40854"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="166294"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.4" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="184497"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.5" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.16" steps="41839"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="172076"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.90" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="185517"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.91" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.14" steps="40945"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="171263"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.92" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="50067"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.93" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.11"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H4,H3,H2,Requires8,Requires7,Requires6,Requires5,Ensures5,Ensures4,Ensures3,Ensures2,H,Ensures1,Ensures,Assert,Requires3,Requires2,Requires1,Requires">
   <goal name="remove_products&#39;vc.93.0" expl="precondition" proved="true">
   <proof prover="8" timelimit="1"><result status="valid" time="0.02"/></proof>
   <proof prover="9"><result status="valid" time="0.10" steps="174"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="7152"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.94" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.94.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.94.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="42293"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="176664"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="45563"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="170171"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="40940"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="184676"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.95" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.95.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.95.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.95.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.20" steps="48504"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="208728"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
     <proof prover="10"><result status="valid" time="0.11" steps="41743"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="61874"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="206929"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.26" steps="55860"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.96" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.96.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.96.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="42308"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="196663"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="45824"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="171514"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="57"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="40973"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="160929"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="190212"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.96.0.4.0" expl="precondition" proved="true">
     <proof prover="11"><result status="valid" time="0.24" steps="592434"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.97" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="41044"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="171358"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.98" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46035"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="168604"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.99" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38532"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11743"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.100" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38535"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11748"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.101" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38538"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11753"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.102" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="38541"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11758"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38544"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11763"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.104" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="61661"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="185559"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.105" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39485"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12174"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.106" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39491"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12179"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.107" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47017"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="174770"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.108" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39502"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12189"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.109" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39505"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12194"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38452"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="11706"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38455"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11711"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38458"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11716"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.113" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.113.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.113.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures5">
     <goal name="remove_products&#39;vc.113.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Ensures5" arg2="k">
      <goal name="remove_products&#39;vc.113.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.71" steps="295"/></proof>
      <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H8,H6,Requires3,Requires2,Requires1,Requires,Ensures16,Ensures15,Ensures14,Ensures13,H5,Ensures12,Ensures11,Assert,Ensures10,Ensures9,Ensures8,Ensures7,Ensures6,Ensures5,Ensures4,Ensures3,Ensures2,Ensures1,Ensures">
       <goal name="remove_products&#39;vc.113.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="61"/></proof>
       <proof prover="9"><result status="valid" time="0.05" steps="91"/></proof>
       <proof prover="11"><result status="valid" time="0.02" steps="27142"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="previously_marked_multiples_impl_prime&#39;vc" expl="VC for previously_marked_multiples_impl_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="previously_marked_multiples_impl_prime&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="305479"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.1" expl="VC for previously_marked_multiples_impl_prime" proved="true">
   <proof prover="9"><result status="valid" time="0.42" steps="631"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="previously_marked_multiples_impl_prime&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="40259"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="133341"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="only_multiples_marked_impl_not_marked&#39;vc" expl="VC for only_multiples_marked_impl_not_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="73"/></proof>
  </goal>
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="402"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveImpl" proved="true">
 <goal name="conservation_inv_arr_on_mark&#39;vc" expl="VC for conservation_inv_arr_on_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_mark&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="144"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="34356"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="179"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="34599"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="136531"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abs arr[i] = abs arr[i &lt;- - arr[i]][i])">
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.16" steps="141"/></proof>
   <proof prover="10"><result status="valid" time="0.16" steps="35092"/></proof>
   <proof prover="11"><result status="valid" time="0.05" steps="131590"/></proof>
   </goal>
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i)">
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="181"/></proof>
    <proof prover="10"><result status="valid" time="0.16" steps="35205"/></proof>
    </goal>
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="2.14" steps="722"/></proof>
    <proof prover="10"><result status="valid" time="0.19" steps="44169"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_arr_on_jump&#39;vc" expl="VC for conservation_inv_arr_on_jump" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_jump&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="30471"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9120"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="32428"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="118475"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.26" steps="347"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="36169"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="3.29" steps="335"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="36467"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="5.58" steps="2811"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="26325"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="7401"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="31265"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="15499"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="32281"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9776"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39829"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12674"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40252"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="21176"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="60255"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.00" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40462"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12977"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="40530"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="21420"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="204"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47949"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="269"/></proof>
  <proof prover="10"><result status="valid" time="0.88" steps="137170"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="43419"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="205791"/></proof>
  </goal>
  <goal name="t&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="43582"/></proof>
  </goal>
  <goal name="t&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="357"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="47492"/></proof>
  </goal>
  <goal name="t&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="50459"/></proof>
  </goal>
  <goal name="t&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="3.66" steps="1585"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51016"/></proof>
  </goal>
  <goal name="t&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="354"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48684"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="239747"/></proof>
  </goal>
  <goal name="t&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="4.09" steps="899"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="52984"/></proof>
  <proof prover="11"><result status="valid" time="0.33" steps="913723"/></proof>
  </goal>
  <goal name="t&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="53881"/></proof>
  </goal>
  <goal name="t&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="4.92" steps="1547"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="32112"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="108586"/></proof>
  </goal>
  <goal name="create&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="28885"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8479"/></proof>
  </goal>
  <goal name="create&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="32426"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="110442"/></proof>
  </goal>
  <goal name="create&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="81"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="32537"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="110944"/></proof>
  </goal>
  <goal name="create&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="30808"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="107907"/></proof>
  </goal>
  <goal name="create&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="37950"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11929"/></proof>
  </goal>
  <goal name="create&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="37670"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="157894"/></proof>
  </goal>
  <goal name="create&#39;vc.7" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45170"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="188966"/></proof>
  </goal>
  <goal name="create&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="42759"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="189580"/></proof>
  </goal>
  <goal name="create&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="141"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48874"/></proof>
  </goal>
  <goal name="create&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="42986"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="194259"/></proof>
  </goal>
  <goal name="create&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45941"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="194204"/></proof>
  </goal>
  <goal name="create&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47617"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="210716"/></proof>
  </goal>
  <goal name="create&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47736"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="213480"/></proof>
  </goal>
  <goal name="create&#39;vc.14" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="46346"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="197640"/></proof>
  </goal>
  <goal name="create&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="4.32" steps="4810"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="49896"/></proof>
  </goal>
  <goal name="create&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45834"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="192533"/></proof>
  </goal>
  <goal name="create&#39;vc.17" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40508"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12968"/></proof>
  </goal>
  <goal name="create&#39;vc.18" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46104"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="194362"/></proof>
  </goal>
  <goal name="create&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40540"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="21849"/></proof>
  </goal>
  <goal name="create&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="42857"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="195676"/></proof>
  </goal>
  <goal name="create&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50072"/></proof>
  </goal>
  <goal name="create&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="45"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48593"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="207021"/></proof>
  </goal>
  <goal name="create&#39;vc.23" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="51916"/></proof>
  </goal>
  <goal name="create&#39;vc.24" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="58871"/></proof>
  </goal>
  <goal name="create&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="49605"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="206331"/></proof>
  </goal>
  <goal name="create&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="227"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50678"/></proof>
  </goal>
  <goal name="create&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="498"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="52229"/></proof>
  </goal>
  <goal name="create&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.28" steps="1434"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="53995"/></proof>
  </goal>
  <goal name="create&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.65" steps="848"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="53357"/></proof>
  </goal>
  <goal name="create&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.08" steps="1212"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="54672"/></proof>
  </goal>
  <goal name="create&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.07" steps="1214"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="53908"/></proof>
  </goal>
  <goal name="create&#39;vc.32" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="4.96" steps="2381"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56553"/></proof>
  </goal>
  <goal name="create&#39;vc.33" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="55860"/></proof>
  </goal>
  <goal name="create&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="40692"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13058"/></proof>
  </goal>
  <goal name="create&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="432"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="53349"/></proof>
  </goal>
  <goal name="create&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="264"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54042"/></proof>
  </goal>
  <goal name="create&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="54540"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="219152"/></proof>
  </goal>
  <goal name="create&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="676"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="52530"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="240572"/></proof>
  </goal>
  <goal name="create&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.24" steps="789"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55621"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="240253"/></proof>
  </goal>
  <goal name="create&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="560"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="54327"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="219818"/></proof>
  </goal>
  <goal name="create&#39;vc.41" expl="out of loop bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="52123"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="215838"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_next&#39;vc" expl="VC for set_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="44152"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="182344"/></proof>
  </goal>
  <goal name="set_next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="37"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44205"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="182739"/></proof>
  </goal>
  <goal name="set_next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="39"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="44335"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="183271"/></proof>
  </goal>
  <goal name="set_next&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="44408"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="184527"/></proof>
  </goal>
  <goal name="set_next&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44450"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="184894"/></proof>
  </goal>
  <goal name="set_next&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44524"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="185013"/></proof>
  </goal>
  <goal name="set_next&#39;vc.6" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="33658"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10264"/></proof>
  </goal>
  <goal name="set_next&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="188"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="38690"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="150625"/></proof>
  </goal>
  <goal name="set_next&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="46248"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="187580"/></proof>
  </goal>
  <goal name="set_next&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43797"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="180088"/></proof>
  </goal>
  <goal name="set_next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43872"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="182433"/></proof>
  </goal>
  <goal name="set_next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45006"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="195614"/></proof>
  </goal>
  <goal name="set_next&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45333"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="194208"/></proof>
  </goal>
  <goal name="set_next&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47689"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="201364"/></proof>
  </goal>
  <goal name="set_next&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="51865"/></proof>
  </goal>
  <goal name="set_next&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="61"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45709"/></proof>
  </goal>
  <goal name="set_next&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="48973"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="203704"/></proof>
  </goal>
  <goal name="set_next&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.18" steps="1205"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="51313"/></proof>
  </goal>
  <goal name="set_next&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="574"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="48822"/></proof>
  </goal>
  <goal name="set_next&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="55212"/></proof>
  </goal>
  <goal name="set_next&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="62368"/></proof>
  </goal>
  <goal name="set_next&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="58779"/></proof>
  </goal>
  <goal name="set_next&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.27" steps="57692"/></proof>
  </goal>
  <goal name="set_next&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="52353"/></proof>
  </goal>
  <goal name="set_next&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="60643"/></proof>
  </goal>
  <goal name="set_next&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38198"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="95776"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_next&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="29070"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8512"/></proof>
  </goal>
  <goal name="get_next&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="114"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="33571"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="124040"/></proof>
  </goal>
  <goal name="get_next&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="83"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="40761"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="160785"/></proof>
  </goal>
  <goal name="get_next&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41391"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="168166"/></proof>
  </goal>
  <goal name="get_next&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="142"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43165"/></proof>
  </goal>
  <goal name="get_next&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41390"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="168036"/></proof>
  </goal>
  <goal name="get_next&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="733"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="46947"/></proof>
  </goal>
  <goal name="get_next&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="229"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="87367"/></proof>
  </goal>
  <goal name="get_next&#39;vc.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &gt;= 3)">
   <goal name="get_next&#39;vc.8.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
   <proof prover="10"><result status="valid" time="0.10" steps="33071"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="10018"/></proof>
   </goal>
   <goal name="get_next&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i &lt; max t - 1)">
    <goal name="get_next&#39;vc.8.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.05" steps="48"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="41664"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="181558"/></proof>
    </goal>
    <goal name="get_next&#39;vc.8.1.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(i = max t)">
     <goal name="get_next&#39;vc.8.1.1.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.14" steps="38589"/></proof>
     <proof prover="11"><result status="valid" time="0.06" steps="159854"/></proof>
     </goal>
     <goal name="get_next&#39;vc.8.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="193"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="50364"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="304680"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mark&#39;vc" expl="VC for set_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mark&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="29070"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8512"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="119"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="33525"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="123904"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43729"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="180232"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43813"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="180525"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="43902"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="180938"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="43985"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="182413"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="87"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41557"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="165000"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="52882"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="183395"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="46453"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42915"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="174857"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="36780"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="157206"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42396"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="173211"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="39856"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="164560"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.13" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="107"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42714"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="177799"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="44734"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="194482"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45143"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="195339"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="127"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45674"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="201686"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45698"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="202011"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48401"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="210744"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45715"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="203870"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="64"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46054"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.42" steps="262"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50366"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="50244"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="223925"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47747"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="207521"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="55826"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="58423"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="58130"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.32" steps="64584"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="51959"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.37" steps="66592"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39239"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="105130"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="43169"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="183616"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="43586"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="184593"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="110"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45027"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="196894"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45128"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="196935"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45037"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="198331"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45154"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="198653"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45477"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="225"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49396"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49350"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="216364"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="46940"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="202290"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48943"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="356"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="54323"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50393"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="231599"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="53893"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="230200"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="51189"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="62953"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="244320"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="37968"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="100350"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mark&#39;vc" expl="VC for get_mark" proved="true">
 <proof prover="9"><result status="valid" time="0.20" steps="337"/></proof>
 </goal>
 <goal name="get_max&#39;vc" expl="VC for get_max" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="24"/></proof>
 <proof prover="10"><result status="valid" time="0.14" steps="33072"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="110160"/></proof>
 </goal>
 <goal name="EulerSieve.t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="38310"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="134660"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="38288"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="134693"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="49317"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="188149"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="43744"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="161035"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="43951"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="161929"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="38293"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="134879"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="18"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="44588"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="174608"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44998"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="176580"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="42905"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="156408"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="43257"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="157739"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="43194"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="157751"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="34041"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="17692"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43442"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13598"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43463"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="23007"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="60590"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="211671"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="212747"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="50819"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="209691"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.set_next&#39;refn&#39;vc" expl="VC for set_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.10" steps="206"/></proof>
 <proof prover="10"><result status="valid" time="0.16" steps="48064"/></proof>
 </goal>
 <goal name="EulerSieve.get_next&#39;refn&#39;vc" expl="VC for get_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="36423"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="132996"/></proof>
 </goal>
 <goal name="EulerSieve.set_mark&#39;refn&#39;vc" expl="VC for set_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
 <proof prover="10"><result status="valid" time="0.18" steps="42389"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="152711"/></proof>
 </goal>
 <goal name="EulerSieve.get_mark&#39;refn&#39;vc" expl="VC for get_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="40764"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="153795"/></proof>
 </goal>
 <goal name="EulerSieve.get_max&#39;refn&#39;vc" expl="VC for get_max&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
 <proof prover="10"><result status="valid" time="0.10" steps="34124"/></proof>
 <proof prover="11"><result status="valid" time="0.01" steps="10206"/></proof>
 </goal>
 <goal name="euler_sieve&#39;vc" expl="VC for euler_sieve" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_sieve&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="34358"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="17978"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47145"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="216783"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="44364"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14022"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44367"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14027"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="44370"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14032"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="44373"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14037"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47148"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="117465"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="258"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="59067"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="245318"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47381"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="23985"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="364"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="54737"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="232014"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.10" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="403"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="68"/></proof>
   <proof prover="10"><result status="valid" time="0.18" steps="47239"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="219157"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.24" steps="55272"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="258209"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Ensures5">
    <goal name="euler_sieve&#39;vc.11.2.0" expl="precondition" proved="true">
    <transf name="split_premise_right" proved="true" >
     <goal name="euler_sieve&#39;vc.11.2.0.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
      <goal name="euler_sieve&#39;vc.11.2.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.10" steps="76"/></proof>
      <proof prover="11"><result status="valid" time="0.10" steps="281633"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.11.2.0.0.1" expl="precondition" proved="true">
      <proof prover="11"><result status="valid" time="0.13" steps="393893"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="48461"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="241434"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.33" steps="70923"/></proof>
   <proof prover="11"><result status="valid" time="0.26" steps="653876"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.13.1" expl="VC for euler_sieve" proved="true">
   <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures4">
    <goal name="euler_sieve&#39;vc.13.1.0" expl="VC for euler_sieve" proved="true">
    <transf name="remove" proved="true" arg1="zero1,one1,(-),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Refl,CompatOrderAdd,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H18,H17,Ensures13,H16,H15,H14,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H13,H10,H9,Requires4,Requires3,Requires2,Requires,H8,Ensures7,Ensures6,Ensures5,H5,Ensures2,Ensures1,H3,Assert,Ensures,H12,H11,H7,H6">
     <goal name="euler_sieve&#39;vc.13.1.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="109"/></proof>
     <proof prover="11"><result status="valid" time="0.03" steps="41854"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.13.2" expl="VC for euler_sieve" proved="true">
   <proof prover="3" timelimit="20"><result status="valid" time="9.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="4.61" steps="749"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="67237"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="299581"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="54953"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="235706"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="44915"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14247"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47668"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="235854"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="47680"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="236627"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.19.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="euler_sieve&#39;vc.19.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.19.0.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="55048"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="276420"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.1" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.28" steps="61490"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="263702"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.2" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="74"/></proof>
     <proof prover="10"><result status="valid" time="0.18" steps="51379"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="234475"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.3" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="1.50" steps="337"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="363874"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.20" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.20.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="49602"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="248764"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.17" steps="47768"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="236025"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.2" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.06" steps="108384"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="75"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="44794"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14187"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Requires">
     <goal name="euler_sieve&#39;vc.20.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.20.0.4.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.11" steps="83"/></proof>
       <proof prover="11"><result status="valid" time="0.10" steps="282649"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.1" expl="precondition" proved="true">
       <proof prover="11"><result status="valid" time="0.14" steps="423665"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.5" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="48700"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="242529"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="359"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57428"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="47427"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="219441"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.23" expl="assertion" proved="true">
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Refl,Trans,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H17,H16,H15,Ensures13,H14,H13,H12,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H11,H10,H9,H8,Requires4,Requires3,Requires2,Requires1,Requires,H7,H6,Ensures7,Ensures6,Ensures4,H5,H4,Ensures2,Ensures1,H3,Ensures,H2">
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="0.08"/></proof>
   <proof prover="9"><result status="valid" time="0.03" steps="187"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="48991"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="227613"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.25" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.1" expl="VC for euler_sieve" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="276032"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.91" steps="408"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="229817"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="71"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.17" steps="49989"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="230295"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="71"/></proof>
   <proof prover="10"><result status="valid" time="0.23" steps="56387"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="270879"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.26" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.66" steps="574"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.73" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.68" steps="332"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="93"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="256587"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.57" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.46" steps="318"/></proof>
   <proof prover="10"><result status="valid" time="0.29" steps="65728"/></proof>
   <proof prover="11"><result status="valid" time="0.11" steps="311929"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="2.20" steps="549"/></proof>
   <proof prover="10"><result status="valid" time="0.31" steps="70126"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="309285"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.27.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall j k. 2 &lt;= j &lt; (nexts t)[n] -&gt; 2 &lt;= k &lt; length (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.27.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.47" steps="310"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.27.1.1" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.29" steps="62539"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="43769"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13745"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43787"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="13752"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="169"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="634"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H6,H5,H4,H3,H2,Ensures4,Ensures3,Ensures2,Ensures1,H,Requires2,Requires1,Requires">
   <goal name="euler_sieve&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="67"/></proof>
   <proof prover="9"><result status="valid" time="0.11" steps="162"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="7307"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.32" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.32.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.22" steps="51593"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="220375"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="50656"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="214214"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="43739"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="13721"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(mod i 2 = 0)">
     <goal name="euler_sieve&#39;vc.32.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="case" proved="true" arg1="(i &lt; max - 1)">
      <goal name="euler_sieve&#39;vc.32.0.3.0.0" expl="true case (precondition)" proved="true">
      <transf name="instantiate" proved="true" arg1="Ensures1" arg2="i">
       <goal name="euler_sieve&#39;vc.32.0.3.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="10"><result status="valid" time="0.43" steps="87926"/></proof>
       <proof prover="11"><result status="valid" time="0.10" steps="303837"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="euler_sieve&#39;vc.32.0.3.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.06" steps="44"/></proof>
      <proof prover="10"><result status="valid" time="0.21" steps="51257"/></proof>
      <proof prover="11"><result status="valid" time="0.08" steps="219009"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.32.0.3.1" expl="false case (precondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.18" steps="141"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="63800"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="943"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="70456"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.34" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="223"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55171"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.35" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.35.0" expl="true case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="0.19" steps="206"/></proof>
   <proof prover="10"><result status="valid" time="0.24" steps="56150"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="239797"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.35.1" expl="false case (assertion)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.35.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="45280"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14379"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.1" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="45299"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14390"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.2" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.80" steps="907"/></proof>
    <proof prover="10"><result status="valid" time="0.46" steps="92343"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.36" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.14" steps="1228"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="56272"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.37" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="53194"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="236390"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.38" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="52625"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="233233"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.39" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="45395"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14508"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.40" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="270"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56064"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="249383"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.41" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="45459"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14553"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.42" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.42.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.42.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="53910"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="251006"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.39" steps="177"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="57971"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="271163"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.1" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.60" steps="341"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="57772"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="281907"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.22" steps="275"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="57571"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="269829"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="153"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="57568"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="259237"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.4.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
     <proof prover="10"><result status="valid" time="0.23" steps="54256"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="258860"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="570"/></proof>
     <proof prover="10"><result status="valid" time="0.31" steps="63760"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="430"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="71619"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="278058"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.43" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="156"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="54221"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="248557"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="373"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="58415"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="206"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="59960"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="59956"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="259765"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="445"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="61306"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="336719"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.48" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="55717"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="251235"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.49" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="71"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="56227"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.50" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56574"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="260350"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.51" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="47124"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15213"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.52" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="293"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56180"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.53" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="189"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="56167"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.54" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="192"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57143"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="291766"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.55" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57354"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300146"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.56" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="339"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="64952"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.57" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57415"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="278449"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.58" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="218"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57720"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="315768"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.59" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="224"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57876"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302061"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.60" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="1019"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="68215"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.61" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.61.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.61.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.61.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.61.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.36" steps="83433"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.62" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.62.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.34" steps="1142"/></proof>
   <proof prover="10"><result status="valid" time="0.30" steps="65637"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="529820"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.53" steps="1144"/></proof>
   <proof prover="10"><result status="valid" time="0.37" steps="77766"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.79" steps="978"/></proof>
   <proof prover="10"><result status="valid" time="0.29" steps="66152"/></proof>
   <proof prover="11"><result status="valid" time="0.11" steps="374079"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.63" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51400"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="254153"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.64" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="400255"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.65" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.32" steps="525"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="68813"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.66" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="107"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="59564"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308895"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.67" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="109"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="80285"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.68" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="87592"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.69" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="410"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="66490"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.70" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
   <goal name="euler_sieve&#39;vc.70.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.70.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.56" steps="417"/></proof>
    <proof prover="10"><result status="valid" time="2.21" steps="240036"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.70.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.54" steps="402"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="391344"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.71" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="68016"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="402909"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="49297"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27353"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="49313"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27362"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="52399"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="258671"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="49348"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="16183"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.76" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.76.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.76.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.08" steps="415"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="69314"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.31" steps="416"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="67669"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.05" steps="409"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="69341"/></proof>
     <proof prover="11"><result status="valid" time="0.22" steps="652045"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.93" steps="421"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="68125"/></proof>
     <proof prover="11"><result status="valid" time="0.14" steps="448059"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.52" steps="1263"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="68317"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="390"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69255"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="406340"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.01" steps="416"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="0.14"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,Refl,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H39,H38,Ensures18,H37,H36,H35,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H34,H33,Ensures12,Assert3,Assert2,Assert1,H30,H29,Ensures11,H28,H27,H26,H25,H24,LoopInvariant9,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,Ensures10,Ensures9,H23,Ensures8,Ensures7,H22,Ensures6,H17,Ensures5,Ensures4,H16,Ensures3,Ensures2,Assert,Ensures,LoopInvariant1,LoopInvariant,H32,H31,H21,H20,H19,H18,H14,H13,H12,H11,H10,H9,H8,H7,H6,H4">
      <goal name="euler_sieve&#39;vc.76.0.5.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.02"/></proof>
      <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
      <proof prover="10"><result status="valid" time="0.04" steps="3547"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="15801"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.22" steps="1177"/></proof>
     <proof prover="10"><result status="valid" time="0.39" steps="73603"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.77" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="85454"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="83601"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.79" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="697"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="70746"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.80" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="980"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="70297"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.81" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.81.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.46" steps="952"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="72220"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="50368"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="267308"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.83" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56801"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="270798"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.84" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57428"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="281009"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="226"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57769"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="298038"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="101"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.87" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="57970"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="282508"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.88" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="389"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="59493"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="313699"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.89" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="77661"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="327208"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.90" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="380"/></proof>
  <proof prover="10"><result status="valid" time="0.35" steps="74624"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="318464"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.91" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="395"/></proof>
  <proof prover="10"><result status="valid" time="0.40" steps="79262"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="322227"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.92" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="348"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59782"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="306827"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.93" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59036"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308573"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.94.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.94.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.90" steps="892"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="68552"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="430271"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="68571"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="431268"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="761"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="68340"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="353851"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.41" steps="492"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="68343"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="352270"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.94.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.94.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="80059"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
         <proof prover="10"><result status="valid" time="0.24" steps="58823"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="368903"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="2.68"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H33,H32,Ensures18,H31,H30,H29,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H28,H27,Assert2,Assert1,H24,H23,Ensures10,H22,H21,H20,H19,H18,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H17,Ensures7,Ensures6,H16,Ensures5,H11,Ensures4,Ensures3,H10,H9,Ensures2,Ensures1,Ensures,H8,LoopInvariant1,LoopInvariant,H26,H25,H15,H14,H13,H12,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="2189"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="6644"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.18" steps="515896"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.95" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.95.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.95.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(j = cnt1)">
     <goal name="euler_sieve&#39;vc.95.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="2.79"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H32,H31,Ensures17,H30,H29,H28,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H27,H26,Ensures11,Assert3,Assert2,Assert1,H23,H22,H20,H19,H18,H17,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant7,LoopInvariant5,LoopInvariant4,LoopInvariant3,Ensures9,Ensures8,H16,Ensures7,Ensures6,H15,Ensures5,H10,H9,H8,Ensures1,Ensures,H7,Assert,LoopInvariant2,LoopInvariant1,LoopInvariant,H25,H24,H14,H13,H12,H11,H6,H4">
      <goal name="euler_sieve&#39;vc.95.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.10"/></proof>
      <proof prover="9"><result status="valid" time="0.08" steps="158"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="35460"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.95.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.38" steps="1234"/></proof>
     <proof prover="10"><result status="valid" time="0.33" steps="72541"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.96" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.96.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.96.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.96.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.96.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.96.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.62" steps="104451"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="764"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="70635"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.98.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.60" steps="1365"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.99" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.99.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.99.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.74" steps="841"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="72233"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.99.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.99.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.49" steps="90188"/></proof>
    <proof prover="11"><result status="valid" time="0.30" steps="828366"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.99.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="8"><result status="valid" time="2.07"/></proof>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures5,H6,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,Assert,LoopInvariant8,LoopInvariant7,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant1,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.18" steps="183"/></proof>
     </goal>
    </transf>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Ensures11,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="8" timelimit="1"><result status="valid" time="0.05"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.100" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50279"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="254575"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.101" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56616"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="257529"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.102" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57217"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="282130"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="215"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57584"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="289347"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.104" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="64566"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.105" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57695"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="268209"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.106" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57723"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="279602"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.107" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="374"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58740"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="299564"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.108" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="61325"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="292442"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.109" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="51229"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="246439"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.110" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="57990"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="293637"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.111" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="103"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58211"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="301108"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.112" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58559"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="306019"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.113" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.113.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.113.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.40" steps="1381"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69982"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="416759"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="69089"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="417324"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.69" steps="1013"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="69821"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="347380"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.35" steps="375"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69055"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="345865"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.113.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.113.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.42" steps="80188"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="94"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="58745"/></proof>
         <proof prover="11"><result status="valid" time="0.13" steps="360902"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="1.38"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H27,H26,Ensures18,H25,H24,H23,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="2188"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="6644"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.14" steps="461175"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.114" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.114.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.114.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.114.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.114.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.114.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.17" steps="1368"/></proof>
        <proof prover="10"><result status="valid" time="0.31" steps="70075"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.29" steps="592"/></proof>
        <proof prover="10"><result status="valid" time="0.27" steps="61209"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.115" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.115.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.115.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.115.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.115.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.17" steps="374"/></proof>
       <proof prover="10"><result status="valid" time="0.27" steps="60256"/></proof>
       <proof prover="11"><result status="valid" time="0.16" steps="463302"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="1.33" steps="1203"/></proof>
       <proof prover="10"><result status="valid" time="0.31" steps="71517"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.116" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="535"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="71419"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.117" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; cnt1)">
   <goal name="euler_sieve&#39;vc.117.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.78" steps="1076"/></proof>
   <proof prover="10"><result status="valid" time="0.33" steps="72356"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.117.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="1.13" steps="1282"/></proof>
   <proof prover="10"><result status="valid" time="0.37" steps="77361"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.118" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.118.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.118.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.64" steps="838"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="73340"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.118.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.118.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="98488"/></proof>
    <proof prover="11"><result status="valid" time="0.30" steps="759689"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.118.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="5.15" steps="1445"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.119" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="75"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56714"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="254215"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="282"/></proof>
  <proof prover="10"><result status="valid" time="0.74" steps="126974"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.22" steps="824"/></proof>
  <proof prover="10"><result status="valid" time="1.14" steps="143282"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.122" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="310"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="67401"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.123" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.41" steps="84870"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.124" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="221"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.125" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="258"/></proof>
  <proof prover="10"><result status="valid" time="2.20" steps="321930"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="341846"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.126" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="52956"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.127" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="50972"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="218690"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.128" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="50381"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="222511"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.129" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="44319"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14035"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.130" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="186"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="53042"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.131" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44383"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14080"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.132" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.132.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.132.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="44"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="51766"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="240815"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.33" steps="143"/></proof>
     <proof prover="10"><result status="valid" time="0.24" steps="54937"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="248237"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.1" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.37" steps="263"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="54809"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="254221"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.13" steps="199"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="54603"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="242544"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.08" steps="121"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="54600"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="241589"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.4.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.06" steps="48"/></proof>
     <proof prover="10"><result status="valid" time="0.22" steps="52112"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="248053"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.79" steps="798"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="60690"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="339646"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="254"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="67258"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="255501"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.133" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="116"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51939"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="237907"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.134" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="305"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55330"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="243396"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.135" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="164"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="56577"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="256544"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.136" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56593"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="245855"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.137" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.37" steps="577"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57827"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="309002"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.138" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="53397"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="240645"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.139" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="53495"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="241251"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.140" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="54239"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="249849"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.141" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="46048"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14740"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.142" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="240"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="53823"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.143" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="162"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="53835"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.144" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="165"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54791"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="278159"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.145" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="173"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55002"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="286270"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.146" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="277"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="61103"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="311108"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.147" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55072"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="271292"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.148" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="191"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55363"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300913"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.149" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="197"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55514"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="292323"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.150" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="995"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="64587"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.151" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.151.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.151.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.151.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.151.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="76992"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.152" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.152.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="838"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="62008"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="528033"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.06" steps="1148"/></proof>
   <proof prover="10"><result status="valid" time="0.36" steps="73643"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="321"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="61274"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="358157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.153" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50272"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="247085"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.154" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="3.30" steps="326454"/></proof>
  <proof prover="11"><result status="valid" time="0.14" steps="401875"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.155" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.03" steps="422"/></proof>
  <proof prover="10"><result status="valid" time="0.39" steps="76211"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.156" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57215"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302592"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="74914"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.158" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.42" steps="81503"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="357"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="62570"/></proof>
  <proof prover="11"><result status="valid" time="0.19" steps="542149"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="745"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="64413"/></proof>
  <proof prover="11"><result status="valid" time="0.13" steps="370788"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.162" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="48221"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="26666"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="48237"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="26675"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="51256"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="251578"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="48272"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15710"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.166.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.166.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.92" steps="369"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="65030"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.25" steps="368"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="64505"/></proof>
     <proof prover="11"><result status="valid" time="0.51" steps="1142427"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.64" steps="364"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="65045"/></proof>
     <proof prover="11"><result status="valid" time="0.20" steps="564673"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.68" steps="375"/></proof>
     <proof prover="10"><result status="valid" time="0.28" steps="64280"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="384707"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.25" steps="1154"/></proof>
    <proof prover="10"><result status="valid" time="0.28" steps="65562"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.40" steps="341"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="65411"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="363789"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.91" steps="369"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="70941"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9" timelimit="20"><result status="valid" time="8.76" steps="5018"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.18" steps="1288"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="67035"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="69929"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.168" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.82" steps="2022"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="79974"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.169" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="578"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="67093"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.170" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.05" steps="830"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="66983"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.171" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.92" steps="149295"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.172" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="49225"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="260255"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.173" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54492"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="263829"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55085"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="273817"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.175" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="199"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55412"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="287758"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.176" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.177" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="55613"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="275666"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.178" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="372"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="56048"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="304692"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.179" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="723"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="70796"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="310768"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.180" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="318"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="69595"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302762"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="318"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="72930"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="312070"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="308"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="56238"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="296885"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.183" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56678"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="298529"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.184.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.184.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.14" steps="1047"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66794"/></proof>
    <proof prover="11"><result status="valid" time="0.14" steps="386765"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="3.41" steps="1880"/></proof>
    <proof prover="10"><result status="valid" time="0.29" steps="65000"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="380249"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.44" steps="664"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="65716"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="320504"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.34" steps="435"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="64749"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="319196"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.184.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.184.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.36" steps="74562"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.11" steps="95"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="56905"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="353659"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="9"><result status="valid" time="5.28" steps="3495"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.16" steps="460381"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.185.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="euler_sieve&#39;vc.185.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.185.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="case" proved="true" arg1="(j = cnt1)">
      <goal name="euler_sieve&#39;vc.185.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="10"><result status="valid" time="0.26" steps="71879"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.185.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
      <proof prover="9"><result status="valid" time="0.22" steps="473"/></proof>
      <proof prover="10"><result status="valid" time="0.41" steps="73636"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.186" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.186.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.186.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.186.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.186.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.186.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.66" steps="96301"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="663"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="66769"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.188.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.72" steps="1727"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.189" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.189.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.189.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.53" steps="752"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="67281"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.189.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.189.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="68501"/></proof>
    <proof prover="11"><result status="valid" time="0.29" steps="788747"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.189.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="2.26" steps="1184"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.190" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="49136"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="247145"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.191" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54315"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="250384"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.192" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="76"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54882"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="273112"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.193" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="188"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55232"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="279857"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.194" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="79"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="61528"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.195" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55345"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="261174"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.196" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55382"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="262145"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.197" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.16" steps="331"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55778"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="293193"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.198" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="85"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58843"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="282673"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.199" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="50086"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="239598"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.200" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55652"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="284079"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.201" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55901"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="281861"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.202" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="93"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56198"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="285511"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.203" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.203.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.203.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.30" steps="66711"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="357116"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.23" steps="986"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="65801"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="358029"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="897"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66606"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="309063"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.28" steps="330"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="65760"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="307830"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.203.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.203.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.37" steps="74829"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.10" steps="88"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="56827"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="345744"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="1.90"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.03" steps="2175"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="6571"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.14" steps="401496"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.204" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.204.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.204.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.204.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.204.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.204.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.88" steps="2134"/></proof>
        <proof prover="10"><result status="valid" time="0.28" steps="66537"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.14" steps="349"/></proof>
        <proof prover="10"><result status="valid" time="0.26" steps="58408"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.205" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.205.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.205.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.205.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.205.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.13" steps="414"/></proof>
       <proof prover="10"><result status="valid" time="0.26" steps="57799"/></proof>
       <proof prover="11"><result status="valid" time="0.14" steps="403878"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.71" steps="1036"/></proof>
       <proof prover="10"><result status="valid" time="0.30" steps="66902"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.206" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="461"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="67527"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.207" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="2.47" steps="2302"/></proof>
  <proof prover="10"><result status="valid" time="0.50" steps="99692"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.208" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.208.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.208.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.77" steps="1239"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69371"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.208.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.208.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.46" steps="91806"/></proof>
    <proof prover="11"><result status="valid" time="0.27" steps="723291"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.208.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="2.86" steps="1395"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.209" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="54388"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="245802"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.210" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="401"/></proof>
  <proof prover="10"><result status="valid" time="0.68" steps="116733"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.211" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.13" steps="1288"/></proof>
  <proof prover="10"><result status="valid" time="0.88" steps="125563"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.212" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="261"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="63851"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.213" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="125139"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
