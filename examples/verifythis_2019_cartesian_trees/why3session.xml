<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.7.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/><path name="verifythis_2019_cartesian_trees.mlw"/>
<theory name="Top" proved="true">
 <goal name="Decr.Transitive.Trans" proved="true">
 <proof prover="2"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="destruct&#39;VC" expl="VC for destruct" proved="true">
 <proof prover="2"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="peek&#39;VC" expl="VC for peek" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="32"/></proof>
 </goal>
 <goal name="tail&#39;VC" expl="VC for tail" proved="true">
 <proof prover="2"><result status="valid" time="0.00"/></proof>
 </goal>
 <goal name="destruct_peek_tail" proved="true">
 <proof prover="2"><result status="valid" time="0.13"/></proof>
 </goal>
 <goal name="smaller_left&#39;VC" expl="VC for smaller_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="smaller_left&#39;VC.0" expl="array creation size" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.3" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.4" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.5" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.6" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.7" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.8" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.9" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.10" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.11" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.12" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.13" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.14" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.15" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.17" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.19" expl="loop variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="155"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.20" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.21" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.22" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.23" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.27" steps="1903"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.97" steps="7018"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.25" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="687"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.27" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.28" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="32"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.29" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.30" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.31" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.32" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.33" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="319"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.34" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="517"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.35" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="120"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.36" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="249"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.37" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.38" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.39" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.40" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.41" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.42" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.43" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.44" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="688"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.45" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="788"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.46" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.25" steps="1899"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.47" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="361"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.48" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.49" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.50" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.51" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="smaller_left&#39;VC.52" expl="out of loop bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="construct_dirs&#39;VC" expl="VC for construct_dirs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="construct_dirs&#39;VC.0" expl="array creation size" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="17155"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="15442"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.3" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="19018"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.4" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="15764"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.5" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="15764"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.6" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="17244"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.7" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="17256"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.8" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="17602"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.9" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="17602"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.10" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = li)">
   <goal name="construct_dirs&#39;VC.10.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="391"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.10.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.16" steps="855"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.11" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="1209"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.12" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = li)">
   <goal name="construct_dirs&#39;VC.12.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="132"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.12.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="410"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.13" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="17681"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.14" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="17681"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.15" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = ri)">
   <goal name="construct_dirs&#39;VC.15.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="415"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.15.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="606"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.16" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.21" steps="1606"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.17" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = ri)">
   <goal name="construct_dirs&#39;VC.17.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="134"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.17.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="470"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.18" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="17726"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.19" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="17726"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.20" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = li)">
   <goal name="construct_dirs&#39;VC.20.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="302"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.20.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="399"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="1189"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.22" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = li)">
   <goal name="construct_dirs&#39;VC.22.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="106"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.22.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="264"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.23" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="17756"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.24" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="17756"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.25" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = ri)">
   <goal name="construct_dirs&#39;VC.25.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="269"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.25.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="785"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.26" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="579"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.27" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = ri)">
   <goal name="construct_dirs&#39;VC.27.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="109"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.27.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="486"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.28" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = ri)">
   <goal name="construct_dirs&#39;VC.28.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.28.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="170"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.29" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="20115"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.30" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = ri)">
   <goal name="construct_dirs&#39;VC.30.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="construct_dirs&#39;VC.30.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.31" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="16240"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.32" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="126"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.33" expl="postcondition" proved="true">
  <transf name="revert" proved="true" arg1="p">
   <goal name="construct_dirs&#39;VC.33.0" expl="postcondition" proved="true">
   <transf name="revert" proved="true" arg1="s">
    <goal name="construct_dirs&#39;VC.33.0.0" expl="postcondition" proved="true">
    <transf name="induction_pr" proved="true" >
     <goal name="construct_dirs&#39;VC.33.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="25"/></proof>
     </goal>
     <goal name="construct_dirs&#39;VC.33.0.0.1" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="101"/></proof>
     </goal>
     <goal name="construct_dirs&#39;VC.33.0.0.2" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.04" steps="20138"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.34" expl="postcondition" proved="true">
  <transf name="revert" proved="true" arg1="p2">
   <goal name="construct_dirs&#39;VC.34.0" expl="postcondition" proved="true">
   <transf name="revert" proved="true" arg1="s">
    <goal name="construct_dirs&#39;VC.34.0.0" expl="postcondition" proved="true">
    <transf name="induction_pr" proved="true" >
     <goal name="construct_dirs&#39;VC.34.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="44"/></proof>
     </goal>
     <goal name="construct_dirs&#39;VC.34.0.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="construct_dirs&#39;VC.34.0.0.1.0" expl="VC for construct_dirs" proved="true">
      <proof prover="2"><result status="valid" time="0.08" steps="29834"/></proof>
      </goal>
      <goal name="construct_dirs&#39;VC.34.0.0.1.1" expl="VC for construct_dirs" proved="true">
      <proof prover="1"><result status="valid" time="0.03" steps="159"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="construct_dirs&#39;VC.34.0.0.2" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="144"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.35" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="parent">
   <goal name="construct_dirs&#39;VC.35.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.02" steps="150942"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;VC.36" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="19971"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.37" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="23258"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.38" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="21275"/></proof>
  </goal>
  <goal name="construct_dirs&#39;VC.39" expl="out of loop bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="19061"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="par&#39;VC" expl="VC for par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="par&#39;VC.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.3" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  <transf name="split_all_full" proved="true" >
   <goal name="par&#39;VC.3.0" expl="VC for par" proved="true">
   <proof prover="2"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="par&#39;VC.3.1" expl="VC for par" proved="true">
   <proof prover="0"><result status="valid" time="0.02"/></proof>
   <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
   <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="par&#39;VC.4" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.5" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.6" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="par&#39;VC.7" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.8" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="par&#39;VC.9" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.10" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="par&#39;VC.11" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  <proof prover="1"><result status="valid" time="0.01" steps="27"/></proof>
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.12" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.13" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="par&#39;VC.14" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.15" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="134"/></proof>
  </goal>
  <goal name="par&#39;VC.16" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="par&#39;VC.17" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="121"/></proof>
  </goal>
  <goal name="par&#39;VC.18" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.19" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.20" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="par&#39;VC.21" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="103"/></proof>
  </goal>
  <goal name="par&#39;VC.23" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="par&#39;VC.24" expl="loop invariant preservation" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="par&#39;VC.24.0" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="par&#39;VC.25" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="par&#39;VC.26" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="par&#39;VC.27" expl="out of loop bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="all_descendant_root&#39;VC" expl="VC for all_descendant_root" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="all_descendant_root&#39;VC.0" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.1" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(not is_smallest a j)">
   <goal name="all_descendant_root&#39;VC.2.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="all_descendant_root&#39;VC.2.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="all_descendant_root&#39;VC.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="177"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.5" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="175"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;VC.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="find_smaller&#39;VC" expl="VC for find_smaller" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="find_smaller&#39;VC.0" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="find_smaller&#39;VC.1" expl="index in array bounds" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="find_smaller&#39;VC.1.0" expl="VC for find_smaller" proved="true">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="find_smaller&#39;VC.1.1" expl="VC for find_smaller" proved="true">
   <proof prover="2"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="find_smaller&#39;VC.1.2" expl="VC for find_smaller" proved="true">
   <proof prover="2"><result status="valid" time="0.06"/></proof>
   </goal>
   <goal name="find_smaller&#39;VC.1.3" expl="VC for find_smaller" proved="true">
   <proof prover="2"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="find_smaller&#39;VC.2" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="find_smaller&#39;VC.3" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="find_smaller&#39;VC.4" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="find_smaller&#39;VC.5" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="find_smaller&#39;VC.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="find_smaller&#39;VC.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="other_descendant" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="other_descendant.0" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="other_descendant.1" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="other_descendant.2" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_other_descendant" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inv_other_descendant.0" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="inv_other_descendant.1" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_other_descendant.1.0" proved="true">
   <transf name="case" proved="true" arg1="(p1 = s1)">
    <goal name="inv_other_descendant.1.0.0" expl="true case" proved="true">
    <transf name="right" proved="true" >
     <goal name="inv_other_descendant.1.0.0.0" expl="right case" proved="true">
     <transf name="exists" proved="true" arg1="s">
      <goal name="inv_other_descendant.1.0.0.0.0" proved="true">
      <proof prover="2"><result status="valid" time="0.03"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="inv_other_descendant.1.0.1" expl="false case" proved="true">
    <proof prover="2"><result status="valid" time="0.04"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="inv_other_descendant.2" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_other_descendant.2.0" proved="true">
   <transf name="case" proved="true" arg1="(p1 = s1)">
    <goal name="inv_other_descendant.2.0.0" expl="true case" proved="true">
    <transf name="right" proved="true" >
     <goal name="inv_other_descendant.2.0.0.0" expl="right case" proved="true">
     <transf name="exists" proved="true" arg1="s">
      <goal name="inv_other_descendant.2.0.0.0.0" proved="true">
      <proof prover="2"><result status="valid" time="0.04"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="inv_other_descendant.2.0.1" expl="false case" proved="true">
    <proof prover="2"><result status="valid" time="0.05"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="StrictIncr.Transitive.Trans" proved="true">
 <proof prover="2"><result status="valid" time="0.03"/></proof>
 </goal>
 <goal name="traversal&#39;VC" expl="VC for traversal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="traversal&#39;VC.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="traversal&#39;VC.0.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="traversal&#39;VC.0.1" expl="VC for traversal" proved="true">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="traversal&#39;VC.0.2" expl="VC for traversal" proved="true">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;VC.1" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="traversal&#39;VC.2" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="traversal&#39;VC.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="traversal&#39;VC.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="traversal&#39;VC.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="29"/></proof>
  </goal>
  <goal name="traversal&#39;VC.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="traversal&#39;VC.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="traversal&#39;VC.7.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;VC.7.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.08"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.7.1" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;VC.7.1.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.07"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.7.2" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(descendant dirs x1 son)">
    <goal name="traversal&#39;VC.7.2.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.02"/></proof>
    </goal>
    <goal name="traversal&#39;VC.7.2.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="148"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.7.3" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(x + 1 = e)">
    <goal name="traversal&#39;VC.7.3.0" expl="true case (precondition)" proved="true">
    <proof prover="2"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="traversal&#39;VC.7.3.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(descendant dirs x (x+1))">
     <goal name="traversal&#39;VC.7.3.1.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.05"/></proof>
     </goal>
     <goal name="traversal&#39;VC.7.3.1.1" expl="false case (precondition)" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="73"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;VC.8" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="traversal&#39;VC.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02"/></proof>
  </goal>
  <goal name="traversal&#39;VC.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="traversal&#39;VC.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="traversal&#39;VC.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="traversal&#39;VC.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="traversal&#39;VC.13.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;VC.13.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.07"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.13.1" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;VC.13.1.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.11"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.13.2" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(descendant dirs x1 son)">
    <goal name="traversal&#39;VC.13.2.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="traversal&#39;VC.13.2.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="190"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.13.3" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(s = x)">
    <goal name="traversal&#39;VC.13.3.0" expl="true case (precondition)" proved="true">
    <proof prover="2"><result status="valid" time="0.05"/></proof>
    </goal>
    <goal name="traversal&#39;VC.13.3.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(descendant dirs x s)">
     <goal name="traversal&#39;VC.13.3.1.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.06"/></proof>
     </goal>
     <goal name="traversal&#39;VC.13.3.1.1" expl="false case (precondition)" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="86"/></proof>
     <transf name="split_all_full" proved="true" >
      <goal name="traversal&#39;VC.13.3.1.1.0" expl="false case (precondition)" proved="true">
      <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="0.01" steps="86"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;VC.14" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="traversal&#39;VC.14.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="traversal&#39;VC.14.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;VC.15" expl="postcondition" proved="true">
  <transf name="destruct_term" proved="true" arg1="top">
   <goal name="traversal&#39;VC.15.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(sorted o)">
    <goal name="traversal&#39;VC.15.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.09"/></proof>
    </goal>
    <goal name="traversal&#39;VC.15.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(sorted (Cons x o1))">
     <goal name="traversal&#39;VC.15.0.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="68"/></proof>
     </goal>
     <goal name="traversal&#39;VC.15.0.1.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(sorted (Cons x o1))">
      <goal name="traversal&#39;VC.15.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.01" steps="18"/></proof>
      </goal>
      <goal name="traversal&#39;VC.15.0.1.1.1" expl="postcondition" proved="true">
      <proof prover="1" timelimit="15"><result status="valid" time="1.64" steps="11401"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;VC.15.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="in_order&#39;VC" expl="VC for in_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_order&#39;VC.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="in_order&#39;VC.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="in_order&#39;VC.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="in_order&#39;VC.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="in_order&#39;VC.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="in_order&#39;VC.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="in_order&#39;VC.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06"/></proof>
   </goal>
   <goal name="in_order&#39;VC.5.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.07"/></proof>
   </goal>
   <goal name="in_order&#39;VC.5.2" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="143"/></proof>
   </goal>
   <goal name="in_order&#39;VC.5.3" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="in_order&#39;VC.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="in_order&#39;VC.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
