<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="3" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="verifythis_2019_cartesian_trees.mlw"/>
<theory name="Top" proved="true">
 <goal name="Decr.Transitive.Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
 <goal name="destruct&#39;vc" expl="VC for destruct" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="6"/></proof>
 </goal>
 <goal name="peek&#39;vc" expl="VC for peek" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="30"/></proof>
 </goal>
 <goal name="tail&#39;vc" expl="VC for tail" proved="true">
 <proof prover="3"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="destruct_peek_tail" proved="true">
 <proof prover="3"><result status="valid" time="0.02" steps="74"/></proof>
 </goal>
 <goal name="smaller_left&#39;vc" expl="VC for smaller_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="smaller_left&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.14" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.15" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.17" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.19" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="151"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="1.35" steps="166199"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="135"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="200"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="1.28" steps="3981"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="1.01" steps="3885"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.21" steps="844"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.26" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.27" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.28" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="206"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.31" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="228"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.32" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.07" steps="334"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.34" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.19" steps="842"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="120"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.36" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="292"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.38" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.39" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="38"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.40" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="377"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.41" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.42" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.08" steps="293"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.43" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.07" steps="234"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.44" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.18" steps="732"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.45" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="63000"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.46" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="2884"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.47" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.13" steps="561"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.49" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.50" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.51" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="smaller_left&#39;vc.52" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="7"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="construct_dirs&#39;vc" expl="VC for construct_dirs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="construct_dirs&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.4" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.7" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.9" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.10" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = li)">
   <goal name="construct_dirs&#39;vc.10.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.18" steps="644"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.10.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="1.18" steps="1935"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.18" steps="30191"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = li)">
   <goal name="construct_dirs&#39;vc.12.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.08" steps="177"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.12.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="1.08" steps="2926"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.13" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.14" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.15" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = ri)">
   <goal name="construct_dirs&#39;vc.15.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.18" steps="514"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.15.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="3.48" steps="2882"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="1.30" steps="3229"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.17" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = ri)">
   <goal name="construct_dirs&#39;vc.17.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.06" steps="130"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.17.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.73" steps="2077"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.18" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.19" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.20" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = li)">
   <goal name="construct_dirs&#39;vc.20.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.11" steps="340"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.20.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="1416"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.81" steps="2138"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.22" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = li)">
   <goal name="construct_dirs&#39;vc.22.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.06" steps="141"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.22.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="1804"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.23" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.24" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.25" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = ri)">
   <goal name="construct_dirs&#39;vc.25.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.12" steps="436"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.25.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.48" steps="1515"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="2392"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.27" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = ri)">
   <goal name="construct_dirs&#39;vc.27.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="103"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.27.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.64" steps="2145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.28" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(j = ri)">
   <goal name="construct_dirs&#39;vc.28.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="24"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.28.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.06" steps="181"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="73"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.30" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(p = ri)">
   <goal name="construct_dirs&#39;vc.30.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="construct_dirs&#39;vc.30.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="32"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="149"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.33" expl="postcondition" proved="true">
  <transf name="revert" proved="true" arg1="p">
   <goal name="construct_dirs&#39;vc.33.0" expl="postcondition" proved="true">
   <transf name="revert" proved="true" arg1="s">
    <goal name="construct_dirs&#39;vc.33.0.0" expl="postcondition" proved="true">
    <transf name="induction_pr" proved="true" >
     <goal name="construct_dirs&#39;vc.33.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="25"/></proof>
     </goal>
     <goal name="construct_dirs&#39;vc.33.0.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.04" steps="102"/></proof>
     </goal>
     <goal name="construct_dirs&#39;vc.33.0.0.2" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.04" steps="102"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.34" expl="postcondition" proved="true">
  <transf name="revert" proved="true" arg1="p2">
   <goal name="construct_dirs&#39;vc.34.0" expl="postcondition" proved="true">
   <transf name="revert" proved="true" arg1="s">
    <goal name="construct_dirs&#39;vc.34.0.0" expl="postcondition" proved="true">
    <transf name="induction_pr" proved="true" >
     <goal name="construct_dirs&#39;vc.34.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="42"/></proof>
     </goal>
     <goal name="construct_dirs&#39;vc.34.0.0.1" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="construct_dirs&#39;vc.34.0.0.1.0" expl="VC for construct_dirs" proved="true">
      <proof prover="3"><result status="valid" time="0.02" steps="66"/></proof>
      </goal>
      <goal name="construct_dirs&#39;vc.34.0.0.1.1" expl="VC for construct_dirs" proved="true">
      <proof prover="3"><result status="valid" time="0.06" steps="170"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="construct_dirs&#39;vc.34.0.0.2" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.08" steps="193"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.35" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="parent">
   <goal name="construct_dirs&#39;vc.35.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.89" steps="1882"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="construct_dirs&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="187"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="construct_dirs&#39;vc.39" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="par&#39;vc" expl="VC for par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="par&#39;vc.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="par&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="par&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="par&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="par&#39;vc.4" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="par&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="par&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="36"/></proof>
  </goal>
  <goal name="par&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="par&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="par&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="par&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="par&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="par&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="par&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="par&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="par&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="175"/></proof>
  </goal>
  <goal name="par&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="par&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="155"/></proof>
  </goal>
  <goal name="par&#39;vc.18" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
  <goal name="par&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="par&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="par&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="par&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="128"/></proof>
  </goal>
  <goal name="par&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="par&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="95"/></proof>
  </goal>
  <goal name="par&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="par&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="par&#39;vc.27" expl="out of loop bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="all_descendant_root&#39;vc" expl="VC for all_descendant_root" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="all_descendant_root&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(not is_smallest a j)">
   <goal name="all_descendant_root&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="36"/></proof>
   </goal>
   <goal name="all_descendant_root&#39;vc.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="all_descendant_root&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="186"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.5" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="98"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="22"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="179"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="all_descendant_root&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="find_smaller&#39;vc" expl="VC for find_smaller" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="find_smaller&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="2"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="60"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.3" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="93"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.4" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="89"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="63"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="89"/></proof>
  </goal>
  <goal name="find_smaller&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="other_descendant" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="other_descendant.0" proved="true">
  <proof prover="4"><result status="valid" time="0.08" steps="17589"/></proof>
  </goal>
  <goal name="other_descendant.1" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="other_descendant.2" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inv_other_descendant" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inv_other_descendant.0" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="inv_other_descendant.1" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_other_descendant.1.0" proved="true">
   <transf name="case" proved="true" arg1="(p1 = s1)">
    <goal name="inv_other_descendant.1.0.0" expl="true case" proved="true">
    <transf name="right" proved="true" >
     <goal name="inv_other_descendant.1.0.0.0" expl="right case" proved="true">
     <transf name="exists" proved="true" arg1="s">
      <goal name="inv_other_descendant.1.0.0.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.01" steps="15"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="inv_other_descendant.1.0.1" expl="false case" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="inv_other_descendant.2" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inv_other_descendant.2.0" proved="true">
   <transf name="case" proved="true" arg1="(p1 = s1)">
    <goal name="inv_other_descendant.2.0.0" expl="true case" proved="true">
    <transf name="right" proved="true" >
     <goal name="inv_other_descendant.2.0.0.0" expl="right case" proved="true">
     <transf name="exists" proved="true" arg1="s">
      <goal name="inv_other_descendant.2.0.0.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.01" steps="15"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="inv_other_descendant.2.0.1" expl="false case" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="StrictIncr.Transitive.Trans" proved="true">
 <proof prover="3"><result status="valid" time="0.01" steps="6"/></proof>
 </goal>
 <goal name="traversal&#39;vc" expl="VC for traversal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="traversal&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="traversal&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="17"/></proof>
   </goal>
   <goal name="traversal&#39;vc.0.1" expl="VC for traversal" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="39"/></proof>
   </goal>
   <goal name="traversal&#39;vc.0.2" expl="VC for traversal" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="traversal&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="traversal&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="18"/></proof>
  </goal>
  <goal name="traversal&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="traversal&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="traversal&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="29"/></proof>
  </goal>
  <goal name="traversal&#39;vc.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="traversal&#39;vc.7.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;vc.7.0.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="27"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.7.1" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;vc.7.1.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.14" steps="24450"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.7.2" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(descendant dirs x1 son)">
    <goal name="traversal&#39;vc.7.2.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="56"/></proof>
    </goal>
    <goal name="traversal&#39;vc.7.2.1" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.7.3" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(x + 1 = e)">
    <goal name="traversal&#39;vc.7.3.0" expl="true case (precondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="24"/></proof>
    </goal>
    <goal name="traversal&#39;vc.7.3.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(descendant dirs x (x+1))">
     <goal name="traversal&#39;vc.7.3.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="49"/></proof>
     </goal>
     <goal name="traversal&#39;vc.7.3.1.1" expl="false case (precondition)" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="74"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;vc.8" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="traversal&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
  <goal name="traversal&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="traversal&#39;vc.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="traversal&#39;vc.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="traversal&#39;vc.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="traversal&#39;vc.13.0" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;vc.13.0.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.18" steps="32581"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.13.1" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="parent" arg2="in" arg3="other_descendant">
    <goal name="traversal&#39;vc.13.1.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="29"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.13.2" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(descendant dirs x1 son)">
    <goal name="traversal&#39;vc.13.2.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="59"/></proof>
    </goal>
    <goal name="traversal&#39;vc.13.2.1" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.05" steps="207"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.13.3" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(s = x)">
    <goal name="traversal&#39;vc.13.3.0" expl="true case (precondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="26"/></proof>
    </goal>
    <goal name="traversal&#39;vc.13.3.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(descendant dirs x s)">
     <goal name="traversal&#39;vc.13.3.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="52"/></proof>
     </goal>
     <goal name="traversal&#39;vc.13.3.1.1" expl="false case (precondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="traversal&#39;vc.13.3.1.1.0" expl="false case (precondition)" proved="true">
      <proof prover="3"><result status="valid" time="0.02" steps="79"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;vc.14" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="traversal&#39;vc.14.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="21"/></proof>
   </goal>
   <goal name="traversal&#39;vc.14.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.16" steps="1103"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="traversal&#39;vc.15" expl="postcondition" proved="true">
  <transf name="destruct_term" proved="true" arg1="top">
   <goal name="traversal&#39;vc.15.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(sorted o)">
    <goal name="traversal&#39;vc.15.0.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="17"/></proof>
    </goal>
    <goal name="traversal&#39;vc.15.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(sorted (Cons x o1))">
     <goal name="traversal&#39;vc.15.0.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.02" steps="68"/></proof>
     </goal>
     <goal name="traversal&#39;vc.15.0.1.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(sorted (Cons x o1))">
      <goal name="traversal&#39;vc.15.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
      </goal>
      <goal name="traversal&#39;vc.15.0.1.1.1" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.47" steps="4769"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="traversal&#39;vc.15.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="18"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="in_order&#39;vc" expl="VC for in_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="in_order&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="13"/></proof>
  </goal>
  <goal name="in_order&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="in_order&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="9"/></proof>
  </goal>
  <goal name="in_order&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="in_order&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="in_order&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="in_order&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="16"/></proof>
   </goal>
   <goal name="in_order&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="16"/></proof>
   </goal>
   <goal name="in_order&#39;vc.5.2" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="137"/></proof>
   </goal>
   <goal name="in_order&#39;vc.5.3" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.01" steps="11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="in_order&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="in_order&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
