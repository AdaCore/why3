(*module WhileLoop

type borrowed 'a = { cur: 'a ; fin: 'a }
(*
let cfg f [@cfg:stackify] () : () =
var a : int;
{ a <- 0; return () }
*)

let cfg nested_loops [@cfg:stackify] _x : ()
  diverges
  ensures { true }

=
  var b : borrowed int;
  {
    goto BB0
  }
  BB0 {
    switch (any bool)
    | True -> goto BB1
    | False -> goto BB2
    end
  }
  BB1 {
      b <- { b with cur = 0 };
      goto BB0
  }
  BB2 {
  assert { b.fin = b.cur };
  return ()
  }
end*)

module Decrement_Test
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32

  type borrowed 'a = { cur: 'a ; fin: 'a }

  let cfg test [@cfg:stackify] (x : borrowed uint32) : ()
    ensures { UInt32.to_int (x.fin) = 0 }
   =
  var _0 : ();
  var _4 : uint32;
  {
    goto BB1
  }
  BB1 {
    _4 <- 0;
    switch (true)
      | False ->  return _0
      | _ -> goto BB1
      end
  }

end
