
(** Hash tables using linear probing *)

module LinearProbing

  use import int.Int
  use import int.ComputerDivision
  use import option.Option
  use import list.Mem
  use import map.Map
  use import ref.Ref
  use import array.Array

  type key

  constant dummy: key

  function hash key : int

  axiom hash_nonneg: forall k: key. 0 <= hash k

  function bucket (k: key) (n: int) : int = mod (hash k) n

  lemma bucket_bounds:
    forall n: int. 0 < n ->
    forall k: key. 0 <= bucket k n < n

  (* j lies between l and r, cyclically *)
  predicate between (l j r: int) =
    (* l <= j <= r || r <= l <= j || j <= r <= l *)
    l <= j < r || r < l <= j || j < r < l

  clone import array.NumOfEq with type elt = key

  let rec lemma numof_eq (a1 a2: array key) (v: key) (l u: int) : unit
    requires { 0 <= l <= u <= length a1 = length a2 }
    requires { forall i: int. l <= i < u -> a2[i] = a1[i] }
    ensures  { numof a2 v l u = numof a1 v l u }
    variant  { u-l }
  = if l < u then numof_eq a1 a2 v (l+1) u

  type t = { mutable size: int;   (* total number of elements *)
             mutable data: array key;    (* buckets *)
       ghost mutable view: map key bool; (* pure model *)
       ghost mutable loc : map key int;  (* index where it is stored *)
    }
    (* at least one empty slot *)
    invariant { 0 <= self.size < length self.data }
    invariant { let n = Array.length self.data in
                self.size + numof self.data dummy 0 n = n }
    (* dummy not in the model *)
    invariant { not (Map.get self.view dummy) }
    (* any value in the array is in the model *)
    invariant { forall i: int. 0 <= i < Array.length self.data ->
                let x = self.data[i] in x <> dummy ->
                Map.get self.view x /\ Map.get self.loc x = i }
    (* any value in the model is in the array *)
    invariant { let n = Array.length self.data in
                forall x: key. Map.get self.view x ->
                let i = Map.get self.loc x in
                0 <= i < n && self.data[i] = x &&
                forall j: int. 0 <= j < n ->
                  between (bucket x n) j i ->
                  self.data[j] <> x /\ self.data[j] <> dummy }

  let rec lemma dummy_const (a: array key) (n: int)
    requires { 0 <= n } requires { forall i: int. 0 <= i < n -> a[i] = dummy }
    variant { n } ensures { numof a dummy 0 n = n }
  = if n > 0 then dummy_const a (n-1)

  let create (n: int) : t
    requires { 0 < n }
    ensures  { forall x: key. not (Map.get result.view x) }
  =
    { size = 0; data = Array.make n dummy;
      view = Map.const false; loc = Map.const 0; }

  let clear (h: t) : unit
    writes  { h.size, h.data.elts, h.view }
    ensures { h.size = 0 }
    ensures { forall x: key. not (Map.get h.view x) }
  =
    h.size <- 0;
    Array.fill h.data 0 (Array.length h.data) dummy;
    h.view <- Map.const false

  function next (n i: int) : int =
    let i = i+1 in if i = n then 0 else i

  let find (a: array key) (x: key) : int
    requires { x <> dummy }
    requires { let n = Array.length a in 0 < n /\ numof a dummy 0 n > 0 }
    ensures  { 0 <= result < Array.length a }
    ensures  { a[result] = dummy || a[result] = x }
    ensures  { forall j: int. 0 <= j < Array.length a ->
               between (bucket x (Array.length a)) j result ->
               a[j] <> x /\ a[j] <> dummy }
  =
    let n = Array.length a in
    let b = bucket x n in
    let ghost count = ref 0 in
    let rec find (i: int) : int
      requires { 0 <= i < n }
      requires { numof a dummy 0 n > 0 }
      requires { forall j: int. 0 <= j < n -> between b j i ->
                 a[j] <> x /\ a[j] <> dummy }
      requires { if i >= b then numof a dummy b i = 0
                 else numof a dummy b n = numof a dummy 0 i = 0 }
      variant  { if i >= b then n - i + b else b - i }
      ensures  { 0 <= result < n }
      ensures  { a[result] = dummy || a[result] = x }
      ensures  { forall j: int. 0 <= j < n -> between b j result ->
                 a[j] <> x /\ a[j] <> dummy }
    =
      if a[i] = dummy || a[i] = x then i else find (next n i)
    in
    find b

  let mem (h: t) (x: key) : bool
    requires { x <> dummy }
    ensures  { result <-> Map.get h.view x }
   =
    h.data[find h.data x] <> dummy

  let resize (h: t) : unit
    writes  { h.data, h.loc }
    ensures { Array.length h.data = 2 * old (Array.length h.data) }
  =
    let n = Array.length h.data in
    let n2 = 2 * n in
    let a = Array.make n2 dummy in
    let ghost l = ref (Map.const 0) in
    for i = 0 to n - 1 do
      invariant { numof a dummy 0 n2 = numof h.data dummy 0 i + n2 - i }
      invariant { forall j: int. 0 <= j < n2 -> a[j] <> dummy ->
                  Map.get h.view a[j] /\ Map.get !l a[j] = j }
      invariant { forall x: key. Map.get h.view x ->
                  let j = Map.get h.loc x in
                  if j < i then
                    let j2 = Map.get !l x in
                    0 <= j2 < n2 /\ a[j2] = x /\
                    forall k: int. 0 <= k < n2 ->
                      between (bucket x n2) k j2 -> a[k] <> x /\ a[k] <> dummy
                  else
                    forall j2: int. 0 <= j2 < n2 -> a[j2] <> x }
      let x = h.data[i] in
      if x <> dummy then begin
        'L:
        let j = find a x in
        assert { a[j] = dummy };
        a[j] <- x;
        assert { numof a dummy 0 (j+1) = numof (at a 'L) dummy 0 (j+1) - 1 };
        l := Map.set !l x j
      end
    done;
    h.loc <- !l;
    h.data <- a

  let add (h: t) (x: key) : unit
    requires { x <> dummy }
    writes   { h.size, h.data, h.data.elts, h.view, h.loc }
    ensures  { h.view = Map.set (old h.view) x True }
   =
    abstract
      ensures { h.size + 1 < Array.length h.data }
      if 2 * (h.size + 1) >= Array.length h.data then resize h
    end;
    let i = find h.data x in
    if h.data[i] = dummy then begin
      'L:
      h.size <- h.size + 1;
      h.data[i] <- x;
      assert { numof h.data dummy 0 (i+1) =
               numof (at h.data 'L) dummy 0 (i+1) - 1 }
    end;
    ghost h.view <- Map.set h.view x True;
    ghost h.loc <- Map.set h.loc x i;
    ()

  let copy (h: t) : t
    ensures { result.view = h.view }
   =
    { size = h.size; data = Array.copy h.data;
      view = h.view; loc = h.loc; }

  let remove (h: t) (x: key) : unit
    requires { x <> dummy }
    ensures  { h.view = Map.set (old h.view) x False }
  =
    let rec delete
      (a: array key) (ghost loc: ref (map key int)) (j i: int) : unit
      requires { 0 <= i < Array.length a }
      requires { 0 <= j < Array.length a }
      requires { a[j] = dummy }
      requires { forall i: int. 0 <= i < Array.length a ->
                let x = a[i] in x <> dummy -> Map.get !loc x = i }
      ensures  { numof a dummy 0 (Array.length a) =
                 numof (old a) dummy 0 (Array.length a) }
     =
      let n = Array.length a in
      let i = next n i in
      let xi = a[i] in
      if xi <> dummy then begin
        let r = bucket xi n in
        if j < r && r <= i || i < j && j < r || r <= i && i < j then
          delete a loc j i
        else begin
          a[j] <- a[i];
          ghost loc := Map.set !loc a[i] j;
          a[i] <- dummy;
          delete a loc i i
        end
      end
    in
    let j = find h.data x in
    if h.data[j] <> dummy then begin
      'L:
      h.data[j] <- dummy;
      assert { let n = Array.length h.data in
               numof h.data dummy 0 (j+1) =
               numof (at h.data 'L) dummy 0 (j+1) + 1 };
      ghost h.view <- Map.set h.view x False;
      let l = ref h.loc in
      delete h.data l j j;
      ghost h.loc <- !l;
      h.size <- h.size - 1;
    end

end


