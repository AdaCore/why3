<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="Alt-Ergo" version="1.30" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="1" name="Eprover" version="1.9.1-001" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="2" name="CVC4" version="1.4" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="3" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="2000"/>
<prover id="4" name="Z3" version="4.5.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file name="../compute.mlw" expanded="true">
<theory name="UnitaryCommutativeRingDecision" sum="f010a5ed2c748e31ccaccc0292b55495">
 <goal name="VC mon_append" expl="VC for mon_append">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="71"/></proof>
 </goal>
 <goal name="interp_nil" expl="">
 <proof prover="0" timelimit="15"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
 <goal name="interp_cons" expl="">
 <transf name="compute_in_goal">
  <goal name="interp_cons.1" expl="">
  <proof prover="0"><result status="valid" time="0.02" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC interp_sum" expl="VC for interp_sum">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="72"/></proof>
 </goal>
 <goal name="VC append_mon" expl="VC for append_mon">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="28"/></proof>
 </goal>
 <goal name="VC mul_mon" expl="VC for mul_mon">
 <transf name="split_goal_wp">
  <goal name="VC mul_mon.1" expl="postcondition">
  <transf name="simplify_trivial_quantification">
   <goal name="VC mul_mon.1.1" expl="VC for mul_mon">
   <proof prover="1"><result status="valid" time="0.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mul_mon.2" expl="postcondition">
  <proof prover="4"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_devel" expl="VC for mul_devel">
 <transf name="split_goal_wp">
  <goal name="VC mul_devel.1" expl="postcondition">
  <transf name="simplify_trivial_quantification">
   <goal name="VC mul_devel.1.1" expl="VC for mul_devel">
   <transf name="compute_in_goal">
    <goal name="VC mul_devel.1.1.1" expl="VC for mul_devel">
    <proof prover="1"><result status="valid" time="0.04"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mul_devel.2" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.02" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conv" expl="VC for conv">
 <transf name="split_goal_wp">
  <goal name="VC conv.1" expl="postcondition">
  <transf name="compute_in_goal">
   <goal name="VC conv.1.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.05" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC conv.2" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="VC conv.3" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.00" steps="11"/></proof>
  </goal>
  <goal name="VC conv.4" expl="postcondition">
  <transf name="compute_in_goal">
   <goal name="VC conv.4.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.05" steps="86"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC insert" expl="VC for insert">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="104"/></proof>
 </goal>
 <goal name="VC insertion_sort" expl="VC for insertion_sort">
 <proof prover="0" timelimit="15"><result status="valid" time="0.01" steps="50"/></proof>
 </goal>
 <goal name="VC sort_mon" expl="VC for sort_mon">
 <transf name="split_goal_wp">
  <goal name="VC sort_mon.1" expl="postcondition">
  <transf name="compute_in_goal">
   <goal name="VC sort_mon.1.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.04" steps="88"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sort_mons" expl="VC for sort_mons">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="70"/></proof>
 </goal>
 <goal name="VC le_mon" expl="VC for le_mon">
 <proof prover="0" timelimit="15"><result status="valid" time="0.01" steps="8"/></proof>
 </goal>
 <goal name="VC same" expl="VC for same">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="33"/></proof>
 </goal>
 <goal name="squash_sum" expl="">
 <transf name="compute_in_goal">
  <goal name="squash_sum.1" expl="">
  <proof prover="0"><result status="valid" time="1.29" steps="544"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC squash_append" expl="VC for squash_append">
 <proof prover="0" timelimit="15"><result status="valid" time="0.42" steps="93"/></proof>
 </goal>
 <goal name="VC insert_mon" expl="VC for insert_mon">
 <transf name="split_goal_wp">
  <goal name="VC insert_mon.1" expl="assertion">
  <transf name="split_goal_wp">
   <goal name="VC insert_mon.1.1" expl="VC for insert_mon">
   <proof prover="0"><result status="valid" time="0.05" steps="66"/></proof>
   </goal>
   <goal name="VC insert_mon.1.2" expl="VC for insert_mon">
   <proof prover="0"><result status="valid" time="0.04" steps="30"/></proof>
   </goal>
   <goal name="VC insert_mon.1.3" expl="VC for insert_mon">
   <proof prover="0"><result status="valid" time="0.02" steps="20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC insert_mon.2" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.02" steps="21"/></proof>
  </goal>
  <goal name="VC insert_mon.3" expl="postcondition">
  <transf name="split_goal_wp">
   <goal name="VC insert_mon.3.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
   <goal name="VC insert_mon.3.2" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.81"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC insertion_sort_mon" expl="VC for insertion_sort_mon">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="67"/></proof>
 </goal>
 <goal name="VC normalize" expl="VC for normalize">
 <proof prover="0" timelimit="15"><result status="valid" time="0.01" steps="14"/></proof>
 </goal>
 <goal name="norm" expl="">
 <proof prover="0" timelimit="15"><result status="valid" time="0.02" steps="24"/></proof>
 </goal>
</theory>
<theory name="Tests" sum="1f065f37e7ef4cf469e13a7cf28b7627">
 <goal name="VC eq0_int" expl="VC for eq0_int">
 <proof prover="0"><result status="valid" time="0.00" steps="1"/></proof>
 </goal>
 <goal name="morph_zero" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="morph_one" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="morph_add" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="morph_mul" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="morph_inv" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="VC eq0" expl="VC for eq0">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="AssocAlgebra" sum="d41d8cd98f00b204e9800998ecf8427e">
</theory>
<theory name="AssocAlgebraDecision" sum="46b0bfa6906920a5dd71609af96296ea">
 <goal name="VC mon_append" expl="VC for mon_append">
 <proof prover="0"><result status="valid" time="0.03" steps="83"/></proof>
 <proof prover="1"><result status="valid" time="0.10"/></proof>
 </goal>
 <goal name="interp_cons" expl="">
 <proof prover="1"><result status="valid" time="0.87"/></proof>
 <transf name="compute_in_goal">
  <goal name="interp_cons.1" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC interp_sum" expl="VC for interp_sum">
 <proof prover="0"><result status="valid" time="0.02" steps="70"/></proof>
 <proof prover="1"><result status="valid" time="0.04"/></proof>
 </goal>
 <goal name="VC append_mon" expl="VC for append_mon">
 <proof prover="0"><result status="valid" time="4.38" steps="142"/></proof>
 <proof prover="2" timelimit="1" memlimit="1000"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="VC mul_mon" expl="VC for mul_mon">
 <transf name="split_goal_wp">
  <goal name="VC mul_mon.1" expl="postcondition">
  <transf name="simplify_trivial_quantification">
   <goal name="VC mul_mon.1.1" expl="VC for mul_mon">
   <proof prover="1"><result status="valid" time="0.12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mul_mon.2" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.02" steps="17"/></proof>
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  <proof prover="4"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_devel" expl="VC for mul_devel">
 <transf name="split_goal_wp">
  <goal name="VC mul_devel.1" expl="postcondition">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC mul_devel.2" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.01" steps="10"/></proof>
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ext" expl="VC for ext">
 <transf name="split_goal_wp">
  <goal name="VC ext.1" expl="postcondition">
  <transf name="compute_in_goal">
   <goal name="VC ext.1.1" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ext.2" expl="postcondition">
  <transf name="simplify_trivial_quantification">
   <goal name="VC ext.2.1" expl="VC for ext">
   <proof prover="2"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC conv" expl="VC for conv">
 <transf name="split_goal_wp">
  <goal name="VC conv.1" expl="postcondition">
  <proof prover="1"><result status="valid" time="1.40"/></proof>
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC conv.2" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="VC conv.3" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
  <goal name="VC conv.4" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC le_mon" expl="VC for le_mon">
 <proof prover="0"><result status="valid" time="0.01" steps="4"/></proof>
 </goal>
 <goal name="VC same" expl="VC for same">
 <proof prover="0"><result status="valid" time="0.01" steps="25"/></proof>
 </goal>
 <goal name="squash_append" expl="">
 <proof prover="2"><result status="valid" time="0.05"/></proof>
 <transf name="compute_in_goal">
  <goal name="squash_append.1" expl="">
  <proof prover="0"><result status="valid" time="0.14" steps="669"/></proof>
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  <proof prover="3"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC insert_mon" expl="VC for insert_mon">
 <transf name="split_goal_wp">
  <goal name="VC insert_mon.1" expl="assertion">
  <transf name="split_goal_wp">
   <goal name="VC insert_mon.1.1" expl="VC for insert_mon">
   <transf name="compute_in_goal">
    <goal name="VC insert_mon.1.1.1" expl="VC for insert_mon">
    <proof prover="1"><result status="valid" time="0.11"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC insert_mon.1.2" expl="VC for insert_mon">
   <proof prover="0"><result status="valid" time="0.04" steps="26"/></proof>
   </goal>
   <goal name="VC insert_mon.1.3" expl="VC for insert_mon">
   <proof prover="0"><result status="valid" time="0.01" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC insert_mon.2" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.01" steps="17"/></proof>
  </goal>
  <goal name="VC insert_mon.3" expl="postcondition">
  <transf name="split_goal_wp">
   <goal name="VC insert_mon.3.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
   <goal name="VC insert_mon.3.2" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.15"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC insertion_sort_mon" expl="VC for insertion_sort_mon">
 <transf name="split_goal_wp">
  <goal name="VC insertion_sort_mon.1" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="VC insertion_sort_mon.2" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC normalize&apos;" expl="VC for normalize&apos;">
 <proof prover="0"><result status="valid" time="0.01" steps="6"/></proof>
 </goal>
 <goal name="VC normalize" expl="VC for normalize">
 <proof prover="0"><result status="valid" time="0.01" steps="6"/></proof>
 </goal>
 <goal name="VC norm" expl="VC for norm">
 <proof prover="0"><result status="valid" time="0.01" steps="20"/></proof>
 </goal>
 <goal name="VC norm&apos;" expl="VC for norm&apos;">
 <proof prover="0"><result status="valid" time="0.01" steps="17"/></proof>
 </goal>
</theory>
<theory name="ReifyTests" sum="e9f30b45f8f420f4d815c5fa35e45911">
 <goal name="VC eq0_int" expl="VC for eq0_int">
 <proof prover="0"><result status="valid" time="0.00" steps="1"/></proof>
 </goal>
 <goal name="VC infix $" expl="VC for infix $">
 <proof prover="0"><result status="valid" time="0.00" steps="1"/></proof>
 </goal>
 <goal name="A.Assoc" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="A.Unit_def_l" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="A.Unit_def_r" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="A.Comm" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="A.MulAssoc.Assoc" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="AUnitary" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="ANonTrivial" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="ExtDistSumA" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="ExtDistSumR" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="AssocMulExt" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="UnitExt" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="CommMulExt" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="VC eq0" expl="VC for eq0">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="g" expl="">
 <transf name="reify_in_goal">
  <goal name="g.1" expl="reified goal">
  <transf name="normalize_in_goal">
   <goal name="g.1.1" expl="normalized goal">
   <transf name="compute_in_goal">
   </transf>
   </goal>
   <goal name="g.1.2" expl="normalization check">
   <transf name="compute_in_goal">
    <goal name="g.1.2.1" expl="normalization check">
    <proof prover="0" timelimit="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="h" expl="">
 <transf name="reify_in_goal">
  <goal name="h.1" expl="reified goal">
  <transf name="normalize_in_goal">
   <goal name="h.1.1" expl="normalized goal">
   <transf name="compute_in_goal">
   </transf>
   </goal>
   <goal name="h.1.2" expl="normalization check">
   <transf name="compute_in_goal">
    <goal name="h.1.2.1" expl="normalization check">
    <proof prover="0" timelimit="1" memlimit="1000"><result status="valid" time="0.01" steps="7"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InfMatrixGen" sum="d41d8cd98f00b204e9800998ecf8427e">
</theory>
<theory name="InfMatrix" sum="b299a3d82f2b91c1da8af32dd00eb264">
 <goal name="fcreate_get_ib" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="14"/></proof>
 </goal>
 <goal name="fcreate_get_oob" expl="">
 <proof prover="0"><result status="valid" time="0.00" steps="21"/></proof>
 </goal>
 <goal name="set_def_changed" expl="">
 <proof prover="0"><result status="valid" time="0.02" steps="49"/></proof>
 </goal>
 <goal name="set_def_unchanged" expl="">
 <proof prover="0"><result status="valid" time="0.10" steps="196"/></proof>
 </goal>
 <goal name="set_def_rowz_changed" expl="">
 <proof prover="0"><result status="valid" time="0.01" steps="33"/></proof>
 <proof prover="1"><result status="valid" time="0.05"/></proof>
 <proof prover="2"><result status="valid" time="0.01"/></proof>
 </goal>
 <goal name="set_def_colz_changed" expl="">
 <proof prover="0"><result status="valid" time="0.01" steps="34"/></proof>
 </goal>
 <goal name="set_def_rowz_unchanged" expl="">
 <proof prover="0"><result status="valid" time="0.02" steps="34"/></proof>
 </goal>
 <goal name="set_def_colz_unchanged" expl="">
 <proof prover="0"><result status="valid" time="0.02" steps="25"/></proof>
 </goal>
 <goal name="set_def_other_rowz" expl="">
 <proof prover="0"><result status="valid" time="0.01" steps="25"/></proof>
 </goal>
 <goal name="set_def_other_colz" expl="">
 <proof prover="0"><result status="valid" time="0.01" steps="25"/></proof>
 </goal>
 <goal name="fcreate_size" expl="">
 <proof prover="0"><result status="valid" time="0.01" steps="14"/></proof>
 </goal>
</theory>
<theory name="MaxFun" sum="f8caf0e8a92821705c046063d90d8dc1">
 <goal name="VC maxf" expl="VC for maxf">
 <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="VC maxf_nonneg" expl="VC for maxf_nonneg">
 <proof prover="0"><result status="valid" time="0.00" steps="20"/></proof>
 </goal>
 <goal name="VC maxf_larger" expl="VC for maxf_larger">
 <transf name="split_goal_wp">
  <goal name="VC maxf_larger.1" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC maxf_larger.2" expl="precondition">
  <proof prover="0"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC maxf_larger.3" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC max_left" expl="VC for max_left">
 <transf name="split_goal_wp">
  <goal name="VC max_left.1" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.00" steps="3"/></proof>
  </goal>
  <goal name="VC max_left.2" expl="precondition">
  <proof prover="0"><result status="valid" time="0.00" steps="3"/></proof>
  </goal>
  <goal name="VC max_left.3" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.12" steps="245"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC max_ext" expl="VC for max_ext">
 <transf name="split_goal_wp">
  <goal name="VC max_ext.1" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.00" steps="3"/></proof>
  </goal>
  <goal name="VC max_ext.2" expl="precondition">
  <proof prover="0"><result status="valid" time="0.00" steps="3"/></proof>
  </goal>
  <goal name="VC max_ext.3" expl="precondition">
  <proof prover="0"><result status="valid" time="0.00" steps="7"/></proof>
  </goal>
  <goal name="VC max_ext.4" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.00" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC max_decomp" expl="VC for max_decomp">
 <transf name="split_goal_wp">
  <goal name="VC max_decomp.1" expl="assertion">
  <transf name="split_goal_wp">
   <goal name="VC max_decomp.1.1" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="5"/></proof>
   </goal>
   <goal name="VC max_decomp.1.2" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
   <goal name="VC max_decomp.1.3" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_decomp.2" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC max_decomp.3" expl="precondition">
  <proof prover="0"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC max_decomp.4" expl="assertion">
  <transf name="split_goal_wp">
   <goal name="VC max_decomp.4.1" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.01" steps="24"/></proof>
   </goal>
   <goal name="VC max_decomp.4.2" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="22"/></proof>
   </goal>
   <goal name="VC max_decomp.4.3" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="7"/></proof>
   </goal>
   <goal name="VC max_decomp.4.4" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
   <goal name="VC max_decomp.4.5" expl="VC for max_decomp">
   <proof prover="0"><result status="valid" time="0.00" steps="9"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_decomp.5" expl="postcondition">
  <transf name="split_all_full">
   <goal name="VC max_decomp.5.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.00" steps="5"/></proof>
   </goal>
   <goal name="VC max_decomp.5.2" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.00" steps="6"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="InfIntMatrix" sum="4514fca891050e83c8b1d55b89e468b7" expanded="true">
 <goal name="id_def" expl="">
 <proof prover="0"><result status="valid" time="0.01" steps="23"/></proof>
 <proof prover="2"><result status="valid" time="0.05"/></proof>
 <proof prover="3"><result status="valid" time="0.01"/></proof>
 <transf name="split_goal_wp">
  <goal name="id_def.1" expl="">
  <proof prover="0"><result status="valid" time="0.00" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_get" expl="">
 <proof prover="0"><result status="valid" time="0.13" steps="149"/></proof>
 <proof prover="2"><result status="valid" time="0.03"/></proof>
 <proof prover="3"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="add_sizes" expl="">
 <proof prover="0"><result status="valid" time="0.11" steps="213"/></proof>
 <proof prover="2"><result status="valid" time="0.07"/></proof>
 </goal>
 <goal name="zero_neutral" expl="">
 <transf name="split_goal_wp">
  <goal name="zero_neutral.1" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="zero_neutral.2" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="opp_involutive" expl="">
 <transf name="split_goal_wp">
  <goal name="opp_involutive.1" expl="">
  <proof prover="0"><result status="valid" time="0.05" steps="109"/></proof>
  </goal>
  <goal name="opp_involutive.2" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="atom_oob" expl="">
 <transf name="split_goal_wp">
  <goal name="atom_oob.1" expl="">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="atom_oob.2" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="8"/></proof>
  <proof prover="1"><result status="valid" time="0.01"/></proof>
  </goal>
  <goal name="atom_oob.3" expl="">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="atom_oob.4" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cell_oob_r" expl="">
 <transf name="split_goal_wp">
  <goal name="cell_oob_r.1" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="7"/></proof>
  </goal>
  <goal name="cell_oob_r.2" expl="">
  <proof prover="0"><result status="valid" time="0.02" steps="15"/></proof>
  </goal>
  <goal name="cell_oob_r.3" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="cell_oob_r.4" expl="">
  <proof prover="1"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="cell_oob_r.5" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="cell_oob_r.6" expl="">
  <proof prover="0"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cell_oob_c" expl="">
 <transf name="split_goal_wp">
  <goal name="cell_oob_c.1" expl="">
  <proof prover="0"><result status="valid" time="0.02" steps="7"/></proof>
  </goal>
  <goal name="cell_oob_c.2" expl="">
  <proof prover="0"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="cell_oob_c.3" expl="">
  <proof prover="0"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="cell_oob_c.4" expl="">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="cell_oob_c.5" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
  <goal name="cell_oob_c.6" expl="">
  <proof prover="0"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mul_sizes" expl="" expanded="true">
 <proof prover="0"><result status="unknown" time="0.02"/></proof>
 <proof prover="1"><result status="timeout" time="4.93"/></proof>
 </goal>
 <goal name="id_neutral_r" expl="" expanded="true">
 <proof prover="0"><result status="unknown" time="0.03"/></proof>
 <proof prover="1"><result status="timeout" time="4.97"/></proof>
 </goal>
 <goal name="id_neutral_l" expl="" expanded="true">
 <proof prover="0"><result status="unknown" time="0.01"/></proof>
 <proof prover="1"><result status="timeout" time="4.92"/></proof>
 </goal>
</theory>
</file>
</why3session>
