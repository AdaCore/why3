
(* Type with a key. Intended to factor elements/bindings representations
   in sets/map-like structures, so it is essentially intended for two cases:
   - t 'a 'b = key 'a
   - t 'a 'b = key 'a * 'b *)
theory KeyType
  
  type t 'a 'b
  type key 'a
  function key (t 'a 'b) : key 'a
  
end

module ProgramKeyType
  
  use import program_type.TypeParams
  clone program_type.Type1 as K
  clone program_type.Type2 as D
  
  clone export KeyType with type t = D.m, type key = K.m
  
  val get_key (ghost p1:type_params 'a 'b)
    (ghost p2:type_params 'c 'd)
    (t:D.t 'a 'b 'c 'd) : K.t 'a 'b
    requires { (D.make_params p1 p2).inv t }
    ensures { (K.make_params p1).inv result }
    ensures { key ((D.make_params p1 p2).mdl t) =
      (K.make_params p1).mdl result }
  
end

