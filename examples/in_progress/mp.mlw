

(** {1 Multi-precision integer arithmetic} *)


(** {1 Natural numbers} *)

module N

  use import map.Map
  use import mach.array.Array31
  use import mach.int.Int31
  use import ref.Ref

  use import int.Int
  use import int.Power

  (** {2 unbounded precision natural numbers}

  these are represented by an array of "limbs". A limb is expected to
  be a machine word, abstractly it can be any unsigned integer type
  *)

(*i FIXME: does not allow extraction...

  type limb

  clone mach.int.Unsigned as Limb
    with type t = limb

  axiom limb_max_bound: 1 <= Limb.max

  constant radix : int = Limb.max + 1

*)

(*i temporary: stick to uint32 *)

  use mach.int.UInt32 as Limb

  type limb = Limb.uint32

  lemma limb_max_bound: 1 <= Limb.max_uint32

  constant radix : int = Limb.max_uint32 + 1

(**)

  function l2i (x:limb) : int = Limb.to_int x

  function p2i (i:int31) : int = Int31.to_int i

  type t = { mutable digits: array limb }

  (** {2 Integer value of a natural number} *)

  (** [value_sub x n m] denotes the integer represented by
     the digits x[n..m-1] with lsb at index n *)
  function value_sub (x:map int limb) (n:int) (m:int) : int
  (* =
     if n < m then
        x.[n] + radix * value_sub x (n+1) m
       else 0
  *)
  axiom value_sub_next:
    forall x,n,m.
      value_sub x n m =
        if n < m then
          l2i (Map.get x n) + radix * value_sub x (n+1) m
        else 0

  use map.MapEq

  let rec lemma value_sub_frame (x y:map int limb) (n m:int)
    requires { MapEq.map_eq_sub x y n m }
    variant  { m - n }
    ensures  { value_sub x n m = value_sub y n m }
  =
    if n < m then value_sub_frame x y (n+1) m else ()

  let rec lemma value_sub_tail (x:map int limb) (n m:int)
    requires { n <= m }
    variant  { m - n }
    ensures  {
      value_sub x n (m+1) =
        value_sub x n m + l2i (Map.get x m) * power radix (m-n) }
  = if n < m then value_sub_tail x (n+1) m else ()

  let rec lemma value_sub_concat (x:map int limb) (n m l:int)
    requires { n <= m <= l}
    variant  { m - n }
    ensures  {
      value_sub x n l =
        value_sub x n m + value_sub x m l * power radix (m-n) }
  = if n < m then value_sub_concat x (n+1) m l else ()

  function value_array (x:array limb) : int =
    value_sub x.elts 0 (p2i x.length)

  function value (x:t) : int = value_array x.digits

  let lemma value_sub_update (x:map int limb) (i n m:int) (v:limb)
    requires { n <= i < m }
    ensures {
      value_sub (Map.set x i v) n m =
      value_sub x n m + power radix (i - n) * (l2i v - l2i (Map.get x i))
    }
  = assert { MapEq.map_eq_sub x (Map.set x i v) n i };
    assert { MapEq.map_eq_sub x (Map.set x i v) (i+1) m };
    value_sub_concat x n i m;
    value_sub_concat (Map.set x i v) n i m

  let rec lemma value_zero (x:map int limb) (n m:int)
    requires { MapEq.map_eq_sub x (Map.const Limb.zero_unsigned) n m }
    variant  { m - n }
    ensures  { value_sub x n m = 0 }
  = if n < m then value_zero x (n+1) m else ()


(** {2 conversion from a small integer} *)

  let zero () =
    { digits = Array31.make (Int31.of_int 0) (Limb.of_int 0) }

  let from_limb (n:limb) : t
    ensures { value result = l2i n }
  = { digits = Array31.make (Int31.of_int 1) n }


(** {2 copy, enlarge} *)

  let copy (x:t) : t
    ensures { value result = value x }
  = let limb_zero = Limb.of_int 0 in
    let zero = Int31.of_int 0 in
    let lx = x.digits.length in
    let r = Array31.make lx limb_zero in
    Array31.blit x.digits zero r zero lx;
    assert { MapEq.map_eq_sub x.digits.elts r.elts 0 (p2i lx) };
    { digits = r }

  let enlarge (x:t) (l:int31) : unit
    requires { p2i l > p2i x.digits.length }
    writes  { x }
    ensures { x.digits.length = l }
    ensures { MapEq.map_eq_sub x.digits.elts (Map.const Limb.zero_unsigned)
                (p2i (old x).digits.length) (p2i l) }
    ensures { value x = value (old x) }
  = 'Init:
    let limb_zero = Limb.of_int 0 in
    let zero = Int31.of_int 0 in
    let lx = x.digits.length in
    let r = Array31.make l limb_zero in
    assert { MapEq.map_eq_sub r.elts (Map.const limb_zero) (p2i lx) (p2i l) };
    Array31.blit x.digits zero r zero lx;
    assert { MapEq.map_eq_sub x.digits.elts r.elts 0 (p2i lx) };
    assert { value_sub x.digits.elts 0 (p2i lx) = value (at x 'Init) };
    assert { MapEq.map_eq_sub r.elts (Map.const limb_zero) (p2i lx) (p2i l) };
    assert { value_sub r.elts (p2i lx) (p2i l) = 0 };
    assert { value_sub r.elts 0 (p2i l) = value_sub r.elts 0 (p2i lx)
           + value_sub r.elts (p2i lx) (p2i l) * power radix (p2i lx) };
    x.digits <- r


(** {2 Comparisons} *)


  let rec lemma value_sub_lower_bound (x:map int limb) (x1 x2:int)
    variant  { x2 - x1 }
    ensures  { 0 <= value_sub x x1 x2 }
  = if x2 <= x1 then () else
      begin
        assert { value_sub x x1 x2 = l2i (Map.get x x1) + radix * value_sub x (x1+1) x2};
        value_sub_lower_bound x (x1+1) x2
      end

  let rec lemma value_sub_upper_bound (x:map int limb) (x1 x2:int)
    requires { x1 <= x2 }
    variant  { x2 - x1 }
    ensures  { value_sub x x1 x2 < power radix (x2 - x1) }
  = if x1 = x2 then () else
      begin
      assert { value_sub x x1 x2 <= value_sub x x1 (x2-1) + power radix (x2-x1-1) * (radix - 1) };
      value_sub_upper_bound x x1 (x2-1)
      end

  let lemma value_sub_lower_bound_tight (x:map int limb) (x1 x2:int)
    requires { x1 < x2 }
    ensures  { power radix (x2-x1-1) *  l2i (Map.get x (x2-1)) <= value_sub x x1 x2 }
  = assert   { value_sub x x1 x2 = value_sub x x1 (x2-1)
               + power radix (x2-x1-1) * l2i (Map.get x (x2-1)) }

  let lemma value_sub_upper_bound_tight (x:map int limb) (x1 x2:int)
    requires { x1 < x2 }
    ensures  { value_sub x x1 x2 < power radix (x2-x1-1) *  (l2i (Map.get x (x2-1)) + 1) }
  = value_sub_upper_bound x x1 (x2-1)

  exception Break31 int31

  function compare_int (x y:int) : int =
    if x < y then -1 else if x=y then 0 else 1

  let compare_limbs (x y:array limb) (x1 x2 y1 y2:int31) : int31
    requires { 0 <= p2i x1 <= p2i x2 <= p2i x.length }
    requires { 0 <= p2i y1 <= p2i y2 <= p2i y.length }
    requires { p2i x2 - p2i x1 >= p2i y2 - p2i y1 }
    ensures  { p2i result = compare_int
      (value_sub x.elts (p2i x1) (p2i x2))
      (value_sub y.elts (p2i y1) (p2i y2)) }
  = let limb_zero = Limb.of_int 0 in
    let zero = Int31.of_int 0 in
    let one = Int31.of_int 1 in
    let minus_one = Int31.(-_) one in
    let i = ref x2 in
    let x3 = Int31.(+) x1 (Int31.(-) y2 y1) in
    try
      while Int31.(>) !i x3 do
        invariant { p2i x3 <= p2i !i <= p2i x2 }
        invariant { value_sub x.elts (p2i !i) (p2i x2) = 0 }
        variant { p2i !i }
        i := Int31.(-) !i one;
        if Limb.ne x[!i] limb_zero then
          begin
            assert { l2i x[p2i !i] >= 1 };
            assert { value_sub x.elts (p2i x1) (p2i !i + 1) >=
                     power radix (p2i !i - p2i x1) * l2i x[p2i !i] };
            assert { power radix (p2i !i - p2i x1) * l2i x[p2i !i] >= power radix (p2i !i - p2i x1) };
            assert { value_sub x.elts (p2i x1) (p2i x2) = value_sub x.elts (p2i x1) (p2i !i + 1)
                      + power radix (p2i !i + 1 - p2i x1) * value_sub x.elts (p2i !i + 1) (p2i x2)};
            assert { value_sub x.elts (p2i x1) (p2i x2) >= power radix (p2i !i - p2i x1) };
            assert { value_sub y.elts (p2i y1) (p2i y2) < power radix (p2i y2 - p2i y1) };
            assert { power radix (p2i y2 - p2i y1) <= power radix (p2i !i - p2i x1) };
            raise (Break31 one);
          end
      done;
      while Int31.(>) !i x1 do
        invariant { p2i x1 <= p2i !i <= p2i x3 }
        invariant {
          value_sub x.elts (p2i !i) (p2i x2) =
          value_sub y.elts (p2i y1 + (p2i !i - p2i x1)) (p2i y2) }
        variant { p2i !i }
        i := Int31.(-) !i one;
        let j = Int31.(+) y1 (Int31.(-) !i x1) in
        assert { value_sub x.elts (p2i x1) (p2i x2) = value_sub x.elts (p2i x1) (p2i !i + 1)
                 + power radix (p2i !i + 1 - p2i x1) * value_sub x.elts (p2i !i + 1) (p2i x2)};
        assert { value_sub y.elts (p2i y1) (p2i y2) = value_sub y.elts (p2i y1) (p2i j + 1)
                 + power radix (p2i j + 1 - p2i y1) * value_sub y.elts (p2i j + 1) (p2i y2)};
        if Limb.(<) x[!i] y[j] then
          begin
            assert {  value_sub x.elts (p2i x1) (p2i !i + 1) < power radix (p2i !i - p2i x1) * (l2i x[p2i !i] + 1) };
            assert {  power radix (p2i !i - p2i x1) * (l2i x[p2i !i] + 1) <= power radix (p2i j - p2i y1) * l2i y[p2i j] };
            assert {  power radix (p2i j - p2i y1) * l2i y[p2i j] <= value_sub y.elts (p2i y1) (p2i j + 1) };
            raise (Break31 minus_one);
          end;
        if Limb.(>) x[!i] y[j] then
           begin
            assert {  value_sub y.elts (p2i y1) (p2i j + 1) < power radix (p2i j - p2i y1) * (l2i y[p2i j] + 1) };
            assert {  power radix (p2i j - p2i y1) * (l2i y[p2i j] + 1) <= power radix (p2i !i - p2i x1) * l2i x[p2i !i] };
            assert {  power radix (p2i !i - p2i x1) * l2i x[p2i !i] <= value_sub x.elts (p2i x1) (p2i !i + 1) };
             raise (Break31 one);
           end
      done;
      zero
    with Break31 x -> x
    end



  let compare (x y:t) : int31
    ensures  { p2i result = compare_int (value x) (value y) }
  = let zero = Int31.of_int 0 in
    let lx = x.digits.length in
    let ly = y.digits.length in
    if Int31.(>=) lx ly then compare_limbs x.digits y.digits zero lx zero ly
    else Int31.(-_) (compare_limbs y.digits x.digits zero ly zero lx)



(** {2 Addition} *)

  exception Break

  let add_limb (x:array limb) (y:limb) (x1 x2:int31) : limb
    requires { 0 <= p2i x1 <= p2i x2 <= p2i x.length }
    writes  { x }
    ensures { forall j. 0 <= j < p2i x1 \/ p2i x2 <= j < p2i x.length -> x[j] = (old x)[j] }
    ensures { value_array x + power radix (p2i x2) * l2i result
      = value_array (old x) + power radix (p2i x1) * l2i y }
  = 'Init:
    let limb_zero = Limb.of_int 0 in
    let one = Int31.of_int 1 in
    let i = ref x1 in
    let c = ref y in
    while Int31.(<) !i x2 && Limb.ne !c limb_zero do
      invariant { forall j. 0 <= j < p2i x1 \/ p2i x2 <= j < p2i x.length ->
                  x[j] = (at x 'Init)[j] }
      invariant { p2i x1 <= p2i !i <= p2i x2 }
      invariant {
        value_array x + power radix (p2i !i) * l2i !c =
        value_array (at x 'Init) + power radix (p2i x1) * l2i y }
      variant { p2i x2 - p2i !i }
      let (r,c') = Limb.add_with_carry x[!i] !c limb_zero in
      'L:
      x[!i] <- r;
      assert { value_array x = value_array (at x 'L)
        + power radix (p2i !i) * (l2i r - l2i (at x 'L)[p2i !i]) };
      c := c';
      i := Int31.(+) !i one;
    done;
    !c

  let add_limbs (x y:array limb) (x1 x2 y1 y2:int31) : limb
    requires { 0 <= p2i x1 <= p2i x2 <= p2i x.length }
    requires { 0 <= p2i y1 <= p2i y2 <= p2i y.length }
    requires { p2i x2 - p2i x1 >= p2i y2 - p2i y1 }
    writes { x }
    ensures { forall j. 0 <= j < p2i x1 \/ p2i x2 <= j < p2i x.length -> x[j] = (old x)[j] }
    ensures {
      value_array x + power radix (p2i x2) * l2i result
      = value_array (old x) +
        power radix (p2i x1) * value_sub y.elts (p2i y1) (p2i y2) }
  = 'Init:
    let limb_zero = Limb.of_int 0 in
    let one = Int31.of_int 1 in
    let i = ref y1 in
    let c = ref limb_zero in
    while Int31.(<) !i y2 do
      invariant { forall j. 0 <= j < p2i x1 \/ p2i x2 <= j < p2i x.length ->
                  x[j] = (at x 'Init)[j] }
      invariant { p2i y1 <= p2i !i <= p2i y2 }
      invariant {
        let j = p2i x1 + (p2i !i - p2i y1) in
        value_array x + power radix j * l2i !c
      = value_array (at x 'Init) +
        power radix (p2i x1) * value_sub y.elts (p2i y1) (p2i !i) }
      invariant { 0 <= l2i !c <= 1 }
      variant { p2i y2 - p2i !i }
      let j = Int31.(+) x1 (Int31.(-) !i y1) in
      let (r,c') = Limb.add_with_carry x[j] y[!i] !c in
      'L:
      x[j] <- r;
      assert { value_array x = value_array (at x 'L)
        + power radix (p2i j) * (l2i r - l2i (at x 'L)[p2i j]) };
      assert { value_sub y.elts (p2i y1) (p2i !i + 1) =
         value_sub y.elts (p2i y1) (p2i !i)
         + power radix (p2i !i - p2i y1) * l2i y[p2i !i] };
      assert { power radix (p2i x1 + (p2i !i + 1 - p2i y1)) = power radix (p2i j) * radix };
      assert { power radix (p2i x1 + (p2i !i - p2i y1))
             = power radix (p2i x1) * power radix (p2i !i - p2i y1) };
      c := c';
      i := Int31.(+) !i one;
    done;
    add_limb x !c (Int31.(+) x1 (Int31.(-) y2 y1)) x2

  exception TooManyDigits

  let add_aux_in_place (x:t) (y:array limb) : unit
    requires { p2i x.digits.length >= p2i y.length }
    writes   { x.digits, x.digits.elts }
    ensures  { value x = value (old x) + value_array y }
    raises   { TooManyDigits -> true }
  = 'Init:
    let zero = Int31.of_int 0 in
    let one = Int31.of_int 1 in
    let limb_zero = Limb.of_int 0 in
    let lx = x.digits.length in
    let c = add_limbs x.digits y zero lx zero y.length in
    assert {
      value x + power radix (p2i lx) * l2i c =
      value (at x 'Init) + value_array y };
    if Limb.eq c limb_zero then () else
    begin
    (* we enlarge x *)
    if Int31.eq lx (of_int 0x3FFFFFFF) then raise TooManyDigits;
    'L:
    enlarge x (Int31.(+) lx one);
    assert { l2i x.digits[p2i lx] = 0 };
    x.digits[lx] <- c;
    assert { value x = value_array (at x.digits 'L) + power radix (p2i lx) * l2i c };
    end

  let add_in_place (x y:t) : unit
    writes  { x.digits, x.digits.elts }
    ensures { value x = value (old x) + value y }
    raises  { TooManyDigits -> true }
  = let lx = x.digits.length in
    let ly = y.digits.length in
    (* TODO: predict carry to enlarge with 1 more cell if carry may occur *)
    if Int31.(<) lx ly then enlarge x ly;
    add_aux_in_place x y.digits



  let add_array (x y:array limb) : array limb
    requires { p2i x.length >= p2i y.length }
    ensures  { value_array result = value_array x + value_array y }
    raises   { TooManyDigits -> true }
  = let zero = Int31.of_int 0 in
    let one = Int31.of_int 1 in
    let limb_zero = Limb.of_int 0 in
    let lx = x.length in
    if Int31.eq lx (of_int 0x3FFFFFFF) then raise TooManyDigits;
    let r = Array31.make (Int31.(+) lx one) limb_zero in
    Array31.blit x zero r zero lx;
    assert { MapEq.map_eq_sub x.elts r.elts 0 (p2i lx) };
    assert { l2i r[p2i lx] = 0 };
    assert { value_array r = value_array x };
    let c = add_limbs r y zero lx zero y.length in
    assert {
      value_array r + power radix (p2i lx) * l2i c = value_array x + value_array y };
    'L:
    assert { l2i r[p2i lx] = 0 };
    r[lx] <- c;
    assert { value_array r = value_array (at r 'L) + power radix (p2i lx) * l2i c };
    r

  let add (x y:t) : t
    ensures { value result = value x + value y }
    raises  { TooManyDigits -> true }
  = (* TODO: just copy x or y and call add_in_place, and throw away add_array *)
    let lx = x.digits.length in
    let ly = y.digits.length in
    if Int31.(>=) lx ly then
      { digits = add_array x.digits y.digits }
    else
      { digits = add_array y.digits x.digits }

(** {2 Multiplication} *)

  let mul_limb (z x:array limb) (y:limb) (z1 x1 x2:int31) : limb
    requires { 0 <= p2i x1 <= p2i x2 <= p2i x.length }
    requires { 0 <= p2i z1 }
    requires { p2i z1 + (p2i x2 - p2i x1) <= p2i z.length }
    writes { z }
    ensures { forall j. 0 <= j < p2i z1 \/ p2i z1 + (p2i x2 - p2i x1) <= j < p2i z.length -> z[j] = (old z)[j] }
    ensures { value_array z + power radix (p2i z1 + (p2i x2 - p2i x1)) * l2i result
      = value_array (old z) + power radix (p2i z1) * (value_sub x.elts (p2i x1) (p2i x2) * l2i y) }
  = 'Init:
    let limb_zero = Limb.of_int 0 in
    let one = Int31.of_int 1 in
    let i = ref x1 in
    let c = ref limb_zero in
    while Int31.(<) !i x2 do
      invariant { forall j. 0 <= j < p2i z1 \/ p2i z1 + (p2i x2 - p2i x1) <= j < p2i z.length ->
                  z[j] = (at z 'Init)[j] }
      invariant { p2i x1 <= p2i !i <= p2i x2 }
      invariant {
        value_array z + power radix (p2i z1 + (p2i !i - p2i x1)) * l2i !c =
        value_array (at z 'Init) + power radix (p2i z1) * (value_sub x.elts (p2i x1) (p2i !i) * l2i y) }
      variant { p2i x2 - p2i !i }
      let (rl,rh) = Limb.mul_double x[!i] y in
      let j = Int31.(+) z1 (Int31.(-) !i x1) in
      let (v,c') = Limb.add3 z[j] rl !c in
      assert { 0 <= l2i z[p2i j] + l2i !c + l2i x[p2i !i] * l2i y <= radix * radix - 1 };
      assert { l2i v + radix * (l2i rh + l2i c') = l2i z[p2i j] + l2i !c + l2i x[p2i !i] * l2i y };
      'L:
      z[j] <- v;
      assert { value_array z = value_array (at z 'L)
        + power radix (p2i z1 + (p2i !i - p2i x1)) * (l2i v - l2i (at z 'L)[p2i z1 + (p2i !i - p2i x1)]) };
      c := Limb.(+) rh c';
      i := Int31.(+) !i one;
    done;
    !c

  let mul_limbs (z x y:array limb) (z1 x1 x2 y1 y2:int31) : limb
    requires { 0 <= p2i x1 <= p2i x2 <= p2i x.length }
    requires { 0 <= p2i y1 <= p2i y2 <= p2i y.length }
    requires { 0 <= p2i z1 }
    requires { p2i z1 + (p2i x2 - p2i x1) + (p2i y2 - p2i y1) <= p2i z.length }
    writes { z }
    ensures { forall j. 0 <= j < p2i z1 \/
      p2i z1 + (p2i x2 - p2i x1) + (p2i y2 - p2i y1) <= j < p2i z.length ->
      x[j] = (old x)[j] }
    ensures { value_array z + power radix (p2i z1 + (p2i x2 - p2i x1) + (p2i y2 - p2i y1)) * l2i result
      = value_array (old z) + power radix (p2i z1) * (value_sub x.elts (p2i x1) (p2i x2) * value_sub y.elts (p2i y1) (p2i y2)) }
  = 'Init:
    let limb_zero = Limb.of_int 0 in
    let one = Int31.of_int 1 in
    let c = ref limb_zero in
    let i = ref y1 in
    while Int31.(<) !i y2 do
      invariant { forall j. 0 <= j < p2i z1 \/ p2i z1 + (p2i x2 - p2i x1) + (p2i y2 - p2i y1) <= j < p2i z.length ->
                  z[j] = (at z 'Init)[j] }
      invariant { p2i y1 <= p2i !i <= p2i y2 }
      invariant {
        value_array z + power radix (p2i z1 + (p2i x2 - p2i x1) + (p2i !i - p2i y1)) * l2i !c =
        value_array (at z 'Init) + power radix (p2i z1) * (value_sub x.elts (p2i x1) (p2i x2) * value_sub y.elts (p2i y1) (p2i !i)) }
      invariant { 0 <= l2i !c <= 1 }
      variant { p2i y2 - p2i !i }
      let j = Int31.(+) z1 (Int31.(-) !i y1) in
      let d = mul_limb z x y[!i] j x1 x2 in
      let k = Int31.(+) j (Int31.(-) x2 x1) in
      let (v,c') = Limb.add_with_carry z[k] d !c in
      z[k] <- v;
      c := c';
      i := Int31.(+) !i one;
    done;
    !c

  let mul (x y:t):t
    ensures { value result = value x * value y }
    raises  { TooManyDigits -> true }
  = let limb_zero = Limb.of_int 0 in
    let zero = Int31.of_int 0 in
    let lx = x.digits.length in
    let ly = y.digits.length in
    if Int31.(>) lx (Int31.(-) (of_int 0x3FFFFFFF) ly) then raise TooManyDigits;
    let zd = Array31.make (Int31.(+) lx ly) limb_zero in
    assert { MapEq.map_eq_sub zd.elts (Map.const limb_zero) 0 (p2i lx + p2i ly) };
    assert { value_sub zd.elts 0 (p2i lx + p2i ly) = 0 };
    let c = mul_limbs zd x.digits y.digits zero zero lx zero ly in
    assert { l2i c = 0 };
    { digits = zd }

end



(*i does not work as expected
module N64

  use import mach.int.Int64

  clone N with type limb = int64

end
*)