(* This file is generated by Why3's Coq-realize driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.
Require list.List.
Require list.Length.
Require list.Mem.
Require list.Append.

(* Why3 goal *)
Lemma reverse_def  {a:Type} {a_WT:WhyType a}: forall (l:(list a)),
  ((List.rev l) = match l with
  | nil => nil
  | (cons x r) => (List.app (List.rev r) (cons x nil))
  end).
Proof.
now intros [|x l].
Qed.

(* Why3 goal *)
Lemma reverse_append : forall {a:Type} {a_WT:WhyType a}, forall (l1:(list a))
  (l2:(list a)) (x:a),
  ((List.app (List.rev (cons x l1)) l2) = (List.app (List.rev l1) (cons x l2))).
Proof.
intros a a_WT l1 l2 x.
simpl.
now rewrite <- List.app_assoc.
Qed.

(* Why3 goal *)
Lemma reverse_reverse : forall {a:Type} {a_WT:WhyType a},
  forall (l:(list a)), ((List.rev (List.rev l)) = l).
Proof.
intros a a_WT l.
apply List.rev_involutive.
Qed.

(* Why3 goal *)
Lemma Reverse_length : forall {a:Type} {a_WT:WhyType a}, forall (l:(list a)),
  ((list.Length.length (List.rev l)) = (list.Length.length l)).
Proof.
intros a a_WT l.
rewrite 2!Length.length_std.
now rewrite List.rev_length.
Qed.


