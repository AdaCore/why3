(* This file is generated by Why3's Coq-realize driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require Import Rbasic_fun.
Require BuiltIn.
Require real.Real.

(* Why3 goal *)
Definition abs: R -> R.
exact Rabs.
Defined.

(* Why3 goal *)
Lemma abs_def : forall (x:R), ((0%R <= x)%R -> ((abs x) = x)) /\
  ((~ (0%R <= x)%R) -> ((abs x) = (-x)%R)).
split ; intros H.
apply Rabs_right.
now apply Rle_ge.
apply Rabs_left.
now apply Rnot_le_lt.
Qed.

(* Why3 goal *)
Lemma Abs_le : forall (x:R) (y:R), ((abs x) <= y)%R <-> (((-y)%R <= x)%R /\
  (x <= y)%R).
intros x y.
unfold abs, Rabs.
case Rcase_abs ; intros H ; (split ; [intros H0;split | intros (H0,H1)]).
rewrite <- (Ropp_involutive x).
now apply Ropp_le_contravar.
apply Rlt_le.
apply Rlt_le_trans with (1 := H).
apply Rle_trans with (2 := H0).
rewrite <- Ropp_0.
apply Ropp_le_contravar.
now apply Rlt_le.
rewrite <- (Ropp_involutive y).
now apply Ropp_le_contravar.
apply Rge_le in H.
apply Rle_trans with (2 := H).
apply Rle_trans with (Ropp x).
now apply Ropp_le_contravar.
rewrite <- Ropp_0.
now apply Ropp_le_contravar.
exact H0.
exact H1.
Qed.

(* Why3 goal *)
Lemma Abs_pos : forall (x:R), (0%R <= (abs x))%R.
exact Rabs_pos.
Qed.

(* Why3 goal *)
Lemma Abs_sum : forall (x:R) (y:R),
  ((abs (x + y)%R) <= ((abs x) + (abs y))%R)%R.
exact Rabs_triang.
Qed.

(* Why3 goal *)
Lemma Abs_prod : forall (x:R) (y:R),
  ((abs (x * y)%R) = ((abs x) * (abs y))%R).
exact Rabs_mult.
Qed.

(* Why3 goal *)
Lemma triangular_inequality : forall (x:R) (y:R) (z:R),
  ((abs (x - z)%R) <= ((abs (x - y)%R) + (abs (y - z)%R))%R)%R.
intros x y z.
replace (x - z)%R with ((x - y) + (y - z))%R by ring.
apply Rabs_triang.
Qed.


