(* This file is generated by Why3's Coq-realize driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require set.Set.
Require settheory.Relation.
Require settheory.InverseDomRan.
Require settheory.Function.

Import set.Set.

(* Why3 goal *)
Definition id: forall {a:Type} {a_WT:WhyType a}, (set.Set.set a) ->
  (set.Set.set (a* a)%type).
intros a a_WT s.
exact (fun p => match p with (x,y) => s x /\ x=y end).
Defined.

(* Why3 goal *)
Lemma id_def : forall {a:Type} {a_WT:WhyType a}, forall (x:a) (y:a)
  (s:(set.Set.set a)), (set.Set.mem (x, y) (id s)) <-> ((set.Set.mem x s) /\
  (x = y)).
intros a a_WT x y s.
unfold id, mem; tauto.
Qed.

Import settheory.InverseDomRan.

(* Why3 goal *)
Lemma id_dom : forall {a:Type} {a_WT:WhyType a}, forall (s:(set.Set.set a)),
  ((settheory.InverseDomRan.dom (id s)) = s).
intros a a_WT s.
apply predicate_extensionality.
unfold id, dom, mem; split.
unfold mem.
intros (y, (h1, h2)); auto.
unfold mem.
intro h.
exists x; tauto.
Qed.

(* Why3 goal *)
Lemma id_ran : forall {a:Type} {a_WT:WhyType a}, forall (s:(set.Set.set a)),
  ((settheory.InverseDomRan.ran (id s)) = s).
intros a a_WT s.
apply predicate_extensionality.
unfold id, ran, mem; split.
unfold mem.
intros (y, (h1, h2)); subst; auto.
unfold mem.
intro h.
exists x; tauto.
Qed.

(* Why3 goal *)
Lemma id_fun : forall {a:Type} {a_WT:WhyType a}, forall (s:(set.Set.set a)),
  (set.Set.mem (id s) (settheory.Function.infix_plmngt s s)).
intros a a_WT s.
unfold Function.infix_plmngt, mem.
split.
rewrite id_dom.
apply subset_refl.
split.
rewrite id_ran.
apply subset_refl.
unfold id; intuition.
subst; auto.
Qed.

(* Why3 goal *)
Lemma id_total_fun : forall {a:Type} {a_WT:WhyType a}, forall (s:(set.Set.set
  a)), (set.Set.mem (id s) (settheory.Function.infix_mnmngt s s)).
intros a a_WT s.
unfold Function.infix_mnmngt, mem.
split.
apply id_fun.
apply id_dom.
Qed.


