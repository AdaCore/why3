(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require set.Set.
Require settheory.Relation.

Import set.Set.

(* Why3 goal *)
Definition image: forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  (set.Set.set (a* b)%type) -> (set.Set.set a) -> (set.Set.set b).
intros a a_WT b b_WT r s.
exact (fun y => exists x:a, mem x s /\ mem (x,y) r).
Defined.

(* Why3 goal *)
Lemma mem_image : forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (r:(set.Set.set (a* b)%type)) (dom:(set.Set.set a)) (y:b),
  (set.Set.mem y (image r dom)) <-> exists x:a, (set.Set.mem x dom) /\
  (set.Set.mem (x, y) r).
intros a a_WT b b_WT r dom y.
unfold image, mem; intuition.
Qed.

(* Why3 goal *)
Lemma image_union : forall {a:Type} {a_WT:WhyType a}
  {b:Type} {b_WT:WhyType b}, forall (r:(set.Set.set (a* b)%type))
  (s:(set.Set.set a)) (t:(set.Set.set a)), ((image r (set.Set.union s
  t)) = (set.Set.union (image r s) (image r t))).
intros a a_WT b b_WT r s t.
apply predicate_extensionality; intros y.
unfold image, union, mem.
split.
intros (x, ([h1 | h2] & h3)).
left; exists x; auto.
right; exists x; auto.
intros [(x, h) | (x, h)]; exists x; intuition.
Qed.

(* Why3 goal *)
Lemma image_add : forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (r:(set.Set.set (a* b)%type)) (dom:(set.Set.set a)) (x:a), ((image r
  (set.Set.add x dom)) = (set.Set.union (image r (set.Set.add x
  (set.Set.empty :(set.Set.set a)))) (image r dom))).
intros a a_WT b b_WT r dom z.
apply predicate_extensionality; intros y.
unfold image, union, add, mem.
split.
intros (x, ([h1 | h2] & h3)).
left; exists x; auto.
right; exists x; auto.
intros [(x, h) | (x, h)].
exists x; intuition.
elimtype False; apply H1.
exists x; intuition.
Qed.


