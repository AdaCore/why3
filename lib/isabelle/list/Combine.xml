<theory name="list.Combine" realize="true"><realized><require name="why3.BuiltIn.BuiltIn"/><require name="list.List"/></realized><function><eqn altname="combine" path="list.Combine"><app><const name="HOL.eq"/><app><var name="combine"><fun><type name="List.list"><tvar name="a"/></type><type name="List.list"><tvar name="b"/></type><type name="List.list"><prodt><tvar name="a"/><tvar name="b"/></prodt></type></fun></var><var name="x"><type name="List.list"><tvar name="a"/></type></var><var name="y"><type name="List.list"><tvar name="b"/></type></var></app><case><prod><var name="x"><type name="List.list"><tvar name="a"/></type></var><var name="y"><type name="List.list"><tvar name="b"/></type></var></prod><pat><prod><app><const name="List.list.Cons"/><var name="x0"><tvar name="a"/></var><var name="x1"><type name="List.list"><tvar name="a"/></type></var></app><app><const name="List.list.Cons"/><var name="y0"><tvar name="b"/></var><var name="y1"><type name="List.list"><tvar name="b"/></type></var></app></prod><app><const name="List.list.Cons"/><prod><var name="x0"><tvar name="a"/></var><var name="y0"><tvar name="b"/></var></prod><app><var name="combine"><fun><type name="List.list"><tvar name="a"/></type><type name="List.list"><tvar name="b"/></type><type name="List.list"><prodt><tvar name="a"/><tvar name="b"/></prodt></type></fun></var><var name="x1"><type name="List.list"><tvar name="a"/></type></var><var name="y1"><type name="List.list"><tvar name="b"/></type></var></app></app></pat><pat><const name="Pure.dummy_pattern"/><const name="List.list.Nil"><type name="List.list"><prodt><tvar name="a"/><tvar name="b"/></prodt></type></const></pat></case></app></eqn></function></theory>