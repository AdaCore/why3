

(* obsolete
module M

  use import int.Int
  use import module ref.Ref

  val x : ref int

  goal A : !x = 0

  goal B : (old !x) = 0

  function f (n:int) : int = n + ! x

  goal C : f(3) = 4

end
*)


module Termination


  type t = A t | B

  predicate p (x:t) =
    match x with
    | A y -> p y
    | B -> true
    end

  predicate q (x:t) =
    match x with
    | A (A y) -> q y
    | A y -> false
    | B -> true
    end

  type t1 = E t2
  with t2 = C t1 | D

  predicate r (x:t1) =
    match x with
    | E (C y) -> r y
    | E D -> true
    end


end