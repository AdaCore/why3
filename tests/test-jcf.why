
theory TestCoq
  use import list.List
  use import list.Append

  lemma append_nil: forall l: list 'a. Nil ++ l = l
end

theory Bijection
  use export int.Int
  function n : int
  function f int : int
  axiom dom_f : forall i: int. 0 <= i < n -> 0 <= f i < n
  function g int : int
  axiom gf : forall i: int. 0 <= i < n -> g (f i) = i
end

theory Test1
  function id (i: int) : int = i
  clone import Bijection with function f = id, lemma dom_f
  goal G: n > 4 -> g (id 4) = 4
end

theory Order
  type t
  predicate (<=) t t

  axiom le_refl : forall x : t. x <= x
  axiom le_asym : forall x y : t. x <= y -> y <= x -> x = y
  axiom le_trans: forall x y z : t. x <= y -> y <= z -> x <= z
end

(*
Local Variables: 
compile-command: "make -C .. tests/test-jcf.gui"
End: 
*)

