

module Power

  use import int.Int

  function power int int : int
  axiom power_0 : forall x:int. power x 0 = 1
  axiom power_s : forall x n:int. n >= 0 ->
    power x (n+1) = x * power x n

(* turn the following lemma into a lemma function : *)

  lemma power_1 : forall x:int. power x 1 = x

(* idem *)

  lemma sqrt4_256 : exists x:int. power x 4 = 256

(* idem *)

 lemma power_sum : forall x n m: int.
    0 <= n /\ 0 <= m ->
    power x (n+m) = power x n * power x m

(* Fermat's little theorem for n = 3 *)

  lemma power_0_left : forall n. n >= 1 -> power 0 n = 0

  lemma power_3 : forall x. x >= 1 ->
    power (x-1) 3 = power x 3 - 3 * x * x + 3 * x - 1

  let rec ghost little_fermat_3 (x : int) : int
    requires { x >= 0 }
    variant { x }
    ensures { power x 3 - x = 3 * result }
  = if x = 0 then 0
    else let r = little_fermat_3 (x-1) in
    r + x * x - x

end


(*
Local Variables:
compile-command: "why3 ide lemma_functions.mlw"
End:
*)
