theory Why2
  use int.Int
  use real.Real
  use bool.Bool
  use unit.Unit
  logic eq_unit (Unit.unit, Unit.unit)
  
  logic neq_unit (Unit.unit, Unit.unit)
  
  logic eq_bool (Bool.bool, Bool.bool)
  
  logic neq_bool (Bool.bool, Bool.bool)
  
  logic lt_int (int, int)
  
  logic le_int (int, int)
  
  logic gt_int (int, int)
  
  logic ge_int (int, int)
  
  logic eq_int (int, int)
  
  logic neq_int (int, int)
  
  logic add_int (int, int) : int
  
  logic sub_int (int, int) : int
  
  logic mul_int (int, int) : int
  
  logic div_int (int, int) : int
  
  logic mod_int (int, int) : int
  
  logic neg_int (int) : int
  
  logic zwf_zero(a: int, b: int) = (Int.(<=)(0, b) and Int.(<)(a, b))
  
  type 'a mybag
  
  logic empty_mybag  : 'a1 mybag
  
  logic all_mybag  : 'a1 mybag
  
  logic in_mybag ('a1, 'a1 mybag)
  
  logic inter_mybag ('a1 mybag, 'a1 mybag) : 'a1 mybag
  
  logic rem_mybag ('a1, 'a1 mybag) : 'a1 mybag
  
  logic bool_and (Bool.bool, Bool.bool) : Bool.bool
  
  logic bool_or (Bool.bool, Bool.bool) : Bool.bool
  
  logic bool_xor (Bool.bool, Bool.bool) : Bool.bool
  
  logic bool_not (Bool.bool) : Bool.bool
  
  axiom Bool_and_def:
    (forall a:Bool.bool.
      (forall b:Bool.bool.
        (((bool_and(a, b) : Bool.bool) = Bool.True) <->
         ((a = Bool.True) and (b = Bool.True)))))
  
  axiom Bool_or_def:
    (forall a:Bool.bool.
      (forall b:Bool.bool.
        (((bool_or(a, b) : Bool.bool) = Bool.True) <->
         ((a = Bool.True) or (b = Bool.True)))))
  
  axiom Bool_xor_def:
    (forall a:Bool.bool.
      (forall b:Bool.bool.
        (((bool_xor(a, b) : Bool.bool) = Bool.True) <-> (a <> b))))
  
  axiom Bool_not_def:
    (forall a:Bool.bool.
      (((bool_not(a) : Bool.bool) = Bool.True) <-> (a = Bool.False)))
  
  logic ite (Bool.bool, 'a1, 'a1) : 'a1
  
  axiom Ite_true:
    (forall x:'a1. (forall y:'a1. ((ite(Bool.True, x, y) : 'a1) = x)))
  
  axiom Ite_false:
    (forall x:'a1. (forall y:'a1. ((ite(Bool.False, x, y) : 'a1) = y)))
  
  logic lt_int_bool (int, int) : Bool.bool
  
  logic le_int_bool (int, int) : Bool.bool
  
  logic gt_int_bool (int, int) : Bool.bool
  
  logic ge_int_bool (int, int) : Bool.bool
  
  logic eq_int_bool (int, int) : Bool.bool
  
  logic neq_int_bool (int, int) : Bool.bool
  
  axiom Lt_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((lt_int_bool(x, y) : Bool.bool) = Bool.True) <-> Int.(<)(x, y))))
  
  axiom Le_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((le_int_bool(x, y) : Bool.bool) = Bool.True) <-> Int.(<=)(x, y))))
  
  axiom Gt_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((gt_int_bool(x, y) : Bool.bool) = Bool.True) <-> Int.(>)(x, y))))
  
  axiom Ge_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((ge_int_bool(x, y) : Bool.bool) = Bool.True) <-> Int.(>=)(x, y))))
  
  axiom Eq_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((eq_int_bool(x, y) : Bool.bool) = Bool.True) <-> (x = y))))
  
  axiom Neq_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((neq_int_bool(x, y) : Bool.bool) = Bool.True) <-> (x <> y))))
  
  logic abs_int (int) : int
  
  axiom Abs_int_pos:
    (forall x:int. (Int.(>=)(x, 0) -> ((abs_int(x) : int) = x)))
  
  axiom Abs_int_neg:
    (forall x:int.
      (Int.(<=)(x, 0) -> ((abs_int(x) : int) = (Int.(-_)(x) : int))))
  
  logic int_max (int, int) : int
  
  logic int_min (int, int) : int
  
  axiom Int_max_is_ge:
    (forall x:int.
      (forall y:int.
        (Int.(>=)((int_max(x, y) : int), x) and Int.(>=)((int_max(x,
         y) : int), y))))
  
  axiom Int_max_is_some:
    (forall x:int.
      (forall y:int.
        (((int_max(x, y) : int) = x) or ((int_max(x, y) : int) = y))))
  
  axiom Int_min_is_le:
    (forall x:int.
      (forall y:int.
        (Int.(<=)((int_min(x, y) : int), x) and Int.(<=)((int_min(x,
         y) : int), y))))
  
  axiom Int_min_is_some:
    (forall x:int.
      (forall y:int.
        (((int_min(x, y) : int) = x) or ((int_min(x, y) : int) = y))))
  
  logic lt_real (real, real)
  
  logic le_real (real, real)
  
  logic gt_real (real, real)
  
  logic ge_real (real, real)
  
  logic eq_real (real, real)
  
  logic neq_real (real, real)
  
  logic add_real (real, real) : real
  
  logic sub_real (real, real) : real
  
  logic mul_real (real, real) : real
  
  logic div_real (real, real) : real
  
  logic neg_real (real) : real
  
  logic real_of_int (int) : real
  
  axiom Real_of_int_zero: ((real_of_int(0) : real) = 0.0)
  
  axiom Real_of_int_one: ((real_of_int(1) : real) = 1.0)
  
  axiom Real_of_int_add:
    (forall x:int.
      (forall y:int. ((real_of_int((Int.(+)(x,
        y) : int)) : real) = (Real.(+)((real_of_int(x) : real),
        (real_of_int(y) : real)) : real))))
  
  axiom Real_of_int_sub:
    (forall x:int.
      (forall y:int. ((real_of_int((Int.(-)(x,
        y) : int)) : real) = (Real.(-)((real_of_int(x) : real),
        (real_of_int(y) : real)) : real))))
  
  logic truncate_real_to_int (real) : int
  
  axiom Truncate_down_pos:
    (forall x:real.
      (Real.(>=)(x, 0.0) ->
       (Real.(<=)((real_of_int((truncate_real_to_int(x) : int)) : real),
        x) and Real.(<)(x,
        (real_of_int((Int.(+)((truncate_real_to_int(x) : int),
        1) : int)) : real)))))
  
  axiom Truncate_up_neg:
    (forall x:real.
      (Real.(<=)(x, 0.0) ->
       (Real.(<)((real_of_int((Int.(-)((truncate_real_to_int(x) : int),
        1) : int)) : real), x) and Real.(<=)(x,
        (real_of_int((truncate_real_to_int(x) : int)) : real)))))
  
  logic floor_real_to_int (real) : int
  
  logic ceil_real_to_int (real) : int
  
  logic lt_real_bool (real, real) : Bool.bool
  
  logic le_real_bool (real, real) : Bool.bool
  
  logic gt_real_bool (real, real) : Bool.bool
  
  logic ge_real_bool (real, real) : Bool.bool
  
  logic eq_real_bool (real, real) : Bool.bool
  
  logic neq_real_bool (real, real) : Bool.bool
  
  axiom Lt_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((lt_real_bool(x, y) : Bool.bool) = Bool.True) <-> Real.(<)(x, y))))
  
  axiom Le_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((le_real_bool(x, y) : Bool.bool) = Bool.True) <-> Real.(<=)(x, y))))
  
  axiom Gt_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((gt_real_bool(x, y) : Bool.bool) = Bool.True) <-> Real.(>)(x, y))))
  
  axiom Ge_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((ge_real_bool(x, y) : Bool.bool) = Bool.True) <-> Real.(>=)(x, y))))
  
  axiom Eq_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((eq_real_bool(x, y) : Bool.bool) = Bool.True) <-> (x = y))))
  
  axiom Neq_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((neq_real_bool(x, y) : Bool.bool) = Bool.True) <-> (x <> y))))
  
  logic real_max (real, real) : real
  
  logic real_min (real, real) : real
  
  axiom Real_max_is_ge:
    (forall x:real.
      (forall y:real.
        (Real.(>=)((real_max(x, y) : real), x) and Real.(>=)((real_max(x,
         y) : real), y))))
  
  axiom Real_max_is_some:
    (forall x:real.
      (forall y:real.
        (((real_max(x, y) : real) = x) or ((real_max(x, y) : real) = y))))
  
  axiom Real_min_is_le:
    (forall x:real.
      (forall y:real.
        (Real.(<=)((real_min(x, y) : real), x) and Real.(<=)((real_min(x,
         y) : real), y))))
  
  axiom Real_min_is_some:
    (forall x:real.
      (forall y:real.
        (((real_min(x, y) : real) = x) or ((real_min(x, y) : real) = y))))
  
  logic sqr_real(x: real) : real = (Real.(*)(x, x) : real)
  
  logic sqrt_real (real) : real
  
  axiom Sqrt_pos:
    (forall x:real.
      (Real.(>=)(x, 0.0) -> Real.(>=)((sqrt_real(x) : real), 0.0)))
  
  axiom Sqrt_sqr:
    (forall x:real.
      (Real.(>=)(x, 0.0) -> ((sqr_real((sqrt_real(x) : real)) : real) = x)))
  
  axiom Sqr_sqrt:
    (forall x:real.
      (Real.(>=)(x, 0.0) -> ((sqrt_real((Real.(*)(x, x) : real)) : real) = x)))
  
  logic pow_real (real, real) : real
  
  logic abs_real (real) : real
  
  axiom Abs_real_pos:
    (forall x:real [(abs_real(x) : real)].
      (Real.(>=)(x, 0.0) -> ((abs_real(x) : real) = x)))
  
  axiom Abs_real_neg:
    (forall x:real [(abs_real(x) : real)].
      (Real.(<=)(x, 0.0) -> ((abs_real(x) : real) = (Real.(-_)(x) : real))))
  
  logic exp (real) : real
  
  logic log (real) : real
  
  logic log10 (real) : real
  
  axiom Log_exp: (forall x:real. ((log((exp(x) : real)) : real) = x))
  
  axiom Exp_log:
    (forall x:real.
      (Real.(>)(x, 0.0) -> ((exp((log(x) : real)) : real) = x)))
  
  logic cos (real) : real
  
  logic sin (real) : real
  
  logic tan (real) : real
  
  logic pi  : real
  
  logic cosh (real) : real
  
  logic sinh (real) : real
  
  logic tanh (real) : real
  
  logic acos (real) : real
  
  logic asin (real) : real
  
  logic atan (real) : real
  
  logic atan2 (real, real) : real
  
  logic hypot (real, real) : real
  
  axiom Prod_pos:
    (forall x:real.
      (forall y:real.
        (((Real.(>)(x, 0.0) and Real.(>)(y, 0.0)) -> Real.(>)((Real.(*)(x,
          y) : real), 0.0)) and
         ((Real.(<)(x, 0.0) and Real.(<)(y, 0.0)) -> Real.(>)((Real.(*)(x,
          y) : real), 0.0)))))
  
  axiom Abs_minus:
    (forall x:real.
      ((abs_real((Real.(-_)(x) : real)) : real) = (abs_real(x) : real)))
  
  type 't alloc_table
  
  type 't pointer
  
  type 't block
  
  logic base_block ('a1 pointer) : 'a1 block
  
  logic offset_max ('a1 alloc_table, 'a1 pointer) : int
  
  logic offset_min ('a1 alloc_table, 'a1 pointer) : int
  
  logic valid(a: 'a1 alloc_table, p: 'a1 pointer) =
    (Int.(<=)((offset_min(a, p) : int), 0) and Int.(>=)((offset_max(a,
     p) : int), 0))
  
  logic same_block(p: 'a1 pointer, q: 'a1 pointer) =
    ((base_block(p) : 'a1 block) = (base_block(q) : 'a1 block))
  
  logic sub_pointer ('a1 pointer, 'a1 pointer) : int
  
  logic shift ('a1 pointer, int) : 'a1 pointer
  
  logic null  : 'a1 pointer
  
  logic pointer_address ('a1 pointer) : Unit.unit pointer
  
  logic absolute_address (int) : Unit.unit pointer
  
  logic address ('a1 pointer) : int
  
  axiom Address_injective:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        ((p = q) <-> ((address(p) : int) = (address(q) : int)))))
  
  axiom Address_null: ((address((null : 'a1 pointer)) : int) = 0)
  
  axiom Address_shift_lt:
    (forall p:'a1 pointer.
      (forall i:int.
        (forall j:int [(address((shift(p, i) : 'a1 pointer)) : int),
          (address((shift(p, j) : 'a1 pointer)) : int)].
          (Int.(<)((address((shift(p, i) : 'a1 pointer)) : int),
           (address((shift(p, j) : 'a1 pointer)) : int)) <-> Int.(<)(i, j)))))
  
  axiom Address_shift_le:
    (forall p:'a1 pointer.
      (forall i:int.
        (forall j:int [(address((shift(p, i) : 'a1 pointer)) : int),
          (address((shift(p, j) : 'a1 pointer)) : int)].
          (Int.(<=)((address((shift(p, i) : 'a1 pointer)) : int),
           (address((shift(p, j) : 'a1 pointer)) : int)) <-> Int.(<=)(i, j)))))
  
  axiom Shift_zero:
    (forall p:'a1 pointer [(shift(p, 0) : 'a1 pointer)]. ((shift(p,
      0) : 'a1 pointer) = p))
  
  axiom Shift_shift:
    (forall p:'a1 pointer.
      (forall i:int.
        (forall j:int [(shift((shift(p, i) : 'a1 pointer),
          j) : 'a1 pointer)]. ((shift((shift(p, i) : 'a1 pointer),
          j) : 'a1 pointer) = (shift(p, (Int.(+)(i,
          j) : int)) : 'a1 pointer)))))
  
  axiom Offset_max_shift:
    (forall a:'a1 alloc_table.
      (forall p:'a1 pointer.
        (forall i:int. ((offset_max(a, (shift(p,
          i) : 'a1 pointer)) : int) = (Int.(-)((offset_max(a, p) : int),
          i) : int)))))
  
  axiom Offset_min_shift:
    (forall a:'a1 alloc_table.
      (forall p:'a1 pointer.
        (forall i:int. ((offset_min(a, (shift(p,
          i) : 'a1 pointer)) : int) = (Int.(-)((offset_min(a, p) : int),
          i) : int)))))
  
  axiom Neq_shift:
    (forall p:'a1 pointer.
      (forall i:int.
        (forall j:int [(shift(p, i) : 'a1 pointer), (shift(p,
          j) : 'a1 pointer)].
          ((i <> j) -> ((shift(p, i) : 'a1 pointer) <> (shift(p,
           j) : 'a1 pointer))))))
  
  axiom Null_not_valid:
    (forall a:'a1 alloc_table. (not valid(a, (null : 'a1 pointer))))
  
  axiom Null_pointer:
    (forall a:'a1 alloc_table.
      (Int.(>=)((offset_min(a, (null : 'a1 pointer)) : int), 0) and
       Int.(<=)((offset_max(a, (null : 'a1 pointer)) : int),
       (Int.(-_)(2) : int))))
  
  logic eq_pointer_bool ('a1 pointer, 'a1 pointer) : Bool.bool
  
  logic neq_pointer_bool ('a1 pointer, 'a1 pointer) : Bool.bool
  
  axiom Eq_pointer_bool_def:
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (((eq_pointer_bool(p1, p2) : Bool.bool) = Bool.True) <-> (p1 = p2))))
  
  axiom Neq_pointer_bool_def:
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (((neq_pointer_bool(p1, p2) : Bool.bool) = Bool.True) <-> (p1 <> p2))))
  
  axiom Same_block_shift_right:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [same_block(p, (shift(q, i) : 'a1 pointer))].
          (same_block(p, q) -> same_block(p, (shift(q, i) : 'a1 pointer))))))
  
  axiom Same_block_shift_left:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [same_block((shift(q, i) : 'a1 pointer), p)].
          (same_block(q, p) -> same_block((shift(q, i) : 'a1 pointer), p)))))
  
  axiom Sub_pointer_shift:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer [(sub_pointer(p, q) : int)].
        (same_block(p, q) -> (p = (shift(q, (sub_pointer(p,
         q) : int)) : 'a1 pointer)))))
  
  axiom Sub_pointer_self:
    (forall p:'a1 pointer [(sub_pointer(p, p) : int)]. ((sub_pointer(p,
      p) : int) = 0))
  
  axiom Sub_pointer_zero:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer [(sub_pointer(p, q) : int)].
        (same_block(p, q) -> (((sub_pointer(p, q) : int) = 0) -> (p = q)))))
  
  axiom Sub_pointer_shift_left:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [(sub_pointer((shift(p, i) : 'a1 pointer), q) : int)].
          ((sub_pointer((shift(p, i) : 'a1 pointer),
          q) : int) = (Int.(+)((sub_pointer(p, q) : int), i) : int)))))
  
  axiom Sub_pointer_shift_right:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [(sub_pointer(p, (shift(q, i) : 'a1 pointer)) : int)].
          ((sub_pointer(p, (shift(q,
          i) : 'a1 pointer)) : int) = (Int.(-)((sub_pointer(p, q) : int),
          i) : int)))))
  
  type ('t, 'v) memory
  
  logic select (('a2, 'a1) memory, 'a2 pointer) : 'a1
  
  logic store (('a1, 'a2) memory, 'a1 pointer, 'a2) : ('a1, 'a2) memory
  
  axiom Select_store_eq:
    (forall m:('a1, 'a2) memory.
      (forall p1:'a1 pointer.
        (forall p2:'a1 pointer.
          (forall a:'a2 [(store(m, p1, a) : ('a1, 'a2) memory), p2].
            ((p1 = p2) -> ((select((store(m, p1, a) : ('a1, 'a2) memory),
             p2) : 'a2) = a))))))
  
  axiom Select_store_neq:
    (forall m:('a1, 'a2) memory.
      (forall p1:'a1 pointer.
        (forall p2:'a1 pointer.
          (forall a:'a2 [(store(m, p1, a) : ('a1, 'a2) memory), p2].
            ((p1 <> p2) -> ((select((store(m, p1, a) : ('a1, 'a2) memory),
             p2) : 'a2) = (select(m, p2) : 'a2)))))))
  
  type 't pset
  
  logic pset_empty  : 'a1 pset
  
  logic pset_singleton ('a1 pointer) : 'a1 pset
  
  logic pset_deref (('a2, 'a1 pointer) memory, 'a2 pset) : 'a1 pset
  
  logic pset_union ('a1 pset, 'a1 pset) : 'a1 pset
  
  logic pset_all ('a1 pset) : 'a1 pset
  
  logic pset_range ('a1 pset, int, int) : 'a1 pset
  
  logic pset_range_left ('a1 pset, int) : 'a1 pset
  
  logic pset_range_right ('a1 pset, int) : 'a1 pset
  
  logic in_pset ('a1 pointer, 'a1 pset)
  
  logic valid_pset ('a1 alloc_table, 'a1 pset)
  
  logic pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
    (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))
  
  logic pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
    (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))
  
  axiom Pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))
  
  axiom Pset_included_range:
    (forall ps:'a1 pset.
      (forall a:int.
        (forall b:int.
          (forall c:int.
            (forall d:int [pset_included((pset_range(ps, a, b) : 'a1 pset),
              (pset_range(ps, c, d) : 'a1 pset))].
              ((Int.(<=)(c, a) and Int.(<=)(b, d)) ->
               pset_included((pset_range(ps, a, b) : 'a1 pset),
               (pset_range(ps, c, d) : 'a1 pset))))))))
  
  axiom Pset_included_range_all:
    (forall ps:'a1 pset.
      (forall a:int.
        (forall b:int.
          (forall c:int.
            (forall d:int [pset_included((pset_range(ps, a, b) : 'a1 pset),
              (pset_range(ps, c, d) : 'a1 pset))].
              pset_included((pset_range(ps, a, b) : 'a1 pset),
              (pset_all(ps) : 'a1 pset)))))))
  
  axiom In_pset_empty:
    (forall p:'a1 pointer. (not in_pset(p, (pset_empty : 'a1 pset))))
  
  axiom In_pset_singleton:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (in_pset(p, (pset_singleton(q) : 'a1 pset)) <-> (p = q))))
  
  axiom In_pset_deref:
    (forall p:'a1 pointer.
      (forall m:('a2, 'a1 pointer) memory.
        (forall q:'a2 pset.
          (in_pset(p, (pset_deref(m, q) : 'a1 pset)) <->
           (exists r:'a2 pointer.
             (in_pset(r, q) and (p = (select(m, r) : 'a1 pointer))))))))
  
  axiom In_pset_all:
    (forall p:'a1 pointer.
      (forall q:'a1 pset.
        (in_pset(p, (pset_all(q) : 'a1 pset)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             (in_pset(r, q) and (p = (shift(r, i) : 'a1 pointer))))))))
  
  axiom In_pset_range:
    (forall p:'a1 pointer.
      (forall q:'a1 pset.
        (forall a:int.
          (forall b:int.
            (in_pset(p, (pset_range(q, a, b) : 'a1 pset)) <->
             (exists i:int.
               (exists r:'a1 pointer.
                 (Int.(<=)(a, i) and
                  (Int.(<=)(i, b) and
                   (in_pset(r, q) and (p = (shift(r, i) : 'a1 pointer))))))))))))
  
  axiom In_pset_range_left:
    (forall p:'a1 pointer.
      (forall q:'a1 pset.
        (forall b:int.
          (in_pset(p, (pset_range_left(q, b) : 'a1 pset)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               (Int.(<=)(i, b) and
                (in_pset(r, q) and (p = (shift(r, i) : 'a1 pointer))))))))))
  
  axiom In_pset_range_right:
    (forall p:'a1 pointer.
      (forall q:'a1 pset.
        (forall a:int.
          (in_pset(p, (pset_range_right(q, a) : 'a1 pset)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               (Int.(<=)(a, i) and
                (in_pset(r, q) and (p = (shift(r, i) : 'a1 pointer))))))))))
  
  axiom In_pset_union:
    (forall p:'a1 pointer.
      (forall s1:'a1 pset.
        (forall s2:'a1 pset.
          (in_pset(p, (pset_union(s1, s2) : 'a1 pset)) <->
           (in_pset(p, s1) or in_pset(p, s2))))))
  
  axiom Valid_pset_empty:
    (forall a:'a1 alloc_table. valid_pset(a, (pset_empty : 'a1 pset)))
  
  axiom Valid_pset_singleton:
    (forall a:'a1 alloc_table.
      (forall p:'a1 pointer.
        (valid_pset(a, (pset_singleton(p) : 'a1 pset)) <-> valid(a, p))))
  
  axiom Valid_pset_deref:
    (forall a:'a1 alloc_table.
      (forall m:('a2, 'a1 pointer) memory.
        (forall q:'a2 pset.
          (valid_pset(a, (pset_deref(m, q) : 'a1 pset)) <->
           (forall r:'a2 pointer.
             (forall p:'a1 pointer.
               ((in_pset(r, q) and (p = (select(m, r) : 'a1 pointer))) ->
                valid(a, p))))))))
  
  axiom Valid_pset_range:
    (forall a:'a1 alloc_table.
      (forall q:'a1 pset.
        (forall c:int.
          (forall d:int.
            (valid_pset(a, (pset_range(q, c, d) : 'a1 pset)) <->
             (forall i:int.
               (forall r:'a1 pointer.
                 ((in_pset(r, q) and (Int.(<=)(c, i) and Int.(<=)(i, d))) ->
                  valid(a, (shift(r, i) : 'a1 pointer))))))))))
  
  axiom Valid_pset_union:
    (forall a:'a1 alloc_table.
      (forall s1:'a1 pset.
        (forall s2:'a1 pset.
          (valid_pset(a, (pset_union(s1, s2) : 'a1 pset)) <->
           (valid_pset(a, s1) and valid_pset(a, s2))))))
  
  logic not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
    'a2) memory, l: 'a1 pset) =
    (forall p:'a1 pointer.
      ((valid(a, p) and (not in_pset(p, l))) -> ((select(m2,
       p) : 'a2) = (select(m1, p) : 'a2))))
  
  axiom Not_assigns_refl:
    (forall a:'a1 alloc_table.
      (forall m:('a1, 'a2) memory.
        (forall l:'a1 pset. not_assigns(a, m, m, l))))
  
  axiom Not_assigns_trans:
    (forall a:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall m3:('a1, 'a2) memory.
            (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
              m3, l)].
              (not_assigns(a, m1, m2, l) ->
               (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))
  
  logic full_separated ('a1 pointer, 'a2 pointer)
  
  axiom Full_separated_shift1:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [full_separated(p, q), (shift(q, i) : 'a1 pointer)].
          (full_separated(p, q) -> full_separated(p, (shift(q,
           i) : 'a1 pointer))))))
  
  axiom Full_separated_shift2:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [full_separated(p, q), (shift(q, i) : 'a1 pointer)].
          (full_separated(p, q) -> full_separated((shift(q,
           i) : 'a1 pointer), p)))))
  
  axiom Full_separated_shift3:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [full_separated(q, p), (shift(q, i) : 'a1 pointer)].
          (full_separated(q, p) -> full_separated((shift(q,
           i) : 'a1 pointer), p)))))
  
  axiom Full_separated_shift4:
    (forall p:'a1 pointer.
      (forall q:'a1 pointer.
        (forall i:int [full_separated(q, p), (shift(q, i) : 'a1 pointer)].
          (full_separated(q, p) -> full_separated(p, (shift(q,
           i) : 'a1 pointer))))))
  
  type 't tag_table
  
  type 't tag_id
  
  logic int_of_tag ('a1 tag_id) : int
  
  logic typeof ('a1 tag_table, 'a1 pointer) : 'a1 tag_id
  
  logic parenttag ('a1 tag_id, 'a1 tag_id)
  
  logic subtag ('a1 tag_id, 'a1 tag_id)
  
  logic subtag_bool ('a1 tag_id, 'a1 tag_id) : Bool.bool
  
  axiom Subtag_bool_def:
    (forall t1:'a1 tag_id.
      (forall t2:'a1 tag_id.
        (((subtag_bool(t1, t2) : Bool.bool) = Bool.True) <-> subtag(t1, t2))))
  
  axiom Subtag_refl: (forall t:'a1 tag_id. subtag(t, t))
  
  axiom Subtag_parent:
    (forall t1:'a1 tag_id.
      (forall t2:'a1 tag_id.
        (forall t3:'a1 tag_id.
          (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))
  
  logic instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
    subtag((typeof(a, p) : 'a1 tag_id), t)
  
  logic downcast ('a1 tag_table, 'a1 pointer, 'a1 tag_id) : 'a1 pointer
  
  axiom Downcast_instanceof:
    (forall a:'a1 tag_table.
      (forall p:'a1 pointer.
        (forall s:'a1 tag_id.
          (instanceof(a, p, s) -> ((downcast(a, p, s) : 'a1 pointer) = p)))))
  
  logic bottom_tag  : 'a1 tag_id
  
  axiom Bottom_tag_axiom:
    (forall t:'a1 tag_id. subtag(t, (bottom_tag : 'a1 tag_id)))
  
  logic root_tag(t: 'a1 tag_id) = parenttag(t, (bottom_tag : 'a1 tag_id))
  
  axiom Root_subtag:
    (forall a:'a1 tag_id.
      (forall b:'a1 tag_id.
        (forall c:'a1 tag_id.
          (root_tag(a) ->
           (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))
  
  logic fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
    'a1 tag_id) memory, this: 'a1 pointer) = ((select(mutable,
    this) : 'a1 tag_id) = (typeof(tag_table, this) : 'a1 tag_id))
  
  logic bw_compl (int) : int
  
  logic bw_and (int, int) : int
  
  axiom Bw_and_not_null:
    (forall a:int.
      (forall b:int.
        (((bw_and(a, b) : int) <> 0) -> ((a <> 0) and (b <> 0)))))
  
  logic bw_xor (int, int) : int
  
  logic bw_or (int, int) : int
  
  logic lsl (int, int) : int
  
  axiom Lsl_left_positive_returns_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> Int.(<=)(0, (lsl(a,
         b) : int)))))
  
  axiom Lsl_left_positive_monotone:
    (forall a1:int.
      (forall a2:int.
        (forall b:int.
          ((Int.(<=)(0, a1) and (Int.(<=)(a1, a2) and Int.(<=)(0, b))) ->
           Int.(<=)((lsl(a1, b) : int), (lsl(a2, b) : int))))))
  
  logic lsr (int, int) : int
  
  axiom Lsr_left_positive_returns_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> Int.(<=)(0, (lsr(a,
         b) : int)))))
  
  axiom Lsr_left_positive_decreases:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> Int.(<=)((lsr(a, b) : int),
         a))))
  
  logic asr (int, int) : int
  
  axiom Asr_positive_on_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> Int.(<=)(0, (asr(a,
         b) : int)))))
  
  axiom Asr_decreases_on_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> Int.(<=)((asr(a, b) : int),
         a))))
  
  axiom Asr_lsr_same_on_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> ((asr(a, b) : int) = (lsr(a,
         b) : int)))))
  
  axiom Lsl_of_lsr_decreases_on_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> Int.(<=)((lsl((lsr(a,
         b) : int), b) : int), a))))
  
  axiom Lsr_of_lsl_identity_on_positive:
    (forall a:int.
      (forall b:int.
        ((Int.(<=)(0, a) and Int.(<=)(0, b)) -> ((lsr((lsl(a, b) : int),
         b) : int) = a))))
  
  logic alloc_extends ('a1 alloc_table, 'a1 alloc_table)
  
  logic alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
    (forall i:int.
      ((Int.(<=)(0, i) and Int.(<)(i, n)) -> (not valid(a, (shift(p,
       i) : 'a1 pointer)))))
  
  axiom Alloc_extends_offset_min:
    (forall a1:'a1 alloc_table.
      (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
        (alloc_extends(a1, a2) ->
         (forall p:'a1 pointer.
           (valid(a1, p) -> ((offset_min(a1, p) : int) = (offset_min(a2,
            p) : int)))))))
  
  axiom Alloc_extends_offset_max:
    (forall a1:'a1 alloc_table.
      (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
        (alloc_extends(a1, a2) ->
         (forall p:'a1 pointer.
           (valid(a1, p) -> ((offset_max(a1, p) : int) = (offset_max(a2,
            p) : int)))))))
  
  axiom Alloc_extends_not_assigns_empty:
    (forall a1:'a1 alloc_table.
      (forall a2:'a1 alloc_table.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall l:'a1 pset.
              (forall p:'a1 pointer.
                (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                  not_assigns(a2, m1, m2, l)].
                  ((alloc_extends(a1, a2) and
                    (alloc_fresh(a1, p, n) and
                     (not_assigns(a2, m1, m2, l) and pset_included(l,
                      (pset_all((pset_singleton(p) : 'a1 pset)) : 'a1 pset))))) ->
                   not_assigns(a1, m1, m2, (pset_empty : 'a1 pset))))))))))
  
  logic alloc_extends_except ('a1 alloc_table, 'a1 alloc_table, 'a1 pset)
  
  axiom Alloc_extends_except_offset_min:
    (forall a1:'a1 alloc_table.
      (forall a2:'a1 alloc_table.
        (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
          (alloc_extends_except(a1, a2, l) ->
           (forall p:'a1 pointer.
             ((valid(a1, p) and (not in_pset(p, l))) -> ((offset_min(a1,
              p) : int) = (offset_min(a2, p) : int))))))))
  
  axiom Alloc_extends_except_offset_max:
    (forall a1:'a1 alloc_table.
      (forall a2:'a1 alloc_table.
        (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
          (alloc_extends_except(a1, a2, l) ->
           (forall p:'a1 pointer.
             ((valid(a1, p) and (not in_pset(p, l))) -> ((offset_max(a1,
              p) : int) = (offset_max(a2, p) : int))))))))
  
  type char_P
  
  type int32
  
  type int8
  
  type node
  
  type padding
  
  type void_P
  
  inductive ilist(node pointer, node alloc_table, (node,
  node pointer) memory) =
    | Nil: (forall node_alloc_table_at_L:node alloc_table.
             (forall node_tl_at_L:(node, node pointer) memory.
               ilist((null : node pointer), node_alloc_table_at_L,
               node_tl_at_L)))
    | Cons: (forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory.
                (forall p_0_1:node pointer.
                  ((p_0_1 <> (null : node pointer)) ->
                   ((Int.(<=)((offset_min(node_alloc_table_at_L,
                     p_0_1) : int), 0) and
                     Int.(>=)((offset_max(node_alloc_table_at_L,
                     p_0_1) : int), 0)) ->
                    (ilist((select(node_tl_at_L, p_0_1) : node pointer),
                     node_alloc_table_at_L, node_tl_at_L) -> ilist(p_0_1,
                     node_alloc_table_at_L, node_tl_at_L)))))))
  
  

logic ilistnode_tl_elt_ft (node pointer, node pointer, node alloc_table,
(node, node pointer) memory)

axiom Axiom_ft_node_tl_eltilist:
  (forall node_tl_at_L_notin_elt:node pointer.
    (forall _JC_p:node pointer.
      (forall _JC_node_alloc_table_at_L:node alloc_table.
        (forall _JC_node_tl_at_L:(node, node pointer) memory.
          (((forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory. true)) and
            (forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory.
                (forall p_0_1:node pointer.
                  ((p_0_1 <> (null : node pointer)) ->
                   ((Int.(<=)((offset_min(node_alloc_table_at_L,
                     p_0_1) : int), 0) and
                     Int.(>=)((offset_max(node_alloc_table_at_L,
                     p_0_1) : int), 0)) ->
                    (ilist((select(node_tl_at_L, p_0_1) : node pointer),
                     node_alloc_table_at_L, node_tl_at_L) ->
                     (((_JC_p = p_0_1) and
                       ((_JC_node_alloc_table_at_L = node_alloc_table_at_L) and
                        (_JC_node_tl_at_L = node_tl_at_L))) ->
                      (ilistnode_tl_elt_ft(node_tl_at_L_notin_elt,
                       (select(node_tl_at_L, p_0_1) : node pointer),
                       node_alloc_table_at_L, node_tl_at_L) and
                       (not (p_0_1 = node_tl_at_L_notin_elt))))))))))) ->
           ilistnode_tl_elt_ft(node_tl_at_L_notin_elt, _JC_p,
           _JC_node_alloc_table_at_L, _JC_node_tl_at_L))))))

axiom Axiom_ft_node_tl_eltilistcons:
  (forall node_tl_at_L_notin_elt:node pointer.
    (forall node_alloc_table_at_L:node alloc_table.
      (forall node_tl_at_L:(node, node pointer) memory.
        (forall p_0_1:node pointer.
          ((p_0_1 <> (null : node pointer)) ->
           ((Int.(<=)((offset_min(node_alloc_table_at_L, p_0_1) : int),
             0) and Int.(>=)((offset_max(node_alloc_table_at_L,
             p_0_1) : int), 0)) ->
            (ilist((select(node_tl_at_L, p_0_1) : node pointer),
             node_alloc_table_at_L, node_tl_at_L) ->
             (ilistnode_tl_elt_ft(node_tl_at_L_notin_elt, p_0_1,
              node_alloc_table_at_L, node_tl_at_L) ->
              (ilistnode_tl_elt_ft(node_tl_at_L_notin_elt,
               (select(node_tl_at_L, p_0_1) : node pointer),
               node_alloc_table_at_L, node_tl_at_L) and
               (not (p_0_1 = node_tl_at_L_notin_elt)))))))))))

axiom Axiom_ft_node_tl_eltilistnil:
  (forall node_tl_at_L_notin_elt:node pointer.
    (forall node_alloc_table_at_L:node alloc_table.
      (forall node_tl_at_L:(node, node pointer) memory. true)))

logic ilistnode_tl_ft (node pointer mybag, node pointer, node alloc_table,
(node, node pointer) memory)

axiom Axiom_ft_node_tlilist:
  (forall node_tl_at_L_notin:node pointer mybag.
    (forall _JC_p:node pointer.
      (forall _JC_node_alloc_table_at_L:node alloc_table.
        (forall _JC_node_tl_at_L:(node, node pointer) memory.
          (((forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory. true)) and
            (forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory.
                (forall p_0_1:node pointer.
                  ((p_0_1 <> (null : node pointer)) ->
                   ((Int.(<=)((offset_min(node_alloc_table_at_L,
                     p_0_1) : int), 0) and
                     Int.(>=)((offset_max(node_alloc_table_at_L,
                     p_0_1) : int), 0)) ->
                    (ilist((select(node_tl_at_L, p_0_1) : node pointer),
                     node_alloc_table_at_L, node_tl_at_L) ->
                     (((_JC_p = p_0_1) and
                       ((_JC_node_alloc_table_at_L = node_alloc_table_at_L) and
                        (_JC_node_tl_at_L = node_tl_at_L))) ->
                      (ilistnode_tl_ft(node_tl_at_L_notin,
                       (select(node_tl_at_L, p_0_1) : node pointer),
                       node_alloc_table_at_L, node_tl_at_L) and
                       in_mybag(p_0_1, node_tl_at_L_notin)))))))))) ->
           ilistnode_tl_ft(node_tl_at_L_notin, _JC_p,
           _JC_node_alloc_table_at_L, _JC_node_tl_at_L))))))

axiom Axiom_ft_node_tlilistcons:
  (forall node_tl_at_L_notin:node pointer mybag.
    (forall node_alloc_table_at_L:node alloc_table.
      (forall node_tl_at_L:(node, node pointer) memory.
        (forall p_0_1:node pointer.
          ((p_0_1 <> (null : node pointer)) ->
           ((Int.(<=)((offset_min(node_alloc_table_at_L, p_0_1) : int),
             0) and Int.(>=)((offset_max(node_alloc_table_at_L,
             p_0_1) : int), 0)) ->
            (ilist((select(node_tl_at_L, p_0_1) : node pointer),
             node_alloc_table_at_L, node_tl_at_L) ->
             (ilistnode_tl_ft(node_tl_at_L_notin, p_0_1,
              node_alloc_table_at_L, node_tl_at_L) ->
              (ilistnode_tl_ft(node_tl_at_L_notin, (select(node_tl_at_L,
               p_0_1) : node pointer), node_alloc_table_at_L,
               node_tl_at_L) and in_mybag(p_0_1, node_tl_at_L_notin))))))))))

axiom Axiom_ft_node_tlilistnil:
  (forall node_tl_at_L_notin:node pointer mybag.
    (forall node_alloc_table_at_L:node alloc_table.
      (forall node_tl_at_L:(node, node pointer) memory. true)))

logic ilistnode_tl_notin (node pointer, node alloc_table, (node,
node pointer) memory) : node pointer mybag

axiom Axiom_no_update_ilistnode_tl_at_L:
  (forall elt_tmp_name:node pointer.
    (forall elt_val_tmp_name:node pointer.
      (forall p:node pointer.
        (forall node_alloc_table_at_L:node alloc_table.
          (forall node_tl_at_L:(node, node pointer) memory [ilist(p,
            node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
            elt_val_tmp_name) : (node, node pointer) memory))].
            (in_mybag(elt_tmp_name, (ilistnode_tl_notin(p,
             node_alloc_table_at_L, node_tl_at_L) : node pointer mybag)) ->
             (ilist(p, node_alloc_table_at_L, node_tl_at_L) -> ilist(p,
              node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
              elt_val_tmp_name) : (node, node pointer) memory)))))))))

axiom Axiom_no_update_ilistnode_tl_elt_ftnode_tl_at_L:
  (forall elt_tmp_name:node pointer.
    (forall elt_val_tmp_name:node pointer.
      (forall p_tmp_name:node pointer.
        (forall p:node pointer.
          (forall node_alloc_table_at_L:node alloc_table.
            (forall node_tl_at_L:(node,
              node pointer) memory [ilistnode_tl_elt_ft(p_tmp_name, p,
              node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
              elt_val_tmp_name) : (node, node pointer) memory))].
              (in_mybag(elt_tmp_name, (ilistnode_tl_notin(p,
               node_alloc_table_at_L, node_tl_at_L) : node pointer mybag)) ->
               (ilistnode_tl_elt_ft(p_tmp_name, p, node_alloc_table_at_L,
                node_tl_at_L) -> ilistnode_tl_elt_ft(p_tmp_name, p,
                node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
                elt_val_tmp_name) : (node, node pointer) memory))))))))))

axiom Axiom_no_update_ilistnode_tl_ftnode_tl_at_L:
  (forall elt_tmp_name:node pointer.
    (forall elt_val_tmp_name:node pointer.
      (forall node_tl_at_L_notin:node pointer mybag.
        (forall p:node pointer.
          (forall node_alloc_table_at_L:node alloc_table.
            (forall node_tl_at_L:(node,
              node pointer) memory [ilistnode_tl_ft(node_tl_at_L_notin, p,
              node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
              elt_val_tmp_name) : (node, node pointer) memory))].
              (in_mybag(elt_tmp_name, (ilistnode_tl_notin(p,
               node_alloc_table_at_L, node_tl_at_L) : node pointer mybag)) ->
               (ilistnode_tl_ft(node_tl_at_L_notin, p, node_alloc_table_at_L,
                node_tl_at_L) -> ilistnode_tl_ft(node_tl_at_L_notin, p,
                node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
                elt_val_tmp_name) : (node, node pointer) memory))))))))))

axiom Axiom_no_update_ilistnode_tl_notinnode_tl_at_L:
  (forall elt_tmp_name:node pointer.
    (forall elt_val_tmp_name:node pointer.
      (forall p:node pointer.
        (forall node_alloc_table_at_L:node alloc_table.
          (forall node_tl_at_L:(node,
            node pointer) memory [(ilistnode_tl_notin(p,
            node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
            elt_val_tmp_name) : (node,
            node pointer) memory)) : node pointer mybag)].
            (in_mybag(elt_tmp_name, (ilistnode_tl_notin(p,
             node_alloc_table_at_L, node_tl_at_L) : node pointer mybag)) ->
             ((ilistnode_tl_notin(p, node_alloc_table_at_L,
             node_tl_at_L) : node pointer mybag) = (ilistnode_tl_notin(p,
             node_alloc_table_at_L, (store(node_tl_at_L, elt_tmp_name,
             elt_val_tmp_name) : (node,
             node pointer) memory)) : node pointer mybag))))))))

axiom Axiom_notin_node_tl_at_Lconsilist:
  (forall _JC_ft_p:node pointer.
    (forall node_alloc_table_at_L:node alloc_table.
      (forall node_tl_at_L:(node, node pointer) memory.
        (forall p_0_1:node pointer.
          ((p_0_1 <> (null : node pointer)) ->
           ((Int.(<=)((offset_min(node_alloc_table_at_L, p_0_1) : int),
             0) and Int.(>=)((offset_max(node_alloc_table_at_L,
             p_0_1) : int), 0)) ->
            (ilist((select(node_tl_at_L, p_0_1) : node pointer),
             node_alloc_table_at_L, node_tl_at_L) ->
             (ilistnode_tl_ft((ilistnode_tl_notin(p_0_1,
              node_alloc_table_at_L, node_tl_at_L) : node pointer mybag),
              _JC_ft_p, node_alloc_table_at_L, node_tl_at_L) ->
              (ilistnode_tl_ft((ilistnode_tl_notin((select(node_tl_at_L,
               p_0_1) : node pointer), node_alloc_table_at_L,
               node_tl_at_L) : node pointer mybag), _JC_ft_p,
               node_alloc_table_at_L, node_tl_at_L) and
               ilistnode_tl_elt_ft(p_0_1, _JC_ft_p, node_alloc_table_at_L,
               node_tl_at_L))))))))))

axiom Axiom_notin_node_tl_at_Lnililist:
  (forall _JC_ft_p:node pointer.
    (forall node_alloc_table_at_L:node alloc_table.
      (forall node_tl_at_L:(node, node pointer) memory. true)))

axiom Axiom_notin_node_tlilist:
  (forall _JC_ft_p:node pointer.
    (forall _JC_p:node pointer.
      (forall _JC_node_alloc_table_at_L:node alloc_table.
        (forall _JC_node_tl_at_L:(node, node pointer) memory.
          (((forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory. true)) and
            (forall node_alloc_table_at_L:node alloc_table.
              (forall node_tl_at_L:(node, node pointer) memory.
                (forall p_0_1:node pointer.
                  ((p_0_1 <> (null : node pointer)) ->
                   ((Int.(<=)((offset_min(node_alloc_table_at_L,
                     p_0_1) : int), 0) and
                     Int.(>=)((offset_max(node_alloc_table_at_L,
                     p_0_1) : int), 0)) ->
                    (ilist((select(node_tl_at_L, p_0_1) : node pointer),
                     node_alloc_table_at_L, node_tl_at_L) ->
                     (((_JC_p = p_0_1) and
                       ((_JC_node_alloc_table_at_L = node_alloc_table_at_L) and
                        (_JC_node_tl_at_L = node_tl_at_L))) ->
                      (ilistnode_tl_ft((ilistnode_tl_notin((select(node_tl_at_L,
                       p_0_1) : node pointer), node_alloc_table_at_L,
                       node_tl_at_L) : node pointer mybag), _JC_ft_p,
                       node_alloc_table_at_L, node_tl_at_L) and
                       ilistnode_tl_elt_ft(p_0_1, _JC_ft_p,
                       node_alloc_table_at_L, node_tl_at_L)))))))))) ->
           ilistnode_tl_ft((ilistnode_tl_notin(_JC_p,
           _JC_node_alloc_table_at_L,
           _JC_node_tl_at_L) : node pointer mybag), _JC_ft_p,
           _JC_node_alloc_table_at_L, _JC_node_tl_at_L))))))

logic char_P_tag  : char_P tag_id

axiom Char_P_int: ((int_of_tag((char_P_tag : char_P tag_id)) : int) = 1)

logic char_P_of_pointer_address (Unit.unit pointer) : char_P pointer

axiom Char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = (char_P_of_pointer_address((pointer_address(p) : Unit.unit pointer)) : char_P pointer)))

axiom Char_P_parenttag_bottom: parenttag((char_P_tag : char_P tag_id),
  (bottom_tag : char_P tag_id))

axiom Char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, (char_P_tag : char_P tag_id))))

logic integer_of_int32 (int32) : int

logic eq_int32(x: int32, y: int32) =
  ((integer_of_int32(x) : int) = (integer_of_int32(y) : int))

logic integer_of_int8 (int8) : int

logic eq_int8(x: int8, y: int8) =
  ((integer_of_int8(x) : int) = (integer_of_int8(y) : int))

logic ilistnode_tl_ftilistnode_tl_notin (node pointer, node alloc_table,
(node, node pointer) memory) : node pointer mybag

logic int32_of_integer (int) : int32

axiom Int32_coerce:
  (forall x:int.
    ((Int.(<=)((Int.(-_)(2147483648) : int), x) and Int.(<=)(x, 2147483647)) ->
     ((integer_of_int32((int32_of_integer(x) : int32)) : int) = x)))

axiom Int32_range:
  (forall x:int32.
    (Int.(<=)((Int.(-_)(2147483648) : int), (integer_of_int32(x) : int)) and
     Int.(<=)((integer_of_int32(x) : int), 2147483647)))

logic int8_of_integer (int) : int8

axiom Int8_coerce:
  (forall x:int.
    ((Int.(<=)((Int.(-_)(128) : int), x) and Int.(<=)(x, 127)) ->
     ((integer_of_int8((int8_of_integer(x) : int8)) : int) = x)))

axiom Int8_range:
  (forall x:int8.
    (Int.(<=)((Int.(-_)(128) : int), (integer_of_int8(x) : int)) and
     Int.(<=)((integer_of_int8(x) : int), 127)))

logic left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) =
  Int.(<=)((offset_min(char_P_alloc_table, p) : int), a)

logic left_valid_struct_node(p: node pointer, a: int,
  node_alloc_table: node alloc_table) =
  Int.(<=)((offset_min(node_alloc_table, p) : int), a)

logic left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) =
  Int.(<=)((offset_min(void_P_alloc_table, p) : int), a)

logic sep_node_ilist(jessie_4: node pointer, __jc_111p: node pointer,
  node_alloc_table_at_L: node alloc_table, node_tl_at_L: (node,
  node pointer) memory) =
  (in_mybag(jessie_4, (ilistnode_tl_notin(__jc_111p, node_alloc_table_at_L,
   node_tl_at_L) : node pointer mybag)) and ilistnode_tl_elt_ft(jessie_4,
   __jc_111p, node_alloc_table_at_L, node_tl_at_L))

axiom List_sep_as_axiom:
  (forall node_alloc_table_at_L:node alloc_table.
    (forall node_tl_at_L:(node, node pointer) memory.
      (forall p_2:node pointer.
        (ilist(p_2, node_alloc_table_at_L, node_tl_at_L) ->
         sep_node_ilist(p_2, (select(node_tl_at_L, p_2) : node pointer),
         node_alloc_table_at_L, node_tl_at_L)))))

logic node_tag  : node tag_id

axiom Node_int: ((int_of_tag((node_tag : node tag_id)) : int) = 1)

logic node_of_pointer_address (Unit.unit pointer) : node pointer

axiom Node_of_pointer_address_of_pointer_addr:
  (forall p:node pointer.
    (p = (node_of_pointer_address((pointer_address(p) : Unit.unit pointer)) : node pointer)))

axiom Node_parenttag_bottom: parenttag((node_tag : node tag_id),
  (bottom_tag : node tag_id))

axiom Node_tags:
  (forall x:node pointer.
    (forall node_tag_table:node tag_table. instanceof(node_tag_table, x,
      (node_tag : node tag_id))))

axiom Pointer_addr_of_char_P_of_pointer_address:
  (forall p:Unit.unit pointer.
    (p = (pointer_address((char_P_of_pointer_address(p) : char_P pointer)) : Unit.unit pointer)))

axiom Pointer_addr_of_node_of_pointer_address:
  (forall p:Unit.unit pointer.
    (p = (pointer_address((node_of_pointer_address(p) : node pointer)) : Unit.unit pointer)))

logic void_P_of_pointer_address (Unit.unit pointer) : void_P pointer

axiom Pointer_addr_of_void_P_of_pointer_address:
  (forall p:Unit.unit pointer.
    (p = (pointer_address((void_P_of_pointer_address(p) : void_P pointer)) : Unit.unit pointer)))

logic right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) =
  Int.(>=)((offset_max(char_P_alloc_table, p) : int), b)

logic right_valid_struct_node(p: node pointer, b: int,
  node_alloc_table: node alloc_table) =
  Int.(>=)((offset_max(node_alloc_table, p) : int), b)

logic right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) =
  Int.(>=)((offset_max(void_P_alloc_table, p) : int), b)

logic sep_ilist_ilist(__jc_108p: node pointer, __jc_109p: node pointer,
  node_alloc_table_at_L: node alloc_table, node_tl_at_L: (node,
  node pointer) memory) =
  (ilistnode_tl_ft((ilistnode_tl_notin(__jc_109p, node_alloc_table_at_L,
   node_tl_at_L) : node pointer mybag), __jc_108p, node_alloc_table_at_L,
   node_tl_at_L) and ilistnode_tl_ft((ilistnode_tl_notin(__jc_108p,
   node_alloc_table_at_L, node_tl_at_L) : node pointer mybag), __jc_109p,
   node_alloc_table_at_L, node_tl_at_L))

logic strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  (((offset_min(char_P_alloc_table, p) : int) = a) and
   ((offset_max(char_P_alloc_table, p) : int) = b))

logic strict_valid_root_node(p: node pointer, a: int, b: int,
  node_alloc_table: node alloc_table) =
  (((offset_min(node_alloc_table, p) : int) = a) and
   ((offset_max(node_alloc_table, p) : int) = b))

logic strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  (((offset_min(void_P_alloc_table, p) : int) = a) and
   ((offset_max(void_P_alloc_table, p) : int) = b))

logic strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  (((offset_min(char_P_alloc_table, p) : int) = a) and
   ((offset_max(char_P_alloc_table, p) : int) = b))

logic strict_valid_struct_node(p: node pointer, a: int, b: int,
  node_alloc_table: node alloc_table) =
  (((offset_min(node_alloc_table, p) : int) = a) and
   ((offset_max(node_alloc_table, p) : int) = b))

logic strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  (((offset_min(void_P_alloc_table, p) : int) = a) and
   ((offset_max(void_P_alloc_table, p) : int) = b))

logic valid_bitvector_struct_char_P(p: Unit.unit pointer, a: int, b: int,
  bitvector_alloc_table: Unit.unit alloc_table) =
  (((offset_min(bitvector_alloc_table, p) : int) = a) and
   ((offset_max(bitvector_alloc_table, p) : int) = b))

logic valid_bitvector_struct_node(p: Unit.unit pointer, a: int, b: int,
  bitvector_alloc_table: Unit.unit alloc_table) =
  (((offset_min(bitvector_alloc_table, p) : int) = a) and
   ((offset_max(bitvector_alloc_table, p) : int) = b))

logic valid_bitvector_struct_void_P(p: Unit.unit pointer, a: int, b: int,
  bitvector_alloc_table: Unit.unit alloc_table) =
  (((offset_min(bitvector_alloc_table, p) : int) = a) and
   ((offset_max(bitvector_alloc_table, p) : int) = b))

logic valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  (Int.(<=)((offset_min(char_P_alloc_table, p) : int), a) and
   Int.(>=)((offset_max(char_P_alloc_table, p) : int), b))

logic valid_root_node(p: node pointer, a: int, b: int,
  node_alloc_table: node alloc_table) =
  (Int.(<=)((offset_min(node_alloc_table, p) : int), a) and
   Int.(>=)((offset_max(node_alloc_table, p) : int), b))

logic valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  (Int.(<=)((offset_min(void_P_alloc_table, p) : int), a) and
   Int.(>=)((offset_max(void_P_alloc_table, p) : int), b))

logic valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  (Int.(<=)((offset_min(char_P_alloc_table, p) : int), a) and
   Int.(>=)((offset_max(char_P_alloc_table, p) : int), b))

logic valid_struct_node(p: node pointer, a: int, b: int,
  node_alloc_table: node alloc_table) =
  (Int.(<=)((offset_min(node_alloc_table, p) : int), a) and
   Int.(>=)((offset_max(node_alloc_table, p) : int), b))

logic valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  (Int.(<=)((offset_min(void_P_alloc_table, p) : int), a) and
   Int.(>=)((offset_max(void_P_alloc_table, p) : int), b))

logic void_P_tag  : void_P tag_id

axiom Void_P_int: ((int_of_tag((void_P_tag : void_P tag_id)) : int) = 1)

axiom Void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = (void_P_of_pointer_address((pointer_address(p) : Unit.unit pointer)) : void_P pointer)))

axiom Void_P_parenttag_bottom: parenttag((void_P_tag : void_P tag_id),
  (bottom_tag : void_P tag_id))

axiom Void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, (void_P_tag : void_P tag_id))))

goal Rev_ensures_default_po_1:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  ("JC_32" ("JC_30" ("JC_30" ilist(q_0, node_alloc_table, node_tl))))

goal Rev_ensures_default_po_2:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  ("JC_32"
  ("JC_31" ("JC_31" sep_ilist_ilist(p_0_0, q_0, node_alloc_table, node_tl))))

goal Rev_ensures_default_po_3:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  forall mutable_p_0_0:node pointer.
  forall node_tl0:(node,
  node pointer) memory.
  forall q_0_0:node pointer.
  ("JC_32"
  (("JC_29" ilist(mutable_p_0_0, node_alloc_table, node_tl0)) and
   (("JC_30" ilist(q_0_0, node_alloc_table, node_tl0)) and
    ("JC_31" sep_ilist_ilist(mutable_p_0_0, q_0_0, node_alloc_table,
    node_tl0))))) ->
  forall result:int32.
  ("JC_7"
  (if (neq_int_bool((integer_of_int32(result) : int),
   0) : Bool.bool) = Bool.True then
   (mutable_p_0_0 <> (null : node pointer)) else
   (mutable_p_0_0 = (null : node pointer)))) ->
  forall tmp_0:int32.
  (tmp_0 = result) ->
  ((integer_of_int32(tmp_0) : int) <> 0) ->
  forall result0:node pointer.
  (result0 = (select(node_tl0, mutable_p_0_0) : node pointer)) ->
  forall tmp:node pointer.
  (tmp = result0) ->
  forall node_tl1:(node,
  node pointer) memory.
  (node_tl1 = (store(node_tl0, mutable_p_0_0, q_0_0) : (node,
  node pointer) memory)) ->
  forall q_0_1:node pointer.
  (q_0_1 = mutable_p_0_0) ->
  forall mutable_p_0_0_0:node pointer.
  (mutable_p_0_0_0 = tmp) ->
  ("JC_32"
  ("JC_29" ("JC_29" ilist(mutable_p_0_0_0, node_alloc_table, node_tl1))))

goal Rev_ensures_default_po_4:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  forall mutable_p_0_0:node pointer.
  forall node_tl0:(node,
  node pointer) memory.
  forall q_0_0:node pointer.
  ("JC_32"
  (("JC_29" ilist(mutable_p_0_0, node_alloc_table, node_tl0)) and
   (("JC_30" ilist(q_0_0, node_alloc_table, node_tl0)) and
    ("JC_31" sep_ilist_ilist(mutable_p_0_0, q_0_0, node_alloc_table,
    node_tl0))))) ->
  forall result:int32.
  ("JC_7"
  (if (neq_int_bool((integer_of_int32(result) : int),
   0) : Bool.bool) = Bool.True then
   (mutable_p_0_0 <> (null : node pointer)) else
   (mutable_p_0_0 = (null : node pointer)))) ->
  forall tmp_0:int32.
  (tmp_0 = result) ->
  ((integer_of_int32(tmp_0) : int) <> 0) ->
  forall result0:node pointer.
  (result0 = (select(node_tl0, mutable_p_0_0) : node pointer)) ->
  forall tmp:node pointer.
  (tmp = result0) ->
  forall node_tl1:(node,
  node pointer) memory.
  (node_tl1 = (store(node_tl0, mutable_p_0_0, q_0_0) : (node,
  node pointer) memory)) ->
  forall q_0_1:node pointer.
  (q_0_1 = mutable_p_0_0) ->
  forall mutable_p_0_0_0:node pointer.
  (mutable_p_0_0_0 = tmp) ->
  ("JC_32" ("JC_30" ("JC_30" ilist(q_0_1, node_alloc_table, node_tl1))))

goal Rev_ensures_default_po_5:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  forall mutable_p_0_0:node pointer.
  forall node_tl0:(node,
  node pointer) memory.
  forall q_0_0:node pointer.
  ("JC_32"
  (("JC_29" ilist(mutable_p_0_0, node_alloc_table, node_tl0)) and
   (("JC_30" ilist(q_0_0, node_alloc_table, node_tl0)) and
    ("JC_31" sep_ilist_ilist(mutable_p_0_0, q_0_0, node_alloc_table,
    node_tl0))))) ->
  forall result:int32.
  ("JC_7"
  (if (neq_int_bool((integer_of_int32(result) : int),
   0) : Bool.bool) = Bool.True then
   (mutable_p_0_0 <> (null : node pointer)) else
   (mutable_p_0_0 = (null : node pointer)))) ->
  forall tmp_0:int32.
  (tmp_0 = result) ->
  ((integer_of_int32(tmp_0) : int) <> 0) ->
  forall result0:node pointer.
  (result0 = (select(node_tl0, mutable_p_0_0) : node pointer)) ->
  forall tmp:node pointer.
  (tmp = result0) ->
  forall node_tl1:(node,
  node pointer) memory.
  (node_tl1 = (store(node_tl0, mutable_p_0_0, q_0_0) : (node,
  node pointer) memory)) ->
  forall q_0_1:node pointer.
  (q_0_1 = mutable_p_0_0) ->
  forall mutable_p_0_0_0:node pointer.
  (mutable_p_0_0_0 = tmp) ->
  ("JC_32"
  ("JC_31"
  ("JC_31" sep_ilist_ilist(mutable_p_0_0_0, q_0_1, node_alloc_table,
  node_tl1))))

goal Rev_ensures_default_po_6:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  forall mutable_p_0_0:node pointer.
  forall node_tl0:(node,
  node pointer) memory.
  forall q_0_0:node pointer.
  ("JC_32"
  (("JC_29" ilist(mutable_p_0_0, node_alloc_table, node_tl0)) and
   (("JC_30" ilist(q_0_0, node_alloc_table, node_tl0)) and
    ("JC_31" sep_ilist_ilist(mutable_p_0_0, q_0_0, node_alloc_table,
    node_tl0))))) ->
  forall result:int32.
  ("JC_7"
  (if (neq_int_bool((integer_of_int32(result) : int),
   0) : Bool.bool) = Bool.True then
   (mutable_p_0_0 <> (null : node pointer)) else
   (mutable_p_0_0 = (null : node pointer)))) ->
  forall tmp_0:int32.
  (tmp_0 = result) ->
  ((integer_of_int32(tmp_0) : int) = 0) ->
  forall return:node pointer.
  (return = q_0_0) ->
  ("JC_15" ilist(return, node_alloc_table, node_tl0))

goal Rev_safety_po_1:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  forall mutable_p_0_0:node pointer.
  forall node_tl0:(node,
  node pointer) memory.
  forall q_0_0:node pointer.
  ("JC_24" true) ->
  ("JC_22"
  (("JC_19" ilist(mutable_p_0_0, node_alloc_table, node_tl0)) and
   (("JC_20" ilist(q_0_0, node_alloc_table, node_tl0)) and
    ("JC_21" sep_ilist_ilist(mutable_p_0_0, q_0_0, node_alloc_table,
    node_tl0))))) ->
  forall result:int32.
  ("JC_7"
  (if (neq_int_bool((integer_of_int32(result) : int),
   0) : Bool.bool) = Bool.True then
   (mutable_p_0_0 <> (null : node pointer)) else
   (mutable_p_0_0 = (null : node pointer)))) ->
  forall tmp_0:int32.
  (tmp_0 = result) ->
  ((integer_of_int32(tmp_0) : int) <> 0) ->
  Int.(<=)((offset_min(node_alloc_table, mutable_p_0_0) : int), 0)

goal Rev_safety_po_2:
  forall p_0_0:node pointer.
  forall node_alloc_table:node alloc_table.
  forall node_tl:(node,
  node pointer) memory.
  ("JC_13" ilist(p_0_0, node_alloc_table, node_tl)) ->
  forall q_0:node pointer.
  (q_0 = (null : node pointer)) ->
  forall mutable_p_0_0:node pointer.
  forall node_tl0:(node,
  node pointer) memory.
  forall q_0_0:node pointer.
  ("JC_24" true) ->
  ("JC_22"
  (("JC_19" ilist(mutable_p_0_0, node_alloc_table, node_tl0)) and
   (("JC_20" ilist(q_0_0, node_alloc_table, node_tl0)) and
    ("JC_21" sep_ilist_ilist(mutable_p_0_0, q_0_0, node_alloc_table,
    node_tl0))))) ->
  forall result:int32.
  ("JC_7"
  (if (neq_int_bool((integer_of_int32(result) : int),
   0) : Bool.bool) = Bool.True then
   (mutable_p_0_0 <> (null : node pointer)) else
   (mutable_p_0_0 = (null : node pointer)))) ->
  forall tmp_0:int32.
  (tmp_0 = result) ->
  ((integer_of_int32(tmp_0) : int) <> 0) ->
  Int.(<=)(0, (offset_max(node_alloc_table, mutable_p_0_0) : int))

end