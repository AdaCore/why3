
{ 
use import list.List
logic f(int, int) : int
logic c : int
}

parameter sub : x:int -> y:int -> { x>=y } int { result=x-y }

parameter imp_sub : 
  x:int ref -> y:int ref -> { !x >= !y } unit writes x { !x = old(!x) - !y }

parameter r : int ref

parameter write : v:int -> {} unit writes r { !r = v }

let test () =
  {} 
  while !r <= 100 do
    r := !r + 1
  done
  { !r = 100 }

let apply_fun () =
  { true } 
  (fun x -> {x=0} x+42 { result=42 }) 0
  { result=40+2 }


let ff () = 
  { !r = 44 }
  let x = ref 2 in 
  imp_sub r x;
  !r
  { result = 42 }

(*
Local Variables: 
compile-command: "unset LANG; make -C .. testl"
End: 
*)
