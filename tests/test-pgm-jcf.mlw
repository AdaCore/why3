
module Test

  use import module ref.Ref

  type foo = (ref int, ref int)

  let test_foo (f: foo) =
    let r = ref 0 in
    let y = (r, r) in
    let (x,_) = y in (* local reference would escape its scope *)
    r

  let test () =
    let f = ref in
    let x = f 0 in
    let y = f 1 in
    assert { !x = 0 /\ !y = 1 };
    x := 2;
    assert { !x = 2 /\ !y = 1 } (* BUG: alias should be detected *)

end

module M

  use import int.Int
  use import module ref.Ref

  let test1 () =
    let x = ref 0 in
    while !x = 0 do variant { !x } () done

(*
  use import option.Option

  val clear (o : option (ref int)) :
    {}
    unit writes (match o with Some r -> r end).contents
    { match o with None -> true | Some r -> !r = 0 end }
*)

  (* BUG: x escapes its scope (in the postcondition) => should be an error *)
  (* let scope (a: ref int) = let x = a in fun () -> {} x := 0 { !x = 0 } *)

  (* let foo (a: ref int) = let x = a in fun () -> {} x := 0 { !a = 0 } *)
  (* let test3 () = let x = ref 0 in begin foo x (); assert { !x = 0 } end *)

end

(*
Local Variables:
compile-command: "unset LANG; make -C .. testl-ide"
End:
*)
