
{ 
use import list.List
logic c : int
}

exception Not_found
exception Found of int

let test_raise (x:bool) = raise Not_found : int 

let test (n:int) = 
  let rec is_even (x:int) = 
    {true} 
    is_even x : int
    {true}
  in
  is_even n

let rec is_even (x:int) variant {x} = 
    {x>=1} 
    if x = 0 then True else not (is_odd (x-1))
    {true}

and is_odd (x:int) variant {x} =
  if x = 0 then False else not (is_even (x-1))

let b = is_even 2

let rec mem (x:int) (l:int list) = 
  { true }
  match l with
  | Nil -> True
  | Cons (y, r) -> x = y || mem x r
  end
  { true }

let p =
  let x = ref 0 in
  x := 1;
  assert { !x = 1 };
  label L:
  assume { at(!x, L) = 2 };
  absurd : int ref

let f (x : int ref) = 
  { !x >= 0 }
  (fun y -> { y >= 0 } y+1 { result > y }) 2
  { result > 0 and old(!x)>=0 }

parameter g : x:int -> y:int ref -> { true } int { result = x + old(!y) }

parameter r : int ref

let foo = g 2 r

(*
Local Variables: 
compile-command: "unset LANG; make -C .. testl"
End: 
*)
