
module PoorArrays

  use import int.Int
  use import module ref.Ref
  use import map.Map as M

  type array_contents 'a = {| length: int; elts : map int 'a |}
  type array 'a = ref (array_contents 'a)

  parameter get (a: array 'a) (i: int) :
    { 0 <= i < length !a } 'a { result = M.get !a.elts i }

  parameter set (a: array 'a) (i: int) (v: 'a) :
    { 0 <= i < length !a } 
    unit writes a 
    { !a.length = !(old a).length and !a.elts = M.set !(old a).elts i v }

end

module M

  use import int.Int
  use import module ref.Ref

  let test1 () =
    let x = ref 0 in
    while !x = 0 do variant { !x } () done

(***
  use import option.Option

  parameter clear (o : option (ref int)) :
    {} unit writes (match o with Some r -> r end).contents { !r = 0 }
***)

  (* BUG: x escapes its scope (in the postcondition) => should be an error *)
  (* let scope (a: ref int) = let x = a in fun () -> {} x := 0 { !x = 0 } *)

(*   let foo (a: ref int) = let x = a in fun () -> {} x := 0 { !a = 0 } *)
(*   let test3 () = let x = ref 0 in begin foo x (); assert { !x = 0 } end *)

end

(***
module TestArray

  use import int.Int
  use import module array.Array

  (* TODO: update *)
  let f (x: array int) =
    { x.length = 2 }
    x[0] <- 1;
    x[1] <- 2
    { x[1] = 2 and x.length = 2 }

end
***)

(*
Local Variables:
compile-command: "unset LANG; make -C .. testl-ide"
End:
*)
