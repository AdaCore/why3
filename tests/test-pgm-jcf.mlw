module M

  use import int.Int
  use import module ref.Ref

  type t 'a = {| a: 'a; b: bool; c: 'a |}

  let test1 (x: t (ref int)) =
    {}
    let y = {| x with a = 0; c = 0 |} in
    x = y
    { result = True }

(***
  use import option.Option

  parameter clear (o : option (ref int)) :
    {} unit writes (match o with Some r -> r end).contents { !r = 0 }
***)

  (* BUG: x escapes its scope (in the postcondition) => should be an error *)
  (* let scope (a: ref int) = let x = a in fun () -> {} x := 0 { !x = 0 } *)

(*   let foo (a: ref int) = let x = a in fun () -> {} x := 0 { !a = 0 } *)
(*   let test3 () = let x = ref 0 in begin foo x (); assert { !x = 0 } end *)

end

(***
module TestArray

  use import int.Int
  use import module array.Array

  (* TODO: update *)
  let f (x: array int) =
    { x.length = 2 }
    x[0] <- 1;
    x[1] <- 2
    { x[1] = 2 and x.length = 2 }

end
***)

(*
Local Variables:
compile-command: "unset LANG; make -C .. testl-ide"
End:
*)
