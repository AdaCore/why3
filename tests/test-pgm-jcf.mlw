module TestAbstr
  use import int.Int
  use import ref.Ref

  exception E1 int
  exception E2 int

  let test (r : ref int) (z : int)
    ensures { !r = 3 /\ result > 0 }
    raises  { E1 x -> !r = 1 /\ x < 0 }
    raises  { E2 x -> !r = 3 /\ x = 0 }
  =
    r := 1;
    abstract begin
      if z < 0 then raise (E1 z);
      r := !r + 2;
      if z = 0 then raise (E2 z)
    end
    ensures { !r = 3 }
    raises { E1 x -> x = 5 };
    if z = 42 then 41 else z

end

module M1
  predicate eq (x y : 'a)
end

module M2
  predicate my_eq (x : 'a) (y : 'a) = my_eq1 x y
  with my_eq1 (x : 'a) (y : 'a) = my_eq2 x y
  with my_eq2 (x : 'a) (y : 'a) = my_eq3 x y
  with my_eq3 (x : 'a) (y : 'a) = my_eq4 x y
  with my_eq4 (x : 'a) (y : 'a) = my_eq5 x y
  with my_eq5 (x : 'a) (y : 'a) = my_eq6 x y
  with my_eq6 (x : 'a) (y : 'a) = my_eq7 x y
  with my_eq7 (x : 'a) (y : 'a) = my_eq8 x y
  with my_eq8 (x : 'a) (y : 'a) = my_eq9 x y
  with my_eq9 (x : 'a) (y : 'a) = x = y

  clone M1 with predicate eq = my_eq
end


module TestGhost
  use import int.Int
  use import ref.Ref

  use import M2

  let peq x y = let _ = my_eq x (y : ~'c) in y

  let test1 (x: int) =
    assert { x > 0 };
    let r1 = ref x in
    peq r1 r1
end



(*
Local Variables:
compile-command: "unset LANG; make -C .. testl-ide"
End:
*)
