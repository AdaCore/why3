
{ 
use import list.List
}

let rec mem (x:int) (l:int list) = 
  { true }
  match l with
  | Nil -> True
  | Cons (y, r) -> x = y || mem x r
  end
  { true }

let p =
  let x = ref 0 in
  x := 1;
  assert { !x = 1 };
  label L:
  assume { !x = 2 };
  absurd : int ref

let f (x : int) = 
  { x >= 0 }
  (fun y -> { y >= 0 } y+1 { result > y }) x
  { result > 0 }

(*
Local Variables: 
compile-command: "unset LANG; make -C .. testl"
End: 
*)
