
module Ref

  { use import programs.Prelude }

  mutable type ref 'a model 'a

  parameter create : v:'a -> {} ref 'a { result=v }

  parameter get : r:ref 'a -> {} 'a reads r { result=r }

  parameter set : r:ref 'a -> v:'a -> {} unit writes r { r=v }

end

module P

  { use import programs.Prelude }
  { use import int.Int }
  
  use module export Ref

  let incr (r : ref int) : unit =
    {}
    set r (get r + 1)
    { r = old r + 1 }

  (* parameter r : ref int *)

  let f () =
    { true }
    let r = create 0 in
    (* assert { r = 0 }; *)
    incr r;
    get r
    { result = 1 }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C .. testl-ide"
End: 
*)
