
module P

  { use import programs.Prelude }
  { use import int.Int }

let rec f91 (n:int) : int variant { 101-n } =
  { }
  if n <= 100 then
    f91 (f91 (n + 11))
  else
    n - 10
  { (n <= 100 and result = 91) or (n >= 101 and result = n - 10) }

  mutable type ref 'a model 'a

  parameter get : r:ref 'a -> {} 'a reads r { result=r }

  parameter set : r:ref 'a -> v:'a -> {} unit writes r { r=v }

  let incr (r : ref int) =
    {}
    set r (get r + 1)
    { r = old r + 1 }

  let f (r : ref int) =
    { r = 0 }
    incr r;
    get r
    { result = 1 }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C .. testl-ide"
End: 
*)
