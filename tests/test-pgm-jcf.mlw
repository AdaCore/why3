
module P

  { use import programs.Prelude }
  { use import int.Int }

  parameter id : x:'a -> { true } 'a { result = x }

  parameter succ : x:int -> { true } int { result = x+1 }

  let f x = 
    { x=0 } 
    let y = succ (id 1) in
    id y + id y
    { result=2 }

  { use import list.List }
  
  let head (x:int) l = 
    { x = 0 }
    match l with
    | Nil -> x
    | Cons h _ -> h
    end
    { l = Nil -> result = 0 }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C .. testl-ide"
End: 
*)
