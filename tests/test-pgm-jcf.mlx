
theory T
  type t = int
end

module M
  use import int.Int
  use import T
  function f (x: t) : t = x+1
  goal G: forall x: t. x=x

end

module N
  use import int.Int
  use import M
  goal G1: f 41 = 42

  type unit = ()

  type tree 'a = Node 'a (forest 'a) | Leaf
  with forest 'a = Cons (tree 'a) (forest 'a) | Nil

  type ref 'b = {| ghost mutable contents : 'b |}

  type myrec 'a = {| f1 : int ; ghost f2 : tree 'a |}

  let h x =
    let bang y = y.contents in
    match x with
    | {| f2 = Node x _ |} -> Node x Nil
    | _ -> Leaf
    end
end

(*
Local Variables:
compile-command: "unset LANG; ../bin/why3ide test-pgm-jcf.mlx"
End:
*)
