<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 27, characters 45-49:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if ((if x!0 = False then False
                           else if x!0 = True then True else False) =
                          True /\
                          (if x!1 = 2 then 2
                           else if x!1 = 3 then 3
                                else if x!1 = 0 then 0 else 2) =
                          3) /\
                         (if x!2 = 2 then 2
                          else if x!2 = 5 then 5
                               else if x!2 = 0 then 0 else 2) =
                         5
                      then epsilon x:basic_record.
                      x.flag = True /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if ((if x!0 = False then False
                                else if x!0 = True then True else False) =
                               False /\
                               (if x!1 = 2 then 2
                                else if x!1 = 3 then 3
                                     else if x!1 = 0 then 0 else 2) =
                               0) /\
                              (if x!2 = 2 then 2
                               else if x!2 = 5 then 5
                                    else if x!2 = 0 then 0 else 2) =
                              2
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 0 /\ x.second_value = 2
                           else if ((if x!0 = False then False
                                     else if x!0 = True then True else False) =
                                    False /\
                                    (if x!1 = 2 then 2
                                     else if x!1 = 3 then 3
                                          else if x!1 = 0 then 0 else 2) =
                                    2) /\
                                   (if x!2 = 2 then 2
                                    else if x!2 = 5 then 5
                                         else if x!2 = 0 then 0 else 2) =
                                   0
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0
                                else if ((if x!0 = False then False
                                          else if x!0 = True then True
                                               else False) =
                                         False /\
                                         (if x!1 = 2 then 2
                                          else if x!1 = 3 then 3
                                               else if x!1 = 0 then 0 else 2) =
                                         3) /\
                                        (if x!2 = 2 then 2
                                         else if x!2 = 5 then 5
                                              else if x!2 = 0 then 0 else 2) =
                                        5
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if (if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 0)
                  then epsilon x:basic_record.
                  x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 3 /\ x.second_value = 5)
                       then epsilon x:basic_record.
                       x.flag = False /\
                       x.first_value = 3 /\ x.second_value = 5
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = True /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then epsilon x:basic_record.
                            x.flag = True /\
                            x.first_value = 3 /\ x.second_value = 5
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 0 /\ x.second_value = 2)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 0 /\ x.second_value = 2
                                 else epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 2 /\ x.second_value = 0) =
                 (epsilon x:basic_record.
                 x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
              then True
              else if (if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 2 /\ x.second_value = 0)
                       then epsilon x:basic_record.
                       x.flag = False /\
                       x.first_value = 2 /\ x.second_value = 0
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then epsilon x:basic_record.
                            x.flag = False /\
                            x.first_value = 3 /\ x.second_value = 5
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = True /\
                                    x.first_value = 3 /\ x.second_value = 5)
                                 then epsilon x:basic_record.
                                 x.flag = True /\
                                 x.first_value = 3 /\ x.second_value = 5
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 0 /\
                                         x.second_value = 2)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 0 /\ x.second_value = 2
                                      else epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 2 /\ x.second_value = 0) =
                      (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 3 /\ x.second_value = 5)
                   then False
                   else if (if x!0 = (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 2 /\ x.second_value = 0)
                            then epsilon x:basic_record.
                            x.flag = False /\
                            x.first_value = 2 /\ x.second_value = 0
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 3 /\ x.second_value = 5)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 3 /\ x.second_value = 5
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = True /\
                                         x.first_value = 3 /\
                                         x.second_value = 5)
                                      then epsilon x:basic_record.
                                      x.flag = True /\
                                      x.first_value = 3 /\ x.second_value = 5
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = False /\
                                              x.first_value = 0 /\
                                              x.second_value = 2)
                                           then epsilon x:basic_record.
                                           x.flag = False /\
                                           x.first_value = 0 /\
                                           x.second_value = 2 else epsilon x:
                                           basic_record.
                                           x.flag = False /\
                                           x.first_value = 2 /\
                                           x.second_value = 0) =
                           (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 0 /\ x.second_value = 2)
                        then False
                        else if (if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 2 /\ x.second_value = 0)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 2 /\ x.second_value = 0
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 3 /\
                                         x.second_value = 5)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 3 /\ x.second_value = 5
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = True /\
                                              x.first_value = 3 /\
                                              x.second_value = 5)
                                           then epsilon x:basic_record.
                                           x.flag = True /\
                                           x.first_value = 3 /\
                                           x.second_value = 5
                                           else if x!0 = (epsilon x:
                                                   basic_record.
                                                   x.flag = False /\
                                                   x.first_value = 0 /\
                                                   x.second_value = 2)
                                                then epsilon x:basic_record.
                                                x.flag = False /\
                                                x.first_value = 0 /\
                                                x.second_value = 2
                                                else epsilon x:basic_record.
                                                x.flag = False /\
                                                x.first_value = 2 /\
                                                x.second_value = 0) =
                                (epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0)
                             then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if (if x!0 = (epsilon x:basic_record.
                    x.flag = False /\ x.first_value = 2 /\ x.second_value = 0)
                 then epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
                 else if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 3 /\ x.second_value = 5)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 0 /\ x.second_value = 2)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 0 /\ x.second_value = 2
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0) =
                (epsilon x:basic_record.
                x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
             then 3
             else if (if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 2 /\ x.second_value = 0)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 0
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 0 /\
                                        x.second_value = 2)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 0 /\ x.second_value = 2
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 0) =
                     (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 0)
                  then 2
                  else if (if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 2 /\ x.second_value = 0)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 0
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 0 /\
                                             x.second_value = 2)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 0 /\
                                          x.second_value = 2 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 2 /\
                                          x.second_value = 0) =
                          (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 0 /\ x.second_value = 2)
                       then 0
                       else if (if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 2 /\ x.second_value = 0)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = True /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 5
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 0 /\
                                                  x.second_value = 2)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 0 /\
                                               x.second_value = 2
                                               else epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 2 /\
                                               x.second_value = 0) =
                               (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then 3 else 12
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if (if x!0 = (epsilon x:basic_record.
                    x.flag = False /\ x.first_value = 2 /\ x.second_value = 0)
                 then epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
                 else if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 3 /\ x.second_value = 5)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 0 /\ x.second_value = 2)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 0 /\ x.second_value = 2
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0) =
                (epsilon x:basic_record.
                x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
             then 5
             else if (if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 2 /\ x.second_value = 0)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 0
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 0 /\
                                        x.second_value = 2)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 0 /\ x.second_value = 2
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 0) =
                     (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 0 /\ x.second_value = 2)
                  then 2
                  else if (if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 2 /\ x.second_value = 0)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 0
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 0 /\
                                             x.second_value = 2)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 0 /\
                                          x.second_value = 2 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 2 /\
                                          x.second_value = 0) =
                          (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 2 /\ x.second_value = 0)
                       then 0
                       else if (if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 2 /\ x.second_value = 0)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = True /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 5
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 0 /\
                                                  x.second_value = 2)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 0 /\
                                               x.second_value = 2
                                               else epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 2 /\
                                               x.second_value = 0) =
                               (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then 5 else 13
  Line 23:
    i : int = (- 1)
  Line 27:
    i : int = (- 1)

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 27, characters 21-25:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if ((if x!0 = False then False
                           else if x!0 = True then True else False) =
                          True /\
                          (if x!1 = 2 then 2
                           else if x!1 = 3 then 3
                                else if x!1 = 0 then 0 else 2) =
                          3) /\
                         (if x!2 = 2 then 2
                          else if x!2 = 5 then 5
                               else if x!2 = 0 then 0 else 2) =
                         5
                      then epsilon x:basic_record.
                      x.flag = True /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if ((if x!0 = False then False
                                else if x!0 = True then True else False) =
                               False /\
                               (if x!1 = 2 then 2
                                else if x!1 = 3 then 3
                                     else if x!1 = 0 then 0 else 2) =
                               0) /\
                              (if x!2 = 2 then 2
                               else if x!2 = 5 then 5
                                    else if x!2 = 0 then 0 else 2) =
                              2
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 0 /\ x.second_value = 2
                           else if ((if x!0 = False then False
                                     else if x!0 = True then True else False) =
                                    False /\
                                    (if x!1 = 2 then 2
                                     else if x!1 = 3 then 3
                                          else if x!1 = 0 then 0 else 2) =
                                    2) /\
                                   (if x!2 = 2 then 2
                                    else if x!2 = 5 then 5
                                         else if x!2 = 0 then 0 else 2) =
                                   0
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0
                                else if ((if x!0 = False then False
                                          else if x!0 = True then True
                                               else False) =
                                         False /\
                                         (if x!1 = 2 then 2
                                          else if x!1 = 3 then 3
                                               else if x!1 = 0 then 0 else 2) =
                                         3) /\
                                        (if x!2 = 2 then 2
                                         else if x!2 = 5 then 5
                                              else if x!2 = 0 then 0 else 2) =
                                        5
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 0 /\ x.second_value = 2
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if (if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 0)
                  then epsilon x:basic_record.
                  x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 3 /\ x.second_value = 5)
                       then epsilon x:basic_record.
                       x.flag = False /\
                       x.first_value = 3 /\ x.second_value = 5
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = True /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then epsilon x:basic_record.
                            x.flag = True /\
                            x.first_value = 3 /\ x.second_value = 5
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 0 /\ x.second_value = 2)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 0 /\ x.second_value = 2
                                 else epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 2 /\ x.second_value = 0) =
                 (epsilon x:basic_record.
                 x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
              then True
              else if (if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 2 /\ x.second_value = 0)
                       then epsilon x:basic_record.
                       x.flag = False /\
                       x.first_value = 2 /\ x.second_value = 0
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then epsilon x:basic_record.
                            x.flag = False /\
                            x.first_value = 3 /\ x.second_value = 5
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = True /\
                                    x.first_value = 3 /\ x.second_value = 5)
                                 then epsilon x:basic_record.
                                 x.flag = True /\
                                 x.first_value = 3 /\ x.second_value = 5
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 0 /\
                                         x.second_value = 2)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 0 /\ x.second_value = 2
                                      else epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 2 /\ x.second_value = 0) =
                      (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 3 /\ x.second_value = 5)
                   then False
                   else if (if x!0 = (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 2 /\ x.second_value = 0)
                            then epsilon x:basic_record.
                            x.flag = False /\
                            x.first_value = 2 /\ x.second_value = 0
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 3 /\ x.second_value = 5)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 3 /\ x.second_value = 5
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = True /\
                                         x.first_value = 3 /\
                                         x.second_value = 5)
                                      then epsilon x:basic_record.
                                      x.flag = True /\
                                      x.first_value = 3 /\ x.second_value = 5
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = False /\
                                              x.first_value = 0 /\
                                              x.second_value = 2)
                                           then epsilon x:basic_record.
                                           x.flag = False /\
                                           x.first_value = 0 /\
                                           x.second_value = 2 else epsilon x:
                                           basic_record.
                                           x.flag = False /\
                                           x.first_value = 2 /\
                                           x.second_value = 0) =
                           (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 0 /\ x.second_value = 2)
                        then False
                        else if (if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 2 /\ x.second_value = 0)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 2 /\ x.second_value = 0
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 3 /\
                                         x.second_value = 5)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 3 /\ x.second_value = 5
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = True /\
                                              x.first_value = 3 /\
                                              x.second_value = 5)
                                           then epsilon x:basic_record.
                                           x.flag = True /\
                                           x.first_value = 3 /\
                                           x.second_value = 5
                                           else if x!0 = (epsilon x:
                                                   basic_record.
                                                   x.flag = False /\
                                                   x.first_value = 0 /\
                                                   x.second_value = 2)
                                                then epsilon x:basic_record.
                                                x.flag = False /\
                                                x.first_value = 0 /\
                                                x.second_value = 2
                                                else epsilon x:basic_record.
                                                x.flag = False /\
                                                x.first_value = 2 /\
                                                x.second_value = 0) =
                                (epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0)
                             then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if (if x!0 = (epsilon x:basic_record.
                    x.flag = False /\ x.first_value = 2 /\ x.second_value = 0)
                 then epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
                 else if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 3 /\ x.second_value = 5)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 0 /\ x.second_value = 2)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 0 /\ x.second_value = 2
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0) =
                (epsilon x:basic_record.
                x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
             then 3
             else if (if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 2 /\ x.second_value = 0)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 0
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 0 /\
                                        x.second_value = 2)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 0 /\ x.second_value = 2
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 0) =
                     (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 0)
                  then 2
                  else if (if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 2 /\ x.second_value = 0)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 0
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 0 /\
                                             x.second_value = 2)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 0 /\
                                          x.second_value = 2 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 2 /\
                                          x.second_value = 0) =
                          (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 0 /\ x.second_value = 2)
                       then 0
                       else if (if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 2 /\ x.second_value = 0)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = True /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 5
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 0 /\
                                                  x.second_value = 2)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 0 /\
                                               x.second_value = 2
                                               else epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 2 /\
                                               x.second_value = 0) =
                               (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then 3 else 12
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if (if x!0 = (epsilon x:basic_record.
                    x.flag = False /\ x.first_value = 2 /\ x.second_value = 0)
                 then epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
                 else if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 3 /\ x.second_value = 5)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 0 /\ x.second_value = 2)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 0 /\ x.second_value = 2
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0) =
                (epsilon x:basic_record.
                x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
             then 5
             else if (if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 2 /\ x.second_value = 0)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 0
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 0 /\
                                        x.second_value = 2)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 0 /\ x.second_value = 2
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 0) =
                     (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 0 /\ x.second_value = 2)
                  then 2
                  else if (if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 2 /\ x.second_value = 0)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 0
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 0 /\
                                             x.second_value = 2)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 0 /\
                                          x.second_value = 2 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 2 /\
                                          x.second_value = 0) =
                          (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 2 /\ x.second_value = 0)
                       then 0
                       else if (if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 2 /\ x.second_value = 0)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 0
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = True /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 5
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 0 /\
                                                  x.second_value = 2)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 0 /\
                                               x.second_value = 2
                                               else epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 2 /\
                                               x.second_value = 0) =
                               (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then 5 else 13
  Line 23:
    i : int = (- 1)
  Line 27:
    i : int = (- 1)
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = True /\ x.first_value = 3 /\ x.second_value = 5

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 27, characters 5-81:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if ((if x!0 = True then True
                           else if x!0 = False then False else True) =
                          True /\
                          (if x!1 = 3 then 3 else if x!1 = 6 then 6 else 3) =
                          3) /\
                         (if x!2 = 2 then 2
                          else if x!2 = 69 then 69
                               else if x!2 = 5 then 5 else 2) =
                         5
                      then epsilon x:basic_record.
                      x.flag = True /\
                      x.first_value = 3 /\ x.second_value = 5
                      else if ((if x!0 = True then True
                                else if x!0 = False then False else True) =
                               True /\
                               (if x!1 = 3 then 3
                                else if x!1 = 6 then 6 else 3) =
                               3) /\
                              (if x!2 = 2 then 2
                               else if x!2 = 69 then 69
                                    else if x!2 = 5 then 5 else 2) =
                              69
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 69
                           else if ((if x!0 = True then True
                                     else if x!0 = False then False else True) =
                                    False /\
                                    (if x!1 = 3 then 3
                                     else if x!1 = 6 then 6 else 3) =
                                    3) /\
                                   (if x!2 = 2 then 2
                                    else if x!2 = 69 then 69
                                         else if x!2 = 5 then 5 else 2) =
                                   5
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if ((if x!0 = True then True
                                          else if x!0 = False then False
                                               else True) =
                                         False /\
                                         (if x!1 = 3 then 3
                                          else if x!1 = 6 then 6 else 3) =
                                         6) /\
                                        (if x!2 = 2 then 2
                                         else if x!2 = 69 then 69
                                              else if x!2 = 5 then 5 else 2) =
                                        2
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 6 /\ x.second_value = 2
                                     else if ((if x!0 = True then True
                                               else if x!0 = False then False
                                                    else True) =
                                              False /\
                                              (if x!1 = 3 then 3
                                               else if x!1 = 6 then 6 else 3) =
                                              3) /\
                                             (if x!2 = 2 then 2
                                              else if x!2 = 69 then 69
                                                   else if x!2 = 5 then 5
                                                        else 2) =
                                             69
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 3 /\
                                          x.second_value = 69 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 6 /\
                                          x.second_value = 2
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if (if x!0 = (epsilon x:basic_record.
                     x.flag = True /\
                     x.first_value = 3 /\ x.second_value = 69)
                  then epsilon x:basic_record.
                  x.flag = True /\ x.first_value = 3 /\ x.second_value = 69
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 6 /\ x.second_value = 2)
                       then epsilon x:basic_record.
                       x.flag = False /\
                       x.first_value = 6 /\ x.second_value = 2
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = True /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then epsilon x:basic_record.
                            x.flag = True /\
                            x.first_value = 3 /\ x.second_value = 5
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 3 /\ x.second_value = 69)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 3 /\ x.second_value = 69
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 3 /\
                                         x.second_value = 5)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 3 /\ x.second_value = 5
                                      else epsilon x:basic_record.
                                      x.flag = True /\
                                      x.first_value = 3 /\
                                      x.second_value = 69) =
                 (epsilon x:basic_record.
                 x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
              then True
              else if (if x!0 = (epsilon x:basic_record.
                          x.flag = True /\
                          x.first_value = 3 /\ x.second_value = 69)
                       then epsilon x:basic_record.
                       x.flag = True /\
                       x.first_value = 3 /\ x.second_value = 69
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 6 /\ x.second_value = 2)
                            then epsilon x:basic_record.
                            x.flag = False /\
                            x.first_value = 6 /\ x.second_value = 2
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = True /\
                                    x.first_value = 3 /\ x.second_value = 5)
                                 then epsilon x:basic_record.
                                 x.flag = True /\
                                 x.first_value = 3 /\ x.second_value = 5
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 3 /\
                                         x.second_value = 69)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 3 /\
                                      x.second_value = 69
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = False /\
                                              x.first_value = 3 /\
                                              x.second_value = 5)
                                           then epsilon x:basic_record.
                                           x.flag = False /\
                                           x.first_value = 3 /\
                                           x.second_value = 5 else epsilon x:
                                           basic_record.
                                           x.flag = True /\
                                           x.first_value = 3 /\
                                           x.second_value = 69) =
                      (epsilon x:basic_record.
                      x.flag = True /\
                      x.first_value = 3 /\ x.second_value = 69)
                   then True
                   else if (if x!0 = (epsilon x:basic_record.
                               x.flag = True /\
                               x.first_value = 3 /\ x.second_value = 69)
                            then epsilon x:basic_record.
                            x.flag = True /\
                            x.first_value = 3 /\ x.second_value = 69
                            else if x!0 = (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 6 /\ x.second_value = 2)
                                 then epsilon x:basic_record.
                                 x.flag = False /\
                                 x.first_value = 6 /\ x.second_value = 2
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = True /\
                                         x.first_value = 3 /\
                                         x.second_value = 5)
                                      then epsilon x:basic_record.
                                      x.flag = True /\
                                      x.first_value = 3 /\ x.second_value = 5
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = False /\
                                              x.first_value = 3 /\
                                              x.second_value = 69)
                                           then epsilon x:basic_record.
                                           x.flag = False /\
                                           x.first_value = 3 /\
                                           x.second_value = 69
                                           else if x!0 = (epsilon x:
                                                   basic_record.
                                                   x.flag = False /\
                                                   x.first_value = 3 /\
                                                   x.second_value = 5)
                                                then epsilon x:basic_record.
                                                x.flag = False /\
                                                x.first_value = 3 /\
                                                x.second_value = 5
                                                else epsilon x:basic_record.
                                                x.flag = True /\
                                                x.first_value = 3 /\
                                                x.second_value = 69) =
                           (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 3 /\ x.second_value = 69)
                        then False
                        else if (if x!0 = (epsilon x:basic_record.
                                    x.flag = True /\
                                    x.first_value = 3 /\ x.second_value = 69)
                                 then epsilon x:basic_record.
                                 x.flag = True /\
                                 x.first_value = 3 /\ x.second_value = 69
                                 else if x!0 = (epsilon x:basic_record.
                                         x.flag = False /\
                                         x.first_value = 6 /\
                                         x.second_value = 2)
                                      then epsilon x:basic_record.
                                      x.flag = False /\
                                      x.first_value = 6 /\ x.second_value = 2
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = True /\
                                              x.first_value = 3 /\
                                              x.second_value = 5)
                                           then epsilon x:basic_record.
                                           x.flag = True /\
                                           x.first_value = 3 /\
                                           x.second_value = 5
                                           else if x!0 = (epsilon x:
                                                   basic_record.
                                                   x.flag = False /\
                                                   x.first_value = 3 /\
                                                   x.second_value = 69)
                                                then epsilon x:basic_record.
                                                x.flag = False /\
                                                x.first_value = 3 /\
                                                x.second_value = 69
                                                else if x!0 = (epsilon x:
                                                        basic_record.
                                                        x.flag = False /\
                                                        x.first_value = 3 /\
                                                        x.second_value = 5)
                                                     then epsilon x:
                                                     basic_record.
                                                     x.flag = False /\
                                                     x.first_value = 3 /\
                                                     x.second_value = 5
                                                     else epsilon x:
                                                     basic_record.
                                                     x.flag = True /\
                                                     x.first_value = 3 /\
                                                     x.second_value = 69) =
                                (epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 5)
                             then False
                             else if (if x!0 = (epsilon x:basic_record.
                                         x.flag = True /\
                                         x.first_value = 3 /\
                                         x.second_value = 69)
                                      then epsilon x:basic_record.
                                      x.flag = True /\
                                      x.first_value = 3 /\
                                      x.second_value = 69
                                      else if x!0 = (epsilon x:basic_record.
                                              x.flag = False /\
                                              x.first_value = 6 /\
                                              x.second_value = 2)
                                           then epsilon x:basic_record.
                                           x.flag = False /\
                                           x.first_value = 6 /\
                                           x.second_value = 2
                                           else if x!0 = (epsilon x:
                                                   basic_record.
                                                   x.flag = True /\
                                                   x.first_value = 3 /\
                                                   x.second_value = 5)
                                                then epsilon x:basic_record.
                                                x.flag = True /\
                                                x.first_value = 3 /\
                                                x.second_value = 5
                                                else if x!0 = (epsilon x:
                                                        basic_record.
                                                        x.flag = False /\
                                                        x.first_value = 3 /\
                                                        x.second_value = 69)
                                                     then epsilon x:
                                                     basic_record.
                                                     x.flag = False /\
                                                     x.first_value = 3 /\
                                                     x.second_value = 69
                                                     else if x!0 =
                                                             (epsilon x:
                                                             basic_record.
                                                             x.flag = False /\
                                                             x.first_value =
                                                             3 /\
                                                             x.second_value =
                                                             5)
                                                          then epsilon x:
                                                          basic_record.
                                                          x.flag = False /\
                                                          x.first_value = 3 /\
                                                          x.second_value = 5
                                                          else epsilon x:
                                                          basic_record.
                                                          x.flag = True /\
                                                          x.first_value = 3 /\
                                                          x.second_value = 69) =
                                     (epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 6 /\ x.second_value = 2)
                                  then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if (if x!0 = (epsilon x:basic_record.
                    x.flag = True /\ x.first_value = 3 /\ x.second_value = 69)
                 then epsilon x:basic_record.
                 x.flag = True /\ x.first_value = 3 /\ x.second_value = 69
                 else if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 6 /\ x.second_value = 2)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 6 /\ x.second_value = 2
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 3 /\ x.second_value = 69)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 69
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 69) =
                (epsilon x:basic_record.
                x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
             then 3
             else if (if x!0 = (epsilon x:basic_record.
                         x.flag = True /\
                         x.first_value = 3 /\ x.second_value = 69)
                      then epsilon x:basic_record.
                      x.flag = True /\
                      x.first_value = 3 /\ x.second_value = 69
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 6 /\ x.second_value = 2)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 6 /\ x.second_value = 2
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 69)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 69
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 3 /\
                                          x.second_value = 5 else epsilon x:
                                          basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 69) =
                     (epsilon x:basic_record.
                     x.flag = True /\
                     x.first_value = 3 /\ x.second_value = 69)
                  then 3
                  else if (if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 69)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 69
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 6 /\ x.second_value = 2)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 6 /\ x.second_value = 2
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 3 /\
                                             x.second_value = 69)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 3 /\
                                          x.second_value = 69
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 3 /\
                                                  x.second_value = 5)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 3 /\
                                               x.second_value = 5
                                               else epsilon x:basic_record.
                                               x.flag = True /\
                                               x.first_value = 3 /\
                                               x.second_value = 69) =
                          (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 6 /\ x.second_value = 2)
                       then 6
                       else if (if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 69)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 69
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 6 /\
                                        x.second_value = 2)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 6 /\ x.second_value = 2
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = True /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 5
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 3 /\
                                                  x.second_value = 69)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 3 /\
                                               x.second_value = 69
                                               else if x!0 = (epsilon x:
                                                       basic_record.
                                                       x.flag = False /\
                                                       x.first_value = 3 /\
                                                       x.second_value = 5)
                                                    then epsilon x:
                                                    basic_record.
                                                    x.flag = False /\
                                                    x.first_value = 3 /\
                                                    x.second_value = 5
                                                    else epsilon x:
                                                    basic_record.
                                                    x.flag = True /\
                                                    x.first_value = 3 /\
                                                    x.second_value = 69) =
                               (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 3 /\ x.second_value = 5)
                            then 3
                            else if (if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 69)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 69
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 6 /\
                                             x.second_value = 2)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 6 /\
                                          x.second_value = 2
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = True /\
                                                  x.first_value = 3 /\
                                                  x.second_value = 5)
                                               then epsilon x:basic_record.
                                               x.flag = True /\
                                               x.first_value = 3 /\
                                               x.second_value = 5
                                               else if x!0 = (epsilon x:
                                                       basic_record.
                                                       x.flag = False /\
                                                       x.first_value = 3 /\
                                                       x.second_value = 69)
                                                    then epsilon x:
                                                    basic_record.
                                                    x.flag = False /\
                                                    x.first_value = 3 /\
                                                    x.second_value = 69
                                                    else if x!0 = (epsilon x:
                                                            basic_record.
                                                            x.flag = False /\
                                                            x.first_value = 3 /\
                                                            x.second_value =
                                                            5)
                                                         then epsilon x:
                                                         basic_record.
                                                         x.flag = False /\
                                                         x.first_value = 3 /\
                                                         x.second_value = 5
                                                         else epsilon x:
                                                         basic_record.
                                                         x.flag = True /\
                                                         x.first_value = 3 /\
                                                         x.second_value = 69) =
                                    (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 3 /\ x.second_value = 69)
                                 then 3 else 11
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if (if x!0 = (epsilon x:basic_record.
                    x.flag = True /\ x.first_value = 3 /\ x.second_value = 69)
                 then epsilon x:basic_record.
                 x.flag = True /\ x.first_value = 3 /\ x.second_value = 69
                 else if x!0 = (epsilon x:basic_record.
                         x.flag = False /\
                         x.first_value = 6 /\ x.second_value = 2)
                      then epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 6 /\ x.second_value = 2
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 5)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 5
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 3 /\ x.second_value = 69)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 3 /\ x.second_value = 69
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 69) =
                (epsilon x:basic_record.
                x.flag = True /\ x.first_value = 3 /\ x.second_value = 5)
             then 5
             else if (if x!0 = (epsilon x:basic_record.
                         x.flag = True /\
                         x.first_value = 3 /\ x.second_value = 69)
                      then epsilon x:basic_record.
                      x.flag = True /\
                      x.first_value = 3 /\ x.second_value = 69
                      else if x!0 = (epsilon x:basic_record.
                              x.flag = False /\
                              x.first_value = 6 /\ x.second_value = 2)
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 6 /\ x.second_value = 2
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 5)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 5
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 3 /\
                                        x.second_value = 69)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 3 /\ x.second_value = 69
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 3 /\
                                          x.second_value = 5 else epsilon x:
                                          basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 69) =
                     (epsilon x:basic_record.
                     x.flag = True /\
                     x.first_value = 3 /\ x.second_value = 69)
                  then 69
                  else if (if x!0 = (epsilon x:basic_record.
                              x.flag = True /\
                              x.first_value = 3 /\ x.second_value = 69)
                           then epsilon x:basic_record.
                           x.flag = True /\
                           x.first_value = 3 /\ x.second_value = 69
                           else if x!0 = (epsilon x:basic_record.
                                   x.flag = False /\
                                   x.first_value = 6 /\ x.second_value = 2)
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 6 /\ x.second_value = 2
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 5)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 5
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 3 /\
                                             x.second_value = 69)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 3 /\
                                          x.second_value = 69
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 3 /\
                                                  x.second_value = 5)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 3 /\
                                               x.second_value = 5
                                               else epsilon x:basic_record.
                                               x.flag = True /\
                                               x.first_value = 3 /\
                                               x.second_value = 69) =
                          (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 3 /\ x.second_value = 5)
                       then 5
                       else if (if x!0 = (epsilon x:basic_record.
                                   x.flag = True /\
                                   x.first_value = 3 /\ x.second_value = 69)
                                then epsilon x:basic_record.
                                x.flag = True /\
                                x.first_value = 3 /\ x.second_value = 69
                                else if x!0 = (epsilon x:basic_record.
                                        x.flag = False /\
                                        x.first_value = 6 /\
                                        x.second_value = 2)
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 6 /\ x.second_value = 2
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = True /\
                                             x.first_value = 3 /\
                                             x.second_value = 5)
                                          then epsilon x:basic_record.
                                          x.flag = True /\
                                          x.first_value = 3 /\
                                          x.second_value = 5
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = False /\
                                                  x.first_value = 3 /\
                                                  x.second_value = 69)
                                               then epsilon x:basic_record.
                                               x.flag = False /\
                                               x.first_value = 3 /\
                                               x.second_value = 69
                                               else if x!0 = (epsilon x:
                                                       basic_record.
                                                       x.flag = False /\
                                                       x.first_value = 3 /\
                                                       x.second_value = 5)
                                                    then epsilon x:
                                                    basic_record.
                                                    x.flag = False /\
                                                    x.first_value = 3 /\
                                                    x.second_value = 5
                                                    else epsilon x:
                                                    basic_record.
                                                    x.flag = True /\
                                                    x.first_value = 3 /\
                                                    x.second_value = 69) =
                               (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 6 /\ x.second_value = 2)
                            then 2
                            else if (if x!0 = (epsilon x:basic_record.
                                        x.flag = True /\
                                        x.first_value = 3 /\
                                        x.second_value = 69)
                                     then epsilon x:basic_record.
                                     x.flag = True /\
                                     x.first_value = 3 /\ x.second_value = 69
                                     else if x!0 = (epsilon x:basic_record.
                                             x.flag = False /\
                                             x.first_value = 6 /\
                                             x.second_value = 2)
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 6 /\
                                          x.second_value = 2
                                          else if x!0 = (epsilon x:
                                                  basic_record.
                                                  x.flag = True /\
                                                  x.first_value = 3 /\
                                                  x.second_value = 5)
                                               then epsilon x:basic_record.
                                               x.flag = True /\
                                               x.first_value = 3 /\
                                               x.second_value = 5
                                               else if x!0 = (epsilon x:
                                                       basic_record.
                                                       x.flag = False /\
                                                       x.first_value = 3 /\
                                                       x.second_value = 69)
                                                    then epsilon x:
                                                    basic_record.
                                                    x.flag = False /\
                                                    x.first_value = 3 /\
                                                    x.second_value = 69
                                                    else if x!0 = (epsilon x:
                                                            basic_record.
                                                            x.flag = False /\
                                                            x.first_value = 3 /\
                                                            x.second_value =
                                                            5)
                                                         then epsilon x:
                                                         basic_record.
                                                         x.flag = False /\
                                                         x.first_value = 3 /\
                                                         x.second_value = 5
                                                         else epsilon x:
                                                         basic_record.
                                                         x.flag = True /\
                                                         x.first_value = 3 /\
                                                         x.second_value = 69) =
                                    (epsilon x:basic_record.
                                    x.flag = False /\
                                    x.first_value = 3 /\ x.second_value = 69)
                                 then 69 else 12
  Line 23:
    i : int = (- 1)
  Line 27:
    i : int = (- 1)
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = True /\ x.first_value = 3 /\ x.second_value = 69
    result of call at line 27, characters 21-30 : bool = True
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = True /\ x.first_value = 3 /\ x.second_value = 5
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = True /\ x.first_value = 3 /\ x.second_value = 5

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 28, characters 64-68:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 0
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 0
                           else epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 0
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 0)
              then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 0)
             then 2 else 2
  Line 18:
    sec_val : basic_record -> int = fun (x!0:basic_record) -> 0
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 0
  Line 28:
    i : int = (- 1)

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 28, characters 21-25:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    i : int = (- 1)
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 28, characters 5-82:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    i : int = (- 1)
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 29, characters 64-68:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 29:
    i : int = (- 1)

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 29, characters 21-25:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 6)
                  then 6 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 29:
    i : int = (- 1)
    result of call at line 29, characters 64-81 : int = 6
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 29, characters 5-82:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else if (x!0 = False /\ x!1 = 23) /\ x!2 = 6
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False
                   else if x!0 = (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 6)
                        then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 6)
                  then 6 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 29:
    i : int = (- 1)
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 29, characters 21-30 : bool = False
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
    result of call at line 29, characters 64-81 : int = 6
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 30, characters 74-78:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else if (x!0 = False /\ x!1 = 23) /\ x!2 = 6
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False
                   else if x!0 = (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 6)
                        then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 6)
                  then 6 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 29, characters 21-30 : bool = False
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
    result of call at line 29, characters 64-81 : int = 6
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
  Line 30:
    i : int = (- 1)

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 30, characters 41-45:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else if (x!0 = False /\ x!1 = 23) /\ x!2 = 6
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
                                     else epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False
                   else if x!0 = (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 6)
                        then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 6)
                  then 6
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 2 /\ x.second_value = 7)
                       then 7 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 29, characters 21-30 : bool = False
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
    result of call at line 29, characters 64-81 : int = 6
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
  Line 30:
    i : int = (- 1)
    result of call at line 30, characters 74-91 : int = 7
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 7

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 30, characters 5-92:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4
                      else if (x!0 = False /\ x!1 = 2) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 4
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 4
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 2 /\ x.second_value = 4
                                else if (x!0 = False /\ x!1 = 23) /\ x!2 = 6
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 2 /\ x.second_value = 4
                                     else if (x!0 = False /\ x!1 = 8) /\
                                             x!2 = 7
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 2 /\
                                          x.second_value = 4 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 2 /\
                                          x.second_value = 4
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 2 /\ x.second_value = 4)
                   then False
                   else if x!0 = (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 2 /\ x.second_value = 6)
                        then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 2
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 8 /\ x.second_value = 7)
                  then 8 else 2
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 2 /\ x.second_value = 4)
             then 4
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 2 /\ x.second_value = 6)
                  then 6
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 8 /\ x.second_value = 7)
                       then 7 else 4
  Line 23:
    i : int = (- 1)
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 28, characters 64-81 : int = 4
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 29, characters 21-30 : bool = False
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
    result of call at line 29, characters 64-81 : int = 6
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 6
  Line 30:
    i : int = (- 1)
    result of call at line 30, characters 13-92 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 2 /\ x.second_value = 4
    result of call at line 30, characters 41-57 : int = 8
    result of call at line 30, characters 41-45 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 8 /\ x.second_value = 7
    result of call at line 30, characters 74-91 : int = 7
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 8 /\ x.second_value = 7

File "bench/check-ce/array_records_poly.mlw", line 31, characters 13-35:
Sub-goal Assertion of goal var_overwrite'vc.
Prover result is: Valid.

<check-ce-categorization>Categorizations of models:
- Selected model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 25, characters 15-36:
Sub-goal Postcondition of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length : ty -> uni -> int = fun (x!0:ty) (x!1:uni) -> 0
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun (x!0:bool) (x!1:int) (x!2:int) ->
                      if (x!0 = True /\ x!1 = 3) /\ x!2 = 5 then epsilon x:
                      basic_record.
                      x.flag = False /\
                      x.first_value = 4 /\ x.second_value = 7
                      else if (x!0 = False /\ x!1 = 4) /\ x!2 = 69
                           then epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 4 /\ x.second_value = 7
                           else if (x!0 = False /\ x!1 = 42) /\ x!2 = 7
                                then epsilon x:basic_record.
                                x.flag = False /\
                                x.first_value = 4 /\ x.second_value = 7
                                else if (x!0 = False /\ x!1 = 23) /\ x!2 = 8
                                     then epsilon x:basic_record.
                                     x.flag = False /\
                                     x.first_value = 4 /\ x.second_value = 7
                                     else if (x!0 = False /\ x!1 = 10) /\
                                             x!2 = 9
                                          then epsilon x:basic_record.
                                          x.flag = False /\
                                          x.first_value = 4 /\
                                          x.second_value = 7 else epsilon x:
                                          basic_record.
                                          x.flag = False /\
                                          x.first_value = 4 /\
                                          x.second_value = 7
  Line 16:
    flag :
      basic_record
      ->
      bool = fun (x!0:basic_record) ->
              if x!0 = (epsilon x:basic_record.
                 x.flag = False /\ x.first_value = 4 /\ x.second_value = 7)
              then False
              else if x!0 = (epsilon x:basic_record.
                      x.flag = False /\
                      x.first_value = 4 /\ x.second_value = 7)
                   then False
                   else if x!0 = (epsilon x:basic_record.
                           x.flag = False /\
                           x.first_value = 4 /\ x.second_value = 8)
                        then False else False
  Line 17:
    first_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 4 /\ x.second_value = 7)
             then 4
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 10 /\ x.second_value = 9)
                  then 10
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 11 /\ x.second_value = 69)
                       then 11 else 4
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun (x!0:basic_record) ->
             if x!0 = (epsilon x:basic_record.
                x.flag = False /\ x.first_value = 4 /\ x.second_value = 7)
             then 7
             else if x!0 = (epsilon x:basic_record.
                     x.flag = False /\
                     x.first_value = 4 /\ x.second_value = 8)
                  then 8
                  else if x!0 = (epsilon x:basic_record.
                          x.flag = False /\
                          x.first_value = 10 /\ x.second_value = 9)
                       then 9
                       else if x!0 = (epsilon x:basic_record.
                               x.flag = False /\
                               x.first_value = 11 /\ x.second_value = 69)
                            then 69 else 7
  Line 23:
    i : int = 2
  Line 25:
    i : int = 2
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
    result of call at line 27, characters 21-30 : bool = False
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
    result of call at line 27, characters 45-61 : int = 4
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
    result of call at line 28, characters 21-30 : bool = False
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
    result of call at line 28, characters 64-81 : int = 7
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
    result of call at line 29, characters 21-30 : bool = False
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 8
    result of call at line 29, characters 64-81 : int = 8
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 8
  Line 30:
    result of call at line 30, characters 13-92 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 4 /\ x.second_value = 7
    result of call at line 30, characters 41-57 : int = 10
    result of call at line 30, characters 41-45 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 10 /\ x.second_value = 9
    result of call at line 30, characters 74-91 : int = 9
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x:
      basic_record.
      x.flag = False /\ x.first_value = 10 /\ x.second_value = 9

