File bench/check-ce/jlamp_array_mono.mlw:
Goal array'vc.
Prover result is: Valid.

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
File "bench/check-ce/jlamp_array_mono.mlw", line 48, characters 4-16:
Sub-goal Index in array bounds of goal f'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `f` cannot be evaluated):
File jlamp_array_mono.mlw:
  Line 11:
    two : t = epsilon x:t. to_int x = 2
  Line 14:
    three : t = epsilon x:t. to_int x = 3
  Line 18:
    elts :
      array
      ->
      int
      ->
      t = fun (bOUND_VARIABLE_417:array) ->
           fun (x:int) ->
            if x = 42 then epsilon x1:t. to_int x1 = 3 else epsilon x1:t.
            to_int x1 = 2
  Line 19:
    length : array -> int = fun (bOUND_VARIABLE_422:array) -> 0
  Line 28:
    mixfix [<-] :
      array
      ->
      int
      ->
      t
      ->
      array = fun (bOUND_VARIABLE_440:array) (bOUND_VARIABLE_441:int)
               (bOUND_VARIABLE_442:t) -> epsilon x:array.
               x.length = 0 /\
               x.elts =
               (fun (x1:int) ->
                 if x1 = 42 then epsilon x2:t. to_int x2 = 3 else epsilon x2:
                 t. to_int x2 = 2)
  Line 33:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)
  Line 44:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)
  Line 48:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `f` cannot be evaluated)
File "bench/check-ce/jlamp_array_mono.mlw", line 47, characters 14-27:
Sub-goal Postcondition of goal f'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `f` cannot be evaluated):
File jlamp_array_mono.mlw:
  Line 11:
    two : t = epsilon x:t. to_int x = 2
  Line 14:
    three : t = epsilon x:t. to_int x = 3
  Line 19:
    length : array -> int = fun (bOUND_VARIABLE_519:array) -> 0
  Line 28:
    mixfix [<-] :
      array
      ->
      int
      ->
      t
      ->
      array = fun (bOUND_VARIABLE_532:array) (bOUND_VARIABLE_533:int)
               (bOUND_VARIABLE_534:t) -> epsilon x:array.
               x.length = 0 /\
               x.elts =
               (fun (x1:int) ->
                 if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:
                 t. to_int x2 = 3)
  Line 32:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\ x.elts = (fun (x1:int) -> epsilon x2:t. to_int x2 = 3)
  Line 34:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\ x.elts = (fun (x1:int) -> epsilon x2:t. to_int x2 = 3)
  Line 44:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\ x.elts = (fun (x1:int) -> epsilon x2:t. to_int x2 = 3)
  Line 47:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
        to_int x2 = 3)
    three : t = epsilon x:t. to_int x = 3
  Line 48:
    a :
      array = epsilon x:
      array.
      x.length = 0 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
        to_int x2 = 3)

File "bench/check-ce/jlamp_array_mono.mlw", line 54, characters 4-16:
Sub-goal Index in array bounds of goal g'vc.
Prover result is: Valid.

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `g` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `g` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `g` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `g` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `g` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `g` cannot be evaluated)
File "bench/check-ce/jlamp_array_mono.mlw", line 53, characters 14-27:
Sub-goal Postcondition of goal g'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `g` cannot be evaluated):
File jlamp_array_mono.mlw:
  Line 11:
    two : t = epsilon x:t. to_int x = 2
  Line 14:
    three : t = epsilon x:t. to_int x = 3
  Line 18:
    elts :
      array
      ->
      int
      ->
      t = fun (bOUND_VARIABLE_490:array) ->
           fun (x:int) ->
            if x = 17 then epsilon x1:t. to_int x1 = 3 else epsilon x1:t.
            to_int x1 = 2
  Line 19:
    length : array -> int = fun (bOUND_VARIABLE_495:array) -> 43
  Line 28:
    mixfix [<-] :
      array
      ->
      int
      ->
      t
      ->
      array = fun (bOUND_VARIABLE_508:array) (bOUND_VARIABLE_509:int)
               (bOUND_VARIABLE_510:t) -> epsilon x:array.
               x.length = 43 /\
               x.elts =
               (fun (x1:int) ->
                 if x1 = 17 then epsilon x2:t. to_int x2 = 3 else epsilon x2:
                 t. to_int x2 = 2)
  Line 32:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)
  Line 34:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)
  Line 50:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)
  Line 53:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)
    three : t = epsilon x:t. to_int x = 3
  Line 54:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3 else epsilon x2:t.
        to_int x2 = 2)

File "bench/check-ce/jlamp_array_mono.mlw", line 60, characters 4-16:
Sub-goal Index in array bounds of goal h'vc.
Prover result is: Valid.

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `h` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `h` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `h` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `h` cannot be evaluated)
File "bench/check-ce/jlamp_array_mono.mlw", line 59, characters 14-27:
Sub-goal Postcondition of goal h'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `h` cannot be evaluated):
File jlamp_array_mono.mlw:
  Line 11:
    two : t = epsilon x:t. to_int x = 2
  Line 14:
    three : t = epsilon x:t. to_int x = 3
  Line 19:
    length : array -> int = fun (bOUND_VARIABLE_543:array) -> 43
  Line 28:
    mixfix [<-] :
      array
      ->
      int
      ->
      t
      ->
      array = fun (bOUND_VARIABLE_556:array) (bOUND_VARIABLE_557:int)
               (bOUND_VARIABLE_558:t) -> epsilon x:array.
               x.length = 43 /\
               x.elts =
               (fun (x1:int) ->
                 if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:
                 t. to_int x2 = 2)
  Line 32:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3
        else if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
             to_int x2 = 2)
  Line 34:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3
        else if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
             to_int x2 = 2)
  Line 56:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 17 then epsilon x2:t. to_int x2 = 3
        else if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
             to_int x2 = 2)
  Line 59:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
        to_int x2 = 2)
    three : t = epsilon x:t. to_int x = 3
  Line 60:
    a :
      array = epsilon x:
      array.
      x.length = 43 /\
      x.elts =
      (fun (x1:int) ->
        if x1 = 42 then epsilon x2:t. to_int x2 = 2 else epsilon x2:t.
        to_int x2 = 2)

