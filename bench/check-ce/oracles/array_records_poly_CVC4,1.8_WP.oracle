<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 27, characters 45-49:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_622 bOUND_VARIABLE_623 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_622 bOUND_VARIABLE_623 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
  Line 20:
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_659 bOUND_VARIABLE_660 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_659 bOUND_VARIABLE_660 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_772 bOUND_VARIABLE_773
                      bOUND_VARIABLE_774 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_772 bOUND_VARIABLE_773
                      bOUND_VARIABLE_774 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val : basic_record -> int = [|_ => 5|]
    sec_val : basic_record -> int = [|_ => 5|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    i : int = -1
    i : int = -1

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 27, characters 21-25:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_631 bOUND_VARIABLE_632 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_631 bOUND_VARIABLE_632 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
  Line 20:
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_668 bOUND_VARIABLE_669 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_668 bOUND_VARIABLE_669 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_781 bOUND_VARIABLE_782
                      bOUND_VARIABLE_783 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_781 bOUND_VARIABLE_782
                      bOUND_VARIABLE_783 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val : basic_record -> int = [|_ => 5|]
    sec_val : basic_record -> int = [|_ => 5|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    i : int = -1
    i : int = -1
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 27, characters 5-81:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_651 bOUND_VARIABLE_652 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_651 bOUND_VARIABLE_652 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
  Line 20:
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_688 bOUND_VARIABLE_689 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_688 bOUND_VARIABLE_689 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_801 bOUND_VARIABLE_802
                      bOUND_VARIABLE_803 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_801 bOUND_VARIABLE_802
                      bOUND_VARIABLE_803 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 5}
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val : basic_record -> int = [|_ => 5|]
    sec_val : basic_record -> int = [|_ => 5|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    i : int = -1
    i : int = -1
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 28, characters 64-68:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 16:
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|_ =>
                         {Array_records.flag = true;
                          Array_records.first_value = 3;
                          Array_records.second_value = 0}|]|]
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|_ =>
                         {Array_records.flag = true;
                          Array_records.first_value = 3;
                          Array_records.second_value = 0}|]|]
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_767 bOUND_VARIABLE_768 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_767 bOUND_VARIABLE_768 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
  Line 20:
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_799 bOUND_VARIABLE_800 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_799 bOUND_VARIABLE_800 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_9161 bOUND_VARIABLE_9171
                      bOUND_VARIABLE_9181 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_9161 bOUND_VARIABLE_9171
                      bOUND_VARIABLE_9181 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val : basic_record -> int = [|_ => 0|]
    sec_val : basic_record -> int = [|_ => 0|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
  Line 28:
    i : int = -1
    i : int = -1

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 28, characters 21-25:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 16:
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|_ =>
                         {Array_records.flag = true;
                          Array_records.first_value = 3;
                          Array_records.second_value = 0}|]|]
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|_ =>
                         {Array_records.flag = true;
                          Array_records.first_value = 3;
                          Array_records.second_value = 0}|]|]
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_781 bOUND_VARIABLE_782 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_781 bOUND_VARIABLE_782 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
  Line 20:
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_813 bOUND_VARIABLE_814 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_813 bOUND_VARIABLE_814 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_9301 bOUND_VARIABLE_9311
                      bOUND_VARIABLE_9321 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_9301 bOUND_VARIABLE_9311
                      bOUND_VARIABLE_9321 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val : basic_record -> int = [|_ => 0|]
    sec_val : basic_record -> int = [|_ => 0|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
  Line 28:
    i : int = -1
    i : int = -1
    result of call at line 28, characters 64-81 : int = 0
    result of call at line 28, characters 64-81 : int = 0
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 28, characters 5-82:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 16:
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|_ =>
                         {Array_records.flag = true;
                          Array_records.first_value = 3;
                          Array_records.second_value = 0}|]|]
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|_ =>
                         {Array_records.flag = true;
                          Array_records.first_value = 3;
                          Array_records.second_value = 0}|]|]
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_819 bOUND_VARIABLE_820 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_819 bOUND_VARIABLE_820 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
  Line 20:
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_854 bOUND_VARIABLE_855 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
    mixfix [] :
      array
      basic_record
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_854 bOUND_VARIABLE_855 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
File array_records_poly.mlw:
  Line 14:
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_6301 bOUND_VARIABLE_6302
                      bOUND_VARIABLE_6303 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
    basic_record'mk :
      bool
      ->
      int
      ->
      int
      ->
      basic_record = fun bOUND_VARIABLE_6301 bOUND_VARIABLE_6302
                      bOUND_VARIABLE_6303 ->
                      {Array_records.flag = true;
                       Array_records.first_value = 3;
                       Array_records.second_value = 0}
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val : basic_record -> int = [|_ => 0|]
    sec_val : basic_record -> int = [|_ => 0|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
  Line 28:
    i : int = -1
    i : int = -1
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 28, characters 64-81 : int = 0
    result of call at line 28, characters 64-81 : int = 0
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 0}

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 29, characters 64-68:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_911 bOUND_VARIABLE_912 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_911 bOUND_VARIABLE_912 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1116 ->
             if {Array_records.flag = true;
                 Array_records.first_value = 3;
                 Array_records.second_value = 69} = bOUND_VARIABLE_1116
             then 69 else 5
    sec_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1116 ->
             if {Array_records.flag = true;
                 Array_records.first_value = 3;
                 Array_records.second_value = 69} = bOUND_VARIABLE_1116
             then 69 else 5
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
  Line 29:
    i : int = -1
    i : int = -1

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 29, characters 21-25:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_925 bOUND_VARIABLE_926 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_925 bOUND_VARIABLE_926 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 16:
    flag : basic_record -> bool = [|_ => true|]
    flag : basic_record -> bool = [|_ => true|]
  Line 17:
    first_val : basic_record -> int = [|_ => 3|]
    first_val : basic_record -> int = [|_ => 3|]
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1130 ->
             if {Array_records.flag = true;
                 Array_records.first_value = 3;
                 Array_records.second_value = 69} = bOUND_VARIABLE_1130
             then 69 else 5
    sec_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1130 ->
             if {Array_records.flag = true;
                 Array_records.first_value = 3;
                 Array_records.second_value = 69} = bOUND_VARIABLE_1130
             then 69 else 5
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 5}
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
  Line 29:
    i : int = -1
    i : int = -1
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}
    result of call at line 29, characters 64-68 :
      basic_record = {Array_records.flag = true;
                      Array_records.first_value = 3;
                      Array_records.second_value = 69}

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 29, characters 5-82:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 16:
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|-1 =>
                         {Array_records.flag = false;
                          Array_records.first_value = 2;
                          Array_records.second_value = -2};
                       _ =>
                       {Array_records.flag = false;
                        Array_records.first_value = 2;
                        Array_records.second_value = -2}|]|]
    elts :
      array
      basic_record
      ->
      int
      ->
      basic_record = [|_ =>
                       [|-1 =>
                         {Array_records.flag = false;
                          Array_records.first_value = 2;
                          Array_records.second_value = -2};
                       _ =>
                       {Array_records.flag = false;
                        Array_records.first_value = 2;
                        Array_records.second_value = -2}|]|]
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_967 bOUND_VARIABLE_968 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_967 bOUND_VARIABLE_968 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 16:
    flag : basic_record -> bool = [|_ => false|]
    flag : basic_record -> bool = [|_ => false|]
  Line 17:
    first_val : basic_record -> int = [|_ => 2|]
    first_val : basic_record -> int = [|_ => 2|]
  Line 18:
    sec_val : basic_record -> int = [|_ => -2|]
    sec_val : basic_record -> int = [|_ => -2|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 27, characters 13-81 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 27, characters 21-30 : bool = false
    result of call at line 27, characters 21-30 : bool = false
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 27, characters 21-25 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-61 : int = 2
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 27, characters 45-49 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 28, characters 13-82 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 28, characters 21-30 : bool = false
    result of call at line 28, characters 21-30 : bool = false
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 28, characters 21-25 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 28, characters 64-81 : int = -2
    result of call at line 28, characters 64-81 : int = -2
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 28, characters 64-68 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
  Line 29:
    i : int = -1
    i : int = -1
    result of call at line 29, characters 13-82 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 29, characters 13-82 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 29, characters 21-30 : bool = false
    result of call at line 29, characters 21-30 : bool = false
    result of call at line 29, characters 21-25 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 29, characters 21-25 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 29, characters 64-81 : int = -2
    result of call at line 29, characters 64-81 : int = -2
    result of call at line 29, characters 64-68 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}
    result of call at line 29, characters 64-68 :
      basic_record = {Array_records.flag = false;
                      Array_records.first_value = 2;
                      Array_records.second_value = -2}

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 30, characters 74-78:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1044 bOUND_VARIABLE_1045 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1044 bOUND_VARIABLE_1045 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 17:
    first_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 42;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274 then 23
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274
                 then 23 else 3|]
    first_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 42;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274 then 23
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274
                 then 23 else 3|]
  Line 18:
    sec_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 69;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1274 then 69
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274
                 then 69
                 else if epsilon x.
                      (Array_records.second_value x) = 69 /\
                      (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274
                      then 69 else 5|]
    sec_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 69;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1274 then 69
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274
                 then 69
                 else if epsilon x.
                      (Array_records.second_value x) = 69 /\
                      (Array_records.first_value x) = 23 = bOUND_VARIABLE_1274
                      then 69 else 5|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
  Line 30:
    i : int = -1
    i : int = -1

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 30, characters 41-45:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1058 bOUND_VARIABLE_1059 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1058 bOUND_VARIABLE_1059 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 17:
    first_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 42;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288 then 23
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288
                 then 23 else 3|]
    first_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 42;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288 then 23
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288
                 then 23 else 3|]
  Line 18:
    sec_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 69;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1288 then 69
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288
                 then 69
                 else if epsilon x.
                      (Array_records.second_value x) = 69 /\
                      (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288
                      then 69 else 5|]
    sec_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 69;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1288 then 69
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288
                 then 69
                 else if epsilon x.
                      (Array_records.second_value x) = 69 /\
                      (Array_records.first_value x) = 23 = bOUND_VARIABLE_1288
                      then 69 else 5|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
  Line 30:
    i : int = -1
    i : int = -1
    result of call at line 30, characters 74-91 : int = 69
    result of call at line 30, characters 74-91 : int = 69
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Checked model 2: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 30, characters 5-92:
Sub-goal Index in array bounds of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1077 bOUND_VARIABLE_1078 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1077 bOUND_VARIABLE_1078 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 17:
    first_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 42;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307 then 23
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307
                 then 23 else 3|]
    first_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 42;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307 then 23
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307
                 then 23 else 3|]
  Line 18:
    sec_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 69;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1307 then 69
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307
                 then 69
                 else if epsilon x.
                      (Array_records.second_value x) = 69 /\
                      (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307
                      then 69 else 5|]
    sec_val :
      basic_record
      ->
      int = [|epsilon x.
              (Array_records.second_value x) = 69 /\
              (Array_records.first_value x) = 42 => 69;
            _ =>
            if epsilon x.
            (Array_records.second_value x) = 69 /\
            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1307 then 69
            else if epsilon x.
                 (Array_records.second_value x) = 69 /\
                 (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307
                 then 69
                 else if epsilon x.
                      (Array_records.second_value x) = 69 /\
                      (Array_records.first_value x) = 23 = bOUND_VARIABLE_1307
                      then 69 else 5|]
  Line 23:
    i : int = -1
    i : int = -1
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
  Line 30:
    i : int = -1
    i : int = -1
    result of call at line 30, characters 13-92 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 13-92 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 41-57 : int = 23
    result of call at line 30, characters 41-57 : int = 23
    result of call at line 30, characters 41-45 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 41-45 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 74-91 : int = 69
    result of call at line 30, characters 74-91 : int = 69
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23

File "bench/check-ce/array_records_poly.mlw", line 31, characters 13-35:
Sub-goal Assertion of goal var_overwrite'vc.
Prover result is: Valid.

<check-ce-categorization>Categorizations of models:
- Checked model 0: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
- Selected model 1: INCOMPLETE
  - Concrete RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
  - Abstract RAC: INCOMPLETE (terminated because Precondition of `var_overwrite` cannot be evaluated)
File "bench/check-ce/array_records_poly.mlw", line 25, characters 15-36:
Sub-goal Postcondition of goal var_overwrite'vc.
Prover result is: Unknown or time/memory/step limit.
The following counterexample model could not be verified
  (both RAC terminated because Precondition of `var_overwrite` cannot be evaluated):
File array.mlw:
  Line 17:
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1204 bOUND_VARIABLE_1205 -> 0
    length :
      ty
      ->
      uni
      ->
      int = fun bOUND_VARIABLE_1204 bOUND_VARIABLE_1205 -> 0
    length : array basic_record -> int = [|_ => 0|]
    length : array basic_record -> int = [|_ => 0|]
File array_records_poly.mlw:
  Line 17:
    first_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1479 ->
             if epsilon x.
             (Array_records.second_value x) = 69 /\
             (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479 then 23
             else if epsilon x.
                  (Array_records.second_value x) = 69 /\
                  (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479
                  then 23
                  else if epsilon x.
                       (Array_records.second_value x) = 69 /\
                       (Array_records.first_value x) = 42 = bOUND_VARIABLE_1479
                       then 42 else 3
    first_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1479 ->
             if epsilon x.
             (Array_records.second_value x) = 69 /\
             (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479 then 23
             else if epsilon x.
                  (Array_records.second_value x) = 69 /\
                  (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479
                  then 23
                  else if epsilon x.
                       (Array_records.second_value x) = 69 /\
                       (Array_records.first_value x) = 42 = bOUND_VARIABLE_1479
                       then 42 else 3
  Line 18:
    sec_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1479 ->
             if epsilon x.
             (Array_records.second_value x) = 69 /\
             (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479 then 69
             else if epsilon x.
                  (Array_records.second_value x) = 69 /\
                  (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479
                  then 69
                  else if epsilon x.
                       (Array_records.second_value x) = 69 /\
                       (Array_records.first_value x) = 42 = bOUND_VARIABLE_1479
                       then 69
                       else if epsilon x.
                            (Array_records.second_value x) = 69 /\
                            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1479
                            then 69 else 5
    sec_val :
      basic_record
      ->
      int = fun bOUND_VARIABLE_1479 ->
             if epsilon x.
             (Array_records.second_value x) = 69 /\
             (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479 then 69
             else if epsilon x.
                  (Array_records.second_value x) = 69 /\
                  (Array_records.first_value x) = 23 = bOUND_VARIABLE_1479
                  then 69
                  else if epsilon x.
                       (Array_records.second_value x) = 69 /\
                       (Array_records.first_value x) = 42 = bOUND_VARIABLE_1479
                       then 69
                       else if epsilon x.
                            (Array_records.second_value x) = 69 /\
                            (Array_records.first_value x) = 3 = bOUND_VARIABLE_1479
                            then 69 else 5
  Line 23:
    i : int = 0
    i : int = 0
  Line 25:
    i : int = 0
    i : int = 0
  Line 27:
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 13-81 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-30 : bool = true
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-61 : int = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
    result of call at line 27, characters 45-49 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 5 /\ (Array_records.first_value x) = 3
  Line 28:
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-30 : bool = true
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-81 : int = 69
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
    result of call at line 28, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 3
  Line 29:
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 13-82 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-30 : bool = true
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 21-25 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-81 : int = 69
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
    result of call at line 29, characters 64-68 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 42
  Line 30:
    result of call at line 30, characters 13-92 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 13-92 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 41-57 : int = 23
    result of call at line 30, characters 41-57 : int = 23
    result of call at line 30, characters 41-45 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 41-45 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 74-91 : int = 69
    result of call at line 30, characters 74-91 : int = 69
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23
    result of call at line 30, characters 74-78 :
      basic_record = epsilon x.
      (Array_records.second_value x) = 69 /\
      (Array_records.first_value x) = 23

