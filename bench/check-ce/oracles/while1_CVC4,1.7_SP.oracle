File "bench/check-ce/while1.mlw", line 10, characters 18-24:
Goal Loop invariant init from verification condition f'vc.
Prover result is: valid (0.05s, 1177 steps).

File "bench/check-ce/while1.mlw", line 9, characters 16-21:
Goal Loop variant decrease from verification condition f'vc.
Prover result is: valid (0.02s, 1830 steps).

File "bench/check-ce/while1.mlw", line 10, characters 18-24:
Goal Loop invariant preservation from verification condition f'vc.
Prover result is: valid (0.02s, 1763 steps).

<check-ce>Check model 0 ("bench/check-ce/while1.mlw", line 5, characters 12-22)
<check-ce>VALUE for result "bench/check-ce/while1.mlw", line 6, characters 16-17 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE for result "bench/check-ce/while1.mlw", line 7, characters 16-17 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for x at "bench/check-ce/while1.mlw", line 8, characters 4-113: (ref'mk 0)
<check-ce>VALUE from ce-model for i at "bench/check-ce/while1.mlw", line 8, characters 4-113: (ref'mk 0)
<check-ce>Model 0:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File while1.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (<) with args:
                    _ = 1
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                Line 4:
                  Execution of main function terminated normally
            - Abstract: bad model (Abstract RAC, with the counterexample model cannot continue after "bench/check-ce/while1.mlw", line 8, characters 4-113)
              File while1.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 8:
                  Abstract execution of loop
                  x = (ref'mk 0)
                  i = (ref'mk 0)
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Execution got stuck, Cannot continue after arbitrary iteration with:
<check-ce>Check model 1 ("bench/check-ce/while1.mlw", line 5, characters 12-22)
<check-ce>VALUE for result "bench/check-ce/while1.mlw", line 6, characters 16-17 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE for result "bench/check-ce/while1.mlw", line 7, characters 16-17 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for x at "bench/check-ce/while1.mlw", line 8, characters 4-113: (ref'mk 0)
<check-ce>VALUE from ce-model for i at "bench/check-ce/while1.mlw", line 8, characters 4-113: (ref'mk 2)
<check-ce>Model 1:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File while1.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (<) with args:
                    _ = 1
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                Line 4:
                  Execution of main function terminated normally
            - Abstract: good model (Abstract RAC confirms the counter-example)
              File while1.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 8:
                  Abstract execution of loop
                  x = (ref'mk 0)
                  i = (ref'mk 2)
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                Line 5:
                  Property failure, Postcondition of f with:
                    result = 0
<check-ce>Check model 2 ("bench/check-ce/while1.mlw", line 5, characters 12-22)
<check-ce>VALUE for result "bench/check-ce/while1.mlw", line 6, characters 16-17 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE for result "bench/check-ce/while1.mlw", line 7, characters 16-17 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for x at "bench/check-ce/while1.mlw", line 8, characters 4-113: (ref'mk 0)
<check-ce>VALUE from ce-model for i at "bench/check-ce/while1.mlw", line 8, characters 4-113: (ref'mk 2)
<check-ce>Model 2:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File while1.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (<) with args:
                    _ = 1
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                Line 4:
                  Execution of main function terminated normally
            - Abstract: good model (Abstract RAC confirms the counter-example)
              File while1.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 8:
                  Abstract execution of loop
                  x = (ref'mk 0)
                  i = (ref'mk 2)
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                Line 5:
                  Property failure, Postcondition of f with:
                    result = 0
<check-ce>Models:
- Checked model 0 (Concrete: bad model, Abstract: bad model)
    Summary: Sorry, we don't have a good counterexample for you :(
- Selected model 1 (Concrete: bad model, Abstract: good model)
    Summary: The contracts of some function or loop are underspecified
- Checked model 2 (Concrete: bad model, Abstract: good model)
    Summary: The contracts of some function or loop are underspecified
File "bench/check-ce/while1.mlw", line 5, characters 12-22:
Goal Postcondition from verification condition f'vc.
Prover result is: unknown (unknown + incomplete) (0.04s, 6577 steps).
The contracts of some function or loop are underspecified, for example during
the following execution:
File while1.mlw:
  Line 4:
    _ = ()
    Concrete execution of f with args:
      _ = ()
  Line 6:
    Abstract execution of ref with args:
      contents = 0
    result = (ref'mk 0)
  Line 7:
    Abstract execution of ref with args:
      contents = 0
    result = (ref'mk 0)
  Line 8:
    Abstract execution of loop
    x = (ref'mk 0)
    i = (ref'mk 2)
    Concrete execution of contents with args:
      arg = (ref'mk 2)
    Concrete execution of (<) with args:
      _ = 2
      _ = 2
  Line 14:
    Concrete execution of contents with args:
      arg = (ref'mk 0)
  Line 5:
    Property failure, Postcondition of f with:
      result = 0

