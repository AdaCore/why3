File "bench/check-ce/for.mlw", line 8, characters 25-31:
Goal `Loop invariant init' from verification condition f'vc.
Prover result is: valid (0.05s, 1403 steps).

<check-ce>Check model 0 ("bench/check-ce/for.mlw", line 8, characters 25-31)
<check-ce>VALUE for result "bench/check-ce/for.mlw", line 5, characters 15-16 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE for result "bench/check-ce/for.mlw", line 6, characters 15-16 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for x1 at "bench/check-ce/for.mlw", line 7, characters 2-125: (ref'mk 0)
<check-ce>VALUE for x2 "bench/check-ce/for.mlw", line 7, characters 2-125 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for i at "bench/check-ce/for.mlw", line 7, characters 6-7: 0
<check-ce>Model 0:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File for.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 5:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of loop
                Line 9:
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 10:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 9:
                  Concrete execution of (=) with args:
                    x = 1
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 4:
                  Execution of main function terminated normally
            - Abstract: bad model (Abstract RAC, with the counterexample model cannot continue after "bench/check-ce/for.mlw", line 7, characters 2-125)
              File for.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 5:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of loop
                  x1 = (ref'mk 0)
                  x2 = (ref'mk 0)
                  i = 0
                Line 9:
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 10:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 7:
                  Execution got stuck, Cannot continue after arbitrary iteration with:
<check-ce>Check model 1 ("bench/check-ce/for.mlw", line 8, characters 25-31)
<check-ce>VALUE for result "bench/check-ce/for.mlw", line 5, characters 15-16 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE for result "bench/check-ce/for.mlw", line 6, characters 15-16 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for x1 at "bench/check-ce/for.mlw", line 7, characters 2-125: (ref'mk (-1))
<check-ce>VALUE for x2 "bench/check-ce/for.mlw", line 7, characters 2-125 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for i at "bench/check-ce/for.mlw", line 7, characters 6-7: 0
<check-ce>Model 1:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File for.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 5:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of loop
                Line 9:
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 10:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 9:
                  Concrete execution of (=) with args:
                    x = 1
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 4:
                  Execution of main function terminated normally
            - Abstract: good model (Abstract RAC found a contradiction at different location "bench/check-ce/for.mlw", line 8, characters 16-31)
              File for.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 5:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of loop
                  x1 = (ref'mk (-1))
                  x2 = (ref'mk 0)
                  i = 0
                Line 9:
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 10:
                  Concrete execution of contents with args:
                    arg = (ref'mk (-1))
                  Concrete execution of (+) with args:
                    _ = (-1)
                    _ = 1
                Line 8:
                  Property failure, Loop invariant preservation with:
                    x1 = (ref'mk 0)
                    i = 1
<check-ce>Check model 2 ("bench/check-ce/for.mlw", line 8, characters 25-31)
<check-ce>VALUE for result "bench/check-ce/for.mlw", line 5, characters 15-16 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE for result "bench/check-ce/for.mlw", line 6, characters 15-16 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for x1 at "bench/check-ce/for.mlw", line 7, characters 2-125: (ref'mk (-1))
<check-ce>VALUE for x2 "bench/check-ce/for.mlw", line 7, characters 2-125 not in ce-model, taking default (ref'mk 0)
<check-ce>VALUE from ce-model for i at "bench/check-ce/for.mlw", line 7, characters 6-7: 0
<check-ce>Model 2:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File for.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 5:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of loop
                Line 9:
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 10:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 9:
                  Concrete execution of (=) with args:
                    x = 1
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 4:
                  Execution of main function terminated normally
            - Abstract: good model (Abstract RAC found a contradiction at different location "bench/check-ce/for.mlw", line 8, characters 16-31)
              File for.mlw:
                Line 4:
                  _ = ()
                  Concrete execution of f with args:
                    _ = ()
                Line 5:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of loop
                  x1 = (ref'mk (-1))
                  x2 = (ref'mk 0)
                  i = 0
                Line 9:
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 10:
                  Concrete execution of contents with args:
                    arg = (ref'mk (-1))
                  Concrete execution of (+) with args:
                    _ = (-1)
                    _ = 1
                Line 8:
                  Property failure, Loop invariant preservation with:
                    x1 = (ref'mk 0)
                    i = 1
<check-ce>Models:
- Checked model 0 (Concrete: bad model, Abstract: bad model)
    Summary: Sorry, we don't have a good counterexample for you :(
- Selected model 1 (Concrete: bad model, Abstract: good model)
    Summary: The contracts of some function or loop are underspecified, for
    example during the following execution:
- Checked model 2 (Concrete: bad model, Abstract: good model)
    Summary: The contracts of some function or loop are underspecified, for
    example during the following execution:
File "bench/check-ce/for.mlw", line 8, characters 25-31:
Goal `Loop invariant preservation' from verification condition f'vc.
Prover result is: unknown (unknown + incomplete) (0.03s, 6755 steps).
The contracts of some function or loop are underspecified, for example during
the following execution:
File for.mlw:
  Line 4:
    _ = ()
    Concrete execution of f with args:
      _ = ()
  Line 5:
    Abstract execution of ref with args:
      contents = 0
    result = (ref'mk 0)
  Line 6:
    Abstract execution of ref with args:
      contents = 0
    result = (ref'mk 0)
  Line 7:
    Abstract execution of loop
    x1 = (ref'mk (-1))
    x2 = (ref'mk 0)
    i = 0
  Line 9:
    Concrete execution of (=) with args:
      x = 0
      y = 0
  Line 10:
    Concrete execution of contents with args:
      arg = (ref'mk (-1))
    Concrete execution of (+) with args:
      _ = (-1)
      _ = 1
  Line 8:
    Property failure, Loop invariant preservation with:
      x1 = (ref'mk 0)
      i = 1

File "bench/check-ce/for.mlw", line 8, characters 25-31:
Goal `Loop invariant preservation' from verification condition f'vc.
Prover result is: valid (0.01s, 1643 steps).

