File "bench/check-ce/while.mlw", line 10, characters 25-32:
Goal Loop invariant init from verification condition f'vc.
Prover result is: valid (0.01s, 105 steps).

File "bench/check-ce/while.mlw", line 9, characters 14-19:
Goal Loop variant decrease from verification condition f'vc.
Prover result is: valid (0.02s, 2819 steps).

<check-ce>Check model 0 ("bench/check-ce/while.mlw", line 10, characters 25-32)
<check-ce>Validating model concretely:
File while.mlw:
  Line 10:
    the check fails with all inputs
  Line 12:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
<rac-values>Missing value for parameter z, continue with default value 0
<check-ce>Validating model abstractly:
File while.mlw:
  Line 10:
    the check fails with all inputs
  Line 12:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
<rac-values>Missing value for parameter z, continue with default value 0
<rac-values>VALUE for result "bench/check-ce/while.mlw", line 5, characters 15-16 cannot be imported, taking default (ref'mk 0)
<rac-values>VALUE for result "bench/check-ce/while.mlw", line 6, characters 15-16 cannot be imported, taking default (ref'mk 0)
<rac-values>VALUE for result "bench/check-ce/while.mlw", line 7, characters 14-15 cannot be imported, taking default (ref'mk 0)
<rac-values>VALUE for x1 "bench/check-ce/while.mlw", line 8, characters 2-161 cannot be imported, taking default (ref'mk 0)
<rac-values>VALUE for x2 "bench/check-ce/while.mlw", line 8, characters 2-161 cannot be imported, taking default (ref'mk 0)
<rac-values>VALUE for i "bench/check-ce/while.mlw", line 8, characters 2-161 cannot be imported, taking default (ref'mk 0)
<check-ce>Model 0:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File while.mlw:
                Line 4:
                  z = 0
                  Concrete execution of f with args:
                    z = 0
                Line 5:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (<) with args:
                    _ = 1
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (=) with args:
                    x = 1
                    y = 0
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 4:
                  Execution of main function terminated normally
            - Abstract: bad model (Abstract RAC, with the counterexample model cannot continue after "bench/check-ce/while.mlw", line 8, characters 2-161)
              File while.mlw:
                Line 4:
                  z = 0
                  Concrete execution of f with args:
                    z = 0
                Line 5:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 6:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 7:
                  Abstract execution of ref with args:
                    contents = 0
                  result = (ref'mk 0)
                Line 8:
                  Abstract execution of loop
                  x1 = (ref'mk 0)
                  x2 = (ref'mk 0)
                  i = (ref'mk 0)
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Execution got stuck, Cannot continue after arbitrary iteration with:
<check-ce>Check model 1 ("bench/check-ce/while.mlw", line 10, characters 25-32)
<check-ce>Validating model concretely:
File while.mlw:
  Line 4:
    z = {"type": "Integer", "val": "3"}
  Line 8:
    [before iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [before iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-2"}}]}}
  Line 10:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 12:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 15:
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "1"}}]}}
<check-ce>Validating model abstractly:
File while.mlw:
  Line 4:
    z = {"type": "Integer", "val": "3"}
  Line 8:
    [before iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [before iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-2"}}]}}
  Line 10:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 12:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 15:
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "1"}}]}}
<rac-values>VALUE for result "bench/check-ce/while.mlw", line 5, characters 15-16 cannot be imported, taking default (ref'mk 0)
<check-ce>Model 1:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File while.mlw:
                Line 4:
                  z = 3
                  Concrete execution of f with args:
                    z = 3
                Line 5:
                  Concrete execution of ref with args:
                    contents = 3
                  Concrete execution of ref'mk with args:
                    contents = 3
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 3)
                  Concrete execution of (+) with args:
                    _ = 3
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (<) with args:
                    _ = 1
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (=) with args:
                    x = 1
                    y = 0
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 4:
                  Execution of main function terminated normally
            - Abstract: bad model (Abstract RAC, with the counterexample model cannot continue after )
              File while.mlw:
                Line 4:
                  z = 3
                  Concrete execution of f with args:
                    z = 3
                Line 5:
                  Abstract execution of ref with args:
                    contents = 3
                  result = (ref'mk 0)
              Unknown location:
                  Execution got stuck, Assume postcondition of ref with:
                    contents = 3
                    result = (ref'mk 0)
<check-ce>Check model 2 ("bench/check-ce/while.mlw", line 10, characters 25-32)
<check-ce>Validating model concretely:
File while.mlw:
  Line 4:
    z = {"type": "Integer", "val": "3"}
  Line 8:
    [before iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [before iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-2"}}]}}
  Line 10:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 12:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 15:
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "1"}}]}}
<check-ce>Validating model abstractly:
File while.mlw:
  Line 4:
    z = {"type": "Integer", "val": "3"}
  Line 8:
    [before iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "0"}}]}}
    [before iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-2"}}]}}
  Line 10:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 12:
    [current iteration] x1 =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "-1"}}]}}
  Line 15:
    [current iteration] i =
      {"type": "Record",
       "val":
        {"Field":
          [{"field": "contents", "value": {"type": "Integer", "val": "1"}}]}}
<rac-values>VALUE for result "bench/check-ce/while.mlw", line 5, characters 15-16 cannot be imported, taking default (ref'mk 0)
<check-ce>Model 2:
            - Concrete: bad model (Concrete RAC does not confirm the counter-example, no contradiction during execution)
              File while.mlw:
                Line 4:
                  z = 3
                  Concrete execution of f with args:
                    z = 3
                Line 5:
                  Concrete execution of ref with args:
                    contents = 3
                  Concrete execution of ref'mk with args:
                    contents = 3
                Line 6:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 7:
                  Concrete execution of ref with args:
                    contents = 0
                  Concrete execution of ref'mk with args:
                    contents = 0
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (<) with args:
                    _ = 0
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (=) with args:
                    x = 0
                    y = 0
                Line 12:
                  Concrete execution of contents with args:
                    arg = (ref'mk 3)
                  Concrete execution of (+) with args:
                    _ = 3
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (<) with args:
                    _ = 1
                    _ = 2
                Line 11:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (=) with args:
                    x = 1
                    y = 0
                Line 14:
                  Concrete execution of contents with args:
                    arg = (ref'mk 0)
                  Concrete execution of (+) with args:
                    _ = 0
                    _ = 1
                Line 15:
                  Concrete execution of contents with args:
                    arg = (ref'mk 1)
                  Concrete execution of (+) with args:
                    _ = 1
                    _ = 1
                Line 8:
                  Concrete execution of loop
                  Concrete execution of contents with args:
                    arg = (ref'mk 2)
                  Concrete execution of (<) with args:
                    _ = 2
                    _ = 2
                Line 4:
                  Execution of main function terminated normally
            - Abstract: bad model (Abstract RAC, with the counterexample model cannot continue after )
              File while.mlw:
                Line 4:
                  z = 3
                  Concrete execution of f with args:
                    z = 3
                Line 5:
                  Abstract execution of ref with args:
                    contents = 3
                  result = (ref'mk 0)
              Unknown location:
                  Execution got stuck, Assume postcondition of ref with:
                    contents = 3
                    result = (ref'mk 0)
<check-ce>Models:
- Checked model 0 (Concrete: bad model, Abstract: bad model)
    Summary: Sorry, we don't have a good counterexample for you :(
- Checked model 1 (Concrete: bad model, Abstract: bad model)
    Summary: Sorry, we don't have a good counterexample for you :(
- Selected model 2 (Concrete: bad model, Abstract: bad model)
    Summary: Sorry, we don't have a good counterexample for you :(
File "bench/check-ce/while.mlw", line 10, characters 25-32:
Goal Loop invariant preservation from verification condition f'vc.
Prover result is: timeout (1.00s, 1826902 steps).
Sorry, we don't have a good counterexample for you :(


File "bench/check-ce/while.mlw", line 9, characters 14-19:
Goal Loop variant decrease from verification condition f'vc.
Prover result is: valid (0.02s, 2817 steps).

File "bench/check-ce/while.mlw", line 10, characters 25-32:
Goal Loop invariant preservation from verification condition f'vc.
Prover result is: valid (0.02s, 2745 steps).

