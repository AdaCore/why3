module R

  use real.Real
  use ref.Ref
  use real.Square
  use real.ExpLog

  exception BenchFailure


  let test0 () =
     let x:real = 42.0 in
     let y:real = 1.5 in
     let z:real = 0.1 in
     (x,y,z)

  let test1 () =
    let x : real = 0.1 in
    let y : real = 10.0 * x in
    (x, y)

  let test2 () =
    let x : real = 3.0 in
    let y : real = 1.0 / x in
    (x, y, 3.0 * y)

  let test_exp () =
    let x: real = 1.0 in
    exp x

  let test_log () =
    let x: real = 1.0 in
    log x

  let test_exp_log () =
    let x: real = 42.0 in
    exp (log x), log x, exp x

  let bench1 ()
    (* Tries to calculate sqrt(2) *)
    diverges
    raises { BenchFailure -> false }
    ensures { result = 10.0 } =
    let incr = 0.002 (*(1.0 / 10000.0)*) in
    let i : ref real = ref 0.0 in
    while (!i * !i <= 2.0) do
      i := !i + incr;
    done;
    !i

  let bench2 ()
    raises { BenchFailure -> false }
    ensures { result = 4.0 }
  =
    let r = sqrt 16.0 in
    if r <> 4.0 then raise BenchFailure;
    r

  use real.Trigonometry

  let bench3 () =
    (pi, sqrt (pi))

  let test3 () =
    let ref x = 2.0 in
    for i=1 to 14 do x <- x * x done;
    let y = 0.0 * x in
    (x,y)

end
