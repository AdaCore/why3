module M

use import int.Int
use import module ref.Ref

(* Side effect in expressions (Bart Jacobs' tricky example) *)

val b  : ref int
val b1 : ref int
val b2 : ref int

let f () =
  {} b := 1 - !b; !b { result = !b /\ !b = 1 - old !b }

let k () =
  {}
  begin
    b := 1; (* b := 0 for the left-to-right evaluation *)
    b1 := (1 - (f ())) + (f ());
    b2 := (f ()) * (1 - (f ()))
  end
  { !b1 = 0 /\ !b2 = 1 }

end

(*
Local Variables:
compile-command: "unset LANG; make -C ../../.. bench/programs/good/see"
End:
*)
