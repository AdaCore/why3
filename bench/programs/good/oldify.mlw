
{
  logic q1(int, int, int)
}

parameter r : int ref

parameter f1 : y:int ->
             {} unit writes r { q1 (!r) (old (!r)) y }

let g1 () = {} f1 !r { q1 (!r) (old (!r)) (old (!r)) }

{
  logic foo(int) : int
  logic q(int, int, int)
}

parameter f : t:int ref -> x:int -> 
             {} unit reads t writes t { q (!t) (old (!t)) x }

let g (t:int ref) =
  {}
  f t (foo !t)
  { q (!t) (old (!t)) (foo (old (!t))) }


(*
Local Variables: 
compile-command: "unset LANG; make -C ../../.. bench/programs/good/oldify"
End: 
*)
