module M

  logic q1 int int int

parameter r : ref int

parameter f1 : y:int ->
             {} unit writes r { q1 (!r) (old (!r)) y }

let g1 () = {} f1 !r { q1 (!r) (old (!r)) (old (!r)) }

  logic foo int : int
  logic q int int int

parameter f : t:ref int -> x:int -> 
             {} unit reads t writes t { q (!t) (old (!t)) x }

let g (t:ref int) =
  {}
  f t (foo !t)
  { q (!t) (old (!t)) (foo (old (!t))) }

end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../../.. bench/programs/good/oldify"
End: 
*)
