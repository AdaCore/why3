module M

(** 1. A loop increasing [i] up to 10. *)

parameter i : ref int

let loop1 (u:unit) = 
  { !i <= 10 }
  while !i < 10 do
    invariant { !i <= 10 } variant { 10 - !i }
    i := !i + 1
  done
  { !i = 10 }


(** 2. The same loop, followed by a function call. *)

parameter x: ref int

let negate (u:unit) = {} x := - !x { !x = -old(!x) }

let loop2 (u:unit) = 
  { !x <= 10 }
  begin
    while !x < 10 do invariant { !x <= 10 } variant { 10 - !x } 
      x := !x + 1
    done;
    assert { !x = 10 };
    if !x > 0 then (negate ());
    assert { !x = -10 }
  end
  {}

end

(*
Local Variables: 
compile-command: "unset LANG; make -C ../../.. bench/programs/good/loops"
End: 
*)
