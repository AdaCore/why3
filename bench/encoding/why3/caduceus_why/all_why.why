theory Why2
use map.Map as A
  use unit_inf.Unit
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool_inf.Bool
  predicate eq_unit Unit.unit Unit.unit

  predicate neq_unit Unit.unit Unit.unit

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function div_int int int : int

  function mod_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  type farray 'a = A.map int 'a

  function access (m:farray 'a1) (k:int) : 'a1 = A.get m k

  function update (m:farray 'a1) (k:int) (v:'a1) : (farray 'a1) = A.set m k v



  function array_length (farray 'a1) : int

  predicate sorted_array (t : (farray int)) (i : int) (j : int) =
    (forall k1:int.
      (forall k2:int.
        ((((Int.(<=) i k1) /\ (Int.(<=) k1 k2)) /\ (Int.(<=) k2 j)) ->
         (Int.(<=) (access t k1 : int) (access t k2 : int)))))

  predicate exchange (a1 : (farray 'a1)) (a2 : (farray 'a1)) (i : int) (j : int) =
    (((array_length a1 : int) = (array_length a2 : int)) /\
     (((access a1 i : 'a1) = (access a2 j : 'a1)) /\
      (((access a2 i : 'a1) = (access a1 j : 'a1)) /\
       (forall k:int.
         (((k <> i) /\ (k <> j)) ->
          ((access a1 k : 'a1) = (access a2 k : 'a1)))))))

  predicate permut (farray 'a1) (farray 'a1) int int

  axiom Permut_refl:
    (forall t:(farray 'a1). (forall l:int. (forall u:int. (permut t t l u))))

  axiom Permut_sym:
    (forall t1:(farray 'a1).
      (forall t2:(farray 'a1).
        (forall l:int.
          (forall u:int. ((permut t1 t2 l u) -> (permut t2 t1 l u))))))

  axiom Permut_trans:
    (forall t1:(farray 'a1).
      (forall t2:(farray 'a1).
        (forall t3:(farray 'a1).
          (forall l:int.
            (forall u:int.
              ((permut t1 t2 l u) ->
               ((permut t2 t3 l u) -> (permut t1 t3 l u))))))))

  axiom Permut_exchange:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            (forall i:int.
              (forall j:int.
                (((Int.(<=) l i) /\ (Int.(<=) i u)) ->
                 (((Int.(<=) l j) /\ (Int.(<=) j u)) ->
                  ((exchange a1 a2 i j) -> (permut a1 a2 l u))))))))))

  axiom Exchange_upd:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall j:int.
          (exchange a (update (update a i (access a j : 'a1) : (farray 'a1)) j (access a i : 'a1) : (farray 'a1)) i j))))

  axiom Permut_weakening:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l1:int.
          (forall r1:int.
            (forall l2:int.
              (forall r2:int.
                ((((Int.(<=) l1 l2) /\ (Int.(<=) l2 r2)) /\
                  (Int.(<=) r2 r1)) ->
                 ((permut a1 a2 l2 r2) -> (permut a1 a2 l1 r1)))))))))

  axiom Permut_eq:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            ((Int.(<=) l u) ->
             ((permut a1 a2 l u) ->
              (forall i:int.
                (((Int.(<) i l) \/ (Int.(<) u i)) ->
                 ((access a2 i : 'a1) = (access a1 i : 'a1))))))))))

  predicate permutation (a1 : (farray 'a1)) (a2 : (farray 'a1)) =
    (permut a1 a2 0 (Int.(-) (array_length a1 : int) 1 : int))

  axiom Array_length_update:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall v:'a1.
          ((array_length (update a i v : (farray 'a1)) : int) = (array_length a : int)))))

  axiom Permut_array_length:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            ((permut a1 a2 l u) ->
             ((array_length a1 : int) = (array_length a2 : int)))))))

  type foo

  goal P2_po_1:
    (forall result:int. ((result = 0) -> (not false)))

  goal P3_po_1:
    (forall result:int. ((result = 0) -> (true /\ true)))

  goal P4_po_1:
    (forall result:int. ((result = 0) -> (true \/ false)))

  goal P5_po_1:
    (forall result:int. ((result = 0) -> (false \/ (not false))))

  goal P6_po_1:
    (forall result:int. ((result = 0) -> (not false)))

  goal P8_po_1:
    (forall result:int. ((result = 0) -> (true /\ (forall x:int. (x = x)))))

  goal Ar6_po_1:
    (1 <> 0)

  goal Arr1_po_1:
    (forall v6:(farray int).
      ((Int.(>=) (array_length v6 : int) 1) ->
       ((Int.(<=) 0 0) /\ (Int.(<) 0 (array_length v6 : int)))))

  goal Arr2_po_1:
    (forall v6:(farray int).
      ((Int.(>=) (array_length v6 : int) 4) ->
       ((Int.(<=) 0 (Int.(+) 1 2 : int)) /\
        (Int.(<) (Int.(+) 1 2 : int) (array_length v6 : int)))))

  goal Arr3_po_1:
    (forall v4:int.
      (forall v6:(farray int).
        (((Int.(>=) (array_length v6 : int) 1) /\ (v4 = 0)) ->
         ((Int.(<=) 0 v4) /\ (Int.(<) v4 (array_length v6 : int))))))

  goal Arr4_po_1:
    (forall v6:(farray int).
      (((Int.(>=) (array_length v6 : int) 10) /\ ((access v6 0 : int) = 9)) ->
       ((Int.(<=) 0 0) /\ (Int.(<) 0 (array_length v6 : int)))))

  goal Arr4_po_2:
    (forall aux_1_2:int.
      (forall v6:(farray int).
        (((Int.(>=) (array_length v6 : int) 10) /\ ((access v6 0 : int) = 9)) ->
         ((((Int.(<=) 0 0) /\ (Int.(<) 0 (array_length v6 : int))) /\
           (aux_1_2 = (access v6 0 : int))) ->
          ((Int.(<=) 0 aux_1_2) /\ (Int.(<) aux_1_2 (array_length v6 : int)))))))

  goal Arr5_po_1:
    (forall v6:(farray int).
      ((Int.(>=) (array_length v6 : int) 1) ->
       ((Int.(<=) 0 0) /\ (Int.(<) 0 (array_length v6 : int)))))

  goal Arr6_po_1:
    (forall v6:(farray int).
      ((Int.(>=) (array_length v6 : int) 4) ->
       ((Int.(<=) 0 (Int.(+) 1 2 : int)) /\
        (Int.(<) (Int.(+) 1 2 : int) (array_length v6 : int)))))

  goal Arr7_po_1:
    (forall v6:(farray int).
      (((Int.(>=) (array_length v6 : int) 10) /\ ((access v6 0 : int) = 9)) ->
       ((Int.(<=) 0 0) /\ (Int.(<) 0 (array_length v6 : int)))))

  goal Arr7_po_2:
    (forall aux_1_3:int.
      (forall v6:(farray int).
        (((Int.(>=) (array_length v6 : int) 10) /\ ((access v6 0 : int) = 9)) ->
         ((((Int.(<=) 0 0) /\ (Int.(<) 0 (array_length v6 : int))) /\
           (aux_1_3 = (access v6 0 : int))) ->
          ((Int.(<=) 0 aux_1_3) /\ (Int.(<) aux_1_3 (array_length v6 : int)))))))

  goal Fc3_po_1:
    (forall a:int. (forall b:int. ((a = 0) -> ((b = 0) -> (Int.(>=) a 0)))))

  goal An2_po_1:
    (forall v4:int.
      (forall v4_16:int.
        ((Int.(>=) v4 0) ->
         ((v4_16 = (Int.(+) v4 1 : int)) -> (Int.(>) v4_16 v4)))))


end