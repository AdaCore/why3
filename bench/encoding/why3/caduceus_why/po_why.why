theory Why2
  use Tuple0
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool.Bool
  logic eq_unit Tuple0.tuple0 Tuple0.tuple0

  logic neq_unit Tuple0.tuple0 Tuple0.tuple0

  logic eq_bool Bool.bool Bool.bool

  logic neq_bool Bool.bool Bool.bool

  logic lt_int int int

  logic le_int int int

  logic gt_int int int

  logic ge_int int int

  logic eq_int int int

  logic neq_int int int

  logic add_int int int : int

  logic sub_int int int : int

  logic mul_int int int : int

  logic div_int int int : int

  logic mod_int int int : int

  logic neg_int int : int

  logic zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) and (Int.(<) a b))

  logic q int

  goal P1_po_1:
    (forall x:int.
      (forall x0:int.
        ((q (Int.(+) x 1 : int)) -> ((x0 = (Int.(+) x 1 : int)) -> (q x0)))))

  goal P2_po_1:
    (forall x1:int. ((q 7) -> ((x1 = (Int.(+) 3 4 : int)) -> (q x1))))

  goal P3_po_1:
    (forall x:int.
      (forall x2:int.
        (forall x3:int.
          (((x2 = (Int.(+) x 1 : int)) and (x3 = (Int.(+) x2 2 : int))) ->
           (x3 = (Int.(+) x 3 : int))))))

  goal P4_po_1:
    (forall x4:int.
      (forall x5:int.
        (((x4 = 7) and (x5 = (Int.(*) 2 x4 : int))) -> (x5 = 14))))

  goal P5_po_1:
    (forall result:int. ((result = (Int.(+) 3 4 : int)) -> (result = 7)))

  goal P6_po_1:
    (forall a:int.
      (forall result:int.
        (((a = 3) and (result = (Int.(+) a 4 : int))) -> (result = 7))))

  goal P7_po_1:
    (forall a0:int.
      (forall aux_1:int.
        (forall result:int.
          ((((a0 = 4) and (aux_1 = (Int.(+) a0 a0 : int))) and
            (result = (Int.(+) 3 aux_1 : int))) ->
           (result = 11)))))

  goal P8_po_1:
    (forall aux_1_0:int.
      (forall x:int.
        (forall x6:int.
          ((q (Int.(+) x 1 : int)) ->
           (forall result:int.
             ((((x6 = (Int.(+) x 1 : int)) and (aux_1_0 = x6)) and
               (result = (Int.(+) 3 aux_1_0 : int))) ->
              ((q x6) and (result = (Int.(+) x 4 : int)))))))))

  goal P9_po_1:
    (forall aux_1_1:int.
      (forall aux_2:int.
        (forall x7:int.
          (forall x8:int.
            (forall result:int.
              ((((x7 = 1) and (aux_1_1 = 1)) and
                (((x8 = 2) and (aux_2 = 1)) and
                 (result = (Int.(+) aux_1_1 aux_2 : int)))) ->
               ((result = 2) and (x8 = 2))))))))

  goal P9a_po_1:
    (forall aux_1_2:int.
      (forall x9:int.
        (forall result:int.
          ((((x9 = 1) and (aux_1_2 = 1)) and
            (result = (Int.(+) aux_1_2 1 : int))) ->
           ((result = 2) and (x9 = 1))))))

  goal P10_po_1:
    (forall result:int. ((result = (Int.(+) 0 1 : int)) -> (result = 1)))

  goal P11_po_1:
    (forall aux_1_3:int.
      (forall aux_2_0:int.
        (forall result:int.
          (((aux_1_3 = (Int.(+) 0 1 : int)) and
            ((aux_2_0 = (Int.(+) 3 1 : int)) and
             (result = (Int.(+) aux_1_3 aux_2_0 : int)))) ->
           (result = 5)))))

  goal P11a_po_1:
    (forall a1:int.
      (forall result:int.
        (((a1 = (Int.(+) 1 1 : int)) and (result = (Int.(+) a1 a1 : int))) ->
         (result = 4))))

  goal P12_po_1:
    (forall x:int.
      (forall x10:int.
        ((x = 0) -> ((x10 = (Int.(+) x 1 : int)) -> (x10 = 1)))))

  goal P13_po_1:
    (forall x:int.
      (forall x11:int.
        (forall x12:int.
          (((x11 = (Int.(+) x 1 : int)) and (x12 = (Int.(+) x11 1 : int))) ->
           (x12 = (Int.(+) x 2 : int))))))

  goal P13a_po_1:
    (forall x:int.
      (forall x13:int.
        (forall x14:int.
          (((x13 = (Int.(+) x 1 : int)) and (x14 = (Int.(+) x13 1 : int))) ->
           (x14 = (Int.(+) x 2 : int))))))

  goal P14_po_1:
    (forall x:int.
      (forall x15:int.
        ((x = 0) ->
         (forall result:int.
           (((x15 = (Int.(+) x 1 : int)) and (result = x15)) -> (result = 1))))))

  type farray 'a

  logic access (farray 'a1) int : 'a1

  logic update (farray 'a1) int 'a1 : (farray 'a1)

  axiom Access_update:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall v:'a1. ((access (update a i v : (farray 'a1)) i : 'a1) = v))))

  axiom Access_update_neq:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall j:int.
          (forall v:'a1.
            ((i <> j) ->
             ((access (update a i v : (farray 'a1)) j : 'a1) = (access a j : 'a1)))))))

  logic array_length (farray 'a1) : int

  logic sorted_array (t : (farray int)) (i : int) (j : int) =
    (forall k1:int.
      (forall k2:int.
        ((((Int.(<=) i k1) and (Int.(<=) k1 k2)) and (Int.(<=) k2 j)) ->
         (Int.(<=) (access t k1 : int) (access t k2 : int)))))

  logic exchange (a1 : (farray 'a1)) (a2 : (farray 'a1)) (i : int) (j : int) =
    (((array_length a1 : int) = (array_length a2 : int)) and
     (((access a1 i : 'a1) = (access a2 j : 'a1)) and
      (((access a2 i : 'a1) = (access a1 j : 'a1)) and
       (forall k:int.
         (((k <> i) and (k <> j)) ->
          ((access a1 k : 'a1) = (access a2 k : 'a1)))))))

  logic permut (farray 'a1) (farray 'a1) int int

  axiom Permut_refl:
    (forall t:(farray 'a1). (forall l:int. (forall u:int. (permut t t l u))))

  axiom Permut_sym:
    (forall t1:(farray 'a1).
      (forall t2:(farray 'a1).
        (forall l:int.
          (forall u:int. ((permut t1 t2 l u) -> (permut t2 t1 l u))))))

  axiom Permut_trans:
    (forall t1:(farray 'a1).
      (forall t2:(farray 'a1).
        (forall t3:(farray 'a1).
          (forall l:int.
            (forall u:int.
              ((permut t1 t2 l u) ->
               ((permut t2 t3 l u) -> (permut t1 t3 l u))))))))

  axiom Permut_exchange:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            (forall i:int.
              (forall j:int.
                (((Int.(<=) l i) and (Int.(<=) i u)) ->
                 (((Int.(<=) l j) and (Int.(<=) j u)) ->
                  ((exchange a1 a2 i j) -> (permut a1 a2 l u))))))))))

  axiom Exchange_upd:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall j:int.
          (exchange a (update (update a i (access a j : 'a1) : (farray 'a1)) j (access a i : 'a1) : (farray 'a1)) i j))))

  axiom Permut_weakening:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l1:int.
          (forall r1:int.
            (forall l2:int.
              (forall r2:int.
                ((((Int.(<=) l1 l2) and (Int.(<=) l2 r2)) and
                  (Int.(<=) r2 r1)) ->
                 ((permut a1 a2 l2 r2) -> (permut a1 a2 l1 r1)))))))))

  axiom Permut_eq:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            ((Int.(<=) l u) ->
             ((permut a1 a2 l u) ->
              (forall i:int.
                (((Int.(<) i l) or (Int.(<) u i)) ->
                 ((access a2 i : 'a1) = (access a1 i : 'a1))))))))))

  logic permutation (a1 : (farray 'a1)) (a2 : (farray 'a1)) =
    (permut a1 a2 0 (Int.(-) (array_length a1 : int) 1 : int))

  axiom Array_length_update:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall v:'a1.
          ((array_length (update a i v : (farray 'a1)) : int) = (array_length a : int)))))

  axiom Permut_array_length:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            ((permut a1 a2 l u) ->
             ((array_length a1 : int) = (array_length a2 : int)))))))

  goal P15_po_1:
    (forall t:(farray int).
      (((array_length t : int) = 10) ->
       ((Int.(<=) 0 0) and (Int.(<) 0 (array_length t : int)))))

  goal P16_po_1:
    (forall t:(farray int).
      (((array_length t : int) = 10) ->
       ((Int.(<=) 0 9) and (Int.(<) 9 (array_length t : int)))))

  goal P17_po_1:
    (forall t:(farray int).
      ((((array_length t : int) = 10) and
        ((Int.(<=) 0 (access t 0 : int)) and (Int.(<) (access t 0 : int) 10))) ->
       ((Int.(<=) 0 0) and (Int.(<) 0 (array_length t : int)))))

  goal P17_po_2:
    (forall aux_1_5:int.
      (forall t:(farray int).
        ((((array_length t : int) = 10) and
          ((Int.(<=) 0 (access t 0 : int)) and
           (Int.(<) (access t 0 : int) 10))) ->
         ((((Int.(<=) 0 0) and (Int.(<) 0 (array_length t : int))) and
           (aux_1_5 = (access t 0 : int))) ->
          ((Int.(<=) 0 aux_1_5) and (Int.(<) aux_1_5 (array_length t : int)))))))

  goal P18_po_1:
    (forall aux_1_6:int.
      (forall t:(farray int).
        (forall x16:int.
          (((array_length t : int) = 10) ->
           (((x16 = 0) and (aux_1_6 = x16)) ->
            ((Int.(<=) 0 aux_1_6) and
             (Int.(<) aux_1_6 (array_length t : int))))))))

  goal P18_po_2:
    (forall aux_1_6:int.
      (forall t:(farray int).
        (forall t2:(farray int).
          (forall x16:int.
            (((array_length t : int) = 10) ->
             ((((x16 = 0) and (aux_1_6 = x16)) and
               (((Int.(<=) 0 aux_1_6) and
                 (Int.(<) aux_1_6 (array_length t : int))) and
                (t2 = (update t aux_1_6 x16 : (farray int))))) ->
              ((access t2 0 : int) = x16)))))))


end