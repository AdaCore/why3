theory Why2
  use Tuple0
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool.Bool
  logic eq_unit Tuple0.tuple0 Tuple0.tuple0

  logic neq_unit Tuple0.tuple0 Tuple0.tuple0

  logic eq_bool Bool.bool Bool.bool

  logic neq_bool Bool.bool Bool.bool

  logic lt_int int int

  logic le_int int int

  logic gt_int int int

  logic ge_int int int

  logic eq_int int int

  logic neq_int int int

  logic add_int int int : int

  logic sub_int int int : int

  logic mul_int int int : int

  logic div_int int int : int

  logic mod_int int int : int

  logic neg_int int : int

  logic zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) and (Int.(<) a b))

  axiom Mult_1_1: ((Int.(*) 1 1 : int) = 1)

  goal F_po_1:
    (forall b:int.
      (forall b0:int.
        (forall result:int.
          (((b0 = (Int.(-) 1 b : int)) and (result = b0)) ->
           ((result = b0) and (b0 = (Int.(-) 1 b : int)))))))

  goal K_po_1:
    (forall aux_2:int.
      (forall aux_3:int.
        (forall aux_4:int.
          (forall aux_5:int.
            (forall aux_6:int.
              (forall aux_7:int.
                (forall aux_8:int.
                  (forall aux_9:int.
                    (forall b1_0:int.
                      (forall b2_0:int.
                        (forall b3:int.
                          (forall b4:int.
                            (forall b5:int.
                              (forall b6:int.
                                (forall b7:int.
                                  (((b3 = 0) and
                                    ((((((aux_2 = b4) and
                                         (b4 = (Int.(-) 1 b3 : int))) and
                                        (aux_3 = (Int.(-) 1 aux_2 : int))) and
                                       (((aux_4 = b5) and
                                         (b5 = (Int.(-) 1 b4 : int))) and
                                        (aux_5 = (Int.(+) aux_3 aux_4 : int)))) and
                                      (b1_0 = aux_5)) and
                                     ((((aux_6 = b6) and
                                        (b6 = (Int.(-) 1 b5 : int))) and
                                       ((((aux_7 = b7) and
                                          (b7 = (Int.(-) 1 b6 : int))) and
                                         (aux_8 = (Int.(-) 1 aux_7 : int))) and
                                        (aux_9 = (Int.(*) aux_6 aux_8 : int)))) and
                                      (b2_0 = aux_9)))) ->
                                   ((b1_0 = 0) and (b2_0 = 1))))))))))))))))))


end