theory Why2
use map.Map as A
  use unit_inf.Unit
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool_inf.Bool
  predicate eq_unit Unit.unit Unit.unit

  predicate neq_unit Unit.unit Unit.unit

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function div_int int int : int

  function mod_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  type farray 'a = A.map int 'a

  function access (m:farray 'a1) (k:int) : 'a1 = A.get m k

  function update (m:farray 'a1) (k:int) (v:'a1) : (farray 'a1) = A.set m k v



  function array_length (farray 'a1) : int

  predicate sorted_array (t : (farray int)) (i : int) (j : int) =
    (forall k1:int.
      (forall k2:int.
        ((((Int.(<=) i k1) /\ (Int.(<=) k1 k2)) /\ (Int.(<=) k2 j)) ->
         (Int.(<=) (access t k1 : int) (access t k2 : int)))))

  predicate exchange (a1 : (farray 'a1)) (a2 : (farray 'a1)) (i : int) (j : int) =
    (((array_length a1 : int) = (array_length a2 : int)) /\
     (((access a1 i : 'a1) = (access a2 j : 'a1)) /\
      (((access a2 i : 'a1) = (access a1 j : 'a1)) /\
       (forall k:int.
         (((k <> i) /\ (k <> j)) ->
          ((access a1 k : 'a1) = (access a2 k : 'a1)))))))

  predicate permut (farray 'a1) (farray 'a1) int int

  axiom Permut_refl:
    (forall t:(farray 'a1). (forall l:int. (forall u:int. (permut t t l u))))

  axiom Permut_sym:
    (forall t1:(farray 'a1).
      (forall t2:(farray 'a1).
        (forall l:int.
          (forall u:int. ((permut t1 t2 l u) -> (permut t2 t1 l u))))))

  axiom Permut_trans:
    (forall t1:(farray 'a1).
      (forall t2:(farray 'a1).
        (forall t3:(farray 'a1).
          (forall l:int.
            (forall u:int.
              ((permut t1 t2 l u) ->
               ((permut t2 t3 l u) -> (permut t1 t3 l u))))))))

  axiom Permut_exchange:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            (forall i:int.
              (forall j:int.
                (((Int.(<=) l i) /\ (Int.(<=) i u)) ->
                 (((Int.(<=) l j) /\ (Int.(<=) j u)) ->
                  ((exchange a1 a2 i j) -> (permut a1 a2 l u))))))))))

  axiom Exchange_upd:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall j:int.
          (exchange a (update (update a i (access a j : 'a1) : (farray 'a1)) j (access a i : 'a1) : (farray 'a1)) i j))))

  axiom Permut_weakening:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l1:int.
          (forall r1:int.
            (forall l2:int.
              (forall r2:int.
                ((((Int.(<=) l1 l2) /\ (Int.(<=) l2 r2)) /\
                  (Int.(<=) r2 r1)) ->
                 ((permut a1 a2 l2 r2) -> (permut a1 a2 l1 r1)))))))))

  axiom Permut_eq:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            ((Int.(<=) l u) ->
             ((permut a1 a2 l u) ->
              (forall i:int.
                (((Int.(<) i l) \/ (Int.(<) u i)) ->
                 ((access a2 i : 'a1) = (access a1 i : 'a1))))))))))

  predicate permutation (a1 : (farray 'a1)) (a2 : (farray 'a1)) =
    (permut a1 a2 0 (Int.(-) (array_length a1 : int) 1 : int))

  axiom Array_length_update:
    (forall a:(farray 'a1).
      (forall i:int.
        (forall v:'a1.
          ((array_length (update a i v : (farray 'a1)) : int) = (array_length a : int)))))

  axiom Permut_array_length:
    (forall a1:(farray 'a1).
      (forall a2:(farray 'a1).
        (forall l:int.
          (forall u:int.
            ((permut a1 a2 l u) ->
             ((array_length a1 : int) = (array_length a2 : int)))))))

  axiom Mean:
    (forall l:int.
      (forall u:int.
        ((Int.(<) l u) ->
         ((Int.(<=) l (ComputerDivision.div (Int.(+) l u : int) 2 : int)) /\
          (Int.(<) (ComputerDivision.div (Int.(+) l u : int) 2 : int) u)))))

  goal Mergesort_po_1:
    (forall l:int. (forall u:int. ((Int.(<) l u) -> (2 <> 0))))

  goal Mergesort_po_2:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int).
          ((Int.(<) l u) ->
           ((2 <> 0) ->
            (forall result:int.
              ((result = (ComputerDivision.div (Int.(+) l u : int) 2 : int)) ->
               (forall a0:(farray int).
                 (((sorted_array a0 l result) /\ (permut a a0 l result)) ->
                  (permut a a0 l u))))))))))

  goal Mergesort_po_3:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int).
          ((Int.(<) l u) ->
           ((2 <> 0) ->
            (forall result:int.
              ((result = (ComputerDivision.div (Int.(+) l u : int) 2 : int)) ->
               (forall a0:(farray int).
                 (((sorted_array a0 l result) /\ (permut a a0 l result)) ->
                  ((permut a a0 l u) ->
                   (forall a1:(farray int).
                     (((sorted_array a1 (Int.(+) result 1 : int) u) /\
                       (permut a0 a1 (Int.(+) result 1 : int) u)) ->
                      (Int.(<=) l result)))))))))))))

  goal Mergesort_po_4:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int).
          ((Int.(<) l u) ->
           ((2 <> 0) ->
            (forall result:int.
              ((result = (ComputerDivision.div (Int.(+) l u : int) 2 : int)) ->
               (forall a0:(farray int).
                 (((sorted_array a0 l result) /\ (permut a a0 l result)) ->
                  ((permut a a0 l u) ->
                   (forall a1:(farray int).
                     (((sorted_array a1 (Int.(+) result 1 : int) u) /\
                       (permut a0 a1 (Int.(+) result 1 : int) u)) ->
                      (Int.(<) result u)))))))))))))

  goal Mergesort_po_5:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int).
          ((Int.(<) l u) ->
           ((2 <> 0) ->
            (forall result:int.
              ((result = (ComputerDivision.div (Int.(+) l u : int) 2 : int)) ->
               (forall a0:(farray int).
                 (((sorted_array a0 l result) /\ (permut a a0 l result)) ->
                  ((permut a a0 l u) ->
                   (forall a1:(farray int).
                     (((sorted_array a1 (Int.(+) result 1 : int) u) /\
                       (permut a0 a1 (Int.(+) result 1 : int) u)) ->
                      (sorted_array a1 l result)))))))))))))

  goal Mergesort_po_6:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int).
          ((Int.(<) l u) ->
           ((2 <> 0) ->
            (forall result:int.
              ((result = (ComputerDivision.div (Int.(+) l u : int) 2 : int)) ->
               (forall a0:(farray int).
                 (((sorted_array a0 l result) /\ (permut a a0 l result)) ->
                  ((permut a a0 l u) ->
                   (forall a1:(farray int).
                     (((sorted_array a1 (Int.(+) result 1 : int) u) /\
                       (permut a0 a1 (Int.(+) result 1 : int) u)) ->
                      ((((Int.(<=) l result) /\ (Int.(<) result u)) /\
                        ((sorted_array a1 l result) /\
                         (sorted_array a1 (Int.(+) result 1 : int) u))) ->
                       (forall a2:(farray int).
                         (((sorted_array a2 l u) /\ (permut a1 a2 l u)) ->
                          (permut a a2 l u))))))))))))))))

  goal Mergesort_po_7:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int). ((Int.(>=) l u) -> (sorted_array a l u)))))

  goal Mergesort_po_8:
    (forall l:int.
      (forall u:int.
        (forall a:(farray int). ((Int.(>=) l u) -> (permut a a l u)))))


end