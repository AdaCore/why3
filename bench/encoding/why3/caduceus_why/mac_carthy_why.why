theory Why2
  use unit_inf.Unit
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool_inf.Bool
  predicate eq_unit Unit.unit Unit.unit

  predicate neq_unit Unit.unit Unit.unit

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function div_int int int : int

  function mod_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  goal F91_po_1:
    (forall n:int. ((Int.(<=) n 100) -> (Int.(<=) 0 (Int.(-) 101 n : int))))

  goal F91_po_2:
    (forall n:int.
      ((Int.(<=) n 100) ->
       (Int.(<) (Int.(-) 101 (Int.(+) n 11 : int) : int) (Int.(-) 101 n : int))))

  goal F91_po_3:
    (forall n:int.
      ((Int.(<=) n 100) ->
       (((Int.(<=) 0 (Int.(-) 101 n : int)) /\
         (Int.(<) (Int.(-) 101 (Int.(+) n 11 : int) : int) (Int.(-) 101 n : int))) ->
        (forall result:int.
          ((((Int.(<=) (Int.(+) n 11 : int) 100) /\ (result = 91)) \/
            ((Int.(>=) (Int.(+) n 11 : int) 101) /\
             (result = (Int.(-) (Int.(+) n 11 : int) 10 : int)))) ->
           (Int.(<=) 0 (Int.(-) 101 n : int)))))))

  goal F91_po_4:
    (forall n:int.
      ((Int.(<=) n 100) ->
       (((Int.(<=) 0 (Int.(-) 101 n : int)) /\
         (Int.(<) (Int.(-) 101 (Int.(+) n 11 : int) : int) (Int.(-) 101 n : int))) ->
        (forall result:int.
          ((((Int.(<=) (Int.(+) n 11 : int) 100) /\ (result = 91)) \/
            ((Int.(>=) (Int.(+) n 11 : int) 101) /\
             (result = (Int.(-) (Int.(+) n 11 : int) 10 : int)))) ->
           (Int.(<) (Int.(-) 101 result : int) (Int.(-) 101 n : int)))))))

  goal F91_po_5:
    (forall n:int.
      ((Int.(<=) n 100) ->
       (((Int.(<=) 0 (Int.(-) 101 n : int)) /\
         (Int.(<) (Int.(-) 101 (Int.(+) n 11 : int) : int) (Int.(-) 101 n : int))) ->
        (forall result:int.
          ((((Int.(<=) (Int.(+) n 11 : int) 100) /\ (result = 91)) \/
            ((Int.(>=) (Int.(+) n 11 : int) 101) /\
             (result = (Int.(-) (Int.(+) n 11 : int) 10 : int)))) ->
           (((Int.(<=) 0 (Int.(-) 101 n : int)) /\
             (Int.(<) (Int.(-) 101 result : int) (Int.(-) 101 n : int))) ->
            (forall result0:int.
              ((((Int.(<=) result 100) /\ (result0 = 91)) \/
                ((Int.(>=) result 101) /\
                 (result0 = (Int.(-) result 10 : int)))) ->
               (((Int.(<=) n 100) /\ (result0 = 91)) \/
                ((Int.(>=) n 101) /\ (result0 = (Int.(-) n 10 : int))))))))))))

  goal F91_po_6:
    (forall n:int.
      ((Int.(>) n 100) ->
       (((Int.(<=) n 100) /\ ((Int.(-) n 10 : int) = 91)) \/
        ((Int.(>=) n 101) /\ ((Int.(-) n 10 : int) = (Int.(-) n 10 : int))))))

  function f int : int

  axiom F_def1:
    (forall x:int.
      ((Int.(>=) x 101) -> ((f x : int) = (Int.(-) x 10 : int))))

  axiom F_def2: (forall x:int. ((Int.(<=) x 101) -> ((f x : int) = 91)))

  function iter_f int int : int

  axiom Iter_f_def1: (forall x:int. ((iter_f 0 x : int) = x))

  axiom Iter_f_def2:
    (forall n:int.
      (forall x:int.
        ((Int.(>) n 0) ->
         ((iter_f n x : int) = (iter_f (Int.(-) n 1 : int) (f x : int) : int)))))

  type pair_type

  function pair int int : pair_type

  inductive lex pair_type pair_type =
    | Lex_1: (forall x1:int.
               (forall y1:int.
                 (forall x2:int.
                   (forall y2:int.
                     (((Int.(<=) 0 x2) /\ (Int.(<) x1 x2)) ->
                      (lex (pair x1 y1 : pair_type) (pair x2 y2 : pair_type)))))))
    | Lex_2: (forall x:int.
               (forall y1:int.
                 (forall y2:int.
                   (((Int.(<=) 0 y2) /\ (Int.(<) y1 y2)) ->
                    (lex (pair x y1 : pair_type) (pair x y2 : pair_type))))))



goal F91_nonrec_po_1:
  (forall n:int. ((Int.(>=) n 1) -> false))

goal F91_nonrec_po_2:
  (forall n:int. ((Int.(>=) n 1) -> (Int.(>=) n 0)))

goal F91_nonrec_po_3:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(>) n0 0) ->
             ((Int.(>) x0 100) ->
              (forall x1:int.
                ((x1 = (Int.(-) x0 10 : int)) ->
                 (forall n1:int.
                   ((n1 = (Int.(-) n0 1 : int)) -> (Int.(>=) n1 0)))))))))))))

goal F91_nonrec_po_4:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(>) n0 0) ->
             ((Int.(>) x0 100) ->
              (forall x1:int.
                ((x1 = (Int.(-) x0 10 : int)) ->
                 (forall n1:int.
                   ((n1 = (Int.(-) n0 1 : int)) ->
                    ((iter_f n1 x1 : int) = (iter_f n x : int))))))))))))))

goal F91_nonrec_po_5:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(>) n0 0) ->
             ((Int.(>) x0 100) ->
              (forall x1:int.
                ((x1 = (Int.(-) x0 10 : int)) ->
                 (forall n1:int.
                   ((n1 = (Int.(-) n0 1 : int)) ->
                    (lex (pair (Int.(+) (Int.(-) 101 x1 : int) (Int.(*) 10 n1 : int) : int) n1 : pair_type) (pair (Int.(+) (Int.(-) 101 x0 : int) (Int.(*) 10 n0 : int) : int) n0 : pair_type))))))))))))))

goal F91_nonrec_po_6:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(>) n0 0) ->
             ((Int.(<=) x0 100) ->
              (forall x1:int.
                ((x1 = (Int.(+) x0 11 : int)) ->
                 (forall n1:int.
                   ((n1 = (Int.(+) n0 1 : int)) -> (Int.(>=) n1 0)))))))))))))

goal F91_nonrec_po_7:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(>) n0 0) ->
             ((Int.(<=) x0 100) ->
              (forall x1:int.
                ((x1 = (Int.(+) x0 11 : int)) ->
                 (forall n1:int.
                   ((n1 = (Int.(+) n0 1 : int)) ->
                    ((iter_f n1 x1 : int) = (iter_f n x : int))))))))))))))

goal F91_nonrec_po_8:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(>) n0 0) ->
             ((Int.(<=) x0 100) ->
              (forall x1:int.
                ((x1 = (Int.(+) x0 11 : int)) ->
                 (forall n1:int.
                   ((n1 = (Int.(+) n0 1 : int)) ->
                    (lex (pair (Int.(+) (Int.(-) 101 x1 : int) (Int.(*) 10 n1 : int) : int) n1 : pair_type) (pair (Int.(+) (Int.(-) 101 x0 : int) (Int.(*) 10 n0 : int) : int) n0 : pair_type))))))))))))))

goal F91_nonrec_po_9:
  (forall n:int.
    (forall x:int.
      ((Int.(>=) n 1) ->
       (forall n0:int.
         (forall x0:int.
           (((Int.(>=) n0 0) /\ ((iter_f n0 x0 : int) = (iter_f n x : int))) ->
            ((Int.(<=) n0 0) -> (x0 = (iter_f n x : int)))))))))


end