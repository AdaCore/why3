theory Why2
  use unit_inf.Unit
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool_inf.Bool
  predicate eq_unit Unit.unit Unit.unit

  predicate neq_unit Unit.unit Unit.unit

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function div_int int int : int

  function mod_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  goal F1_po_1:
    (false /\
     (forall x:int.
       (forall variant1:int.
         ((Int.(>=) x 0) ->
          ((variant1 = x) ->
           ((true /\
             ((Int.(>) x 0) ->
              (((Int.(<=) 0 variant1) /\
                (Int.(<) (Int.(-) x 1 : int) variant1)) /\
               (Int.(>=) (Int.(-) x 1 : int) 0)))) /\
            (forall result:int.
              ((((Int.(>) x 0) /\
                 ((((Int.(<=) 0 variant1) /\
                    (Int.(<) (Int.(-) x 1 : int) variant1)) /\
                   (Int.(>=) (Int.(-) x 1 : int) 0)) /\
                  (result = 0))) \/
                ((Int.(<=) x 0) /\ (result = x))) ->
               (result = 0)))))))))

  goal F2_po_1:
    (false /\
     (forall variant1_0:int.
       (forall x:int.
         (forall x0:int.
           (forall x1:int.
             (forall x2:int.
               ((Int.(>=) x 0) ->
                ((variant1_0 = x) ->
                 ((true /\
                   ((Int.(>) x 0) ->
                    (true /\
                     ((x0 = (Int.(-) x 1 : int)) ->
                      (((Int.(<=) 0 variant1_0) /\ (Int.(<) x0 variant1_0)) /\
                       (Int.(>=) x0 0)))))) /\
                  (forall result:Unit.unit.
                    (((((Int.(>) x 0) /\
                        ((x0 = (Int.(-) x 1 : int)) /\
                         ((((Int.(<=) 0 variant1_0) /\
                            (Int.(<) x0 variant1_0)) /\
                           (Int.(>=) x0 0)) /\
                          (x1 = 0)))) /\
                       (x2 = x1)) \/
                      ((Int.(<=) x 0) /\ (x2 = x))) ->
                     (x2 = 0))))))))))))

  goal F3_po_1:
    (false /\
     (forall a:int.
       (forall variant1_1:int.
         (forall x:int.
           (forall x3:int.
             (forall x4:int.
               (forall x5:int.
                 ((Int.(>=) a 0) ->
                  ((variant1_1 = a) ->
                   ((true /\
                     ((Int.(>) a 0) ->
                      (true /\
                       ((x3 = (Int.(+) x 1 : int)) ->
                        (((Int.(<=) 0 variant1_1) /\
                          (Int.(<) (Int.(-) a 1 : int) variant1_1)) /\
                         (Int.(>=) (Int.(-) a 1 : int) 0)))))) /\
                    (forall result:Unit.unit.
                      (((((Int.(>) a 0) /\
                          ((x3 = (Int.(+) x 1 : int)) /\
                           ((((Int.(<=) 0 variant1_1) /\
                              (Int.(<) (Int.(-) a 1 : int) variant1_1)) /\
                             (Int.(>=) (Int.(-) a 1 : int) 0)) /\
                            (x4 = (Int.(+) x3 (Int.(-) a 1 : int) : int))))) /\
                         (x5 = x4)) \/
                        ((Int.(<=) a 0) /\ (x5 = x))) ->
                       (x5 = (Int.(+) x a : int))))))))))))))

  goal F4_po_1:
    (false /\
     (forall a:int.
       (forall a0:int.
         (forall a1:int.
           (forall a2:int.
             (forall variant1_2:int.
               (forall x:int.
                 (forall x6:int.
                   (forall x7:int.
                     (forall x8:int.
                       ((Int.(>=) a 0) ->
                        ((variant1_2 = a) ->
                         ((true /\
                           ((Int.(>) a 0) ->
                            (true /\
                             ((x6 = (Int.(+) x 1 : int)) ->
                              (true /\
                               ((a0 = (Int.(-) a 1 : int)) ->
                                (((Int.(<=) 0 variant1_2) /\
                                  (Int.(<) a0 variant1_2)) /\
                                 (Int.(>=) a0 0)))))))) /\
                          (forall result:Unit.unit.
                            (((((Int.(>) a 0) /\
                                ((x6 = (Int.(+) x 1 : int)) /\
                                 ((a0 = (Int.(-) a 1 : int)) /\
                                  ((((Int.(<=) 0 variant1_2) /\
                                     (Int.(<) a0 variant1_2)) /\
                                    (Int.(>=) a0 0)) /\
                                   (x7 = (Int.(+) x6 a0 : int)))))) /\
                               ((a2 = a1) /\ (x8 = x7))) \/
                              ((Int.(<=) a 0) /\ ((a2 = a) /\ (x8 = x)))) ->
                             (x8 = (Int.(+) x a : int)))))))))))))))))


end