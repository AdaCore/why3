theory Why2
use array.Array as A
  use Tuple0
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool.Bool
  logic eq_unit Tuple0.tuple0 Tuple0.tuple0

  logic neq_unit Tuple0.tuple0 Tuple0.tuple0

  logic eq_bool Bool.bool Bool.bool

  logic neq_bool Bool.bool Bool.bool

  logic lt_int int int

  logic le_int int int

  logic gt_int int int

  logic ge_int int int

  logic eq_int int int

  logic neq_int int int

  logic add_int int int : int

  logic sub_int int int : int

  logic mul_int int int : int

  logic div_int int int : int

  logic mod_int int int : int

  logic neg_int int : int

  logic zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) and (Int.(<) a b))

  logic lt_real real real

  logic le_real real real

  logic gt_real real real

  logic ge_real real real

  logic eq_real real real

  logic neq_real real real

  logic add_real real real : real

  logic sub_real real real : real

  logic mul_real real real : real

  logic div_real real real : real

  logic neg_real real : real

  logic real_of_int int : real

  logic int_of_real real : int

  logic lt_real_bool real real : Bool.bool

  logic le_real_bool real real : Bool.bool

  logic gt_real_bool real real : Bool.bool

  logic ge_real_bool real real : Bool.bool

  logic eq_real_bool real real : Bool.bool

  logic neq_real_bool real real : Bool.bool

  axiom Lt_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((lt_real_bool x y : Bool.bool) = Bool.True) <-> (Real.(<) x y))))

  axiom Le_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((le_real_bool x y : Bool.bool) = Bool.True) <-> (Real.(<=) x y))))

  axiom Gt_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((gt_real_bool x y : Bool.bool) = Bool.True) <-> (Real.(>) x y))))

  axiom Ge_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((ge_real_bool x y : Bool.bool) = Bool.True) <-> (Real.(>=) x y))))

  axiom Eq_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((eq_real_bool x y : Bool.bool) = Bool.True) <-> (x = y))))

  axiom Neq_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((neq_real_bool x y : Bool.bool) = Bool.True) <-> (x <> y))))

  logic real_max real real : real

  logic real_min real real : real

  axiom Real_max_is_ge:
    (forall x:real.
      (forall y:real.
        ((Real.(>=) (real_max x y : real) x) and
         (Real.(>=) (real_max x y : real) y))))

  axiom Real_max_is_some:
    (forall x:real.
      (forall y:real.
        (((real_max x y : real) = x) or ((real_max x y : real) = y))))

  axiom Real_min_is_le:
    (forall x:real.
      (forall y:real.
        ((Real.(<=) (real_min x y : real) x) and
         (Real.(<=) (real_min x y : real) y))))

  axiom Real_min_is_some:
    (forall x:real.
      (forall y:real.
        (((real_min x y : real) = x) or ((real_min x y : real) = y))))

  logic sqrt_real real : real

  logic pow_real real real : real

  logic abs_real real : real

  axiom Abs_real_pos:
    (forall x:real [(abs_real x : real)].
      ((Real.(>=) x 0.0) -> ((abs_real x : real) = x)))

  axiom Abs_real_neg:
    (forall x:real [(abs_real x : real)].
      ((Real.(<=) x 0.0) -> ((abs_real x : real) = (Real.(-_) x : real))))

  logic exp real : real

  logic log real : real

  logic log10 real : real

  axiom Log_exp: (forall x:real. ((log (exp x : real) : real) = x))

  logic cos real : real

  logic sin real : real

  logic tan real : real

  logic cosh real : real

  logic sinh real : real

  logic tanh real : real

  logic acos real : real

  logic asin real : real

  logic atan real : real

  logic atan2 real real : real

  logic hypot real real : real

  axiom Prod_pos:
    (forall x:real.
      (forall y:real.
        ((((Real.(>) x 0.0) and (Real.(>) y 0.0)) ->
          (Real.(>) (Real.(*) x y : real) 0.0)) and
         (((Real.(<) x 0.0) and (Real.(<) y 0.0)) ->
          (Real.(>) (Real.(*) x y : real) 0.0)))))

  axiom Abs_minus:
    (forall x:real.
      ((abs_real (Real.(-_) x : real) : real) = (abs_real x : real)))

  type mode

  logic nearest_even  : mode

  logic to_zero  : mode

  logic up  : mode

  logic down  : mode

  logic nearest_away  : mode

  type single

  logic add_single mode single single : single

  logic sub_single mode single single : single

  logic mul_single mode single single : single

  logic div_single mode single single : single

  logic neg_single mode single : single

  logic abs_single mode single : single

  logic sqrt_single mode single : single

  logic s_to_r single : real

  logic s_to_exact single : real

  logic s_to_model single : real

  logic r_to_s mode real : single

  logic single_round_error single : real

  logic single_total_error single : real

  logic single_set_model single real : single

  logic max_single  : real

  type double

  logic add_double mode double double : double

  logic sub_double mode double double : double

  logic mul_double mode double double : double

  logic div_double mode double double : double

  logic neg_double mode double : double

  logic abs_double mode double : double

  logic sqrt_double mode double : double

  logic d_to_r double : real

  logic d_to_exact double : real

  logic d_to_model double : real

  logic r_to_d mode real : double

  logic double_round_error double : real

  logic double_total_error double : real

  logic double_set_model double real : double

  logic eq_double (x : double) (y : double) =
    ((d_to_r x : real) = (d_to_r y : real))

  logic neq_double (x : double) (y : double) =
    ((d_to_r x : real) <> (d_to_r y : real))

  logic lt_double (x : double) (y : double) =
    (Real.(<) (d_to_r x : real) (d_to_r y : real))

  logic gt_double (x : double) (y : double) =
    (Real.(>) (d_to_r x : real) (d_to_r y : real))

  logic le_double (x : double) (y : double) =
    (Real.(<=) (d_to_r x : real) (d_to_r y : real))

  logic ge_double (x : double) (y : double) =
    (Real.(>=) (d_to_r x : real) (d_to_r y : real))

  logic max_double  : real

  logic lt_double_bool double double : Bool.bool

  logic le_double_bool double double : Bool.bool

  logic gt_double_bool double double : Bool.bool

  logic ge_double_bool double double : Bool.bool

  logic eq_double_bool double double : Bool.bool

  logic neq_double_bool double double : Bool.bool

  axiom Lt_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((lt_double_bool x y : Bool.bool) = Bool.True) <->
         (Real.(<) (d_to_r x : real) (d_to_r y : real)))))

  axiom Le_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((le_double_bool x y : Bool.bool) = Bool.True) <->
         (Real.(<=) (d_to_r x : real) (d_to_r y : real)))))

  axiom Gt_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((gt_double_bool x y : Bool.bool) = Bool.True) <->
         (Real.(>) (d_to_r x : real) (d_to_r y : real)))))

  axiom Ge_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((ge_double_bool x y : Bool.bool) = Bool.True) <->
         (Real.(>=) (d_to_r x : real) (d_to_r y : real)))))

  axiom Eq_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((eq_double_bool x y : Bool.bool) = Bool.True) <->
         ((d_to_r x : real) = (d_to_r y : real)))))

  axiom Neq_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((neq_double_bool x y : Bool.bool) = Bool.True) <->
         ((d_to_r x : real) <> (d_to_r y : real)))))

  type quad

  logic add_quad mode quad quad : quad

  logic sub_quad mode quad quad : quad

  logic mul_quad mode quad quad : quad

  logic div_quad mode quad quad : quad

  logic neg_quad mode quad : quad

  logic abs_quad mode quad : quad

  logic sqrt_quad mode quad : quad

  logic q_to_r quad : real

  logic q_to_exact quad : real

  logic q_to_model quad : real

  logic r_to_q mode real : quad

  logic quad_round_error quad : real

  logic quad_total_error quad : real

  logic quad_set_model quad real : quad

  logic max_quad  : real

  logic double_of_single single : double

  logic single_of_double mode double : single

  logic quad_of_single single : quad

  logic single_of_quad mode quad : single

  logic quad_of_double double : quad

  logic double_of_quad mode quad : double

  logic bw_compl int : int

  logic bw_and int int : int

  logic bw_xor int int : int

  logic bw_or int int : int

  logic lsl int int : int

  logic lsr int int : int

  type pointer 'z

  type addr 'z

  type alloc_table

  logic block_length alloc_table (pointer 'a1) : int

  logic base_addr (pointer 'a1) : (addr 'a1)

  logic offset (pointer 'a1) : int

  logic shift (pointer 'a1) int : (pointer 'a1)

  logic sub_pointer (pointer 'a1) (pointer 'a1) : int

  logic lt_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) and
     (Int.(<) (offset p1 : int) (offset p2 : int)))

  logic le_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) and
     (Int.(<=) (offset p1 : int) (offset p2 : int)))

  logic gt_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) and
     (Int.(>) (offset p1 : int) (offset p2 : int)))

  logic ge_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) and
     (Int.(>=) (offset p1 : int) (offset p2 : int)))

  logic valid (a : alloc_table) (p : (pointer 'a1)) =
    ((Int.(<=) 0 (offset p : int)) and
     (Int.(<) (offset p : int) (block_length a p : int)))

  logic valid_index (a : alloc_table) (p : (pointer 'a1)) (i : int) =
    ((Int.(<=) 0 (Int.(+) (offset p : int) i : int)) and
     (Int.(<) (Int.(+) (offset p : int) i : int) (block_length a p : int)))

  logic valid_range (a : alloc_table) (p : (pointer 'a1)) (i : int) (j : int) =
    ((Int.(<=) 0 (Int.(+) (offset p : int) i : int)) and
     (Int.(<) (Int.(+) (offset p : int) j : int) (block_length a p : int)))

  axiom Offset_shift:
    (forall p:(pointer 'a1).
      (forall i:int [(offset (shift p i : (pointer 'a1)) : int)].
        ((offset (shift p i : (pointer 'a1)) : int) = (Int.(+) (offset p : int) i : int))))

  axiom Shift_zero:
    (forall p:(pointer 'a1) [(shift p 0 : (pointer 'a1))].
      ((shift p 0 : (pointer 'a1)) = p))

  axiom Shift_shift:
    (forall p:(pointer 'a1).
      (forall i:int.
        (forall j:int [(shift (shift p i : (pointer 'a1)) j : (pointer 'a1))].
          ((shift (shift p i : (pointer 'a1)) j : (pointer 'a1)) = (shift p (Int.(+) i j : int) : (pointer 'a1))))))

  axiom Base_addr_shift:
    (forall p:(pointer 'a1).
      (forall i:int [(base_addr (shift p i : (pointer 'a1)) : (addr 'a1))].
        ((base_addr (shift p i : (pointer 'a1)) : (addr 'a1)) = (base_addr p : (addr 'a1)))))

  axiom Block_length_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int [(block_length a (shift p i : (pointer 'a1)) : int)].
          ((block_length a (shift p i : (pointer 'a1)) : int) = (block_length a p : int)))))

  axiom Base_addr_block_length:
    (forall a:alloc_table.
      (forall p1:(pointer 'a1).
        (forall p2:(pointer 'a1).
          (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
           ((block_length a p1 : int) = (block_length a p2 : int))))))

  axiom Pointer_pair_1:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        ((((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) and
          ((offset p1 : int) = (offset p2 : int))) ->
         (p1 = p2))))

  axiom Pointer_pair_2:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        ((p1 = p2) ->
         (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) and
          ((offset p1 : int) = (offset p2 : int))))))

  axiom Neq_base_addr_neq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((base_addr p1 : (addr 'a1)) <> (base_addr p2 : (addr 'a1))) ->
             ((shift p1 i : (pointer 'a1)) <> (shift p2 j : (pointer 'a1))))))))

  axiom Neq_offset_neq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((Int.(+) (offset p1 : int) i : int) <> (Int.(+) (offset p2 : int) j : int)) ->
             ((shift p1 i : (pointer 'a1)) <> (shift p2 j : (pointer 'a1))))))))

  axiom Eq_offset_eq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
             (((Int.(+) (offset p1 : int) i : int) = (Int.(+) (offset p2 : int) j : int)) ->
              ((shift p1 i : (pointer 'a1)) = (shift p2 j : (pointer 'a1)))))))))

  axiom Valid_index_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          ((valid_index a p i) -> (valid a (shift p i : (pointer 'a1)))))))

  axiom Valid_range_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (forall k:int.
              ((valid_range a p i j) ->
               (((Int.(<=) i k) and (Int.(<=) k j)) ->
                (valid a (shift p k : (pointer 'a1))))))))))

  axiom Valid_range_valid:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            ((valid_range a p i j) ->
             (((Int.(<=) i 0) and (Int.(<=) 0 j)) -> (valid a p)))))))

  axiom Valid_range_valid_index:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (forall k:int.
              ((valid_range a p i j) ->
               (((Int.(<=) i k) and (Int.(<=) k j)) -> (valid_index a p k))))))))

  axiom Sub_pointer_def:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
         ((sub_pointer p1 p2 : int) = (Int.(-) (offset p1 : int) (offset p2 : int) : int)))))

  type memory 'a 'z = A.t (pointer 'z) 'a

  logic acc (m:memory 'a1 'a2) (k:pointer 'a2) : 'a1 = A.get m k

  logic upd (m:memory 'a1 'a2) (k:pointer 'a2) (v:'a1) : (memory 'a1 'a2) = A.set m k v



  axiom False_not_true: (Bool.False <> Bool.True)

  type pset 'z

  logic pset_empty  : (pset 'a1)

  logic pset_singleton (pointer 'a1) : (pset 'a1)

  logic pset_star (pset 'a2) (memory (pointer 'a1) 'a2) : (pset 'a1)

  logic pset_all (pset 'a1) : (pset 'a1)

  logic pset_range (pset 'a1) int int : (pset 'a1)

  logic pset_range_left (pset 'a1) int : (pset 'a1)

  logic pset_range_right (pset 'a1) int : (pset 'a1)

  logic pset_acc_all (pset 'a2) (memory (pointer 'a1) 'a2) : (pset 'a1)

  logic pset_acc_range (pset 'a2) (memory (pointer 'a1) 'a2) int int : (pset 'a1)

  logic pset_acc_range_left (pset 'a2) (memory (pointer 'a1) 'a2) int : (pset 'a1)

  logic pset_acc_range_right (pset 'a2) (memory (pointer 'a1) 'a2) int : (pset 'a1)

  logic pset_union (pset 'a1) (pset 'a1) : (pset 'a1)

  logic not_in_pset (pointer 'a1) (pset 'a1)

  logic not_assigns (a : alloc_table) (m1 : (memory 'a1 'a2)) (m2 : (memory 'a1 'a2)) (l : (pset 'a2)) =
    (forall p:(pointer 'a2).
      ((valid a p) ->
       ((not_in_pset p l) -> ((acc m2 p : 'a1) = (acc m1 p : 'a1)))))

  axiom Pset_empty_intro:
    (forall p:(pointer 'a1). (not_in_pset p (pset_empty : (pset 'a1))))

  axiom Pset_singleton_intro:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1) [(not_in_pset p1 (pset_singleton p2 : (pset 'a1)))].
        ((p1 <> p2) -> (not_in_pset p1 (pset_singleton p2 : (pset 'a1))))))

  axiom Pset_singleton_elim:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1) [(not_in_pset p1 (pset_singleton p2 : (pset 'a1)))].
        ((not_in_pset p1 (pset_singleton p2 : (pset 'a1))) -> (p1 <> p2))))

  axiom Not_not_in_singleton:
    (forall p:(pointer 'a1).
      (not (not_in_pset p (pset_singleton p : (pset 'a1)))))

  axiom Pset_union_intro:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          (((not_in_pset p l1) and (not_in_pset p l2)) ->
           (not_in_pset p (pset_union l1 l2 : (pset 'a1)))))))

  axiom Pset_union_elim1:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          ((not_in_pset p (pset_union l1 l2 : (pset 'a1))) ->
           (not_in_pset p l1)))))

  axiom Pset_union_elim2:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          ((not_in_pset p (pset_union l1 l2 : (pset 'a1))) ->
           (not_in_pset p l2)))))

  axiom Pset_star_intro:
    (forall l:(pset 'a1).
      (forall m:(memory (pointer 'a2) 'a1).
        (forall p:(pointer 'a2) [(not_in_pset p (pset_star l m : (pset 'a2)))].
          ((forall p1:(pointer 'a1).
             ((p = (acc m p1 : (pointer 'a2))) -> (not_in_pset p1 l))) ->
           (not_in_pset p (pset_star l m : (pset 'a2)))))))

  axiom Pset_star_elim:
    (forall l:(pset 'a1).
      (forall m:(memory (pointer 'a2) 'a1).
        (forall p:(pointer 'a2) [(not_in_pset p (pset_star l m : (pset 'a2)))].
          ((not_in_pset p (pset_star l m : (pset 'a2))) ->
           (forall p1:(pointer 'a1).
             ((p = (acc m p1 : (pointer 'a2))) -> (not_in_pset p1 l)))))))

  axiom Pset_all_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1) [(not_in_pset p (pset_all l : (pset 'a1)))].
        ((forall p1:(pointer 'a1).
           ((not (not_in_pset p1 l)) ->
            ((base_addr p : (addr 'a1)) <> (base_addr p1 : (addr 'a1))))) ->
         (not_in_pset p (pset_all l : (pset 'a1))))))

  axiom Pset_all_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1) [(not_in_pset p (pset_all l : (pset 'a1)))].
        ((not_in_pset p (pset_all l : (pset 'a1))) ->
         (forall p1:(pointer 'a1).
           ((not (not_in_pset p1 l)) ->
            ((base_addr p : (addr 'a1)) <> (base_addr p1 : (addr 'a1))))))))

  axiom Pset_range_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int.
          (forall b:int [(not_in_pset p (pset_range l a b : (pset 'a1)))].
            ((forall p1:(pointer 'a1).
               ((not_in_pset p1 l) or
                (forall i:int.
                  (((Int.(<=) a i) and (Int.(<=) i b)) ->
                   (p <> (shift p1 i : (pointer 'a1))))))) ->
             (not_in_pset p (pset_range l a b : (pset 'a1))))))))

  axiom Pset_range_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int.
          (forall b:int [(not_in_pset p (pset_range l a b : (pset 'a1)))].
            ((not_in_pset p (pset_range l a b : (pset 'a1))) ->
             (forall p1:(pointer 'a1).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  (((Int.(<=) a i) and (Int.(<=) i b)) ->
                   ((shift p1 i : (pointer 'a1)) <> p))))))))))

  axiom Pset_range_left_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_left l a : (pset 'a1)))].
          ((forall p1:(pointer 'a1).
             ((not_in_pset p1 l) or
              (forall i:int.
                ((Int.(<=) i a) -> (p <> (shift p1 i : (pointer 'a1))))))) ->
           (not_in_pset p (pset_range_left l a : (pset 'a1)))))))

  axiom Pset_range_left_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_left l a : (pset 'a1)))].
          ((not_in_pset p (pset_range_left l a : (pset 'a1))) ->
           (forall p1:(pointer 'a1).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((Int.(<=) i a) -> ((shift p1 i : (pointer 'a1)) <> p)))))))))

  axiom Pset_range_right_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_right l a : (pset 'a1)))].
          ((forall p1:(pointer 'a1).
             ((not_in_pset p1 l) or
              (forall i:int.
                ((Int.(<=) a i) -> (p <> (shift p1 i : (pointer 'a1))))))) ->
           (not_in_pset p (pset_range_right l a : (pset 'a1)))))))

  axiom Pset_range_right_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_right l a : (pset 'a1)))].
          ((not_in_pset p (pset_range_right l a : (pset 'a1))) ->
           (forall p1:(pointer 'a1).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((Int.(<=) a i) -> ((shift p1 i : (pointer 'a1)) <> p)))))))))

  axiom Pset_acc_all_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2) [(not_in_pset p (pset_acc_all l m : (pset 'a1)))].
          ((forall p1:(pointer 'a2).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)))))) ->
           (not_in_pset p (pset_acc_all l m : (pset 'a1)))))))

  axiom Pset_acc_all_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2) [(not_in_pset p (pset_acc_all l m : (pset 'a1)))].
          ((not_in_pset p (pset_acc_all l m : (pset 'a1))) ->
           (forall p1:(pointer 'a2).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))

  axiom Pset_acc_range_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int.
            (forall b:int [(not_in_pset p (pset_acc_range l m a b : (pset 'a1)))].
              ((forall p1:(pointer 'a2).
                 ((not (not_in_pset p1 l)) ->
                  (forall i:int.
                    (((Int.(<=) a i) and (Int.(<=) i b)) ->
                     (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
               (not_in_pset p (pset_acc_range l m a b : (pset 'a1)))))))))

  axiom Pset_acc_range_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int.
            (forall b:int.
              ((not_in_pset p (pset_acc_range l m a b : (pset 'a1))) ->
               (forall p1:(pointer 'a2).
                 ((not (not_in_pset p1 l)) ->
                  (forall i:int.
                    (((Int.(<=) a i) and (Int.(<=) i b)) ->
                     ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p)))))))))))

  axiom Pset_acc_range_left_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_left l m a : (pset 'a1)))].
            ((forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) i a) ->
                   (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
             (not_in_pset p (pset_acc_range_left l m a : (pset 'a1))))))))

  axiom Pset_acc_range_left_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_left l m a : (pset 'a1)))].
            ((not_in_pset p (pset_acc_range_left l m a : (pset 'a1))) ->
             (forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) i a) ->
                   ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))))

  axiom Pset_acc_range_right_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_right l m a : (pset 'a1)))].
            ((forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) a i) ->
                   (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
             (not_in_pset p (pset_acc_range_right l m a : (pset 'a1))))))))

  axiom Pset_acc_range_right_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_right l m a : (pset 'a1)))].
            ((not_in_pset p (pset_acc_range_right l m a : (pset 'a1))) ->
             (forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) a i) ->
                   ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))))

  axiom Not_assigns_trans:
    (forall a:alloc_table.
      (forall l:(pset 'a1).
        (forall m1:(memory 'a2 'a1).
          (forall m2:(memory 'a2 'a1).
            (forall m3:(memory 'a2 'a1).
              ((not_assigns a m1 m2 l) ->
               ((not_assigns a m2 m3 l) -> (not_assigns a m1 m3 l))))))))

  axiom Not_assigns_refl:
    (forall a:alloc_table.
      (forall l:(pset 'a1).
        (forall m:(memory 'a2 'a1). (not_assigns a m m l))))

  logic valid_acc (m1 : (memory (pointer 'a1) 'a2)) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) -> (valid a (acc m1 p : (pointer 'a1))))))

  logic valid_acc_range (m1 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (valid_range a (acc m1 p : (pointer 'a1)) 0 (Int.(-) size 1 : int)))))

  axiom Valid_acc_range_valid:
    (forall m1:(memory (pointer 'a1) 'a2).
      (forall size:int.
        (forall p:(pointer 'a2).
          (forall a:alloc_table.
            ((valid_acc_range m1 size) ->
             ((valid a p) -> (valid a (acc m1 p : (pointer 'a1)))))))))

  logic separation1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         ((base_addr (acc m1 p : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 p : (pointer 'a1)) : (addr 'a1))))))

  logic separation1_range1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (forall i1:int.
           (forall i2:int.
             (((Int.(<=) 0 i1) and (Int.(<) i1 size)) ->
              (((Int.(<=) 0 i2) and (Int.(<) i2 size)) ->
               ((base_addr (acc m1 (shift p i1 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 (shift p i2 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1))))))))))

  logic separation1_range (m : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (forall i1:int.
           (((Int.(<=) 0 i1) and (Int.(<) i1 size)) ->
            ((base_addr (acc m (shift p i1 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m p : (pointer 'a1)) : (addr 'a1))))))))

  logic separation2 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) =
    (forall p1:(pointer 'a2).
      (forall p2:(pointer 'a2).
        ((p1 <> p2) ->
         ((base_addr (acc m1 p1 : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 p2 : (pointer 'a1)) : (addr 'a1))))))

  logic separation2_range1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall q:(pointer 'a2).
        (forall a:alloc_table.
          (forall i:int.
            (((Int.(<=) 0 i) and (Int.(<) i size)) ->
             ((base_addr (acc m1 (shift p i : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 q : (pointer 'a1)) : (addr 'a1))))))))

  logic on_heap alloc_table (pointer 'a1)

  logic on_stack alloc_table (pointer 'a1)

  logic fresh alloc_table (pointer 'a1)

  axiom Fresh_not_valid:
    (forall a:alloc_table.
      (forall p:(pointer 'a1). ((fresh a p) -> (not (valid a p)))))

  axiom Fresh_not_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        ((fresh a p) ->
         (forall i:int. (not (valid a (shift p i : (pointer 'a1))))))))

  logic alloc_extends alloc_table alloc_table

  axiom Alloc_extends_valid:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1). ((valid a1 q) -> (valid a2 q))))))

  axiom Alloc_extends_valid_index:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1).
           (forall i:int. ((valid_index a1 q i) -> (valid_index a2 q i)))))))

  axiom Alloc_extends_valid_range:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1).
           (forall i:int.
             (forall j:int.
               ((valid_range a1 q i j) -> (valid_range a2 q i j))))))))

  axiom Alloc_extends_refl: (forall a:alloc_table. (alloc_extends a a))

  axiom Alloc_extends_trans:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table [(alloc_extends a1 a2),
          (alloc_extends a2 a3)].
          ((alloc_extends a1 a2) ->
           ((alloc_extends a2 a3) -> (alloc_extends a1 a3))))))

  logic free_stack alloc_table alloc_table alloc_table

  axiom Free_stack_heap:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table.
          ((free_stack a1 a2 a3) ->
           (forall p:(pointer 'a1).
             ((valid a2 p) -> ((on_heap a2 p) -> (valid a3 p))))))))

  axiom Free_stack_stack:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table.
          ((free_stack a1 a2 a3) ->
           (forall p:(pointer 'a1).
             ((valid a1 p) -> ((on_stack a1 p) -> (valid a3 p))))))))

  logic null  : (pointer 'a1)

  axiom Null_not_valid:
    (forall a:alloc_table. (not (valid a (null : (pointer 'a1)))))

  type a_0

  type a_1

  type a_2

  goal Main_impl_po_1:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
         (forall mutable_x:int.
           (forall p:int. ((p <> 0) -> (mutable_x <> 0)))))))

  goal Main_impl_po_2:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
         (forall g:int.
           (forall mutable_x:int.
             (forall p:int.
               ((p <> 0) ->
                ((mutable_x <> 0) ->
                 (forall result:int.
                   ((result = (ComputerDivision.div g mutable_x : int)) ->
                    (forall result0:(pointer a_2).
                      ((result0 = (shift a p : (pointer a_2))) ->
                       (valid alloc result0)))))))))))))

  goal Main_impl_po_3:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall g:int.
             (forall intM_a_2:(memory int a_2).
               (forall mutable_x:int.
                 (forall o:int.
                   (forall p:int.
                     ((p <> 0) ->
                      ((mutable_x <> 0) ->
                       (forall result:int.
                         ((result = (ComputerDivision.div g mutable_x : int)) ->
                          (forall result0:(pointer a_2).
                            ((result0 = (shift a p : (pointer a_2))) ->
                             ((valid alloc result0) ->
                              (forall result1:int.
                                ((result1 = (acc intM_a_2 result0 : int)) ->
                                 ((o = 0) ->
                                  (forall g0:int.
                                    ((g0 = (Int.(+) (Int.(+) (Int.(*) result p : int) (Int.(*) result1 i : int) : int) (Int.(*) 2 1 : int) : int)) ->
                                     ((g0 <> 0) ->
                                      (forall mutable_x0:int.
                                        ((mutable_x0 = (Int.(-) (Int.(*) p 2 : int) 1 : int)) ->
                                         (forall p0:int.
                                           ((p0 = (Int.(-) p 1 : int)) ->
                                            (forall result2:(pointer a_2).
                                              ((result2 = (shift a p : (pointer a_2))) ->
                                               (mutable_x0 <> 0)))))))))))))))))))))))))))))

  goal Main_impl_po_4:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall g:int.
             (forall intM_a_2:(memory int a_2).
               (forall mutable_x:int.
                 (forall o:int.
                   (forall p:int.
                     ((p <> 0) ->
                      ((mutable_x <> 0) ->
                       (forall result:int.
                         ((result = (ComputerDivision.div g mutable_x : int)) ->
                          (forall result0:(pointer a_2).
                            ((result0 = (shift a p : (pointer a_2))) ->
                             ((valid alloc result0) ->
                              (forall result1:int.
                                ((result1 = (acc intM_a_2 result0 : int)) ->
                                 ((o = 0) ->
                                  (forall g0:int.
                                    ((g0 = (Int.(+) (Int.(+) (Int.(*) result p : int) (Int.(*) result1 i : int) : int) (Int.(*) 2 1 : int) : int)) ->
                                     ((g0 <> 0) ->
                                      (forall mutable_x0:int.
                                        ((mutable_x0 = (Int.(-) (Int.(*) p 2 : int) 1 : int)) ->
                                         (forall p0:int.
                                           ((p0 = (Int.(-) p 1 : int)) ->
                                            (forall result2:(pointer a_2).
                                              ((result2 = (shift a p : (pointer a_2))) ->
                                               ((mutable_x0 <> 0) ->
                                                (forall result3:int.
                                                  ((result3 = (ComputerDivision.mod g0 mutable_x0 : int)) ->
                                                   (valid alloc result2))))))))))))))))))))))))))))))))

  goal Main_impl_po_5:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall g:int.
             (forall intM_a_2:(memory int a_2).
               (forall mutable_x:int.
                 (forall o:int.
                   (forall p:int.
                     ((p <> 0) ->
                      ((mutable_x <> 0) ->
                       (forall result:int.
                         ((result = (ComputerDivision.div g mutable_x : int)) ->
                          (forall result0:(pointer a_2).
                            ((result0 = (shift a p : (pointer a_2))) ->
                             ((valid alloc result0) ->
                              (forall result1:int.
                                ((result1 = (acc intM_a_2 result0 : int)) ->
                                 ((o <> 0) ->
                                  (forall g0:int.
                                    ((g0 = (Int.(+) (Int.(+) (Int.(*) result p : int) (Int.(*) result1 i : int) : int) (Int.(*) 2 0 : int) : int)) ->
                                     ((g0 <> 0) ->
                                      (forall mutable_x0:int.
                                        ((mutable_x0 = (Int.(-) (Int.(*) p 2 : int) 1 : int)) ->
                                         (forall p0:int.
                                           ((p0 = (Int.(-) p 1 : int)) ->
                                            (forall result2:(pointer a_2).
                                              ((result2 = (shift a p : (pointer a_2))) ->
                                               (mutable_x0 <> 0)))))))))))))))))))))))))))))

  goal Main_impl_po_6:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall g:int.
             (forall intM_a_2:(memory int a_2).
               (forall mutable_x:int.
                 (forall o:int.
                   (forall p:int.
                     ((p <> 0) ->
                      ((mutable_x <> 0) ->
                       (forall result:int.
                         ((result = (ComputerDivision.div g mutable_x : int)) ->
                          (forall result0:(pointer a_2).
                            ((result0 = (shift a p : (pointer a_2))) ->
                             ((valid alloc result0) ->
                              (forall result1:int.
                                ((result1 = (acc intM_a_2 result0 : int)) ->
                                 ((o <> 0) ->
                                  (forall g0:int.
                                    ((g0 = (Int.(+) (Int.(+) (Int.(*) result p : int) (Int.(*) result1 i : int) : int) (Int.(*) 2 0 : int) : int)) ->
                                     ((g0 <> 0) ->
                                      (forall mutable_x0:int.
                                        ((mutable_x0 = (Int.(-) (Int.(*) p 2 : int) 1 : int)) ->
                                         (forall p0:int.
                                           ((p0 = (Int.(-) p 1 : int)) ->
                                            (forall result2:(pointer a_2).
                                              ((result2 = (shift a p : (pointer a_2))) ->
                                               ((mutable_x0 <> 0) ->
                                                (forall result3:int.
                                                  ((result3 = (ComputerDivision.mod g0 mutable_x0 : int)) ->
                                                   (valid alloc result2))))))))))))))))))))))))))))))))

  goal Main_impl_po_7:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall p:int. ((p = 0) -> (i <> 0)))))))

  goal Main_impl_po_8:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall g:int.
             (forall p:int.
               ((p = 0) ->
                ((i <> 0) ->
                 (forall result:int.
                   ((result = (ComputerDivision.div g i : int)) ->
                    (forall p0:int.
                      ((p0 = i) ->
                       ((i <> 0) ->
                        (forall result0:int.
                          ((result0 = (ComputerDivision.mod g i : int)) ->
                           (forall o0:int.
                             ((o0 = result0) ->
                              (((bw_xor 53 o0 : int) <> 0) ->
                               (forall mutable_x0:int.
                                 ((mutable_x0 = (Int.(-) (Int.(*) p0 2 : int) 1 : int)) ->
                                  (forall p1:int.
                                    ((p1 = (Int.(-) p0 1 : int)) ->
                                     (forall result1:(pointer a_2).
                                       ((result1 = (shift a p0 : (pointer a_2))) ->
                                        (mutable_x0 <> 0)))))))))))))))))))))))))

  goal Main_impl_po_9:
    (forall a:(pointer a_2).
      (forall alloc:alloc_table.
        (forall i:int.
          (("CADUCEUS_1" (valid_range alloc a 0 10000)) ->
           (forall g:int.
             (forall p:int.
               ((p = 0) ->
                ((i <> 0) ->
                 (forall result:int.
                   ((result = (ComputerDivision.div g i : int)) ->
                    (forall p0:int.
                      ((p0 = i) ->
                       ((i <> 0) ->
                        (forall result0:int.
                          ((result0 = (ComputerDivision.mod g i : int)) ->
                           (forall o0:int.
                             ((o0 = result0) ->
                              (((bw_xor 53 o0 : int) <> 0) ->
                               (forall mutable_x0:int.
                                 ((mutable_x0 = (Int.(-) (Int.(*) p0 2 : int) 1 : int)) ->
                                  (forall p1:int.
                                    ((p1 = (Int.(-) p0 1 : int)) ->
                                     (forall result1:(pointer a_2).
                                       ((result1 = (shift a p0 : (pointer a_2))) ->
                                        ((mutable_x0 <> 0) ->
                                         (forall result2:int.
                                           ((result2 = (ComputerDivision.mod g mutable_x0 : int)) ->
                                            (valid alloc result1))))))))))))))))))))))))))))


end