theory Why2
use map.Map as A
  use unit_inf.Unit
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool_inf.Bool
  predicate eq_unit Unit.unit Unit.unit

  predicate neq_unit Unit.unit Unit.unit

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function div_int int int : int

  function mod_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  function bw_compl int : int

  function bw_and int int : int

  function bw_xor int int : int

  function bw_or int int : int

  function lsl int int : int

  function lsr int int : int

  type pointer 'z

  type addr 'z

  type alloc_table

  function block_length alloc_table (pointer 'a1) : int

  function base_addr (pointer 'a1) : (addr 'a1)

  function offset (pointer 'a1) : int

  function shift (pointer 'a1) int : (pointer 'a1)

  function sub_pointer (pointer 'a1) (pointer 'a1) : int

  predicate lt_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(<) (offset p1 : int) (offset p2 : int)))

  predicate le_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(<=) (offset p1 : int) (offset p2 : int)))

  predicate gt_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(>) (offset p1 : int) (offset p2 : int)))

  predicate ge_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(>=) (offset p1 : int) (offset p2 : int)))

  predicate valid (a : alloc_table) (p : (pointer 'a1)) =
    ((Int.(<=) 0 (offset p : int)) /\
     (Int.(<) (offset p : int) (block_length a p : int)))

  predicate valid_index (a : alloc_table) (p : (pointer 'a1)) (i : int) =
    ((Int.(<=) 0 (Int.(+) (offset p : int) i : int)) /\
     (Int.(<) (Int.(+) (offset p : int) i : int) (block_length a p : int)))

  predicate valid_range (a : alloc_table) (p : (pointer 'a1)) (i : int) (j : int) =
    ((Int.(<=) 0 (Int.(+) (offset p : int) i : int)) /\
     (Int.(<) (Int.(+) (offset p : int) j : int) (block_length a p : int)))

  axiom Offset_shift:
    (forall p:(pointer 'a1).
      (forall i:int [(offset (shift p i : (pointer 'a1)) : int)].
        ((offset (shift p i : (pointer 'a1)) : int) = (Int.(+) (offset p : int) i : int))))

  axiom Shift_zero:
    (forall p:(pointer 'a1) [(shift p 0 : (pointer 'a1))].
      ((shift p 0 : (pointer 'a1)) = p))

  axiom Shift_shift:
    (forall p:(pointer 'a1).
      (forall i:int.
        (forall j:int [(shift (shift p i : (pointer 'a1)) j : (pointer 'a1))].
          ((shift (shift p i : (pointer 'a1)) j : (pointer 'a1)) = (shift p (Int.(+) i j : int) : (pointer 'a1))))))

  axiom Base_addr_shift:
    (forall p:(pointer 'a1).
      (forall i:int [(base_addr (shift p i : (pointer 'a1)) : (addr 'a1))].
        ((base_addr (shift p i : (pointer 'a1)) : (addr 'a1)) = (base_addr p : (addr 'a1)))))

  axiom Block_length_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int [(block_length a (shift p i : (pointer 'a1)) : int)].
          ((block_length a (shift p i : (pointer 'a1)) : int) = (block_length a p : int)))))

  axiom Base_addr_block_length:
    (forall a:alloc_table.
      (forall p1:(pointer 'a1).
        (forall p2:(pointer 'a1).
          (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
           ((block_length a p1 : int) = (block_length a p2 : int))))))

  axiom Pointer_pair_1:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        ((((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
          ((offset p1 : int) = (offset p2 : int))) ->
         (p1 = p2))))

  axiom Pointer_pair_2:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        ((p1 = p2) ->
         (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
          ((offset p1 : int) = (offset p2 : int))))))

  axiom Neq_base_addr_neq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((base_addr p1 : (addr 'a1)) <> (base_addr p2 : (addr 'a1))) ->
             ((shift p1 i : (pointer 'a1)) <> (shift p2 j : (pointer 'a1))))))))

  axiom Neq_offset_neq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((Int.(+) (offset p1 : int) i : int) <> (Int.(+) (offset p2 : int) j : int)) ->
             ((shift p1 i : (pointer 'a1)) <> (shift p2 j : (pointer 'a1))))))))

  axiom Eq_offset_eq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
             (((Int.(+) (offset p1 : int) i : int) = (Int.(+) (offset p2 : int) j : int)) ->
              ((shift p1 i : (pointer 'a1)) = (shift p2 j : (pointer 'a1)))))))))

  axiom Valid_index_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          ((valid_index a p i) -> (valid a (shift p i : (pointer 'a1)))))))

  axiom Valid_range_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (forall k:int.
              ((valid_range a p i j) ->
               (((Int.(<=) i k) /\ (Int.(<=) k j)) ->
                (valid a (shift p k : (pointer 'a1))))))))))

  axiom Valid_range_valid:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            ((valid_range a p i j) ->
             (((Int.(<=) i 0) /\ (Int.(<=) 0 j)) -> (valid a p)))))))

  axiom Valid_range_valid_index:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (forall k:int.
              ((valid_range a p i j) ->
               (((Int.(<=) i k) /\ (Int.(<=) k j)) -> (valid_index a p k))))))))

  axiom Sub_pointer_def:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
         ((sub_pointer p1 p2 : int) = (Int.(-) (offset p1 : int) (offset p2 : int) : int)))))

  type memory 'a 'z = A.map (pointer 'z) 'a

  function acc (m:memory 'a1 'a2) (k:pointer 'a2) : 'a1 = A.get m k

  function upd (m:memory 'a1 'a2) (k:pointer 'a2) (v:'a1) : (memory 'a1 'a2) = A.set m k v





  type pset 'z

  function pset_empty  : (pset 'a1)

  function pset_singleton (pointer 'a1) : (pset 'a1)

  function pset_star (pset 'a2) (memory (pointer 'a1) 'a2) : (pset 'a1)

  function pset_all (pset 'a1) : (pset 'a1)

  function pset_range (pset 'a1) int int : (pset 'a1)

  function pset_range_left (pset 'a1) int : (pset 'a1)

  function pset_range_right (pset 'a1) int : (pset 'a1)

  function pset_acc_all (pset 'a2) (memory (pointer 'a1) 'a2) : (pset 'a1)

  function pset_acc_range (pset 'a2) (memory (pointer 'a1) 'a2) int int : (pset 'a1)

  function pset_acc_range_left (pset 'a2) (memory (pointer 'a1) 'a2) int : (pset 'a1)

  function pset_acc_range_right (pset 'a2) (memory (pointer 'a1) 'a2) int : (pset 'a1)

  function pset_union (pset 'a1) (pset 'a1) : (pset 'a1)

  predicate not_in_pset (pointer 'a1) (pset 'a1)

  predicate not_assigns (a : alloc_table) (m1 : (memory 'a1 'a2)) (m2 : (memory 'a1 'a2)) (l : (pset 'a2)) =
    (forall p:(pointer 'a2).
      ((valid a p) ->
       ((not_in_pset p l) -> ((acc m2 p : 'a1) = (acc m1 p : 'a1)))))

  axiom Pset_empty_intro:
    (forall p:(pointer 'a1). (not_in_pset p (pset_empty : (pset 'a1))))

  axiom Pset_singleton_intro:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1) [(not_in_pset p1 (pset_singleton p2 : (pset 'a1)))].
        ((p1 <> p2) -> (not_in_pset p1 (pset_singleton p2 : (pset 'a1))))))

  axiom Pset_singleton_elim:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1) [(not_in_pset p1 (pset_singleton p2 : (pset 'a1)))].
        ((not_in_pset p1 (pset_singleton p2 : (pset 'a1))) -> (p1 <> p2))))

  axiom Not_not_in_singleton:
    (forall p:(pointer 'a1).
      (not (not_in_pset p (pset_singleton p : (pset 'a1)))))

  axiom Pset_union_intro:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          (((not_in_pset p l1) /\ (not_in_pset p l2)) ->
           (not_in_pset p (pset_union l1 l2 : (pset 'a1)))))))

  axiom Pset_union_elim1:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          ((not_in_pset p (pset_union l1 l2 : (pset 'a1))) ->
           (not_in_pset p l1)))))

  axiom Pset_union_elim2:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          ((not_in_pset p (pset_union l1 l2 : (pset 'a1))) ->
           (not_in_pset p l2)))))

  axiom Pset_star_intro:
    (forall l:(pset 'a1).
      (forall m:(memory (pointer 'a2) 'a1).
        (forall p:(pointer 'a2) [(not_in_pset p (pset_star l m : (pset 'a2)))].
          ((forall p1:(pointer 'a1).
             ((p = (acc m p1 : (pointer 'a2))) -> (not_in_pset p1 l))) ->
           (not_in_pset p (pset_star l m : (pset 'a2)))))))

  axiom Pset_star_elim:
    (forall l:(pset 'a1).
      (forall m:(memory (pointer 'a2) 'a1).
        (forall p:(pointer 'a2) [(not_in_pset p (pset_star l m : (pset 'a2)))].
          ((not_in_pset p (pset_star l m : (pset 'a2))) ->
           (forall p1:(pointer 'a1).
             ((p = (acc m p1 : (pointer 'a2))) -> (not_in_pset p1 l)))))))

  axiom Pset_all_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1) [(not_in_pset p (pset_all l : (pset 'a1)))].
        ((forall p1:(pointer 'a1).
           ((not (not_in_pset p1 l)) ->
            ((base_addr p : (addr 'a1)) <> (base_addr p1 : (addr 'a1))))) ->
         (not_in_pset p (pset_all l : (pset 'a1))))))

  axiom Pset_all_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1) [(not_in_pset p (pset_all l : (pset 'a1)))].
        ((not_in_pset p (pset_all l : (pset 'a1))) ->
         (forall p1:(pointer 'a1).
           ((not (not_in_pset p1 l)) ->
            ((base_addr p : (addr 'a1)) <> (base_addr p1 : (addr 'a1))))))))

  axiom Pset_range_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int.
          (forall b:int [(not_in_pset p (pset_range l a b : (pset 'a1)))].
            ((forall p1:(pointer 'a1).
               ((not_in_pset p1 l) \/
                (forall i:int.
                  (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                   (p <> (shift p1 i : (pointer 'a1))))))) ->
             (not_in_pset p (pset_range l a b : (pset 'a1))))))))

  axiom Pset_range_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int.
          (forall b:int [(not_in_pset p (pset_range l a b : (pset 'a1)))].
            ((not_in_pset p (pset_range l a b : (pset 'a1))) ->
             (forall p1:(pointer 'a1).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                   ((shift p1 i : (pointer 'a1)) <> p))))))))))

  axiom Pset_range_left_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_left l a : (pset 'a1)))].
          ((forall p1:(pointer 'a1).
             ((not_in_pset p1 l) \/
              (forall i:int.
                ((Int.(<=) i a) -> (p <> (shift p1 i : (pointer 'a1))))))) ->
           (not_in_pset p (pset_range_left l a : (pset 'a1)))))))

  axiom Pset_range_left_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_left l a : (pset 'a1)))].
          ((not_in_pset p (pset_range_left l a : (pset 'a1))) ->
           (forall p1:(pointer 'a1).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((Int.(<=) i a) -> ((shift p1 i : (pointer 'a1)) <> p)))))))))

  axiom Pset_range_right_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_right l a : (pset 'a1)))].
          ((forall p1:(pointer 'a1).
             ((not_in_pset p1 l) \/
              (forall i:int.
                ((Int.(<=) a i) -> (p <> (shift p1 i : (pointer 'a1))))))) ->
           (not_in_pset p (pset_range_right l a : (pset 'a1)))))))

  axiom Pset_range_right_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_right l a : (pset 'a1)))].
          ((not_in_pset p (pset_range_right l a : (pset 'a1))) ->
           (forall p1:(pointer 'a1).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((Int.(<=) a i) -> ((shift p1 i : (pointer 'a1)) <> p)))))))))

  axiom Pset_acc_all_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2) [(not_in_pset p (pset_acc_all l m : (pset 'a1)))].
          ((forall p1:(pointer 'a2).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)))))) ->
           (not_in_pset p (pset_acc_all l m : (pset 'a1)))))))

  axiom Pset_acc_all_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2) [(not_in_pset p (pset_acc_all l m : (pset 'a1)))].
          ((not_in_pset p (pset_acc_all l m : (pset 'a1))) ->
           (forall p1:(pointer 'a2).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))

  axiom Pset_acc_range_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int.
            (forall b:int [(not_in_pset p (pset_acc_range l m a b : (pset 'a1)))].
              ((forall p1:(pointer 'a2).
                 ((not (not_in_pset p1 l)) ->
                  (forall i:int.
                    (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                     (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
               (not_in_pset p (pset_acc_range l m a b : (pset 'a1)))))))))

  axiom Pset_acc_range_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int.
            (forall b:int.
              ((not_in_pset p (pset_acc_range l m a b : (pset 'a1))) ->
               (forall p1:(pointer 'a2).
                 ((not (not_in_pset p1 l)) ->
                  (forall i:int.
                    (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                     ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p)))))))))))

  axiom Pset_acc_range_left_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_left l m a : (pset 'a1)))].
            ((forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) i a) ->
                   (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
             (not_in_pset p (pset_acc_range_left l m a : (pset 'a1))))))))

  axiom Pset_acc_range_left_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_left l m a : (pset 'a1)))].
            ((not_in_pset p (pset_acc_range_left l m a : (pset 'a1))) ->
             (forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) i a) ->
                   ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))))

  axiom Pset_acc_range_right_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_right l m a : (pset 'a1)))].
            ((forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) a i) ->
                   (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
             (not_in_pset p (pset_acc_range_right l m a : (pset 'a1))))))))

  axiom Pset_acc_range_right_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_right l m a : (pset 'a1)))].
            ((not_in_pset p (pset_acc_range_right l m a : (pset 'a1))) ->
             (forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) a i) ->
                   ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))))

  axiom Not_assigns_trans:
    (forall a:alloc_table.
      (forall l:(pset 'a1).
        (forall m1:(memory 'a2 'a1).
          (forall m2:(memory 'a2 'a1).
            (forall m3:(memory 'a2 'a1).
              ((not_assigns a m1 m2 l) ->
               ((not_assigns a m2 m3 l) -> (not_assigns a m1 m3 l))))))))

  axiom Not_assigns_refl:
    (forall a:alloc_table.
      (forall l:(pset 'a1).
        (forall m:(memory 'a2 'a1). (not_assigns a m m l))))

  predicate valid_acc (m1 : (memory (pointer 'a1) 'a2)) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) -> (valid a (acc m1 p : (pointer 'a1))))))

  predicate valid_acc_range (m1 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (valid_range a (acc m1 p : (pointer 'a1)) 0 (Int.(-) size 1 : int)))))

  axiom Valid_acc_range_valid:
    (forall m1:(memory (pointer 'a1) 'a2).
      (forall size:int.
        (forall p:(pointer 'a2).
          (forall a:alloc_table.
            ((valid_acc_range m1 size) ->
             ((valid a p) -> (valid a (acc m1 p : (pointer 'a1)))))))))

  predicate separation1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         ((base_addr (acc m1 p : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 p : (pointer 'a1)) : (addr 'a1))))))

  predicate separation1_range1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (forall i1:int.
           (forall i2:int.
             (((Int.(<=) 0 i1) /\ (Int.(<) i1 size)) ->
              (((Int.(<=) 0 i2) /\ (Int.(<) i2 size)) ->
               ((base_addr (acc m1 (shift p i1 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 (shift p i2 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1))))))))))

  predicate separation1_range (m : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (forall i1:int.
           (((Int.(<=) 0 i1) /\ (Int.(<) i1 size)) ->
            ((base_addr (acc m (shift p i1 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m p : (pointer 'a1)) : (addr 'a1))))))))

  predicate separation2 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) =
    (forall p1:(pointer 'a2).
      (forall p2:(pointer 'a2).
        ((p1 <> p2) ->
         ((base_addr (acc m1 p1 : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 p2 : (pointer 'a1)) : (addr 'a1))))))

  predicate separation2_range1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall q:(pointer 'a2).
        (forall a:alloc_table.
          (forall i:int.
            (((Int.(<=) 0 i) /\ (Int.(<) i size)) ->
             ((base_addr (acc m1 (shift p i : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 q : (pointer 'a1)) : (addr 'a1))))))))

  predicate on_heap alloc_table (pointer 'a1)

  predicate on_stack alloc_table (pointer 'a1)

  predicate fresh alloc_table (pointer 'a1)

  axiom Fresh_not_valid:
    (forall a:alloc_table.
      (forall p:(pointer 'a1). ((fresh a p) -> (not (valid a p)))))

  axiom Fresh_not_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        ((fresh a p) ->
         (forall i:int. (not (valid a (shift p i : (pointer 'a1))))))))

  predicate alloc_extends alloc_table alloc_table

  axiom Alloc_extends_valid:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1). ((valid a1 q) -> (valid a2 q))))))

  axiom Alloc_extends_valid_index:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1).
           (forall i:int. ((valid_index a1 q i) -> (valid_index a2 q i)))))))

  axiom Alloc_extends_valid_range:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1).
           (forall i:int.
             (forall j:int.
               ((valid_range a1 q i j) -> (valid_range a2 q i j))))))))

  axiom Alloc_extends_refl: (forall a:alloc_table. (alloc_extends a a))

  axiom Alloc_extends_trans:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table [(alloc_extends a1 a2),
          (alloc_extends a2 a3)].
          ((alloc_extends a1 a2) ->
           ((alloc_extends a2 a3) -> (alloc_extends a1 a3))))))

  predicate free_stack alloc_table alloc_table alloc_table

  axiom Free_stack_heap:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table.
          ((free_stack a1 a2 a3) ->
           (forall p:(pointer 'a1).
             ((valid a2 p) -> ((on_heap a2 p) -> (valid a3 p))))))))

  axiom Free_stack_stack:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table.
          ((free_stack a1 a2 a3) ->
           (forall p:(pointer 'a1).
             ((valid a1 p) -> ((on_stack a1 p) -> (valid a3 p))))))))

  function null  : (pointer 'a1)

  axiom Null_not_valid:
    (forall a:alloc_table. (not (valid a (null : (pointer 'a1)))))

  type why3_UPM_59

  type x_12

  type x_13

  type t1_7

  type t2_8_68

  type w_9

  type index_13_49

  type t2_8_18

  type why3_VPM_70

  type why3_VPM_72

  type t1_7_43

  type why3_UPM_62

  type why3_UPM_63

  type z_2

  type why3_UPM_66

  type why3_TPM_55

  type t_11

  type why3_TPM_58

  type index_2_28

  type z_2_20

  type index_6_36

  type why3_Z21

  type why3_Z22

  type why3_Z23

  type why3_UPM_59_60

  type w_10

  type why3_TPM_61

  type t1_7_54

  type w_16

  type index_12_48

  type w_17

  type t2_8_30

  type why3_TPM_69

  type t2_8_35

  type y_5

  type t2_8_38

  type index_1_25

  type y_6

  type t2_8_39

  type index_5_33

  type why3_TPM_71

  type index_9_41

  type t1_7_67

  type t1_7_19

  type why3_VPM_64_65

  type index_11_45

  type z_2_42

  type t2_8_47

  type z_2_46

  type x_3

  type x_4

  type t1_7_26

  type index_0_24

  type y_14

  type t1_7_27

  type y_15

  type index_4_32

  type t2_8

  type index_8_40

  type z_2_50

  type t_0

  type t2_8_53

  type z_2_51

  type t_1

  type z_2_57

  type index_10_44

  type t1_7_31

  type index_14_52

  type t1_7_34

  type why3_VPM_64

  type index_3_29

  type index_7_37

  type why3_TPM_55_56

  function why3_A  : int

  function why3_B  : int

  function why3_C  : int

  axiom Enum_E_A: ((why3_A : int) = 0)

  axiom Enum_E_B: ((why3_B : int) = 1)

  axiom Enum_E_C: ((why3_C : int) = 2)

  predicate constant_c (c : int) = ("CADUCEUS_4" (c = 5))

  predicate constant_e (e : int) = ("CADUCEUS_5" (e = (why3_B : int)))

  predicate constant_t (intM_t_11 : (memory int t_11)) (t : (pointer t_11)) =
    ("CADUCEUS_1"
    (((((acc intM_t_11 t : int) = 1) /\
       ((acc intM_t_11 (shift t 1 : (pointer t_11)) : int) = 2)) /\
      ((acc intM_t_11 (shift t 2 : (pointer t_11)) : int) = 3)) /\
     ((acc intM_t_11 (shift t 3 : (pointer t_11)) : int) = 4)))

  predicate constant_x (intM_z_2_20 : (memory int z_2_20)) (z_x_13 : (memory (pointer z_2_20) x_13)) (y_x_13 : (memory int x_13)) (x_x_13 : (memory int x_13)) (x_0 : (pointer x_13)) =
    ("CADUCEUS_2"
    ((((acc x_x_13 x_0 : int) = 5) /\ ((acc y_x_13 x_0 : int) = 6)) /\
     ((((acc intM_z_2_20 (acc z_x_13 x_0 : (pointer z_2_20)) : int) = 1) /\
       ((acc intM_z_2_20 (shift (acc z_x_13 x_0 : (pointer z_2_20)) 1 : (pointer z_2_20)) : int) = 2)) /\
      ((acc intM_z_2_20 (shift (acc z_x_13 x_0 : (pointer z_2_20)) 2 : (pointer z_2_20)) : int) = 3))))

  predicate constant_y (why3_U_y_y_15 : (memory int y_15)) (y_0 : (pointer y_15)) =
    ("CADUCEUS_3" ((acc why3_U_y_y_15 y_0 : int) = 2))

  goal F_impl_po_1:
    (forall alloc:alloc_table.
      (forall c:int.
        (forall intM_t_11:(memory int t_11).
          (forall t:(pointer t_11).
            ((("CADUCEUS_6" (valid_range alloc t 0 3)) /\
              ((constant_c c) /\ (constant_t intM_t_11 t))) ->
             (forall result:(pointer t_11).
               ((result = (shift t 2 : (pointer t_11))) ->
                (forall result0:int.
                  ((result0 = (acc intM_t_11 result : int)) ->
                   ("CADUCEUS_7" ((Int.(+) c result0 : int) = 8)))))))))))

  goal G_impl_po_1:
    (forall alloc:alloc_table.
      (forall intM_z_2_20:(memory int z_2_20).
        (forall x_0:(pointer x_13).
          (forall x_x_13:(memory int x_13).
            (forall y_x_13:(memory int x_13).
              (forall z_x_13:(memory (pointer z_2_20) x_13).
                (((constant_x intM_z_2_20 z_x_13 y_x_13 x_x_13 x_0) /\
                  (("CADUCEUS_10" (valid alloc x_0)) /\
                   (("CADUCEUS_9" (valid_acc_range z_x_13 3)) /\
                    ("CADUCEUS_8" (valid_acc z_x_13))))) ->
                 (valid alloc x_0))))))))

  goal G_impl_po_2:
    (forall alloc:alloc_table.
      (forall intM_z_2_20:(memory int z_2_20).
        (forall x_0:(pointer x_13).
          (forall x_x_13:(memory int x_13).
            (forall y_x_13:(memory int x_13).
              (forall z_x_13:(memory (pointer z_2_20) x_13).
                (((constant_x intM_z_2_20 z_x_13 y_x_13 x_x_13 x_0) /\
                  (("CADUCEUS_10" (valid alloc x_0)) /\
                   (("CADUCEUS_9" (valid_acc_range z_x_13 3)) /\
                    ("CADUCEUS_8" (valid_acc z_x_13))))) ->
                 ((valid alloc x_0) ->
                  (forall result:(pointer z_2_20).
                    ((result = (acc z_x_13 x_0 : (pointer z_2_20))) ->
                     (forall result0:(pointer z_2_20).
                       ((result0 = (shift result 2 : (pointer z_2_20))) ->
                        (valid alloc result0)))))))))))))

  goal G_impl_po_3:
    (forall alloc:alloc_table.
      (forall intM_z_2_20:(memory int z_2_20).
        (forall x_0:(pointer x_13).
          (forall x_x_13:(memory int x_13).
            (forall y_x_13:(memory int x_13).
              (forall z_x_13:(memory (pointer z_2_20) x_13).
                (((constant_x intM_z_2_20 z_x_13 y_x_13 x_x_13 x_0) /\
                  (("CADUCEUS_10" (valid alloc x_0)) /\
                   (("CADUCEUS_9" (valid_acc_range z_x_13 3)) /\
                    ("CADUCEUS_8" (valid_acc z_x_13))))) ->
                 ((valid alloc x_0) ->
                  (forall result:(pointer z_2_20).
                    ((result = (acc z_x_13 x_0 : (pointer z_2_20))) ->
                     (forall result0:(pointer z_2_20).
                       ((result0 = (shift result 2 : (pointer z_2_20))) ->
                        ((valid alloc result0) ->
                         (forall result1:int.
                           ((result1 = (acc intM_z_2_20 result0 : int)) ->
                            ("CADUCEUS_11" (result1 = 3)))))))))))))))))

  goal H_impl_po_1:
    (forall why3_U_y_y_15:(memory int y_15).
      (forall alloc:alloc_table.
        (forall y_0:(pointer y_15).
          (((constant_y why3_U_y_y_15 y_0) /\
            ("CADUCEUS_14" (valid alloc y_0))) ->
           ((valid alloc y_0) ->
            (forall result:int.
              ((result = (acc why3_U_y_y_15 y_0 : int)) ->
               ("CADUCEUS_15" (result = 2)))))))))

  goal I_impl_po_1:
    (forall alloc:alloc_table.
      (forall intM_t1_7_19:(memory int t1_7_19).
        (forall intM_t2_8_18:(memory int t2_8_18).
          (forall t1_w_17:(memory (pointer t1_7_19) w_17).
            (forall t2_w_17:(memory (pointer t2_8_18) w_17).
              (forall w:(pointer w_17).
                ((("CADUCEUS_21" (valid alloc w)) /\
                  (("CADUCEUS_20" (valid_acc t2_w_17)) /\
                   (("CADUCEUS_19" (valid_acc t1_w_17)) /\
                    (("CADUCEUS_18" (valid_acc_range t2_w_17 1)) /\
                     ("CADUCEUS_17" (valid_acc_range t1_w_17 2)))))) ->
                 ((valid alloc w) ->
                  (forall result:(pointer t1_7_19).
                    ((result = (acc t1_w_17 w : (pointer t1_7_19))) ->
                     (forall result0:(pointer t1_7_19).
                       ((result0 = (shift result 0 : (pointer t1_7_19))) ->
                        (forall intM_t1_7_19_0:(memory int t1_7_19).
                          ((intM_t1_7_19_0 = (upd intM_t1_7_19 result0 1 : (memory int t1_7_19))) ->
                           ((valid alloc w) ->
                            (forall result1:(pointer t2_8_18).
                              ((result1 = (acc t2_w_17 w : (pointer t2_8_18))) ->
                               (forall result2:(pointer t2_8_18).
                                 ((result2 = (shift result1 0 : (pointer t2_8_18))) ->
                                  (forall intM_t2_8_18_0:(memory int t2_8_18).
                                    ((intM_t2_8_18_0 = (upd intM_t2_8_18 result2 2 : (memory int t2_8_18))) ->
                                     ((valid alloc w) ->
                                      (forall result3:(pointer t1_7_19).
                                        ((result3 = (acc t1_w_17 w : (pointer t1_7_19))) ->
                                         (forall result4:(pointer t1_7_19).
                                           ((result4 = (shift result3 0 : (pointer t1_7_19))) ->
                                            (forall result5:int.
                                              ((result5 = (acc intM_t1_7_19_0 result4 : int)) ->
                                               ("CADUCEUS_22" (result5 = 1))))))))))))))))))))))))))))))

  goal K_impl_po_1:
    (forall e:int. ((constant_e e) -> ("CADUCEUS_26" (e = (why3_B : int)))))


end