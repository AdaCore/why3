theory Why2
use map.Map as A
  use unit_inf.Unit
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool_inf.Bool
  predicate eq_unit Unit.unit Unit.unit

  predicate neq_unit Unit.unit Unit.unit

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function div_int int int : int

  function mod_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  predicate lt_real real real

  predicate le_real real real

  predicate gt_real real real

  predicate ge_real real real

  predicate eq_real real real

  predicate neq_real real real

  function add_real real real : real

  function sub_real real real : real

  function mul_real real real : real

  function div_real real real : real

  function neg_real real : real

  function real_of_int int : real

  function int_of_real real : int

  function lt_real_bool real real : Bool.bool

  function le_real_bool real real : Bool.bool

  function gt_real_bool real real : Bool.bool

  function ge_real_bool real real : Bool.bool

  function eq_real_bool real real : Bool.bool

  function neq_real_bool real real : Bool.bool

  axiom Lt_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((lt_real_bool x y : Bool.bool) = Bool.ttrue) <-> (Real.(<) x y))))

  axiom Le_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((le_real_bool x y : Bool.bool) = Bool.ttrue) <-> (Real.(<=) x y))))

  axiom Gt_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((gt_real_bool x y : Bool.bool) = Bool.ttrue) <-> (Real.(>) x y))))

  axiom Ge_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((ge_real_bool x y : Bool.bool) = Bool.ttrue) <-> (Real.(>=) x y))))

  axiom Eq_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((eq_real_bool x y : Bool.bool) = Bool.ttrue) <-> (x = y))))

  axiom Neq_real_bool_axiom:
    (forall x:real.
      (forall y:real.
        (((neq_real_bool x y : Bool.bool) = Bool.ttrue) <-> (x <> y))))

  function real_max real real : real

  function real_min real real : real

  axiom Real_max_is_ge:
    (forall x:real.
      (forall y:real.
        ((Real.(>=) (real_max x y : real) x) /\
         (Real.(>=) (real_max x y : real) y))))

  axiom Real_max_is_some:
    (forall x:real.
      (forall y:real.
        (((real_max x y : real) = x) \/ ((real_max x y : real) = y))))

  axiom Real_min_is_le:
    (forall x:real.
      (forall y:real.
        ((Real.(<=) (real_min x y : real) x) /\
         (Real.(<=) (real_min x y : real) y))))

  axiom Real_min_is_some:
    (forall x:real.
      (forall y:real.
        (((real_min x y : real) = x) \/ ((real_min x y : real) = y))))

  function sqrt_real real : real

  function pow_real real real : real

  function abs_real real : real

  axiom Abs_real_pos:
    (forall x:real [(abs_real x : real)].
      ((Real.(>=) x 0.0) -> ((abs_real x : real) = x)))

  axiom Abs_real_neg:
    (forall x:real [(abs_real x : real)].
      ((Real.(<=) x 0.0) -> ((abs_real x : real) = (Real.(-_) x : real))))

  function exp real : real

  function log real : real

  function log10 real : real

  axiom Log_exp: (forall x:real. ((log (exp x : real) : real) = x))

  function cos real : real

  function sin real : real

  function tan real : real

  function cosh real : real

  function sinh real : real

  function tanh real : real

  function acos real : real

  function asin real : real

  function atan real : real

  function atan2 real real : real

  function hypot real real : real

  axiom Prod_pos:
    (forall x:real.
      (forall y:real.
        ((((Real.(>) x 0.0) /\ (Real.(>) y 0.0)) ->
          (Real.(>) (Real.(*) x y : real) 0.0)) /\
         (((Real.(<) x 0.0) /\ (Real.(<) y 0.0)) ->
          (Real.(>) (Real.(*) x y : real) 0.0)))))

  axiom Abs_minus:
    (forall x:real.
      ((abs_real (Real.(-_) x : real) : real) = (abs_real x : real)))

  type mode

  function nearest_even  : mode

  function to_zero  : mode

  function up  : mode

  function down  : mode

  function nearest_away  : mode

  type single

  function add_single mode single single : single

  function sub_single mode single single : single

  function mul_single mode single single : single

  function div_single mode single single : single

  function neg_single mode single : single

  function abs_single mode single : single

  function sqrt_single mode single : single

  function s_to_r single : real

  function s_to_exact single : real

  function s_to_model single : real

  function r_to_s mode real : single

  function single_round_error single : real

  function single_total_error single : real

  function single_set_model single real : single

  function max_single  : real

  type double

  function add_double mode double double : double

  function sub_double mode double double : double

  function mul_double mode double double : double

  function div_double mode double double : double

  function neg_double mode double : double

  function abs_double mode double : double

  function sqrt_double mode double : double

  function d_to_r double : real

  function d_to_exact double : real

  function d_to_model double : real

  function r_to_d mode real : double

  function double_round_error double : real

  function double_total_error double : real

  function double_set_model double real : double

  predicate eq_double (x : double) (y : double) =
    ((d_to_r x : real) = (d_to_r y : real))

  predicate neq_double (x : double) (y : double) =
    ((d_to_r x : real) <> (d_to_r y : real))

  predicate lt_double (x : double) (y : double) =
    (Real.(<) (d_to_r x : real) (d_to_r y : real))

  predicate gt_double (x : double) (y : double) =
    (Real.(>) (d_to_r x : real) (d_to_r y : real))

  predicate le_double (x : double) (y : double) =
    (Real.(<=) (d_to_r x : real) (d_to_r y : real))

  predicate ge_double (x : double) (y : double) =
    (Real.(>=) (d_to_r x : real) (d_to_r y : real))

  function max_double  : real

  function lt_double_bool double double : Bool.bool

  function le_double_bool double double : Bool.bool

  function gt_double_bool double double : Bool.bool

  function ge_double_bool double double : Bool.bool

  function eq_double_bool double double : Bool.bool

  function neq_double_bool double double : Bool.bool

  axiom Lt_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((lt_double_bool x y : Bool.bool) = Bool.ttrue) <->
         (Real.(<) (d_to_r x : real) (d_to_r y : real)))))

  axiom Le_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((le_double_bool x y : Bool.bool) = Bool.ttrue) <->
         (Real.(<=) (d_to_r x : real) (d_to_r y : real)))))

  axiom Gt_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((gt_double_bool x y : Bool.bool) = Bool.ttrue) <->
         (Real.(>) (d_to_r x : real) (d_to_r y : real)))))

  axiom Ge_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((ge_double_bool x y : Bool.bool) = Bool.ttrue) <->
         (Real.(>=) (d_to_r x : real) (d_to_r y : real)))))

  axiom Eq_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((eq_double_bool x y : Bool.bool) = Bool.ttrue) <->
         ((d_to_r x : real) = (d_to_r y : real)))))

  axiom Neq_double_bool_axiom:
    (forall x:double.
      (forall y:double.
        (((neq_double_bool x y : Bool.bool) = Bool.ttrue) <->
         ((d_to_r x : real) <> (d_to_r y : real)))))

  type quad

  function add_quad mode quad quad : quad

  function sub_quad mode quad quad : quad

  function mul_quad mode quad quad : quad

  function div_quad mode quad quad : quad

  function neg_quad mode quad : quad

  function abs_quad mode quad : quad

  function sqrt_quad mode quad : quad

  function q_to_r quad : real

  function q_to_exact quad : real

  function q_to_model quad : real

  function r_to_q mode real : quad

  function quad_round_error quad : real

  function quad_total_error quad : real

  function quad_set_model quad real : quad

  function max_quad  : real

  function double_of_single single : double

  function single_of_double mode double : single

  function quad_of_single single : quad

  function single_of_quad mode quad : single

  function quad_of_double double : quad

  function double_of_quad mode quad : double

  function bw_compl int : int

  function bw_and int int : int

  function bw_xor int int : int

  function bw_or int int : int

  function lsl int int : int

  function lsr int int : int

  type pointer 'z

  type addr 'z

  type alloc_table

  function block_length alloc_table (pointer 'a1) : int

  function base_addr (pointer 'a1) : (addr 'a1)

  function offset (pointer 'a1) : int

  function shift (pointer 'a1) int : (pointer 'a1)

  function sub_pointer (pointer 'a1) (pointer 'a1) : int

  predicate lt_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(<) (offset p1 : int) (offset p2 : int)))

  predicate le_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(<=) (offset p1 : int) (offset p2 : int)))

  predicate gt_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(>) (offset p1 : int) (offset p2 : int)))

  predicate ge_pointer (p1 : (pointer 'a1)) (p2 : (pointer 'a1)) =
    (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
     (Int.(>=) (offset p1 : int) (offset p2 : int)))

  predicate valid (a : alloc_table) (p : (pointer 'a1)) =
    ((Int.(<=) 0 (offset p : int)) /\
     (Int.(<) (offset p : int) (block_length a p : int)))

  predicate valid_index (a : alloc_table) (p : (pointer 'a1)) (i : int) =
    ((Int.(<=) 0 (Int.(+) (offset p : int) i : int)) /\
     (Int.(<) (Int.(+) (offset p : int) i : int) (block_length a p : int)))

  predicate valid_range (a : alloc_table) (p : (pointer 'a1)) (i : int) (j : int) =
    ((Int.(<=) 0 (Int.(+) (offset p : int) i : int)) /\
     (Int.(<) (Int.(+) (offset p : int) j : int) (block_length a p : int)))

  axiom Offset_shift:
    (forall p:(pointer 'a1).
      (forall i:int [(offset (shift p i : (pointer 'a1)) : int)].
        ((offset (shift p i : (pointer 'a1)) : int) = (Int.(+) (offset p : int) i : int))))

  axiom Shift_zero:
    (forall p:(pointer 'a1) [(shift p 0 : (pointer 'a1))].
      ((shift p 0 : (pointer 'a1)) = p))

  axiom Shift_shift:
    (forall p:(pointer 'a1).
      (forall i:int.
        (forall j:int [(shift (shift p i : (pointer 'a1)) j : (pointer 'a1))].
          ((shift (shift p i : (pointer 'a1)) j : (pointer 'a1)) = (shift p (Int.(+) i j : int) : (pointer 'a1))))))

  axiom Base_addr_shift:
    (forall p:(pointer 'a1).
      (forall i:int [(base_addr (shift p i : (pointer 'a1)) : (addr 'a1))].
        ((base_addr (shift p i : (pointer 'a1)) : (addr 'a1)) = (base_addr p : (addr 'a1)))))

  axiom Block_length_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int [(block_length a (shift p i : (pointer 'a1)) : int)].
          ((block_length a (shift p i : (pointer 'a1)) : int) = (block_length a p : int)))))

  axiom Base_addr_block_length:
    (forall a:alloc_table.
      (forall p1:(pointer 'a1).
        (forall p2:(pointer 'a1).
          (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
           ((block_length a p1 : int) = (block_length a p2 : int))))))

  axiom Pointer_pair_1:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        ((((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
          ((offset p1 : int) = (offset p2 : int))) ->
         (p1 = p2))))

  axiom Pointer_pair_2:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        ((p1 = p2) ->
         (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) /\
          ((offset p1 : int) = (offset p2 : int))))))

  axiom Neq_base_addr_neq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((base_addr p1 : (addr 'a1)) <> (base_addr p2 : (addr 'a1))) ->
             ((shift p1 i : (pointer 'a1)) <> (shift p2 j : (pointer 'a1))))))))

  axiom Neq_offset_neq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((Int.(+) (offset p1 : int) i : int) <> (Int.(+) (offset p2 : int) j : int)) ->
             ((shift p1 i : (pointer 'a1)) <> (shift p2 j : (pointer 'a1))))))))

  axiom Eq_offset_eq_shift:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
             (((Int.(+) (offset p1 : int) i : int) = (Int.(+) (offset p2 : int) j : int)) ->
              ((shift p1 i : (pointer 'a1)) = (shift p2 j : (pointer 'a1)))))))))

  axiom Valid_index_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          ((valid_index a p i) -> (valid a (shift p i : (pointer 'a1)))))))

  axiom Valid_range_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (forall k:int.
              ((valid_range a p i j) ->
               (((Int.(<=) i k) /\ (Int.(<=) k j)) ->
                (valid a (shift p k : (pointer 'a1))))))))))

  axiom Valid_range_valid:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            ((valid_range a p i j) ->
             (((Int.(<=) i 0) /\ (Int.(<=) 0 j)) -> (valid a p)))))))

  axiom Valid_range_valid_index:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        (forall i:int.
          (forall j:int.
            (forall k:int.
              ((valid_range a p i j) ->
               (((Int.(<=) i k) /\ (Int.(<=) k j)) -> (valid_index a p k))))))))

  axiom Sub_pointer_def:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1).
        (((base_addr p1 : (addr 'a1)) = (base_addr p2 : (addr 'a1))) ->
         ((sub_pointer p1 p2 : int) = (Int.(-) (offset p1 : int) (offset p2 : int) : int)))))

  type memory 'a 'z = A.map (pointer 'z) 'a

  function acc (m:memory 'a1 'a2) (k:pointer 'a2) : 'a1 = A.get m k

  function upd (m:memory 'a1 'a2) (k:pointer 'a2) (v:'a1) : (memory 'a1 'a2) = A.set m k v





  type pset 'z

  function pset_empty  : (pset 'a1)

  function pset_singleton (pointer 'a1) : (pset 'a1)

  function pset_star (pset 'a2) (memory (pointer 'a1) 'a2) : (pset 'a1)

  function pset_all (pset 'a1) : (pset 'a1)

  function pset_range (pset 'a1) int int : (pset 'a1)

  function pset_range_left (pset 'a1) int : (pset 'a1)

  function pset_range_right (pset 'a1) int : (pset 'a1)

  function pset_acc_all (pset 'a2) (memory (pointer 'a1) 'a2) : (pset 'a1)

  function pset_acc_range (pset 'a2) (memory (pointer 'a1) 'a2) int int : (pset 'a1)

  function pset_acc_range_left (pset 'a2) (memory (pointer 'a1) 'a2) int : (pset 'a1)

  function pset_acc_range_right (pset 'a2) (memory (pointer 'a1) 'a2) int : (pset 'a1)

  function pset_union (pset 'a1) (pset 'a1) : (pset 'a1)

  predicate not_in_pset (pointer 'a1) (pset 'a1)

  predicate not_assigns (a : alloc_table) (m1 : (memory 'a1 'a2)) (m2 : (memory 'a1 'a2)) (l : (pset 'a2)) =
    (forall p:(pointer 'a2).
      ((valid a p) ->
       ((not_in_pset p l) -> ((acc m2 p : 'a1) = (acc m1 p : 'a1)))))

  axiom Pset_empty_intro:
    (forall p:(pointer 'a1). (not_in_pset p (pset_empty : (pset 'a1))))

  axiom Pset_singleton_intro:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1) [(not_in_pset p1 (pset_singleton p2 : (pset 'a1)))].
        ((p1 <> p2) -> (not_in_pset p1 (pset_singleton p2 : (pset 'a1))))))

  axiom Pset_singleton_elim:
    (forall p1:(pointer 'a1).
      (forall p2:(pointer 'a1) [(not_in_pset p1 (pset_singleton p2 : (pset 'a1)))].
        ((not_in_pset p1 (pset_singleton p2 : (pset 'a1))) -> (p1 <> p2))))

  axiom Not_not_in_singleton:
    (forall p:(pointer 'a1).
      (not (not_in_pset p (pset_singleton p : (pset 'a1)))))

  axiom Pset_union_intro:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          (((not_in_pset p l1) /\ (not_in_pset p l2)) ->
           (not_in_pset p (pset_union l1 l2 : (pset 'a1)))))))

  axiom Pset_union_elim1:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          ((not_in_pset p (pset_union l1 l2 : (pset 'a1))) ->
           (not_in_pset p l1)))))

  axiom Pset_union_elim2:
    (forall l1:(pset 'a1).
      (forall l2:(pset 'a1).
        (forall p:(pointer 'a1) [(not_in_pset p (pset_union l1 l2 : (pset 'a1)))].
          ((not_in_pset p (pset_union l1 l2 : (pset 'a1))) ->
           (not_in_pset p l2)))))

  axiom Pset_star_intro:
    (forall l:(pset 'a1).
      (forall m:(memory (pointer 'a2) 'a1).
        (forall p:(pointer 'a2) [(not_in_pset p (pset_star l m : (pset 'a2)))].
          ((forall p1:(pointer 'a1).
             ((p = (acc m p1 : (pointer 'a2))) -> (not_in_pset p1 l))) ->
           (not_in_pset p (pset_star l m : (pset 'a2)))))))

  axiom Pset_star_elim:
    (forall l:(pset 'a1).
      (forall m:(memory (pointer 'a2) 'a1).
        (forall p:(pointer 'a2) [(not_in_pset p (pset_star l m : (pset 'a2)))].
          ((not_in_pset p (pset_star l m : (pset 'a2))) ->
           (forall p1:(pointer 'a1).
             ((p = (acc m p1 : (pointer 'a2))) -> (not_in_pset p1 l)))))))

  axiom Pset_all_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1) [(not_in_pset p (pset_all l : (pset 'a1)))].
        ((forall p1:(pointer 'a1).
           ((not (not_in_pset p1 l)) ->
            ((base_addr p : (addr 'a1)) <> (base_addr p1 : (addr 'a1))))) ->
         (not_in_pset p (pset_all l : (pset 'a1))))))

  axiom Pset_all_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1) [(not_in_pset p (pset_all l : (pset 'a1)))].
        ((not_in_pset p (pset_all l : (pset 'a1))) ->
         (forall p1:(pointer 'a1).
           ((not (not_in_pset p1 l)) ->
            ((base_addr p : (addr 'a1)) <> (base_addr p1 : (addr 'a1))))))))

  axiom Pset_range_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int.
          (forall b:int [(not_in_pset p (pset_range l a b : (pset 'a1)))].
            ((forall p1:(pointer 'a1).
               ((not_in_pset p1 l) \/
                (forall i:int.
                  (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                   (p <> (shift p1 i : (pointer 'a1))))))) ->
             (not_in_pset p (pset_range l a b : (pset 'a1))))))))

  axiom Pset_range_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int.
          (forall b:int [(not_in_pset p (pset_range l a b : (pset 'a1)))].
            ((not_in_pset p (pset_range l a b : (pset 'a1))) ->
             (forall p1:(pointer 'a1).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                   ((shift p1 i : (pointer 'a1)) <> p))))))))))

  axiom Pset_range_left_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_left l a : (pset 'a1)))].
          ((forall p1:(pointer 'a1).
             ((not_in_pset p1 l) \/
              (forall i:int.
                ((Int.(<=) i a) -> (p <> (shift p1 i : (pointer 'a1))))))) ->
           (not_in_pset p (pset_range_left l a : (pset 'a1)))))))

  axiom Pset_range_left_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_left l a : (pset 'a1)))].
          ((not_in_pset p (pset_range_left l a : (pset 'a1))) ->
           (forall p1:(pointer 'a1).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((Int.(<=) i a) -> ((shift p1 i : (pointer 'a1)) <> p)))))))))

  axiom Pset_range_right_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_right l a : (pset 'a1)))].
          ((forall p1:(pointer 'a1).
             ((not_in_pset p1 l) \/
              (forall i:int.
                ((Int.(<=) a i) -> (p <> (shift p1 i : (pointer 'a1))))))) ->
           (not_in_pset p (pset_range_right l a : (pset 'a1)))))))

  axiom Pset_range_right_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a1).
        (forall a:int [(not_in_pset p (pset_range_right l a : (pset 'a1)))].
          ((not_in_pset p (pset_range_right l a : (pset 'a1))) ->
           (forall p1:(pointer 'a1).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((Int.(<=) a i) -> ((shift p1 i : (pointer 'a1)) <> p)))))))))

  axiom Pset_acc_all_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2) [(not_in_pset p (pset_acc_all l m : (pset 'a1)))].
          ((forall p1:(pointer 'a2).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)))))) ->
           (not_in_pset p (pset_acc_all l m : (pset 'a1)))))))

  axiom Pset_acc_all_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2) [(not_in_pset p (pset_acc_all l m : (pset 'a1)))].
          ((not_in_pset p (pset_acc_all l m : (pset 'a1))) ->
           (forall p1:(pointer 'a2).
             ((not (not_in_pset p1 l)) ->
              (forall i:int.
                ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))

  axiom Pset_acc_range_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int.
            (forall b:int [(not_in_pset p (pset_acc_range l m a b : (pset 'a1)))].
              ((forall p1:(pointer 'a2).
                 ((not (not_in_pset p1 l)) ->
                  (forall i:int.
                    (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                     (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
               (not_in_pset p (pset_acc_range l m a b : (pset 'a1)))))))))

  axiom Pset_acc_range_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int.
            (forall b:int.
              ((not_in_pset p (pset_acc_range l m a b : (pset 'a1))) ->
               (forall p1:(pointer 'a2).
                 ((not (not_in_pset p1 l)) ->
                  (forall i:int.
                    (((Int.(<=) a i) /\ (Int.(<=) i b)) ->
                     ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p)))))))))))

  axiom Pset_acc_range_left_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_left l m a : (pset 'a1)))].
            ((forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) i a) ->
                   (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
             (not_in_pset p (pset_acc_range_left l m a : (pset 'a1))))))))

  axiom Pset_acc_range_left_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_left l m a : (pset 'a1)))].
            ((not_in_pset p (pset_acc_range_left l m a : (pset 'a1))) ->
             (forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) i a) ->
                   ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))))

  axiom Pset_acc_range_right_intro:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_right l m a : (pset 'a1)))].
            ((forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) a i) ->
                   (p <> (acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1))))))) ->
             (not_in_pset p (pset_acc_range_right l m a : (pset 'a1))))))))

  axiom Pset_acc_range_right_elim:
    (forall p:(pointer 'a1).
      (forall l:(pset 'a2).
        (forall m:(memory (pointer 'a1) 'a2).
          (forall a:int [(not_in_pset p (pset_acc_range_right l m a : (pset 'a1)))].
            ((not_in_pset p (pset_acc_range_right l m a : (pset 'a1))) ->
             (forall p1:(pointer 'a2).
               ((not (not_in_pset p1 l)) ->
                (forall i:int.
                  ((Int.(<=) a i) ->
                   ((acc m (shift p1 i : (pointer 'a2)) : (pointer 'a1)) <> p))))))))))

  axiom Not_assigns_trans:
    (forall a:alloc_table.
      (forall l:(pset 'a1).
        (forall m1:(memory 'a2 'a1).
          (forall m2:(memory 'a2 'a1).
            (forall m3:(memory 'a2 'a1).
              ((not_assigns a m1 m2 l) ->
               ((not_assigns a m2 m3 l) -> (not_assigns a m1 m3 l))))))))

  axiom Not_assigns_refl:
    (forall a:alloc_table.
      (forall l:(pset 'a1).
        (forall m:(memory 'a2 'a1). (not_assigns a m m l))))

  predicate valid_acc (m1 : (memory (pointer 'a1) 'a2)) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) -> (valid a (acc m1 p : (pointer 'a1))))))

  predicate valid_acc_range (m1 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (valid_range a (acc m1 p : (pointer 'a1)) 0 (Int.(-) size 1 : int)))))

  axiom Valid_acc_range_valid:
    (forall m1:(memory (pointer 'a1) 'a2).
      (forall size:int.
        (forall p:(pointer 'a2).
          (forall a:alloc_table.
            ((valid_acc_range m1 size) ->
             ((valid a p) -> (valid a (acc m1 p : (pointer 'a1)))))))))

  predicate separation1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         ((base_addr (acc m1 p : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 p : (pointer 'a1)) : (addr 'a1))))))

  predicate separation1_range1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (forall i1:int.
           (forall i2:int.
             (((Int.(<=) 0 i1) /\ (Int.(<) i1 size)) ->
              (((Int.(<=) 0 i2) /\ (Int.(<) i2 size)) ->
               ((base_addr (acc m1 (shift p i1 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 (shift p i2 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1))))))))))

  predicate separation1_range (m : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall a:alloc_table.
        ((valid a p) ->
         (forall i1:int.
           (((Int.(<=) 0 i1) /\ (Int.(<) i1 size)) ->
            ((base_addr (acc m (shift p i1 : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m p : (pointer 'a1)) : (addr 'a1))))))))

  predicate separation2 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) =
    (forall p1:(pointer 'a2).
      (forall p2:(pointer 'a2).
        ((p1 <> p2) ->
         ((base_addr (acc m1 p1 : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 p2 : (pointer 'a1)) : (addr 'a1))))))

  predicate separation2_range1 (m1 : (memory (pointer 'a1) 'a2)) (m2 : (memory (pointer 'a1) 'a2)) (size : int) =
    (forall p:(pointer 'a2).
      (forall q:(pointer 'a2).
        (forall a:alloc_table.
          (forall i:int.
            (((Int.(<=) 0 i) /\ (Int.(<) i size)) ->
             ((base_addr (acc m1 (shift p i : (pointer 'a2)) : (pointer 'a1)) : (addr 'a1)) <> (base_addr (acc m2 q : (pointer 'a1)) : (addr 'a1))))))))

  predicate on_heap alloc_table (pointer 'a1)

  predicate on_stack alloc_table (pointer 'a1)

  predicate fresh alloc_table (pointer 'a1)

  axiom Fresh_not_valid:
    (forall a:alloc_table.
      (forall p:(pointer 'a1). ((fresh a p) -> (not (valid a p)))))

  axiom Fresh_not_valid_shift:
    (forall a:alloc_table.
      (forall p:(pointer 'a1).
        ((fresh a p) ->
         (forall i:int. (not (valid a (shift p i : (pointer 'a1))))))))

  predicate alloc_extends alloc_table alloc_table

  axiom Alloc_extends_valid:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1). ((valid a1 q) -> (valid a2 q))))))

  axiom Alloc_extends_valid_index:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1).
           (forall i:int. ((valid_index a1 q i) -> (valid_index a2 q i)))))))

  axiom Alloc_extends_valid_range:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        ((alloc_extends a1 a2) ->
         (forall q:(pointer 'a1).
           (forall i:int.
             (forall j:int.
               ((valid_range a1 q i j) -> (valid_range a2 q i j))))))))

  axiom Alloc_extends_refl: (forall a:alloc_table. (alloc_extends a a))

  axiom Alloc_extends_trans:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table [(alloc_extends a1 a2),
          (alloc_extends a2 a3)].
          ((alloc_extends a1 a2) ->
           ((alloc_extends a2 a3) -> (alloc_extends a1 a3))))))

  predicate free_stack alloc_table alloc_table alloc_table

  axiom Free_stack_heap:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table.
          ((free_stack a1 a2 a3) ->
           (forall p:(pointer 'a1).
             ((valid a2 p) -> ((on_heap a2 p) -> (valid a3 p))))))))

  axiom Free_stack_stack:
    (forall a1:alloc_table.
      (forall a2:alloc_table.
        (forall a3:alloc_table.
          ((free_stack a1 a2 a3) ->
           (forall p:(pointer 'a1).
             ((valid a1 p) -> ((on_stack a1 p) -> (valid a3 p))))))))

  function null  : (pointer 'a1)

  axiom Null_not_valid:
    (forall a:alloc_table. (not (valid a (null : (pointer 'a1)))))

  predicate constant_ff (ff : single) =
    ("CADUCEUS_1"
    (ff = (neg_single (nearest_even : mode) (div_single (nearest_even : mode) (r_to_s (nearest_even : mode) (real_of_int 1 : real) : single) (div_single (nearest_even : mode) (r_to_s (nearest_even : mode) (real_of_int 85 : real) : single) (r_to_s (nearest_even : mode) (real_of_int 99 : real) : single) : single) : single) : single)))

  function f_double_to_real double : real

  goal F1_impl_po_1:
    (forall f:single.
      (("CADUCEUS_4"
       ((Real.(-_) (s_to_r f : real) : real) = (Real.(+) (real_of_int (Int.(+) (Int.(-_) 0 : int) (int_of_real 1.0 : int) : int) : real) 2.0 : real))) ->
       (forall f0:single.
         ((f0 = (add_single (nearest_even : mode) (r_to_s (nearest_even : mode) (real_of_int 1 : real) : single) (r_to_s (nearest_even : mode) (real_of_int (int_of_real (d_to_r (r_to_d (nearest_even : mode) 1.2 : double) : real) : int) : real) : single) : single)) ->
          (forall d:double.
            ((d = (double_of_quad (nearest_even : mode) (add_quad (nearest_even : mode) (quad_of_double (add_double (nearest_even : mode) (double_of_single (neg_single (nearest_even : mode) f0 : single) : double) (r_to_d (nearest_even : mode) 1.0 : double) : double) : quad) (r_to_q (nearest_even : mode) 12. : quad) : quad) : double)) ->
             (forall l:quad.
               ((l = (add_quad (nearest_even : mode) (quad_of_double (add_double (nearest_even : mode) (double_of_single f0 : double) d : double) : quad) (r_to_q (nearest_even : mode) (real_of_int 3 : real) : quad) : quad)) ->
                ("CADUCEUS_5"
                (Real.(>=) (d_to_r d : real) (Real.(-) (real_of_int 1 : real) 2.34 : real)))))))))))

  goal F2_impl_po_1:
    (forall x:double.
      (("CADUCEUS_6" ((d_to_model x : real) = 0.0)) ->
       ("CADUCEUS_7"
       (Real.(<=) (double_total_error (double_of_quad (nearest_even : mode) (add_quad (nearest_even : mode) (quad_of_double (add_double (nearest_even : mode) x (double_of_single (r_to_s (nearest_even : mode) 1.0 : single) : double) : double) : quad) (div_quad (nearest_even : mode) (quad_of_double (mul_double (nearest_even : mode) (r_to_d (nearest_even : mode) (real_of_int 2 : real) : double) (r_to_d (nearest_even : mode) 3.14 : double) : double) : quad) (r_to_q (nearest_even : mode) 3.6 : quad) : quad) : quad) : double) : real) 0.1))))

  goal F3_impl_po_1:
    (forall x:double.
      (forall y:single.
        (("CADUCEUS_8" ((d_to_r x : real) = (s_to_r y : real))) ->
         ((Real.(<) (d_to_r x : real) (d_to_r (double_of_single y : double) : real)) ->
          (forall z:quad.
            ((z = (quad_of_single y : quad)) ->
             ("CADUCEUS_9"
             ((d_to_r (double_of_quad (nearest_even : mode) z : double) : real) = (real_of_int 1 : real)))))))))

  goal F3_impl_po_2:
    (forall x:double.
      (forall y:single.
        (("CADUCEUS_8" ((d_to_r x : real) = (s_to_r y : real))) ->
         ((Real.(>=) (d_to_r x : real) (d_to_r (double_of_single y : double) : real)) ->
          (forall z:quad.
            ((z = (quad_of_double x : quad)) ->
             ("CADUCEUS_9"
             ((d_to_r (double_of_quad (nearest_even : mode) z : double) : real) = (real_of_int 1 : real)))))))))

  goal F4_impl_po_1:
    (forall x:double.
      ("CADUCEUS_10"
      ((d_to_r x : real) = (pow_real (real_of_int 2 : real) (real_of_int 40 : real) : real))))

  goal F5_impl_po_1:
    (forall x:double.
      ("CADUCEUS_11"
      ((d_to_r (sub_double (nearest_even : mode) x (r_to_d (nearest_even : mode) (real_of_int 1 : real) : double) : double) : real) = (f_double_to_real x : real))))

  goal F6_impl_po_1:
    ("CADUCEUS_12"
    ((d_to_r (neg_double (nearest_even : mode) (r_to_d (nearest_even : mode) 1.0 : double) : double) : real) = (Real.(-_) 1.0 : real)))

  goal My_exp_impl_po_1:
    (forall x:double.
      (("CADUCEUS_2"
       (((d_to_r x : real) = (d_to_exact x : real)) /\
        (Real.(<=) (abs_real (d_to_r x : real) : real) (real_of_int 1 : real)))) ->
       ("CADUCEUS_3"
       (Real.(<=) (double_round_error (add_double (nearest_even : mode) (add_double (nearest_even : mode) (r_to_d (nearest_even : mode) (real_of_int 1 : real) : double) x : double) (div_double (nearest_even : mode) (mul_double (nearest_even : mode) x x : double) (r_to_d (nearest_even : mode) (real_of_int 2 : real) : double) : double) : double) : real) (pow_real (real_of_int 2 : real) (real_of_int (Int.(-_) 48 : int) : real) : real)))))


end