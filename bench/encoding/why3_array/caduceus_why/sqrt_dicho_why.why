theory Why2
  use Tuple0
  use int.Int
  use int.ComputerDivision
  use real.Real
  use bool.Bool
  logic eq_unit Tuple0.tuple0 Tuple0.tuple0

  logic neq_unit Tuple0.tuple0 Tuple0.tuple0

  logic eq_bool Bool.bool Bool.bool

  logic neq_bool Bool.bool Bool.bool

  logic lt_int int int

  logic le_int int int

  logic gt_int int int

  logic ge_int int int

  logic eq_int int int

  logic neq_int int int

  logic add_int int int : int

  logic sub_int int int : int

  logic mul_int int int : int

  logic div_int int int : int

  logic mod_int int int : int

  logic neg_int int : int

  logic zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) and (Int.(<) a b))

  goal Sqrt_po_1:
    (forall x:int. ((Int.(>=) x 0) -> (Int.(<=) (Int.(*) 0 0 : int) x)))

  goal Sqrt_po_2:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (Int.(<) x (Int.(*) (Int.(+) x 1 : int) (Int.(+) x 1 : int) : int))))

  goal Sqrt_po_3:
    (forall x:int. ((Int.(>=) x 0) -> (Int.(<) 0 (Int.(+) x 1 : int))))

  goal Sqrt_po_4:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) -> (2 <> 0)))))))

  goal Sqrt_po_5:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(<) x (Int.(*) mil mil : int)) ->
                     (forall sup0:int.
                       ((sup0 = mil) -> (Int.(<) x (Int.(*) sup0 sup0 : int))))))))))))))))

  goal Sqrt_po_6:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(<) x (Int.(*) mil mil : int)) ->
                     (forall sup0:int. ((sup0 = mil) -> (Int.(<) inf sup0)))))))))))))))

  goal Sqrt_po_7:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(<) x (Int.(*) mil mil : int)) ->
                     (forall sup0:int.
                       ((sup0 = mil) -> (Int.(<=) 0 (Int.(-) sup inf : int))))))))))))))))

  goal Sqrt_po_8:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(<) x (Int.(*) mil mil : int)) ->
                     (forall sup0:int.
                       ((sup0 = mil) ->
                        (Int.(<) (Int.(-) sup0 inf : int) (Int.(-) sup inf : int))))))))))))))))

  goal Sqrt_po_9:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(>=) x (Int.(*) mil mil : int)) ->
                     (forall inf0:int.
                       ((inf0 = mil) ->
                        (Int.(<=) (Int.(*) inf0 inf0 : int) x)))))))))))))))

  goal Sqrt_po_10:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(>=) x (Int.(*) mil mil : int)) ->
                     (forall inf0:int.
                       ((inf0 = mil) -> (Int.(<) x (Int.(*) sup sup : int))))))))))))))))

  goal Sqrt_po_11:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(>=) x (Int.(*) mil mil : int)) ->
                     (forall inf0:int. ((inf0 = mil) -> (Int.(<) inf0 sup)))))))))))))))

  goal Sqrt_po_12:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(>=) x (Int.(*) mil mil : int)) ->
                     (forall inf0:int.
                       ((inf0 = mil) -> (Int.(<=) 0 (Int.(-) sup inf : int))))))))))))))))

  goal Sqrt_po_13:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) <> sup) ->
             ((2 <> 0) ->
              (forall result:int.
                ((result = (ComputerDivision.div (Int.(+) (Int.(+) inf sup : int) 1 : int) 2 : int)) ->
                 (forall mil:int.
                   ((mil = result) ->
                    ((Int.(>=) x (Int.(*) mil mil : int)) ->
                     (forall inf0:int.
                       ((inf0 = mil) ->
                        (Int.(<) (Int.(-) sup inf0 : int) (Int.(-) sup inf : int))))))))))))))))

  goal Sqrt_po_14:
    (forall x:int.
      ((Int.(>=) x 0) ->
       (forall inf:int.
         (forall sup:int.
           (((Int.(<=) (Int.(*) inf inf : int) x) and
             ((Int.(<) x (Int.(*) sup sup : int)) and (Int.(<) inf sup))) ->
            (((Int.(+) inf 1 : int) = sup) ->
             (Int.(<) x (Int.(*) (Int.(+) inf 1 : int) (Int.(+) inf 1 : int) : int))))))))


end