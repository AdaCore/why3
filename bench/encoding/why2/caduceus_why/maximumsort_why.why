logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 'a farray

logic access : 'a1 farray, int -> 'a1

logic update : 'a1 farray, int, 'a1 -> 'a1 farray

axiom access_update:
  (forall a:'a1 farray.
    (forall i:int. (forall v:'a1. (access(update(a, i, v), i) = v))))

axiom access_update_neq:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int.
        (forall v:'a1.
          ((i <> j) -> (access(update(a, i, v), j) = access(a, j)))))))

logic array_length : 'a1 farray -> int

predicate sorted_array(t: int farray, i: int, j: int) =
  (forall k1:int.
    (forall k2:int.
      ((((i <= k1) and (k1 <= k2)) and (k2 <= j)) -> (access(t,
       k1) <= access(t, k2)))))

predicate exchange(a1: 'a1 farray, a2: 'a1 farray, i: int, j: int) =
  ((array_length(a1) = array_length(a2)) and
   ((access(a1, i) = access(a2, j)) and
    ((access(a2, i) = access(a1, j)) and
     (forall k:int.
       (((k <> i) and (k <> j)) -> (access(a1, k) = access(a2, k)))))))

logic permut : 'a1 farray, 'a1 farray, int, int -> prop

axiom permut_refl:
  (forall t:'a1 farray. (forall l:int. (forall u:int. permut(t, t, l, u))))

axiom permut_sym:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall l:int.
        (forall u:int. (permut(t1, t2, l, u) -> permut(t2, t1, l, u))))))

axiom permut_trans:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall t3:'a1 farray.
        (forall l:int.
          (forall u:int.
            (permut(t1, t2, l, u) ->
             (permut(t2, t3, l, u) -> permut(t1, t3, l, u))))))))

axiom permut_exchange:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (forall i:int.
            (forall j:int.
              (((l <= i) and (i <= u)) ->
               (((l <= j) and (j <= u)) ->
                (exchange(a1, a2, i, j) -> permut(a1, a2, l, u))))))))))

axiom exchange_upd:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int. exchange(a, update(update(a, i, access(a, j)), j,
        access(a, i)), i, j))))

axiom permut_weakening:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l1:int.
        (forall r1:int.
          (forall l2:int.
            (forall r2:int.
              ((((l1 <= l2) and (l2 <= r2)) and (r2 <= r1)) ->
               (permut(a1, a2, l2, r2) -> permut(a1, a2, l1, r1)))))))))

axiom permut_eq:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          ((l <= u) ->
           (permut(a1, a2, l, u) ->
            (forall i:int.
              (((i < l) or (u < i)) -> (access(a2, i) = access(a1, i))))))))))

predicate permutation(a1: 'a1 farray, a2: 'a1 farray) = permut(a1, a2, 0,
  (array_length(a1) - 1))

axiom array_length_update:
  (forall a:'a1 farray.
    (forall i:int.
      (forall v:'a1. (array_length(update(a, i, v)) = array_length(a)))))

axiom permut_array_length:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (permut(a1, a2, l, u) -> (array_length(a1) = array_length(a2)))))))

goal swap_po_1:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  (0 <= i)

goal swap_po_2:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  (i < array_length(t))

goal swap_po_3:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  (0 <= j)

goal swap_po_4:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  (j < array_length(t))

goal swap_po_5:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  ((0 <= j) and (j < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, j)) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall t0:int farray.
  (t0 = update(t, i, result0)) ->
  (j < array_length(t0))

goal swap_po_6:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  ((0 <= j) and (j < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, j)) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall t0:int farray.
  (t0 = update(t, i, result0)) ->
  ((0 <= j) and (j < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, j, result)) ->
  exchange(t1, t, i, j)

predicate Maximize(t: int farray, n: int, x: int, k: int) =
  (forall i:int. (((k <= i) and (i <= n)) -> (access(t, k) <= x)))

goal maximum_po_1:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k = 0) ->
  (0 <= i)

goal maximum_po_2:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k = 0) ->
  (i <= n)

goal maximum_po_3:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k = 0) ->
  Maximize(t, n, access(t, i), 0)

goal maximum_po_4:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  (0 <= (k - 1))

goal maximum_po_5:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((k - 1) < array_length(t))

goal maximum_po_6:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  (0 <= i)

goal maximum_po_7:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  (i < array_length(t))

goal maximum_po_8:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  (0 <= k)

goal maximum_po_9:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((k - 1) < k)

goal maximum_po_10:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  ((k - 1) <= (k - 1))

goal maximum_po_11:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  ((k - 1) <= n)

goal maximum_po_12:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (n < array_length(t))

goal maximum_po_13:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  Maximize(t, n, access(t, (k - 1)), (k - 1))

goal maximum_po_14:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (((0 <= (k - 1)) and ((k - 1) <= (k - 1))) and
   (((k - 1) <= n) and
    ((n < array_length(t)) and Maximize(t, n, access(t, (k - 1)), (k - 1))))) ->
  forall result1:int.
  (((0 <= result1) and (result1 <= n)) and Maximize(t, n, access(t, result1),
   0)) ->
  (0 <= result1)

goal maximum_po_15:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result > result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (((0 <= (k - 1)) and ((k - 1) <= (k - 1))) and
   (((k - 1) <= n) and
    ((n < array_length(t)) and Maximize(t, n, access(t, (k - 1)), (k - 1))))) ->
  forall result1:int.
  (((0 <= result1) and (result1 <= n)) and Maximize(t, n, access(t, result1),
   0)) ->
  (result1 <= n)

goal maximum_po_16:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  (0 <= k)

goal maximum_po_17:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((k - 1) < k)

goal maximum_po_18:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  ((k - 1) <= i)

goal maximum_po_19:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (i <= n)

goal maximum_po_20:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (n < array_length(t))

goal maximum_po_21:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  Maximize(t, n, access(t, i), (k - 1))

goal maximum_po_22:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (((0 <= (k - 1)) and ((k - 1) <= i)) and
   ((i <= n) and
    ((n < array_length(t)) and Maximize(t, n, access(t, i), (k - 1))))) ->
  forall result1:int.
  (((0 <= result1) and (result1 <= n)) and Maximize(t, n, access(t, result1),
   0)) ->
  (0 <= result1)

goal maximum_po_23:
  forall n:int.
  forall k:int.
  forall i:int.
  forall t:int farray.
  (((0 <= k) and (k <= i)) and
   ((i <= n) and ((n < array_length(t)) and Maximize(t, n, access(t, i), k)))) ->
  (k <> 0) ->
  ((0 <= (k - 1)) and ((k - 1) < array_length(t))) ->
  forall result:int.
  (result = access(t, (k - 1))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, i)) ->
  (result <= result0) ->
  ((0 <= k) and ((k - 1) < k)) ->
  (((0 <= (k - 1)) and ((k - 1) <= i)) and
   ((i <= n) and
    ((n < array_length(t)) and Maximize(t, n, access(t, i), (k - 1))))) ->
  forall result1:int.
  (((0 <= result1) and (result1 <= n)) and Maximize(t, n, access(t, result1),
   0)) ->
  (result1 <= n)

goal maxisort_po_1:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  (0 <= ((result - 1) + 1))

goal maxisort_po_2:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  (((result - 1) + 1) <= array_length(t))

goal maxisort_po_3:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  sorted_array(t, ((result - 1) + 1), (array_length(t) - 1))

goal maxisort_po_4:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  permutation(t, t)

goal maxisort_po_5:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  (((result - 1) + 1) < array_length(t)) ->
  Maximize(t, (result - 1), access(t, ((result - 1) + 1)), 0)

goal maxisort_po_6:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (0 <= i)

goal maxisort_po_7:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (i <= i)

goal maxisort_po_8:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (i <= i)

goal maxisort_po_9:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (i < array_length(t0))

goal maxisort_po_10:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  Maximize(t0, i, access(t0, i), i)

goal maxisort_po_11:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (0 <= i)

goal maxisort_po_12:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (i < array_length(t0))

goal maxisort_po_13:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (0 <= result0)

goal maxisort_po_14:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (result0 < array_length(t0))

goal maxisort_po_15:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  (0 <= (i0 + 1))

goal maxisort_po_16:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  ((i0 + 1) <= array_length(t1))

goal maxisort_po_17:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  sorted_array(t1, (i0 + 1), (array_length(t1) - 1))

goal maxisort_po_18:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  permutation(t1, t)

goal maxisort_po_19:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  ((i0 + 1) < array_length(t1)) ->
  Maximize(t1, i0, access(t1, (i0 + 1)), 0)

goal maxisort_po_20:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  (0 <= (i + 1))

goal maxisort_po_21:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i >= 0) ->
  (((0 <= i) and (i <= i)) and
   ((i <= i) and
    ((i < array_length(t0)) and Maximize(t0, i, access(t0, i), i)))) ->
  forall result0:int.
  (((0 <= result0) and (result0 <= i)) and Maximize(t0, i, access(t0,
   result0), 0)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= result0) and (result0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, result0) ->
  forall i0:int.
  (i0 = (i - 1)) ->
  ((i0 + 1) < (i + 1))

goal maxisort_po_22:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i < 0) ->
  sorted_array(t0, 0, (array_length(t0) - 1))

goal maxisort_po_23:
  forall t:int farray.
  (0 <= array_length(t)) ->
  forall result:int.
  (result = array_length(t)) ->
  forall i:int.
  forall t0:int farray.
  (((0 <= (i + 1)) and ((i + 1) <= array_length(t0))) and
   (sorted_array(t0, (i + 1), (array_length(t0) - 1)) and
    (permutation(t0, t) and
     (((i + 1) < array_length(t0)) -> Maximize(t0, i, access(t0, (i + 1)), 0))))) ->
  (i < 0) ->
  permutation(t0, t)

