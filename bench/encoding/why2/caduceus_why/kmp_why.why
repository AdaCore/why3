logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 'a farray

logic access : 'a1 farray, int -> 'a1

logic update : 'a1 farray, int, 'a1 -> 'a1 farray

axiom access_update:
  (forall a:'a1 farray.
    (forall i:int. (forall v:'a1. (access(update(a, i, v), i) = v))))

axiom access_update_neq:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int.
        (forall v:'a1.
          ((i <> j) -> (access(update(a, i, v), j) = access(a, j)))))))

logic array_length : 'a1 farray -> int

predicate sorted_array(t: int farray, i: int, j: int) =
  (forall k1:int.
    (forall k2:int.
      ((((i <= k1) and (k1 <= k2)) and (k2 <= j)) -> (access(t,
       k1) <= access(t, k2)))))

predicate exchange(a1: 'a1 farray, a2: 'a1 farray, i: int, j: int) =
  ((array_length(a1) = array_length(a2)) and
   ((access(a1, i) = access(a2, j)) and
    ((access(a2, i) = access(a1, j)) and
     (forall k:int.
       (((k <> i) and (k <> j)) -> (access(a1, k) = access(a2, k)))))))

logic permut : 'a1 farray, 'a1 farray, int, int -> prop

axiom permut_refl:
  (forall t:'a1 farray. (forall l:int. (forall u:int. permut(t, t, l, u))))

axiom permut_sym:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall l:int.
        (forall u:int. (permut(t1, t2, l, u) -> permut(t2, t1, l, u))))))

axiom permut_trans:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall t3:'a1 farray.
        (forall l:int.
          (forall u:int.
            (permut(t1, t2, l, u) ->
             (permut(t2, t3, l, u) -> permut(t1, t3, l, u))))))))

axiom permut_exchange:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (forall i:int.
            (forall j:int.
              (((l <= i) and (i <= u)) ->
               (((l <= j) and (j <= u)) ->
                (exchange(a1, a2, i, j) -> permut(a1, a2, l, u))))))))))

axiom exchange_upd:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int. exchange(a, update(update(a, i, access(a, j)), j,
        access(a, i)), i, j))))

axiom permut_weakening:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l1:int.
        (forall r1:int.
          (forall l2:int.
            (forall r2:int.
              ((((l1 <= l2) and (l2 <= r2)) and (r2 <= r1)) ->
               (permut(a1, a2, l2, r2) -> permut(a1, a2, l1, r1)))))))))

axiom permut_eq:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          ((l <= u) ->
           (permut(a1, a2, l, u) ->
            (forall i:int.
              (((i < l) or (u < i)) -> (access(a2, i) = access(a1, i))))))))))

predicate permutation(a1: 'a1 farray, a2: 'a1 farray) = permut(a1, a2, 0,
  (array_length(a1) - 1))

axiom array_length_update:
  (forall a:'a1 farray.
    (forall i:int.
      (forall v:'a1. (array_length(update(a, i, v)) = array_length(a)))))

axiom permut_array_length:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (permut(a1, a2, l, u) -> (array_length(a1) = array_length(a2)))))))

type A

logic M : int

type prodZZ

logic match_ : A farray, int, A farray, int, int -> prop

logic Next : A farray, int, int -> prop

logic pairZ : int, int -> prodZZ

goal initnext_po_1:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  (0 <= 1)

goal initnext_po_2:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  (1 < array_length(next))

goal initnext_po_3:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  false (* was well_founded(...) *)

goal initnext_po_4:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  (0 <= 0)

goal initnext_po_5:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  (0 <= M)

goal initnext_po_6:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  (0 < 1)

goal initnext_po_7:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  (1 <= M)

goal initnext_po_8:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  match_(p, (1 - 0), p, 0, 0)

goal initnext_po_9:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall z:int.
  (((0 + 1) < z) and (z < (1 + 1))) ->
  (not match_(p, ((1 + 1) - z), p, 0, z))

goal initnext_po_10:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall k:int.
  ((0 < k) and (k <= 1)) ->
  Next(p, k, access(next0, k))

goal initnext_po_11:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  (array_length(next0) = M)

goal initnext_po_12:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  (0 <= i)

goal initnext_po_13:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  (i < array_length(p))

goal initnext_po_14:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  (0 <= j)

goal initnext_po_15:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  (j < array_length(p))

goal initnext_po_16:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  (0 <= i0)

goal initnext_po_17:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  (i0 < array_length(next1))

goal initnext_po_18:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  (0 <= j0)

goal initnext_po_19:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  (j0 <= M)

goal initnext_po_20:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  (j0 < i0)

goal initnext_po_21:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  (i0 <= M)

goal initnext_po_22:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  match_(p, (i0 - j0), p, 0, j0)

goal initnext_po_23:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  forall z:int.
  (((j0 + 1) < z) and (z < (i0 + 1))) ->
  (not match_(p, ((i0 + 1) - z), p, 0, z))

goal initnext_po_24:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  forall k:int.
  ((0 < k) and (k <= i0)) ->
  Next(p, k, access(next2, k))

goal initnext_po_25:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  (array_length(next2) = M)

goal initnext_po_26:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, j0)) ->
  lexZ(pairZ((M - i0), j0), pairZ((M - i), j))

goal initnext_po_27:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (0 <= i0)

goal initnext_po_28:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (i0 < array_length(next1))

goal initnext_po_29:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  (j <= M)

goal initnext_po_30:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  (j < i0)

goal initnext_po_31:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  (i0 <= M)

goal initnext_po_32:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  match_(p, (i0 - j), p, 0, j)

goal initnext_po_33:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  forall z:int.
  (((j + 1) < z) and (z < (i0 + 1))) ->
  (not match_(p, ((i0 + 1) - z), p, 0, z))

goal initnext_po_34:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  forall k:int.
  ((0 < k) and (k <= i0)) ->
  Next(p, k, access(next2, k))

goal initnext_po_35:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  (array_length(next2) = M)

goal initnext_po_36:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  ((0 <= i0) and (i0 < array_length(next1))) ->
  forall next2:int farray.
  (next2 = update(next1, i0, 0)) ->
  lexZ(pairZ((M - i0), j), pairZ((M - i), j))

goal initnext_po_37:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  (j < array_length(next1))

goal initnext_po_38:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (0 <= j0)

goal initnext_po_39:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (j0 <= M)

goal initnext_po_40:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (j0 < i)

goal initnext_po_41:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (i <= M)

goal initnext_po_42:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  match_(p, (i - j0), p, 0, j0)

goal initnext_po_43:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  forall z:int.
  (((j0 + 1) < z) and (z < (i + 1))) ->
  (not match_(p, ((i + 1) - z), p, 0, z))

goal initnext_po_44:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  forall k:int.
  ((0 < k) and (k <= i)) ->
  Next(p, k, access(next1, k))

goal initnext_po_45:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (array_length(next1) = M)

goal initnext_po_46:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i < (M - 1)) ->
  ((0 <= i) and (i < array_length(p))) ->
  forall result:A.
  (result = access(p, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next1))) ->
  forall result1:int.
  (result1 = access(next1, j)) ->
  forall j0:int.
  (j0 = result1) ->
  lexZ(pairZ((M - i), j0), pairZ((M - i), j))

goal initnext_po_47:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i >= (M - 1)) ->
  (array_length(next1) = M)

goal initnext_po_48:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 < M) ->
  ((0 <= 1) and (1 < array_length(next))) ->
  forall next0:int farray.
  (next0 = update(next, 1, 0)) ->
  forall i:int.
  forall j:int.
  forall next1:int farray.
  (((0 <= j) and (j <= M)) and
   (((j < i) and (i <= M)) and
    (match_(p, (i - j), p, 0, j) and
     ((forall z:int.
        ((((j + 1) < z) and (z < (i + 1))) -> (not match_(p, ((i + 1) - z),
         p, 0, z)))) and
      ((forall k:int.
         (((0 < k) and (k <= i)) -> Next(p, k, access(next1, k)))) and
       (array_length(next1) = M)))))) ->
  (i >= (M - 1)) ->
  forall j0:int.
  ((0 < j0) and (j0 < M)) ->
  Next(p, j0, access(next1, j0))

goal initnext_po_49:
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and (array_length(next) = M)) ->
  (1 >= M) ->
  forall j:int.
  ((0 < j) and (j < M)) ->
  Next(p, j, access(next, j))

logic N : int

logic first_occur : A farray, A farray, int -> prop

goal kmp_po_1:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  (array_length(next) = M)

goal kmp_po_2:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  false (* was well_founded(...) *)

goal kmp_po_3:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  (0 <= 0)

goal kmp_po_4:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  (0 <= M)

goal kmp_po_5:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  (0 <= 0)

goal kmp_po_6:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  (0 <= N)

goal kmp_po_7:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  match_(a, (0 - 0), p, 0, 0)

goal kmp_po_8:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall k:int.
  ((0 <= k) and (k < (0 - 0))) ->
  (not match_(a, k, p, 0, M))

goal kmp_po_9:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  (0 <= i)

goal kmp_po_10:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  (i < array_length(a))

goal kmp_po_11:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  (0 <= j)

goal kmp_po_12:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  (j < array_length(p))

goal kmp_po_13:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  (0 <= j0)

goal kmp_po_14:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  (j0 <= M)

goal kmp_po_15:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  (j0 <= i0)

goal kmp_po_16:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  (i0 <= N)

goal kmp_po_17:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  match_(a, (i0 - j0), p, 0, j0)

goal kmp_po_18:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  forall k:int.
  ((0 <= k) and (k < (i0 - j0))) ->
  (not match_(a, k, p, 0, M))

goal kmp_po_19:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (result = result0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j0:int.
  (j0 = (j + 1)) ->
  lexZ(pairZ((N - i0), j0), pairZ((N - i), j))

goal kmp_po_20:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (j <= M)

goal kmp_po_21:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (j <= i0)

goal kmp_po_22:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (i0 <= N)

goal kmp_po_23:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  match_(a, (i0 - j), p, 0, j)

goal kmp_po_24:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall k:int.
  ((0 <= k) and (k < (i0 - j))) ->
  (not match_(a, k, p, 0, M))

goal kmp_po_25:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j = 0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  lexZ(pairZ((N - i0), j), pairZ((N - i), j))

goal kmp_po_26:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  (j < array_length(next0))

goal kmp_po_27:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (0 <= j0)

goal kmp_po_28:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (j0 <= M)

goal kmp_po_29:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (j0 <= i)

goal kmp_po_30:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  (i <= N)

goal kmp_po_31:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  match_(a, (i - j0), p, 0, j0)

goal kmp_po_32:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  forall k:int.
  ((0 <= k) and (k < (i - j0))) ->
  (not match_(a, k, p, 0, M))

goal kmp_po_33:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j < M) and (i < N)) ->
  ((0 <= i) and (i < array_length(a))) ->
  forall result:A.
  (result = access(a, i)) ->
  ((0 <= j) and (j < array_length(p))) ->
  forall result0:A.
  (result0 = access(p, j)) ->
  (not (result = result0)) ->
  (j <> 0) ->
  ((0 <= j) and (j < array_length(next0))) ->
  forall result1:int.
  (result1 = access(next0, j)) ->
  forall j0:int.
  (j0 = result1) ->
  lexZ(pairZ((N - i), j0), pairZ((N - i), j))

goal kmp_po_34:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j >= M) or ((j < M) and (i >= N))) ->
  (j = M) ->
  first_occur(p, a, (i - M))

goal kmp_po_35:
  forall a:A farray.
  forall next:int farray.
  forall p:A farray.
  ((array_length(p) = M) and
   ((array_length(next) = M) and (array_length(a) = N))) ->
  ((array_length(p) = M) and (array_length(next) = M)) ->
  forall next0:int farray.
  ((array_length(next0) = M) and
   (forall j:int. (((0 < j) and (j < M)) -> Next(p, j, access(next0, j))))) ->
  forall i:int.
  forall j:int.
  (((0 <= j) and (j <= M)) and
   (((j <= i) and (i <= N)) and
    (match_(a, (i - j), p, 0, j) and
     (forall k:int.
       (((0 <= k) and (k < (i - j))) -> (not match_(a, k, p, 0, M))))))) ->
  ((j >= M) or ((j < M) and (i >= N))) ->
  (j <> M) ->
  first_occur(p, a, i)

