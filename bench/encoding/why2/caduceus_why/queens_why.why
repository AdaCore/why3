logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic N : int

type iset

logic in_ : int, iset -> prop

predicate included(a: iset, b: iset) =
  (forall i:int. (in_(i, a) -> in_(i, b)))

logic card : iset -> int

axiom card_nonneg: (forall s:iset. (card(s) >= 0))

logic empty : iset

axiom empty_def: (forall i:int. (not in_(i, empty)))

axiom empty_card: (forall s:iset. ((card(s) = 0) <-> (s = empty)))

logic diff : iset, iset -> iset

axiom diff_def_1:
  (forall a:iset.
    (forall b:iset.
      (forall i:int. (in_(i, diff(a, b)) -> (in_(i, a) and (not in_(i, b)))))))

axiom diff_def_2:
  (forall a:iset.
    (forall b:iset.
      (forall i:int. ((in_(i, a) and (not in_(i, b))) -> in_(i, diff(a, b))))))

logic add : int, iset -> iset

axiom add_def:
  (forall s:iset.
    (forall x:int.
      (forall i:int [in_(i, add(x, s))].
        (in_(i, add(x, s)) <-> ((i = x) or in_(i, s))))))

logic remove : int, iset -> iset

axiom remove_def:
  (forall s:iset.
    (forall x:int.
      (forall i:int [in_(i, remove(x, s))].
        (in_(i, remove(x, s)) <-> (in_(i, s) and (i <> x))))))

axiom remove_card:
  (forall s:iset.
    (forall i:int. (in_(i, s) -> (card(remove(i, s)) = (card(s) - 1)))))

logic min_elt : iset -> int

axiom min_elt_def_1: (forall s:iset. ((card(s) > 0) -> in_(min_elt(s), s)))

axiom min_elt_def_2:
  (forall s:iset.
    ((card(s) > 0) -> (forall i:int. (in_(i, s) -> (min_elt(s) <= i)))))

logic succ : iset -> iset

axiom succ_def_1:
  (forall s:iset. (forall i:int. (in_(i, s) -> in_((i + 1), succ(s)))))

axiom succ_def_2:
  (forall s:iset.
    (forall i:int. (in_(i, succ(s)) -> ((i >= 1) and in_((i - 1), s)))))

logic pred : iset -> iset

axiom pred_def_1:
  (forall s:iset.
    (forall i:int [in_(i, pred(s))].
      ((i >= 0) -> (in_((i + 1), s) -> in_(i, pred(s))))))

axiom pred_def_2:
  (forall s:iset. (forall i:int. (in_(i, pred(s)) -> in_((i + 1), s))))

type 'a arr

logic acc : 'a1 arr, int -> 'a1

logic upd : 'a1 arr, int, 'a1 -> 'a1 arr

axiom acc_upd_eq:
  (forall a:'a1 arr.
    (forall i:int. (forall v:'a1. (acc(upd(a, i, v), i) = v))))

axiom acc_upd_neq:
  (forall a:'a1 arr.
    (forall i:int.
      (forall j:int.
        (forall v:'a1. ((i <> j) -> (acc(upd(a, i, v), j) = acc(a, j)))))))

predicate eq_prefix(t: 'a1 arr, u: 'a1 arr, i: int) =
  (forall k:int. (((0 <= k) and (k < i)) -> (acc(t, k) = acc(u, k))))

predicate partial_solution(k: int, s: int arr) =
  (forall i:int.
    (((0 <= i) and (i < k)) ->
     (((0 <= acc(s, i)) and (acc(s, i) < N)) and
      (forall j:int.
        (((0 <= j) and (j < i)) ->
         ((acc(s, i) <> acc(s, j)) and
          (((acc(s, i) - acc(s, j)) <> (i - j)) and ((acc(s, i) - acc(s,
           j)) <> (j - i)))))))))

predicate solution(s: int arr) = partial_solution(N, s)

predicate eq_sol(t: int arr, u: int arr) = eq_prefix(t, u, N)

axiom partial_solution_eq_prefix:
  (forall t:int arr.
    (forall u:int arr.
      (forall k:int [partial_solution(k, t), partial_solution(k, u)].
        (partial_solution(k, t) ->
         (eq_prefix(t, u, k) -> partial_solution(k, u))))))

predicate lt_sol(s1: int arr, s2: int arr) =
  (exists i:int.
    (((0 <= i) and (i < N)) and
     (eq_prefix(s1, s2, i) and (acc(s1, i) < acc(s2, i)))))

predicate sorted(s: int arr arr, a: int, b: int) =
  (forall i:int.
    (forall j:int.
      ((((a <= i) and (i < j)) and (j < b)) -> lt_sol(acc(s, i), acc(s, j)))))

goal count_po_1:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col)

goal count_po_2:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  (1 = (s0 - s))

goal count_po_3:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  (1 >= 0)

goal count_po_4:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  eq_prefix(col, col, k)

goal count_po_5:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  eq_prefix(sol, sol0, s)

goal count_po_6:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  sorted(sol0, s, s0)

goal count_po_7:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  forall t:int arr.
  (solution(t) and eq_prefix(col, t, k)) ->
  (exists i:int. (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i))))

goal count_po_8:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))) ->
  solution(t)

goal count_po_9:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) = 0) ->
  solution(col) ->
  forall s0:int.
  forall sol0:int arr arr.
  ((s0 = (s + 1)) and (eq_prefix(sol, sol0, s) and (acc(sol0, s) = col))) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))) ->
  eq_prefix(col, t, k)

goal count_po_10:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  included(diff(diff(a, b), c), diff(diff(a, b), c))

goal count_po_11:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  (0 = (s - s))

goal count_po_12:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  (0 >= 0)

goal count_po_13:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall i:int.
  forall j:int.
  in_(i, diff(diff(diff(a, b), c), diff(diff(a, b), c))) ->
  in_(j, diff(diff(a, b), c)) ->
  (i < j)

goal count_po_14:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  partial_solution(k, col)

goal count_po_15:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  eq_prefix(col, col, k)

goal count_po_16:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  eq_prefix(sol, sol, s)

goal count_po_17:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall t:int arr.
  (solution(t) and
   (exists di:int.
     (in_(di, diff(diff(diff(a, b), c), diff(diff(a, b), c))) and
      eq_prefix(upd(col, k, di), t, (k + 1))))) ->
  (exists i:int. (((s <= i) and (i < s)) and eq_sol(t, acc(sol, i))))

goal count_po_18:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s)) and eq_sol(t, acc(sol, i)))) ->
  solution(t)

goal count_po_19:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s)) and eq_sol(t, acc(sol, i)))) ->
  (exists di:int.
    (in_(di, diff(diff(diff(a, b), c), diff(diff(a, b), c))) and
     eq_prefix(upd(col, k, di), t, (k + 1))))

goal count_po_20:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  sorted(sol, s, s)

goal count_po_21:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  (0 <= card(a))

goal count_po_22:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  (card(remove(min_elt(e), a)) < card(a))

goal count_po_23:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  (0 <= k1)

goal count_po_24:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((k1 + card(remove(min_elt(e), a))) = N)

goal count_po_25:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  (0 <= s0)

goal count_po_26:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  in_(i, remove(min_elt(e), a)) ->
  ("pre_a": (0 <= i))

goal count_po_27:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  in_(i, remove(min_elt(e), a)) ->
  ("pre_a": (i < N))

goal count_po_28:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  in_(i, remove(min_elt(e), a)) ->
  forall j:int.
  ((0 <= j) and (j < k1)) ->
  ("pre_a": (i <> acc(col1, j)))

goal count_po_29:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  (((0 <= i) and (i < N)) and
   (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))) ->
  ("pre_a": in_(i, remove(min_elt(e), a)))

goal count_po_30:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  (0 <= i) ->
  in_(i, succ(add(min_elt(e), b))) ->
  ("pre_a":
  ("pre_b":
  (exists j:int.
    (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))

goal count_po_31:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  (0 <= i) ->
  (exists j:int.
    (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1)))) ->
  ("pre_a": ("pre_b": in_(i, succ(add(min_elt(e), b)))))

goal count_po_32:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  (0 <= i) ->
  in_(i, pred(add(min_elt(e), c))) ->
  ("pre_a":
  ("pre_b":
  ("pre_c":
  (exists j:int.
    (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j)))))))

goal count_po_33:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  forall i:int.
  (0 <= i) ->
  (exists j:int.
    (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j)))) ->
  ("pre_a": ("pre_b": ("pre_c": in_(i, pred(add(min_elt(e), c))))))

goal count_po_34:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ("pre_a": ("pre_b": ("pre_c": partial_solution(k1, col1))))

goal count_po_35:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  included(e0, diff(diff(a, b), c))

goal count_po_36:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  (f0 = (s1 - s))

goal count_po_37:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  (f0 >= 0)

goal count_po_38:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  (k3 = k)

goal count_po_39:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  forall i:int.
  forall j:int.
  in_(i, diff(diff(diff(a, b), c), e0)) ->
  in_(j, e0) ->
  (i < j)

goal count_po_40:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  partial_solution(k3, col2)

goal count_po_41:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  eq_prefix(col, col2, k)

goal count_po_42:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  eq_prefix(sol, sol1, s)

goal count_po_43:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  forall t:int arr.
  (solution(t) and
   (exists di:int.
     (in_(di, diff(diff(diff(a, b), c), e0)) and eq_prefix(upd(col2, k3, di),
      t, (k3 + 1))))) ->
  (exists i:int. (((s <= i) and (i < s1)) and eq_sol(t, acc(sol1, i))))

goal count_po_44:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))) ->
  solution(t)

goal count_po_45:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))) ->
  (exists di:int.
    (in_(di, diff(diff(diff(a, b), c), e0)) and eq_prefix(upd(col2, k3, di),
     t, (k3 + 1))))

goal count_po_46:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  sorted(sol1, s, s1)

goal count_po_47:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  (0 <= card(e))

goal count_po_48:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) > 0) ->
  forall e0:iset.
  (e0 = remove(min_elt(e), e)) ->
  forall col1:int arr.
  (col1 = upd(col0, k0, min_elt(e))) ->
  forall k1:int.
  (k1 = (k0 + 1)) ->
  ((0 <= card(a)) and (card(remove(min_elt(e), a)) < card(a))) ->
  ((0 <= k1) and
   (((k1 + card(remove(min_elt(e), a))) = N) and
    ((0 <= s0) and
     ("pre_a":
     ((forall i:int.
        (in_(i, remove(min_elt(e), a)) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k1)) -> (i <> acc(col1, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, succ(add(min_elt(e), b))) <->
           (exists j:int.
             (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + j) - k1))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, pred(add(min_elt(e), c))) <->
            (exists j:int.
              (((0 <= j) and (j < k1)) and (acc(col1, j) = ((i + k1) - j))))))) and
        partial_solution(k1, col1)))))))))) ->
  forall result:int.
  forall col2:int arr.
  forall k2:int.
  forall s1:int.
  forall sol1:int arr arr.
  ((result = (s1 - s0)) and
   ((result >= 0) and
    ((k2 = k1) and
     (eq_prefix(col1, col2, k2) and
      (eq_prefix(sol0, sol1, s0) and
       (sorted(sol1, s0, s1) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col2, t, k2)) <->
           (exists i:int.
             (((s0 <= i) and (i < s1)) and eq_sol(t, acc(sol1, i)))))))))))) ->
  forall f0:int.
  (f0 = (f + result)) ->
  forall k3:int.
  (k3 = (k2 - 1)) ->
  (card(e0) < card(e))

goal count_po_49:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  (f = (s0 - s))

goal count_po_50:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  (f >= 0)

goal count_po_51:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  (k0 = k)

goal count_po_52:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  eq_prefix(col, col0, k0)

goal count_po_53:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  eq_prefix(sol, sol0, s)

goal count_po_54:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  sorted(sol0, s, s0)

goal count_po_55:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  forall t:int arr.
  (solution(t) and eq_prefix(col0, t, k0)) ->
  (exists i:int. (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i))))

goal count_po_56:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))) ->
  solution(t)

goal count_po_57:
  forall a:iset.
  forall b:iset.
  forall c:iset.
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((0 <= k) and
   (((k + card(a)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, a) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, b) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, c) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  (card(a) <> 0) ->
  forall col0:int arr.
  forall e:iset.
  forall f:int.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  (included(e, diff(diff(a, b), c)) and
   ((f = (s0 - s)) and
    ((f >= 0) and
     ((k0 = k) and
      ((forall i:int.
         (forall j:int.
           (in_(i, diff(diff(diff(a, b), c), e)) -> (in_(j, e) -> (i < j))))) and
       (partial_solution(k0, col0) and
        (eq_prefix(col, col0, k) and
         (eq_prefix(sol, sol0, s) and
          ((forall t:int arr.
             ((solution(t) and
               (exists di:int.
                 (in_(di, diff(diff(diff(a, b), c), e)) and
                  eq_prefix(upd(col0, k0, di), t, (k0 + 1))))) <->
              (exists i:int.
                (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))) and
           sorted(sol0, s, s0)))))))))) ->
  (card(e) <= 0) ->
  forall t:int arr.
  (exists i:int. (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))) ->
  eq_prefix(col0, t, k0)

logic below_N : iset

axiom below_N_def:
  (forall i:int. (in_(i, below_N) <-> ((0 <= i) and (i < N))))

axiom below_N_card: (card(below_N) = N)

goal queens_po_1:
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  (0 <= k)

goal queens_po_2:
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  ((k + card(below_N)) = N)

goal queens_po_3:
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  (0 <= s)

goal queens_po_4:
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  in_(i, below_N) ->
  ("pre_a": (0 <= i))

goal queens_po_5:
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  in_(i, below_N) ->
  ("pre_a": (i < N))

goal queens_po_6:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  in_(i, below_N) ->
  forall j:int.
  ((0 <= j) and (j < k)) ->
  ("pre_a": (i <> acc(col, j)))

goal queens_po_7:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  (((0 <= i) and (i < N)) and
   (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))) ->
  ("pre_a": in_(i, below_N))

goal queens_po_8:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  (0 <= i) ->
  in_(i, empty) ->
  ("pre_a":
  ("pre_b":
  (exists j:int. (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))

goal queens_po_9:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  (0 <= i) ->
  (exists j:int. (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k)))) ->
  ("pre_a": ("pre_b": in_(i, empty)))

goal queens_po_10:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  (0 <= i) ->
  in_(i, empty) ->
  ("pre_a":
  ("pre_b":
  ("pre_c":
  (exists j:int. (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j)))))))

goal queens_po_11:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  forall i:int.
  (0 <= i) ->
  (exists j:int. (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j)))) ->
  ("pre_a": ("pre_b": ("pre_c": in_(i, empty))))

goal queens_po_12:
  forall col:int arr.
  forall k:int.
  forall s:int.
  ((s = 0) and (k = 0)) ->
  ("pre_a": ("pre_b": ("pre_c": partial_solution(k, col))))

goal queens_po_13:
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((s = 0) and (k = 0)) ->
  ((0 <= k) and
   (((k + card(below_N)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, below_N) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, empty) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, empty) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  forall result:int.
  forall col0:int arr.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  ((result = (s0 - s)) and
   ((result >= 0) and
    ((k0 = k) and
     (eq_prefix(col, col0, k0) and
      (eq_prefix(sol, sol0, s) and
       (sorted(sol0, s, s0) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col0, t, k0)) <->
           (exists i:int.
             (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))))))))) ->
  (result = s0)

goal queens_po_14:
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((s = 0) and (k = 0)) ->
  ((0 <= k) and
   (((k + card(below_N)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, below_N) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, empty) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, empty) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  forall result:int.
  forall col0:int arr.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  ((result = (s0 - s)) and
   ((result >= 0) and
    ((k0 = k) and
     (eq_prefix(col, col0, k0) and
      (eq_prefix(sol, sol0, s) and
       (sorted(sol0, s, s0) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col0, t, k0)) <->
           (exists i:int.
             (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))))))))) ->
  sorted(sol0, 0, s0)

goal queens_po_15:
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((s = 0) and (k = 0)) ->
  ((0 <= k) and
   (((k + card(below_N)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, below_N) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, empty) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, empty) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  forall result:int.
  forall col0:int arr.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  ((result = (s0 - s)) and
   ((result >= 0) and
    ((k0 = k) and
     (eq_prefix(col, col0, k0) and
      (eq_prefix(sol, sol0, s) and
       (sorted(sol0, s, s0) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col0, t, k0)) <->
           (exists i:int.
             (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))))))))) ->
  forall t:int arr.
  solution(t) ->
  (exists i:int. (((0 <= i) and (i < s0)) and eq_sol(t, acc(sol0, i))))

goal queens_po_16:
  forall col:int arr.
  forall k:int.
  forall s:int.
  forall sol:int arr arr.
  ((s = 0) and (k = 0)) ->
  ((0 <= k) and
   (((k + card(below_N)) = N) and
    ((0 <= s) and
     ("pre_a":
     ((forall i:int.
        (in_(i, below_N) <->
         (((0 <= i) and (i < N)) and
          (forall j:int. (((0 <= j) and (j < k)) -> (i <> acc(col, j))))))) and
      ("pre_b":
      ((forall i:int.
         ((0 <= i) ->
          (in_(i, empty) <->
           (exists j:int.
             (((0 <= j) and (j < k)) and (acc(col, j) = ((i + j) - k))))))) and
       ("pre_c":
       ((forall i:int.
          ((0 <= i) ->
           (in_(i, empty) <->
            (exists j:int.
              (((0 <= j) and (j < k)) and (acc(col, j) = ((i + k) - j))))))) and
        partial_solution(k, col)))))))))) ->
  forall result:int.
  forall col0:int arr.
  forall k0:int.
  forall s0:int.
  forall sol0:int arr arr.
  ((result = (s0 - s)) and
   ((result >= 0) and
    ((k0 = k) and
     (eq_prefix(col, col0, k0) and
      (eq_prefix(sol, sol0, s) and
       (sorted(sol0, s, s0) and
        (forall t:int arr.
          ((solution(t) and eq_prefix(col0, t, k0)) <->
           (exists i:int.
             (((s <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))))))))))) ->
  forall t:int arr.
  (exists i:int. (((0 <= i) and (i < s0)) and eq_sol(t, acc(sol0, i)))) ->
  solution(t)

