logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 'a farray

logic access : 'a1 farray, int -> 'a1

logic update : 'a1 farray, int, 'a1 -> 'a1 farray

axiom access_update:
  (forall a:'a1 farray.
    (forall i:int. (forall v:'a1. (access(update(a, i, v), i) = v))))

axiom access_update_neq:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int.
        (forall v:'a1.
          ((i <> j) -> (access(update(a, i, v), j) = access(a, j)))))))

logic array_length : 'a1 farray -> int

predicate sorted_array(t: int farray, i: int, j: int) =
  (forall k1:int.
    (forall k2:int.
      ((((i <= k1) and (k1 <= k2)) and (k2 <= j)) -> (access(t,
       k1) <= access(t, k2)))))

predicate exchange(a1: 'a1 farray, a2: 'a1 farray, i: int, j: int) =
  ((array_length(a1) = array_length(a2)) and
   ((access(a1, i) = access(a2, j)) and
    ((access(a2, i) = access(a1, j)) and
     (forall k:int.
       (((k <> i) and (k <> j)) -> (access(a1, k) = access(a2, k)))))))

logic permut : 'a1 farray, 'a1 farray, int, int -> prop

axiom permut_refl:
  (forall t:'a1 farray. (forall l:int. (forall u:int. permut(t, t, l, u))))

axiom permut_sym:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall l:int.
        (forall u:int. (permut(t1, t2, l, u) -> permut(t2, t1, l, u))))))

axiom permut_trans:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall t3:'a1 farray.
        (forall l:int.
          (forall u:int.
            (permut(t1, t2, l, u) ->
             (permut(t2, t3, l, u) -> permut(t1, t3, l, u))))))))

axiom permut_exchange:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (forall i:int.
            (forall j:int.
              (((l <= i) and (i <= u)) ->
               (((l <= j) and (j <= u)) ->
                (exchange(a1, a2, i, j) -> permut(a1, a2, l, u))))))))))

axiom exchange_upd:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int. exchange(a, update(update(a, i, access(a, j)), j,
        access(a, i)), i, j))))

axiom permut_weakening:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l1:int.
        (forall r1:int.
          (forall l2:int.
            (forall r2:int.
              ((((l1 <= l2) and (l2 <= r2)) and (r2 <= r1)) ->
               (permut(a1, a2, l2, r2) -> permut(a1, a2, l1, r1)))))))))

axiom permut_eq:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          ((l <= u) ->
           (permut(a1, a2, l, u) ->
            (forall i:int.
              (((i < l) or (u < i)) -> (access(a2, i) = access(a1, i))))))))))

predicate permutation(a1: 'a1 farray, a2: 'a1 farray) = permut(a1, a2, 0,
  (array_length(a1) - 1))

axiom array_length_update:
  (forall a:'a1 farray.
    (forall i:int.
      (forall v:'a1. (array_length(update(a, i, v)) = array_length(a)))))

axiom permut_array_length:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (permut(a1, a2, l, u) -> (array_length(a1) = array_length(a2)))))))

goal swap_po_1:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  (0 <= i)

goal swap_po_2:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  (i < array_length(t))

goal swap_po_3:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  (0 <= j)

goal swap_po_4:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  (j < array_length(t))

goal swap_po_5:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  ((0 <= j) and (j < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, j)) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall t0:int farray.
  (t0 = update(t, i, result0)) ->
  (j < array_length(t0))

goal swap_po_6:
  forall i:int.
  forall j:int.
  forall t:int farray.
  (((0 <= i) and (i < array_length(t))) and
   ((0 <= j) and (j < array_length(t)))) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall result:int.
  (result = access(t, i)) ->
  ((0 <= j) and (j < array_length(t))) ->
  forall result0:int.
  (result0 = access(t, j)) ->
  ((0 <= i) and (i < array_length(t))) ->
  forall t0:int farray.
  (t0 = update(t, i, result0)) ->
  ((0 <= j) and (j < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, j, result)) ->
  exchange(t1, t, i, j)

goal quick_rec_po_1:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  (l < array_length(t))

goal quick_rec_po_2:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall j:int.
  ((l < j) and (j <= l)) ->
  (access(t, j) < result)

goal quick_rec_po_3:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall j:int.
  ((l < j) and (j < (l + 1))) ->
  (access(t, j) >= result)

goal quick_rec_po_4:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  permut(t, t, l, r)

goal quick_rec_po_5:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  (access(t, l) = result)

goal quick_rec_po_6:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  (l <= l)

goal quick_rec_po_7:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  (l < (l + 1))

goal quick_rec_po_8:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  ((l + 1) <= (r + 1))

goal quick_rec_po_9:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  (0 <= i)

goal quick_rec_po_10:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  (i < array_length(t0))

goal quick_rec_po_11:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (0 <= m0)

goal quick_rec_po_12:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (m0 < array_length(t0))

goal quick_rec_po_13:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j:int.
  ((l < j) and (j <= m0)) ->
  (access(t1, j) < result)

goal quick_rec_po_14:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j:int.
  ((m0 < j) and (j < i0)) ->
  (access(t1, j) >= result)

goal quick_rec_po_15:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  permut(t1, t, l, r)

goal quick_rec_po_16:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (access(t1, l) = result)

goal quick_rec_po_17:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (l <= m0)

goal quick_rec_po_18:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (m0 < i0)

goal quick_rec_po_19:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (i0 <= (r + 1))

goal quick_rec_po_20:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (0 <= ((1 + r) - i))

goal quick_rec_po_21:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 < result) ->
  forall m0:int.
  (m0 = (m + 1)) ->
  (((0 <= i) and (i < array_length(t0))) and
   ((0 <= m0) and (m0 < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, i, m0) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (((1 + r) - i0) < ((1 + r) - i))

goal quick_rec_po_22:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j:int.
  ((l < j) and (j <= m)) ->
  (access(t0, j) < result)

goal quick_rec_po_23:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  forall j:int.
  ((m < j) and (j < i0)) ->
  (access(t0, j) >= result)

goal quick_rec_po_24:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  permut(t0, t, l, r)

goal quick_rec_po_25:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (access(t0, l) = result)

goal quick_rec_po_26:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (l <= m)

goal quick_rec_po_27:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (m < i0)

goal quick_rec_po_28:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (i0 <= (r + 1))

goal quick_rec_po_29:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (0 <= ((1 + r) - i))

goal quick_rec_po_30:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i <= r) ->
  ((0 <= i) and (i < array_length(t0))) ->
  forall result0:int.
  (result0 = access(t0, i)) ->
  (result0 >= result) ->
  forall i0:int.
  (i0 = (i + 1)) ->
  (((1 + r) - i0) < ((1 + r) - i))

goal quick_rec_po_31:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (l < array_length(t0))

goal quick_rec_po_32:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (0 <= m)

goal quick_rec_po_33:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (m < array_length(t0))

goal quick_rec_po_34:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  (0 <= ((1 + r) - l))

goal quick_rec_po_35:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  (((1 + (m - 1)) - l) < ((1 + r) - l))

goal quick_rec_po_36:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((m - 1) < array_length(t1))

goal quick_rec_po_37:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((0 <= l) and ((m - 1) < array_length(t1))) ->
  forall t2:int farray.
  (sorted_array(t2, l, (m - 1)) and permut(t2, t1, l, (m - 1))) ->
  (0 <= ((1 + r) - l))

goal quick_rec_po_38:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((0 <= l) and ((m - 1) < array_length(t1))) ->
  forall t2:int farray.
  (sorted_array(t2, l, (m - 1)) and permut(t2, t1, l, (m - 1))) ->
  (((1 + r) - (m + 1)) < ((1 + r) - l))

goal quick_rec_po_39:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((0 <= l) and ((m - 1) < array_length(t1))) ->
  forall t2:int farray.
  (sorted_array(t2, l, (m - 1)) and permut(t2, t1, l, (m - 1))) ->
  ((0 <= ((1 + r) - l)) and (((1 + r) - (m + 1)) < ((1 + r) - l))) ->
  (0 <= (m + 1))

goal quick_rec_po_40:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((0 <= l) and ((m - 1) < array_length(t1))) ->
  forall t2:int farray.
  (sorted_array(t2, l, (m - 1)) and permut(t2, t1, l, (m - 1))) ->
  ((0 <= ((1 + r) - l)) and (((1 + r) - (m + 1)) < ((1 + r) - l))) ->
  (r < array_length(t2))

goal quick_rec_po_41:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((0 <= l) and ((m - 1) < array_length(t1))) ->
  forall t2:int farray.
  (sorted_array(t2, l, (m - 1)) and permut(t2, t1, l, (m - 1))) ->
  ((0 <= ((1 + r) - l)) and (((1 + r) - (m + 1)) < ((1 + r) - l))) ->
  ((0 <= (m + 1)) and (r < array_length(t2))) ->
  forall t3:int farray.
  (sorted_array(t3, (m + 1), r) and permut(t3, t2, (m + 1), r)) ->
  sorted_array(t3, l, r)

goal quick_rec_po_42:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l < r) ->
  ((0 <= l) and (l < array_length(t))) ->
  forall result:int.
  (result = access(t, l)) ->
  forall i:int.
  forall m:int.
  forall t0:int farray.
  ((forall j:int. (((l < j) and (j <= m)) -> (access(t0, j) < result))) and
   ((forall j:int. (((m < j) and (j < i)) -> (access(t0, j) >= result))) and
    (permut(t0, t, l, r) and
     ((access(t0, l) = result) and
      (((l <= m) and (m < i)) and (i <= (r + 1))))))) ->
  (i > r) ->
  (((0 <= l) and (l < array_length(t0))) and
   ((0 <= m) and (m < array_length(t0)))) ->
  forall t1:int farray.
  exchange(t1, t0, l, m) ->
  ((0 <= ((1 + r) - l)) and (((1 + (m - 1)) - l) < ((1 + r) - l))) ->
  ((0 <= l) and ((m - 1) < array_length(t1))) ->
  forall t2:int farray.
  (sorted_array(t2, l, (m - 1)) and permut(t2, t1, l, (m - 1))) ->
  ((0 <= ((1 + r) - l)) and (((1 + r) - (m + 1)) < ((1 + r) - l))) ->
  ((0 <= (m + 1)) and (r < array_length(t2))) ->
  forall t3:int farray.
  (sorted_array(t3, (m + 1), r) and permut(t3, t2, (m + 1), r)) ->
  permut(t3, t, l, r)

goal quick_rec_po_43:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l >= r) ->
  sorted_array(t, l, r)

goal quick_rec_po_44:
  forall l:int.
  forall r:int.
  forall t:int farray.
  ((0 <= l) and (r < array_length(t))) ->
  (l >= r) ->
  permut(t, t, l, r)

goal quicksort_po_1:
  forall t:int farray.
  forall result:int.
  (result = array_length(t)) ->
  (0 <= 0)

goal quicksort_po_2:
  forall t:int farray.
  forall result:int.
  (result = array_length(t)) ->
  ((result - 1) < array_length(t))

goal quicksort_po_3:
  forall t:int farray.
  forall result:int.
  (result = array_length(t)) ->
  ((0 <= 0) and ((result - 1) < array_length(t))) ->
  forall t0:int farray.
  (sorted_array(t0, 0, (result - 1)) and permut(t0, t, 0, (result - 1))) ->
  sorted_array(t0, 0, (array_length(t0) - 1))

goal quicksort_po_4:
  forall t:int farray.
  forall result:int.
  (result = array_length(t)) ->
  ((0 <= 0) and ((result - 1) < array_length(t))) ->
  forall t0:int farray.
  (sorted_array(t0, 0, (result - 1)) and permut(t0, t, 0, (result - 1))) ->
  permutation(t0, t)

