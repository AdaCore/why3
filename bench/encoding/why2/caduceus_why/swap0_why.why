logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

goal swap1_po_1:
  forall x0:int.
  forall y:int.
  forall x:int.
  (x = y) ->
  forall y0:int.
  (y0 = x0) ->
  (x = y)

goal swap1_po_2:
  forall x0:int.
  forall y:int.
  forall x:int.
  (x = y) ->
  forall y0:int.
  (y0 = x0) ->
  (y0 = x0)

goal swap2_po_1:
  forall x0:int.
  forall y:int.
  forall x:int.
  (x = y) ->
  forall y0:int.
  (y0 = x0) ->
  (x = y)

goal swap2_po_2:
  forall x0:int.
  forall y:int.
  forall x:int.
  (x = y) ->
  forall y0:int.
  (y0 = x0) ->
  (y0 = x0)

goal swap3_po_1:
  forall a0:int.
  forall b:int.
  forall a:int.
  (a = b) ->
  forall b0:int.
  (b0 = a0) ->
  (a = b)

goal swap3_po_2:
  forall a0:int.
  forall b:int.
  forall a:int.
  (a = b) ->
  forall b0:int.
  (b0 = a0) ->
  (b0 = a0)

goal swap4_po_1:
  forall a:int.
  forall b:int.
  forall tmp:int.
  (tmp = a) ->
  forall a0:int.
  (a0 = b) ->
  forall b0:int.
  (b0 = tmp) ->
  (a0 = b)

goal swap4_po_2:
  forall a:int.
  forall b:int.
  forall tmp:int.
  (tmp = a) ->
  forall a0:int.
  (a0 = b) ->
  forall b0:int.
  (b0 = tmp) ->
  (b0 = a)

goal call_swap4_x_y_po_1:
  forall x:int.
  forall y:int.
  (x = 3) ->
  forall x0:int.
  forall y0:int.
  ((x0 = y) and (y0 = x)) ->
  (y0 = 3)

goal call_swap4_y_x_po_1:
  forall x:int.
  forall y:int.
  (x = 3) ->
  forall x0:int.
  forall y0:int.
  ((y0 = x) and (x0 = y)) ->
  (y0 = 3)

