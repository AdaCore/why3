logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 'a farray

logic access : 'a1 farray, int -> 'a1

logic update : 'a1 farray, int, 'a1 -> 'a1 farray

axiom access_update:
  (forall a:'a1 farray.
    (forall i:int. (forall v:'a1. (access(update(a, i, v), i) = v))))

axiom access_update_neq:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int.
        (forall v:'a1.
          ((i <> j) -> (access(update(a, i, v), j) = access(a, j)))))))

logic array_length : 'a1 farray -> int

predicate sorted_array(t: int farray, i: int, j: int) =
  (forall k1:int.
    (forall k2:int.
      ((((i <= k1) and (k1 <= k2)) and (k2 <= j)) -> (access(t,
       k1) <= access(t, k2)))))

predicate exchange(a1: 'a1 farray, a2: 'a1 farray, i: int, j: int) =
  ((array_length(a1) = array_length(a2)) and
   ((access(a1, i) = access(a2, j)) and
    ((access(a2, i) = access(a1, j)) and
     (forall k:int.
       (((k <> i) and (k <> j)) -> (access(a1, k) = access(a2, k)))))))

logic permut : 'a1 farray, 'a1 farray, int, int -> prop

axiom permut_refl:
  (forall t:'a1 farray. (forall l:int. (forall u:int. permut(t, t, l, u))))

axiom permut_sym:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall l:int.
        (forall u:int. (permut(t1, t2, l, u) -> permut(t2, t1, l, u))))))

axiom permut_trans:
  (forall t1:'a1 farray.
    (forall t2:'a1 farray.
      (forall t3:'a1 farray.
        (forall l:int.
          (forall u:int.
            (permut(t1, t2, l, u) ->
             (permut(t2, t3, l, u) -> permut(t1, t3, l, u))))))))

axiom permut_exchange:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (forall i:int.
            (forall j:int.
              (((l <= i) and (i <= u)) ->
               (((l <= j) and (j <= u)) ->
                (exchange(a1, a2, i, j) -> permut(a1, a2, l, u))))))))))

axiom exchange_upd:
  (forall a:'a1 farray.
    (forall i:int.
      (forall j:int. exchange(a, update(update(a, i, access(a, j)), j,
        access(a, i)), i, j))))

axiom permut_weakening:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l1:int.
        (forall r1:int.
          (forall l2:int.
            (forall r2:int.
              ((((l1 <= l2) and (l2 <= r2)) and (r2 <= r1)) ->
               (permut(a1, a2, l2, r2) -> permut(a1, a2, l1, r1)))))))))

axiom permut_eq:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          ((l <= u) ->
           (permut(a1, a2, l, u) ->
            (forall i:int.
              (((i < l) or (u < i)) -> (access(a2, i) = access(a1, i))))))))))

predicate permutation(a1: 'a1 farray, a2: 'a1 farray) = permut(a1, a2, 0,
  (array_length(a1) - 1))

axiom array_length_update:
  (forall a:'a1 farray.
    (forall i:int.
      (forall v:'a1. (array_length(update(a, i, v)) = array_length(a)))))

axiom permut_array_length:
  (forall a1:'a1 farray.
    (forall a2:'a1 farray.
      (forall l:int.
        (forall u:int.
          (permut(a1, a2, l, u) -> (array_length(a1) = array_length(a2)))))))

logic n1 : int

logic n2 : int

type A

type word

logic min_suffix : A farray, A farray, int, int, int -> prop

logic word_of_array : int, A farray -> word

logic min_dist : word, word, int -> prop

goal distance_po_1:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  (0 <= i)

goal distance_po_2:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  (i <= (n2 + 1))

goal distance_po_3:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  (array_length(t) = (n2 + 1))

goal distance_po_4:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall j:int.
  ((0 <= j) and (j < i)) ->
  (access(t, j) = (n2 - j))

goal distance_po_5:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  (0 <= i0)

goal distance_po_6:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  (i0 < array_length(t0))

goal distance_po_7:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  ((0 <= i0) and (i0 < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, i0, (n2 - i0))) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (0 <= i1)

goal distance_po_8:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  ((0 <= i0) and (i0 < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, i0, (n2 - i0))) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (i1 <= (n2 + 1))

goal distance_po_9:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  ((0 <= i0) and (i0 < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, i0, (n2 - i0))) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (array_length(t1) = (n2 + 1))

goal distance_po_10:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  ((0 <= i0) and (i0 < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, i0, (n2 - i0))) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  forall j:int.
  ((0 <= j) and (j < i1)) ->
  (access(t1, j) = (n2 - j))

goal distance_po_11:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  ((0 <= i0) and (i0 < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, i0, (n2 - i0))) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (0 <= ((n2 + 1) - i0))

goal distance_po_12:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 <= n2) ->
  ((0 <= i0) and (i0 < array_length(t0))) ->
  forall t1:int farray.
  (t1 = update(t0, i0, (n2 - i0))) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (((n2 + 1) - i1) < ((n2 + 1) - i0))

goal distance_po_13:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  ((-1) <= i1)

goal distance_po_14:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  (i1 <= (n1 - 1))

goal distance_po_15:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  (array_length(t0) = (n2 + 1))

goal distance_po_16:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall j:int.
  ((0 <= j) and (j <= n2)) ->
  min_suffix(w1, w2, (i1 + 1), j, access(t0, j))

goal distance_po_17:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  (0 <= n2)

goal distance_po_18:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  (n2 < array_length(t1))

goal distance_po_19:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  ((-1) <= j)

goal distance_po_20:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  (j <= (n2 - 1))

goal distance_po_21:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  (array_length(t2) = (n2 + 1))

goal distance_po_22:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall k:int.
  ((j < k) and (k <= n2)) ->
  min_suffix(w1, w2, i2, k, access(t2, k))

goal distance_po_23:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall k:int.
  ((0 <= k) and (k <= j)) ->
  min_suffix(w1, w2, (i2 + 1), k, access(t2, k))

goal distance_po_24:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  min_suffix(w1, w2, (i2 + 1), (j + 1), old)

goal distance_po_25:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  (0 <= j0)

goal distance_po_26:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  (j0 < array_length(t3))

goal distance_po_27:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  (0 <= i2)

goal distance_po_28:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  (i2 < array_length(w1))

goal distance_po_29:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  (j0 < array_length(w2))

goal distance_po_30:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  ((-1) <= j1)

goal distance_po_31:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (j1 <= (n2 - 1))

goal distance_po_32:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (array_length(t4) = (n2 + 1))

goal distance_po_33:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  forall k:int.
  ((j1 < k) and (k <= n2)) ->
  min_suffix(w1, w2, i2, k, access(t4, k))

goal distance_po_34:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  forall k:int.
  ((0 <= k) and (k <= j1)) ->
  min_suffix(w1, w2, (i2 + 1), k, access(t4, k))

goal distance_po_35:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  min_suffix(w1, w2, (i2 + 1), (j1 + 1), old1)

goal distance_po_36:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (0 <= (j0 + 1))

goal distance_po_37:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (result2 = result3) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, old0)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  ((j1 + 1) < (j0 + 1))

goal distance_po_38:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  (0 <= (j0 + 1))

goal distance_po_39:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((j0 + 1) < array_length(t3))

goal distance_po_40:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  ((-1) <= j1)

goal distance_po_41:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (j1 <= (n2 - 1))

goal distance_po_42:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (array_length(t4) = (n2 + 1))

goal distance_po_43:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  forall k:int.
  ((j1 < k) and (k <= n2)) ->
  min_suffix(w1, w2, i2, k, access(t4, k))

goal distance_po_44:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  forall k:int.
  ((0 <= k) and (k <= j1)) ->
  min_suffix(w1, w2, (i2 + 1), k, access(t4, k))

goal distance_po_45:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  min_suffix(w1, w2, (i2 + 1), (j1 + 1), old1)

goal distance_po_46:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 >= 0) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result1:int.
  (result1 = access(t3, j0)) ->
  forall old1:int.
  (old1 = result1) ->
  ((0 <= i2) and (i2 < array_length(w1))) ->
  forall result2:A.
  (result2 = access(w1, i2)) ->
  ((0 <= j0) and (j0 < array_length(w2))) ->
  forall result3:A.
  (result3 = access(w2, j0)) ->
  (not (result2 = result3)) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall result4:int.
  (result4 = access(t3, j0)) ->
  ((0 <= (j0 + 1)) and ((j0 + 1) < array_length(t3))) ->
  forall result5:int.
  (result5 = access(t3, (j0 + 1))) ->
  ((0 <= j0) and (j0 < array_length(t3))) ->
  forall t4:int farray.
  (t4 = update(t3, j0, (Zmin(result4, result5) + 1))) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  ((j1 + 1) < (j0 + 1))

goal distance_po_47:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 < 0) ->
  forall i3:int.
  (i3 = (i2 - 1)) ->
  ((-1) <= i3)

goal distance_po_48:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 < 0) ->
  forall i3:int.
  (i3 = (i2 - 1)) ->
  (i3 <= (n1 - 1))

goal distance_po_49:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 < 0) ->
  forall i3:int.
  (i3 = (i2 - 1)) ->
  (array_length(t3) = (n2 + 1))

goal distance_po_50:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 < 0) ->
  forall i3:int.
  (i3 = (i2 - 1)) ->
  forall j1:int.
  ((0 <= j1) and (j1 <= n2)) ->
  min_suffix(w1, w2, (i3 + 1), j1, access(t3, j1))

goal distance_po_51:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 < 0) ->
  forall i3:int.
  (i3 = (i2 - 1)) ->
  (0 <= (i2 + 1))

goal distance_po_52:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 >= 0) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, n2)) ->
  forall old:int.
  (old = result) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall result0:int.
  (result0 = access(t1, n2)) ->
  ((0 <= n2) and (n2 < array_length(t1))) ->
  forall t2:int farray.
  (t2 = update(t1, n2, (result0 + 1))) ->
  forall j:int.
  (j = (n2 - 1)) ->
  forall j0:int.
  forall old0:int.
  forall t3:int farray.
  ((((-1) <= j0) and (j0 <= (n2 - 1))) and
   ((array_length(t3) = (n2 + 1)) and
    ((forall k:int.
       (((j0 < k) and (k <= n2)) -> min_suffix(w1, w2, i2, k, access(t3, k)))) and
     ((forall k:int.
        (((0 <= k) and (k <= j0)) -> min_suffix(w1, w2, (i2 + 1), k,
         access(t3, k)))) and
      min_suffix(w1, w2, (i2 + 1), (j0 + 1), old0))))) ->
  (j0 < 0) ->
  forall i3:int.
  (i3 = (i2 - 1)) ->
  ((i3 + 1) < (i2 + 1))

goal distance_po_53:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 < 0) ->
  (0 <= 0)

goal distance_po_54:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 < 0) ->
  (0 < array_length(t1))

goal distance_po_55:
  forall t:int farray.
  forall w1:A farray.
  forall w2:A farray.
  ((array_length(w1) = n1) and
   ((array_length(w2) = n2) and (array_length(t) = (n2 + 1)))) ->
  forall i:int.
  (i = 0) ->
  forall i0:int.
  forall t0:int farray.
  (((0 <= i0) and (i0 <= (n2 + 1))) and
   ((array_length(t0) = (n2 + 1)) and
    (forall j:int. (((0 <= j) and (j < i0)) -> (access(t0, j) = (n2 - j)))))) ->
  (i0 > n2) ->
  forall i1:int.
  (i1 = (n1 - 1)) ->
  forall i2:int.
  forall t1:int farray.
  ((((-1) <= i2) and (i2 <= (n1 - 1))) and
   ((array_length(t1) = (n2 + 1)) and
    (forall j:int.
      (((0 <= j) and (j <= n2)) -> min_suffix(w1, w2, (i2 + 1), j, access(t1,
       j)))))) ->
  (i2 < 0) ->
  ((0 <= 0) and (0 < array_length(t1))) ->
  forall result:int.
  (result = access(t1, 0)) ->
  min_dist(word_of_array(n1, w1), word_of_array(n2, w2), result)

