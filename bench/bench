#!/bin/sh

# auto bench for why

export WHY3LIB=lib
export WHY3DATA=.

pgm=$1
pgml=$2
pgml_options=

goods () {
    for f in $1/*.why; do
	echo -n "  "$f"... "
	base=$1/`basename $f .why`
	# running Why
	if ! $pgm $2 $f > /dev/null 2>&1; then
	    echo "why FAILED"
	    $pgm $2 $f
	    exit 1
	fi
	echo "why ok... "
    done
}

bads () {
    for f in $1/*.why; do
	echo -n "  "$f"... "
	if $pgm $2 $f > /dev/null 2>&1; then 
	    echo "$pgm $2 $f"
	    echo "FAILED!"
	    exit 1 
        else 
	    echo "ok"
	fi
    done
}

drivers () {
    for f in $1/*.drv; do
	echo -n "  "$f"... "
	# running Why
	if ! echo "theory Test goal G : 1=2 end" | $pgm -F why --driver $f - > /dev/null 2>&1; then
	    echo "why FAILED"
            echo "theory Test goal G : 1=2 end" | $pgm -F why --driver $f -
	    exit 1
	fi
	echo "why ok... "
    done
}

programs () {
    for f in $1/*.mlw; do
	echo -n "  "$f"... "
	if ! $pgml $pgml_options $f > /dev/null 2>&1; then 
	    echo 
	    echo "$pgml $pgml_options $f"
	    $pgml $pgml_options $f
	    echo "FAILED!"
	    exit 1 
        else 
	    echo "ok"
	fi
    done
}

bad_programs () {
    for f in $1/*.mlw; do
	echo -n "  "$f"... "
	if $pgml $pgml_options $f > /dev/null 2>&1; then 
	    echo 
	    echo "$pgml $pgml_options $f"
	    echo "SHOULD FAIL!"
	    exit 1 
        else 
	    echo "ok"
	fi
    done
}

valid_goals () {
    for f in $1/*.mlw; do
	echo -n "  "$f"... "
	if $pgml -P alt-ergo $f | grep -q -v Valid; then
	    echo "valid test $f failed!"
	    echo "$pgml -P alt-ergo $f"
	    $pgml -P alt-ergo $f
	    exit 1
       else 
	    echo "ok"
	fi
    done
}


test_provers () {
    for f in $1/*.mlw; do
	echo -n "  "$f"... "
	if $pgml -P alt-ergo $f | grep -q -v Valid; then
	    echo "valid test $f failed!"
	    exit 1
       else 
	    echo "ok"
	fi
    done
}

test_prover () {
    if $pgm -t 1 -P $1 $2 | grep -q -v Valid; then
	echo "  $1 fails!"
    else
        true
    fi
}


# 1. Syntax
echo "=== Parsing good files  ==="
goods bench/typing/bad --parse-only
echo ""

# 2. Typing
echo "=== Type-checking bad files ==="
bads bench/typing/bad --type-only
echo ""

echo "=== Type-checking good files ==="
goods bench/typing/good --type-only
echo ""

echo "=== Type-checking theories ==="
goods theories --type-only
echo ""

echo "=== Parsing programs ==="
pgml_options=--parse-only
programs bench/programs/bad-typing
programs bench/programs/good
programs examples/programs
echo ""

echo "=== Type-checking bad programs ==="
pgml_options=--type-only
bad_programs bench/programs/bad-typing
echo ""

echo "=== Type-checking good programs ==="
pgml_options=--type-only
programs bench/programs/good
programs examples/programs
echo ""

echo "=== Checking drivers ==="
drivers drivers
echo ""

echo "=== Checking valid goals ==="
valid_goals bench/valid
echo ""

echo "=== Checking provers ==="
echo -n "Test provers on true..."
provers=$($pgm --list-provers | cut -d " " -f 3 |grep -v "^$")
good_provers=""
bad_provers=""
for prover in $(echo $provers); do 
    if bin/why.opt -P $prover bench/true_goal.why | grep -q -v Valid; then
        #echo "$i : Fail"
        bad_provers="$bad_provers $prover"
    else
        #echo "$i : Ok"
        good_provers="$good_provers $prover"
    fi
done
echo "done"
echo ""
echo "On your installation the following provers can't prove \"true\":"
echo "  $bad_provers"
echo ""
echo "So I will only test the following provers:"
echo $good_provers
echo ""
echo "nb : If a prover can't prove a goal it's perhaps normal (ex: TPTP int)"

for file in bench/valid/*.why; do
    echo I test $file
    for prover in $good_provers; do
        test_prover $prover $file
    done
done