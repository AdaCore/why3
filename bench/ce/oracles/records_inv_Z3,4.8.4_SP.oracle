Strongest Postcondition
bench/ce/records_inv.mlw M r'vc: Valid
Model 0: don't know (RAC failure: Cannot construct term for constructor r'mk that is not a function, 0 warnings)
Model 1: don't know (Cannot import value from model: Value of non-free type r, 0 warnings)
Model 2: don't know (Cannot import value from model: Value of non-free type r, 0 warnings)
bench/ce/records_inv.mlw M record_match_eval_test1'vc: Timeout or Unknown
Counter-example model:
File records_inv.mlw:
  Line 15:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : true } }] } }
  Line 16:
    result [@introduced] = {"type" : "Integer" , "val" : "0" }

bench/ce/records_inv.mlw M record_match_eval_test1'vc: Valid
Model 0: don't know (Cannot import value from model: Value of non-free type r, 0 warnings)
Model 1: don't know (Cannot import value from model: Value of non-free type r, 0 warnings)
Model 2: don't know (Cannot import value from model: Value of non-free type r, 0 warnings)
bench/ce/records_inv.mlw M record_match_eval_test2'vc: Timeout or Unknown
Counter-example model:
File records_inv.mlw:
  Line 23:
    x [@introduced] =
      {"proj_name" : ".my_field_f" ,
      "type" : "Proj" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } }
  Line 24:
    x [@introduced] [@model_trace:x] =
      {"proj_name" : ".my_field_f" ,
      "type" : "Proj" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } }

bench/ce/records_inv.mlw M record_match_eval_test3'vc: Timeout or Unknown
bench/ce/records_inv.mlw M record_match_eval_test3'vc: Valid
bench/ce/records_inv.mlw M record_match_eval_test4'vc: Timeout or Unknown
bench/ce/records_inv.mlw M record_match_eval_test4'vc: Valid
bench/ce/records_inv.mlw M record_match_eval_test44'vc: Timeout or Unknown
bench/ce/records_inv.mlw M record_match_eval_test44'vc: Valid
bench/ce/records_inv.mlw M record_match_eval_test44'vc: Valid
bench/ce/records_inv.mlw M test_record_match_eval_test5'vc: Timeout or Unknown
bench/ce/records_inv.mlw M test_record_match_eval_test5'vc: Valid
Model 0: don't know (RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/records_inv.mlw Mutable record_match_eval_test1'vc: Unknown (sat)
Counter-example model:
File records_inv.mlw:
  Line 65:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : true } }] } }
  Line 66:
    result [@introduced] = {"type" : "Integer" , "val" : "0" }

bench/ce/records_inv.mlw Mutable record_match_eval_test1'vc: Valid
Model 0: good model (RAC confirms the counter-example, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/records_inv.mlw Mutable record_match_eval_test2'vc: Unknown (sat)
Counter-example model:
File records_inv.mlw:
  Line 73:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 74:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0: good model (RAC confirms the counter-example, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/records_inv.mlw Mutable record_match_eval_test3'vc: Unknown (sat)
Counter-example model:
File records_inv.mlw:
  Line 78:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 79:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 81:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0: good model (RAC confirms the counter-example, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/records_inv.mlw Mutable record_match_eval_test4'vc: Unknown (sat)
Counter-example model:
File records_inv.mlw:
  Line 83:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 84:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 86:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

