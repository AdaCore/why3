Weakest Precondition
bench/ce/records_inv.mlw M r'vc: Valid
Model 0:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 1:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 2:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
bench/ce/records_inv.mlw M record_match_eval_test1'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records_inv.mlw" 16 14 24#
File records_inv.mlw:
  Line 15:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : true } }] } }
  Line 16:
    result [@introduced] = {"type" : "Integer" , "val" : "0" }

bench/ce/records_inv.mlw M record_match_eval_test1'vc: Valid
Model 0:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 1:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 2:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
bench/ce/records_inv.mlw M record_match_eval_test2'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records_inv.mlw" 24 14 24#
File records_inv.mlw:
  Line 23:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 24:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 1:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 2:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
bench/ce/records_inv.mlw M record_match_eval_test3'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records_inv.mlw" 31 9 25#
File records_inv.mlw:
  Line 28:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 31:
    the check fails with all inputs

bench/ce/records_inv.mlw M record_match_eval_test3'vc: Valid
Model 0:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 1:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 2:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
bench/ce/records_inv.mlw M record_match_eval_test4'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records_inv.mlw" 36 9 26#
File records_inv.mlw:
  Line 33:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 36:
    the check fails with all inputs

bench/ce/records_inv.mlw M record_match_eval_test4'vc: Valid
Model 0:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 1:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 2:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
bench/ce/records_inv.mlw M record_match_eval_test44'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records_inv.mlw" 42 9 26#
File records_inv.mlw:
  Line 39:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 42:
    the check fails with all inputs

bench/ce/records_inv.mlw M record_match_eval_test44'vc: Valid
bench/ce/records_inv.mlw M record_match_eval_test44'vc: Valid
Model 0:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 1:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
Model 2:
  Concrete RAC:  don't know (Concrete RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC: Cannot import value from model: Value of non-free type r, 0 warnings)
    
bench/ce/records_inv.mlw M test_record_match_eval_test5'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records_inv.mlw" 51 9 26#
File records_inv.mlw:
  Line 46:
    re [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 48:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 51:
    the check fails with all inputs

bench/ce/records_inv.mlw M test_record_match_eval_test5'vc: Valid
Model 0:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 65 6 29#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 65 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x -> (r'mk 0 true), #"bench/ce/records_inv.mlw" 65 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x -> (r'mk 0 true), #"bench/ce/records_inv.mlw" 65 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x -> (r'mk 0 true), #"bench/ce/records_inv.mlw" 65 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x -> (r'mk 0 true), #"bench/ce/records_inv.mlw" 65 6 29#
bench/ce/records_inv.mlw Mutable record_match_eval_test1'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records_inv.mlw" 66 14 24#
File records_inv.mlw:
  Line 65:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : true } }] } }
  Line 66:
    result [@introduced] = {"type" : "Integer" , "val" : "0" }

bench/ce/records_inv.mlw Mutable record_match_eval_test1'vc: Valid
Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 73 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 73 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 73 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 73 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 73 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records_inv.mlw" 73 6 29#
bench/ce/records_inv.mlw Mutable record_match_eval_test2'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records_inv.mlw" 74 14 24#
File records_inv.mlw:
  Line 73:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 74:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 78 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 78 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 78 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 78 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 78 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 78 6 29#
bench/ce/records_inv.mlw Mutable record_match_eval_test3'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records_inv.mlw" 79 14 17#
File records_inv.mlw:
  Line 78:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 79:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 81:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 83 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 83 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 83 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 83 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 83 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (r'mk 6 false), #"bench/ce/records_inv.mlw" 83 6 29#
bench/ce/records_inv.mlw Mutable record_match_eval_test4'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records_inv.mlw" 84 14 22#
File records_inv.mlw:
  Line 83:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 84:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 86:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

