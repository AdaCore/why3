Strongest Postcondition
Model 0:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x -> (r'mk 0 false), #"bench/ce/records.mlw" 14 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 14 6 29#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x -> (r'mk 0 false), #"bench/ce/records.mlw" 14 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 14 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x -> (r'mk 2 true), #"bench/ce/records.mlw" 14 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 14 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x -> (r'mk 2 true), #"bench/ce/records.mlw" 14 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 14 6 29#
Model 2:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x -> (r'mk 0 false), #"bench/ce/records.mlw" 14 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 14 6 29#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x -> (r'mk 0 false), #"bench/ce/records.mlw" 14 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 14 6 29#
bench/ce/records.mlw M record_match_eval_test1'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records.mlw" 15 14 24#
File records.mlw:
  Line 15:
    result [@introduced] = {"type" : "Integer" , "val" : "2" }

bench/ce/records.mlw M record_match_eval_test1'vc: Valid
Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records.mlw" 22 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 22 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 0 false), #"bench/ce/records.mlw" 22 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 22 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 2 false), #"bench/ce/records.mlw" 22 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 22 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (r'mk 2 false), #"bench/ce/records.mlw" 22 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 22 6 29#
bench/ce/records.mlw M record_match_eval_test2'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records.mlw" 23 14 24#
File records.mlw:
  Line 22:
    x [@introduced] =
      {"proj_name" : ".my_field_f" ,
      "type" : "Proj" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } }
  Line 23:
    x [@introduced] [@model_trace:x] =
      {"proj_name" : ".my_field_f" ,
      "type" : "Proj" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 27 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 27 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 27 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 27 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 27 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 27 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 27 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 27 6 29#
bench/ce/records.mlw M record_match_eval_test3'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records.mlw" 28 14 18#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
File records.mlw:
  Line 27:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 28:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 30:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 32 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 32 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 32 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 32 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 32 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 32 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 32 6 29#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 32 6 29#
bench/ce/records.mlw M record_match_eval_test4'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records.mlw" 33 14 22#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
File records.mlw:
  Line 32:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 33:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 35:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 38 6 30#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 38 6 30#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 38 6 30#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 38 6 30#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 38 6 30#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 38 6 30#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 38 6 30#
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 38 6 30#
bench/ce/records.mlw M record_match_eval_test44'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records.mlw" 42 13 22#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
File records.mlw:
  Line 38:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 40:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }
  Line 42:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } } }] } }

bench/ce/records.mlw M record_match_eval_test44'vc: Valid
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 47 6 34#
    x5 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 47 6 34#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    re -> (ref'mk (r'mk 0 false)), #"bench/ce/records.mlw" 47 6 34#
    x5 -> (ref'mk (r'mk 6 false)), #"bench/ce/records.mlw" 47 6 34#
bench/ce/records.mlw M test_record_match_eval_test5'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/records.mlw" 48 14 26#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
File records.mlw:
  Line 45:
    re [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 47:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 48:
    re [@field:0:contents] [@introduced] [@model_trace:re] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }
  Line 50:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"proj_name" : "g" ,
      "type" : "Proj" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x6 -> (r'mk1 0 false), #"bench/ce/records.mlw" 64 6 29#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    x6 -> (r'mk1 0 false), #"bench/ce/records.mlw" 64 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x6 -> (r'mk1 0 true), #"bench/ce/records.mlw" 64 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x6 -> (r'mk1 0 true), #"bench/ce/records.mlw" 64 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x6 -> (r'mk1 0 true), #"bench/ce/records.mlw" 64 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x6 -> (r'mk1 0 true), #"bench/ce/records.mlw" 64 6 29#
bench/ce/records.mlw Mutable record_match_eval_test1'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records.mlw" 65 14 24#
File records.mlw:
  Line 64:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : true } }] } }
  Line 65:
    result [@introduced] = {"type" : "Integer" , "val" : "0" }

bench/ce/records.mlw Mutable record_match_eval_test1'vc: Valid
Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x7 -> (r'mk1 0 false), #"bench/ce/records.mlw" 72 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x7 -> (r'mk1 0 false), #"bench/ce/records.mlw" 72 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x7 -> (r'mk1 0 false), #"bench/ce/records.mlw" 72 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x7 -> (r'mk1 0 false), #"bench/ce/records.mlw" 72 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x7 -> (r'mk1 0 false), #"bench/ce/records.mlw" 72 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x7 -> (r'mk1 0 false), #"bench/ce/records.mlw" 72 6 29#
bench/ce/records.mlw Mutable record_match_eval_test2'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records.mlw" 73 14 24#
File records.mlw:
  Line 72:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 73:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x8 -> (r'mk1 6 false), #"bench/ce/records.mlw" 77 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x8 -> (r'mk1 6 false), #"bench/ce/records.mlw" 77 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x8 -> (r'mk1 6 false), #"bench/ce/records.mlw" 77 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x8 -> (r'mk1 6 false), #"bench/ce/records.mlw" 77 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x8 -> (r'mk1 6 false), #"bench/ce/records.mlw" 77 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x8 -> (r'mk1 6 false), #"bench/ce/records.mlw" 77 6 29#
bench/ce/records.mlw Mutable record_match_eval_test3'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records.mlw" 78 14 17#
File records.mlw:
  Line 77:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 78:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 80:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x9 -> (r'mk1 6 false), #"bench/ce/records.mlw" 82 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x9 -> (r'mk1 6 false), #"bench/ce/records.mlw" 82 6 29#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x9 -> (r'mk1 6 false), #"bench/ce/records.mlw" 82 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x9 -> (r'mk1 6 false), #"bench/ce/records.mlw" 82 6 29#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x9 -> (r'mk1 6 false), #"bench/ce/records.mlw" 82 6 29#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x9 -> (r'mk1 6 false), #"bench/ce/records.mlw" 82 6 29#
bench/ce/records.mlw Mutable record_match_eval_test4'vc: Unknown (sat)
Counter-example model for term at #"bench/ce/records.mlw" 83 14 22#
File records.mlw:
  Line 82:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 83:
    x [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }
  Line 85:
    x [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : ".my_field_f" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } },
      {"field" : "g" ,
      "value" : {"type" : "Boolean" ,
      "val" : false } }] } }

