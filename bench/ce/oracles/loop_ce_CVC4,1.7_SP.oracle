Strongest Postcondition
bench/ce/loop_ce.mlw M1 f'vc: Valid
bench/ce/loop_ce.mlw M1 f'vc: Valid
Model 0:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    a -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 6), #"bench/ce/loop_ce.mlw" 7 4 5#
    _ -> (), #"bench/ce/loop_ce.mlw" 7 4 5#
  Abstract RAC:  don't know (Abstract RAC, with the counterexample model cannot continue after #"bench/ce/loop_ce.mlw" 11 2 91#
, 0 warnings)
    
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    a -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 6), #"bench/ce/loop_ce.mlw" 7 4 5#
    _ -> (), #"bench/ce/loop_ce.mlw" 7 4 5#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    a -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 2), #"bench/ce/loop_ce.mlw" 7 4 5#
    _ -> (), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 6), #"bench/ce/loop_ce.mlw" 11 2 91#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    a -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 6), #"bench/ce/loop_ce.mlw" 7 4 5#
    _ -> (), #"bench/ce/loop_ce.mlw" 7 4 5#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    a -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 2), #"bench/ce/loop_ce.mlw" 7 4 5#
    _ -> (), #"bench/ce/loop_ce.mlw" 7 4 5#
    b -> (ref'mk 6), #"bench/ce/loop_ce.mlw" 11 2 91#
bench/ce/loop_ce.mlw M1 f'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/loop_ce.mlw" 13 16 25#
File loop_ce.mlw:
  Line 8:
    a [@field:0:contents] [@introduced] [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "-1" } }] } }
  Line 9:
    a [@field:0:contents] [@introduced] [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "1" } }] } }
  Line 10:
    b [@field:0:contents] [@introduced] [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } }] } }
  Line 11:
    [previous iteration] b [@field:0:contents] [@introduced]
      [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "5" } }] } }
  Line 13:
    [current iteration] a [@field:0:contents] [@introduced]
      [@mlw:reference_var] [@model_trace:a] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "1" } }] } }
    [current iteration] b [@field:0:contents] [@introduced]
      [@mlw:reference_var] [@model_trace:b] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } }] } }
  Line 14:
    [current iteration] b [@field:0:contents] [@introduced]
      [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "6" } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 0), #"bench/ce/loop_ce.mlw" 20 6 7#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 0), #"bench/ce/loop_ce.mlw" 20 6 7#
Model 1:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 20 6 7#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 20 6 7#
Model 2:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 20 6 7#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 20 6 7#
bench/ce/loop_ce.mlw M2 g'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/loop_ce.mlw" 23 13 23#
File loop_ce.mlw:
  Line 20:
    a [@at:X:loc:bench/ce/loop_ce.mlw:23] [@field:0:contents] [@introduced]
      [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } }] } }
  Line 22:
    a [@field:0:contents] [@introduced] [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "1" } }] } }
  Line 23:
    a at X [@at:X] [@at:X:loc:bench/ce/loop_ce.mlw:23] [@field:0:contents]
      [@introduced] [@mlw:reference_var] [@model_trace:a] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "0" } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 20 6 7#
  Abstract RAC:  don't know (Abstract RAC does not confirm the counter-example, no contradiction during execution, 0 warnings)
    a1 -> (ref'mk 1), #"bench/ce/loop_ce.mlw" 20 6 7#
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    a1 -> (ref'mk 10), #"bench/ce/loop_ce.mlw" 20 6 7#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    a1 -> (ref'mk 10), #"bench/ce/loop_ce.mlw" 20 6 7#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    a1 -> (ref'mk 10), #"bench/ce/loop_ce.mlw" 20 6 7#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    a1 -> (ref'mk 10), #"bench/ce/loop_ce.mlw" 20 6 7#
bench/ce/loop_ce.mlw M2 g'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/loop_ce.mlw" 20 31 44#
File loop_ce.mlw:
  Line 20:
    old a [@at:'Old:loc:bench/ce/loop_ce.mlw:20]
      [@at:X:loc:bench/ce/loop_ce.mlw:23] [@field:0:contents] [@introduced]
      [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "10" } }] } }
    a [@field:0:contents] [@introduced] [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "10" } }] } }
    a [@field:0:contents] [@introduced] [@mlw:reference_var]
      [@model_trace:a] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "10" } }] } }
  Line 22:
    a [@field:0:contents] [@introduced] [@mlw:reference_var] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "10" } }] } }

