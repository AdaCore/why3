Strongest Postcondition
Model 0: good model (RAC confirms the counter-example, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/if_assign.mlw Test f'vc: Timeout or Unknown
Counter-example model:
File if_assign.mlw:
  Line 10:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }
  Line 12:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }

Model 0: good model (RAC confirms the counter-example, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/if_assign.mlw Test f2'vc: Timeout or Unknown
Counter-example model:
File if_assign.mlw:
  Line 16:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }

Model 0: good model (RAC confirms the counter-example, 1 warnings)
Model 1: good model (RAC confirms the counter-example, 1 warnings)
Model 2: good model (RAC confirms the counter-example, 1 warnings)
bench/ce/if_assign.mlw Test f3'vc: Timeout or Unknown
Counter-example model:
File int.mlw:
  Line 16:
    a [@introduced] = {"type" : "Integer" , "val" : "0" }
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }
File if_assign.mlw:
  Line 21:
    a [@introduced] = {"type" : "Integer" , "val" : "0" }
  Line 22:
    x [@field:0:contents] [@introduced] [@model_trace:x]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }
  Line 25:
    x [@field:0:contents] [@introduced] [@model_trace:x]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }
  Line 27:
    x [@field:0:contents] [@introduced] [@model_trace:x]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }

Model 0: good model (RAC confirms the counter-example, 1 warnings)
Model 1: good model (RAC confirms the counter-example, 1 warnings)
Model 2: good model (RAC confirms the counter-example, 1 warnings)
bench/ce/if_assign.mlw Test f3'vc: Timeout or Unknown
Counter-example model:
File int.mlw:
  Line 16:
    a [@introduced] = {"type" : "Integer" , "val" : "2" }
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "18" } }] } }
File if_assign.mlw:
  Line 21:
    a [@introduced] = {"type" : "Integer" , "val" : "2" }
  Line 22:
    x [@field:0:contents] [@introduced] [@model_trace:x]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "18" } }] } }
  Line 25:
    x [@field:0:contents] [@introduced] [@model_trace:x]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "18" } }] } }
  Line 27:
    x [@field:0:contents] [@introduced] [@model_trace:x]
      [@vc:written:25:4:20:bench/ce/if_assign.mlw]
      [@vc:written:27:4:11:bench/ce/if_assign.mlw] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "18" } }] } }

Model 0: good model (RAC confirms the counter-example, 0 warnings)
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/if_assign.mlw Test f4'vc: Timeout or Unknown
Counter-example model:
File int.mlw:
  Line 16:
    a [@introduced] = {"type" : "Integer" , "val" : "0" }
File if_assign.mlw:
  Line 30:
    a [@introduced] = {"type" : "Integer" , "val" : "0" }
  Line 34:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "42" } }] } }

bench/ce/if_assign.mlw Test f4'vc: Valid
Model 1: good model (RAC confirms the counter-example, 0 warnings)
Model 2: good model (RAC confirms the counter-example, 0 warnings)
bench/ce/if_assign.mlw Test f4'vc: Timeout or Unknown
Counter-example model:
File int.mlw:
  Line 16:
    a [@introduced] = {"type" : "Integer" , "val" : "2" }
File ref.mlw:
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "18" } }] } }
File if_assign.mlw:
  Line 30:
    a [@introduced] = {"type" : "Integer" , "val" : "2" }
  Line 31:
    the check fails with all inputs
  Line 36:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Integer" ,
      "val" : "18" } }] } }

