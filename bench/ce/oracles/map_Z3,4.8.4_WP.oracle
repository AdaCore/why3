Weakest Precondition
Model 0:
  Concrete RAC:  don't know (Concrete RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 7 12 20#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 7 12 20#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x1 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 7 12 20#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x1 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 7 12 20#
bench/ce/map.mlw M test_map'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/map.mlw" 8 14 28#
File map.mlw:
  Line 7:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
  Line 8:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
  Line 10:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk ({f -> [|1 -> [|0 -> 2; 1 -> 2; _ -> 3|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> [|0 -> 2; 1 -> 2; _ -> 3|]} fun y -> if pure { if y = x
                                                               then True
                                                               else False } then v
           else f y)), #"bench/ce/map.mlw" 13 12 30#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk ({f -> [|1 -> [|0 -> 2; 1 -> 2; _ -> 3|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> [|0 -> 2; 1 -> 2; _ -> 3|]} fun y -> if pure { if y = x
                                                               then True
                                                               else False } then v
           else f y)), #"bench/ce/map.mlw" 13 12 30#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk ({f -> [|1 -> [|0 -> 2; 1 -> 2; _ -> 3|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> [|0 -> 2; 1 -> 2; _ -> 3|]} fun y -> if pure { if y = x
                                                               then True
                                                               else False } then v
           else f y)), #"bench/ce/map.mlw" 13 12 30#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x2 -> (ref'mk ({f -> [|1 -> [|0 -> 2; 1 -> 2; _ -> 3|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> [|0 -> 2; 1 -> 2; _ -> 3|]} fun y -> if pure { if y = x
                                                               then True
                                                               else False } then v
           else f y)), #"bench/ce/map.mlw" 13 12 30#
bench/ce/map.mlw M test_map_multidim1'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/map.mlw" 14 14 34#
File map.mlw:
  Line 13:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
  Line 14:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
  Line 16:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "2" } },
      {"others" : {"type" : "Integer" ,
      "val" : "3" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk ({f -> [|0 -> [|; _ -> 5|];
               1 -> [|1 -> 3; _ -> 2|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> ({f -> [|; _ -> 5|];
                   x -> 0;
                   v -> 3} fun y -> if pure { if y = x then True else False } then v
                   else f y)} fun y -> if pure { if y = x then True
                                                 else False } then v
           else f y)), #"bench/ce/map.mlw" 18 12 30#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk ({f -> [|0 -> [|; _ -> 5|];
               1 -> [|1 -> 3; _ -> 2|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> ({f -> [|; _ -> 5|];
                   x -> 0;
                   v -> 3} fun y -> if pure { if y = x then True else False } then v
                   else f y)} fun y -> if pure { if y = x then True
                                                 else False } then v
           else f y)), #"bench/ce/map.mlw" 18 12 30#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk ({f -> [|0 -> [|; _ -> 5|];
               1 -> [|1 -> 3; _ -> 2|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> ({f -> [|; _ -> 5|];
                   x -> 0;
                   v -> 3} fun y -> if pure { if y = x then True else False } then v
                   else f y)} fun y -> if pure { if y = x then True
                                                 else False } then v
           else f y)), #"bench/ce/map.mlw" 18 12 30#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x3 -> (ref'mk ({f -> [|0 -> [|; _ -> 5|];
               1 -> [|1 -> 3; _ -> 2|]; _ -> [|; _ -> 4|]|];
           x -> 0;
           v -> ({f -> [|; _ -> 5|];
                   x -> 0;
                   v -> 3} fun y -> if pure { if y = x then True else False } then v
                   else f y)} fun y -> if pure { if y = x then True
                                                 else False } then v
           else f y)), #"bench/ce/map.mlw" 18 12 30#
bench/ce/map.mlw M test_map_multidim2'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/map.mlw" 19 14 34#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "5" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
File map.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "5" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
  Line 19:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "5" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "5" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }
  Line 23:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "5" } }] } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } },
      {"others" : {"type" : "Array" ,
      "val" : [{"others" : {"type" : "Integer" ,
      "val" : "4" } }] } }] } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 25 12 26#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 25 12 26#
Model 2:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 25 12 26#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x4 -> (ref'mk ({f -> [|1 -> 3; _ -> 2|];
           x -> 0;
           v -> 3} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 25 12 26#
bench/ce/map.mlw M proj_map_test1'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/map.mlw" 26 14 28#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
File map.mlw:
  Line 25:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
  Line 26:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }
  Line 28:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Integer" ,
      "val" : "3" } },
      {"others" : {"type" : "Integer" ,
      "val" : "2" } }] } }] } }

Model 0:
  Concrete RAC:  don't know (Concrete RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
  Abstract RAC:  don't know (Abstract RAC failure: Cannot create default value for non-free type (->), 0 warnings)
    
Model 1:
  Concrete RAC:  good model (Concrete RAC confirms the counter-example, 0 warnings)
    x5 -> (ref'mk ({f -> [|1 -> true; _ -> false|];
           x -> 0;
           v -> true} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 30 12 26#
  Abstract RAC:  good model (Abstract RAC confirms the counter-example, 0 warnings)
    x5 -> (ref'mk ({f -> [|1 -> true; _ -> false|];
           x -> 0;
           v -> true} fun y -> if pure { if y = x then True else False } then v
           else f y)), #"bench/ce/map.mlw" 30 12 26#
bench/ce/map.mlw M proj_map_test2'vc: Timeout or Unknown
Counter-example model for term at #"bench/ce/map.mlw" 31 14 28#
File ref.mlw:
  Line 18:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"others" : {"type" : "Boolean" ,
      "val" : false } }] } }] } }
  Line 20:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"others" : {"type" : "Boolean" ,
      "val" : false } }] } }] } }
File map.mlw:
  Line 30:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"others" : {"type" : "Boolean" ,
      "val" : false } }] } }] } }
  Line 31:
    x [@field:0:contents] [@introduced] [@model_trace:x] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"others" : {"type" : "Boolean" ,
      "val" : false } }] } }] } }
  Line 33:
    x [@field:0:contents] [@introduced] =
      {"type" : "Record" ,
      "val" : {"Field" : [{"field" : "contents" ,
      "value" : {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"indice" : {"type" : "Integer" ,
      "val" : "1" } ,
      "value" : {"type" : "Boolean" ,
      "val" : true } },
      {"others" : {"type" : "Boolean" ,
      "val" : false } }] } }] } }

Model 0:
   don't know (No model term location, 0 warnings)
    
Model 1:
   don't know (No model term location, 0 warnings)
    
Model 2:
   don't know (No model term location, 0 warnings)
    
bench/ce/map.mlw ModelMap t1: Unknown (sat)
Counter-example model for term at NO LOC
File map.mlw:
  Line 41:
    i [@introduced] = {"type" : "Integer" , "val" : "0" }
    t [@introduced] =
      {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Integer" ,
      "val" : "0" } ,
      "value" : {"type" : "Integer" ,
      "val" : "1" } },
      {"others" : {"type" : "Integer" ,
      "val" : "1" } }] }

Model 0:
   don't know (No model term location, 0 warnings)
    
Model 1:
   don't know (No model term location, 0 warnings)
    
Model 2:
   don't know (No model term location, 0 warnings)
    
bench/ce/map.mlw OtherIndices g: Unknown (sat)
Counter-example model for term at NO LOC
File map.mlw:
  Line 50:
    m [@introduced] =
      {"type" : "Array" ,
      "val" : [{"indice" : {"type" : "Fraction" ,
      "val" : "1\/5" } ,
      "value" : {"type" : "Decimal" ,
      "val" : "2.0" } },
      {"indice" : {"type" : "Fraction" ,
      "val" : "1\/10" } ,
      "value" : {"type" : "Decimal" ,
      "val" : "1.0" } },
      {"others" : {"type" : "Decimal" ,
      "val" : "1.0" } }] }

