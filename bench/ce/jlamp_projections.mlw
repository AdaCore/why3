
module Abstract

use import int.Int

type byte
function to_rep "model_projection" byte : int
predicate in_range (x : int) = -128 <= x <= 127
axiom range_axiom : forall x:byte. in_range (to_rep x)


val of_int (x:int) : byte
  requires { in_range x }
  ensures { to_rep result = x }

val add (x y : byte) : byte
  requires { "expl:integer overflow" in_range (to_rep x + to_rep y) }
  ensures { to_rep result = to_rep x + to_rep y }

use import ref.Ref

let p3 (a "model_projected" : ref byte) =
  a := add !a (of_int 1)

end

module Record

use import int.Int
use import Abstract

type r = {mutable f : byte; mutable g : bool}

function get_f "model_projection" (x:r) : byte = x.f
function get_g "model_projection" (x:r) : bool = x.g

let p4 (b "model_projected" : r) =
  if b.g then b.f <- add b.f (of_int 1)

end
