#!/bin/bash

dir=`dirname $0`

updateoracle=false
forceupdateoracle=false
files=""
success=true
suffix=""

while test $# != 0; do
case "$1" in
  "-suffix")
      suffix="$2"
      shift 2;;
  "-update-oracle")
      updateoracle=true
      shift 1;;
  "-force-update-oracle")
      forceupdateoracle=true
      shift 1;;
  "-"*)
      printf "unknown option: %s\n" "$1"
      printf "usage: check-ce-bench [-update-oracle] [-suffix <suffix>] <files>\n"
      printf "  <files> must be given without the '.mlw' suffix\n"
      printf "  if <files> empty, use all files from directory 'ce'\n"
      exit 2;;
  *)
      files="$files $1"
      shift 1;;
esac
done

if test "$files" = "" ; then
    files="$dir/check-ce/*.mlw"
fi

failed=""

whydata=$(bin/why3"$suffix" --print-datadir)
whylib=$(bin/why3"$suffix" --print-libdir)

colorize() {
    if command -v pygmentize &> /dev/null; then
        pygmentize -ldiff
    else
        cat
    fi
}

# types for which the current bench is non deterministic
nondet_types=""

remove_solver_details_result=""
remove_solver_details () {
  remove_solver_details_result=$(sed 's/[0-9]\+\.[0-9]\+s//g' $1 2> /dev/null | \
    sed 's/[0-9]\+ steps//g' | \
    sed -r 's/(Timeout.*$|Unknown \(unknown\).*$|Unknown \(incomplete\).*$|\Unknown \(unknown \+ incomplete\).*$|\Unknown \(unknown \+ interrupted\).*$)/Timeout or Unknown/')
}

check_nondet () {
    case "$1" in
        # "bench/check-ce/EXAMPLE1.mlw")
        #     nondet=true
        #     nondet_types="Integer String";;
        # "bench/check-ce/EXAMPLE2.mlw")
        #     nondet=true
        #     nondet_types="Integer";;
        *)
            nondet=false
            nondet_types="";;
    esac
}

remove_nondet_result=""
# $1 = string, $2 = type
remove_nondet () {
  remove_nondet_result=$(echo "$1" | \
    sed 's/"type": "'"$2"'", "val": "\([^"]\|\\"\)\+"/"type": "'"$2"'", "val": "ANY_'"$2"'"/g' | \
    # in the interpretation log there is no type in values, thus we need to remove all
    sed 's/\(\([a-z]\|_\)[^ ]*\) = [^\n]\+/\1 = ANY_VALUE/g')
}

# $1 = prover, $2 = dir, $3 = filename, $4 = true for WP; false for SP
run () {
    printf "  $2 ($1)... "
    file_path="$2/$3"
    if $4; then
        f="${file_path}_$1_WP"
        oracle_file="$2/oracles/$3_$1_WP.oracle"
        wp_sp=""
        echo "Weakest Precondition" > "$f.out"
        printf "Weakest Precondition  ${file_path} ($1)... "
    else
        f="${file_path}_$1_SP"
        oracle_file="$2/oracles/$3_$1_SP.oracle"
        wp_sp=" --debug=vc_sp"
        echo "Strongest Postcondition" > "$f.out"
        printf "Strongest Postcondition  ${file_path} ($1)... "
    fi
    prover="$1,counterexamples"
    $dir/../bin/why3"$suffix" prove --check-ce -P "$prover" --timelimit=1 -a split_vc "${file_path}.mlw" -L "$2" --debug=check-ce,rac-values -v 5 2>&1 \
      | sed -e "s|$whydata|WHY3DATA|g" -e "s|$whylib|WHY3LIB|g" \
      > "$f.out"
    remove_solver_details "$f.out"
    str_out=$remove_solver_details_result
    remove_solver_details "${oracle_file}"
    str_oracle=$remove_solver_details_result
    if [ "$str_oracle" = "$str_out" ] ; then
        echo "ok"
    else
        check_nondet "${file_path}.mlw"
        for type in $nondet_types; do
            remove_nondet "$str_out" "$type"
            str_out=$remove_nondet_result
            remove_nondet "$str_oracle" "$type"
            str_oracle=$remove_nondet_result
        done
        if [ "$nondet_types" != "" ] && [ "$str_oracle" = "$str_out" ] ; then
            echo "ok (nondet detected)"
        else
            if $updateoracle; then
                echo "Updating oracle"
                mv "$f.out" "${oracle_file}"
            else
                echo "FAILED!"
                echo "diff is the following:"
                echo "$f"
                diff -u <(echo "$str_oracle") <(echo "$str_out")|colorize
                failed="$failed$f\n"
                success=false
            fi
        fi
    fi
    if $forceupdateoracle; then
        echo "Forcing update oracle for ${file_path}, prover $1"
        mv "$f.out" "${oracle_file}"
    fi
}

for file in $files; do
    filedir=`dirname $file`
    filebase=`basename $file .mlw`
    printf "Running provers on $filedir/$filebase.mlw\n";
    run CVC4,1.7 $filedir $filebase true
    run CVC4,1.7 $filedir $filebase false
    run Z3,4.8.4 $filedir $filebase true
    run Z3,4.8.4 $filedir $filebase false
done
if $success; then
    echo "Check-ce bench: success"
    exit 0
else
    printf "\nCheck-ce bench: failed\n$failed\n"
    exit 1
fi
