#!/bin/bash

dir=`dirname $0`

updateoracle=false
forceupdateoracle=false
files=""
success=true

while test $# != 0; do
case "$1" in
  "-update-oracle")
      updateoracle=true;;
  "-force-update-oracle")
      forceupdateoracle=true;;
  "-"*)
      printf "unknown option: %s\n" "$1"
      printf "usage: check-ce-bench [-update-oracle] <files>\n"
      printf "  <files> must be given without the '.mlw' suffix\n"
      printf "  if <files> empty, use all files from directory 'ce'\n"
      exit 2;;
  *)
       files="$files $1"
esac
shift
done

if test "$files" = "" ; then
    files="$dir/check-ce/*.mlw"
fi

failed=""

# $1 = prover, $2 = dir, $3 = filename, $4 = true for WP; false for SP
run () {
    printf "  $2 ($1)... "
    file_path="$2/$3"
    if $4; then
        f="${file_path}_$1_WP"
        oracle_file="$2/oracles/$3_$1_WP.oracle"
        wp_sp=""
        echo "Weakest Precondition" > "$f.out"
        printf "Weakest Precondition  ${file_path} ($1)... "
    else
        f="${file_path}_$1_SP"
        oracle_file="$2/oracles/$3_$1_SP.oracle"
        wp_sp=" --debug=vc_sp"
        echo "Strongest Postcondition" > "$f.out"
        printf "Strongest Postcondition  ${file_path} ($1)... "
    fi
    prover="$1,counterexamples"
    $dir/../bin/why3prove.opt --check-ce -P "$prover" --timelimit=1 -a split_vc "${file_path}.mlw" -L "$2" --debug=check-ce 2>&1 \
      | sed "s|$(bin/why3.opt --print-datadir)|WHY3DATA|g" \
      | sed "s|$(bin/why3.opt --print-libdir)|WHY3LIB|g" \
      > "$f.out"
    str_out=$(sed 's/[0-9]\+\.[0-9]\+s//g' "$f.out" | \
              sed 's/[0-9]\+ steps//g' | \
              sed -r 's/(Timeout.*$|Unknown \(unknown\).*$|Unknown \(incomplete\).*$|\Unknown \(unknown \+ incomplete\).*$|\Unknown \(unknown \+ interrupted\).*$)/Timeout or Unknown/')
    str_oracle=$(sed 's/[0-9]\+\.[0-9]\+s//g' "${oracle_file}" | \
                 sed 's/[0-9]\+ steps//g' | \
                 sed -r 's/(Timeout.*$|Unknown \(unknown\).*$|Unknown \(incomplete\).*$|\Unknown \(unknown \+ incomplete\).*$|\Unknown \(unknown \+ interrupted\).*$)/Timeout or Unknown/')
    if [ "$str_oracle" = "$str_out" ] ; then
        echo "ok"
    else
        if $updateoracle; then
            echo "Updating oracle for ${file_path}, prover $1"
            mv "$f.out" "${oracle_file}"
        else
            echo "FAILED!"
            echo "diff is the following:"
            echo "$f"
            diff <(echo "$str_oracle") <(echo "$str_out")
            failed="$failed$f\n"
            success=false
        fi
    fi
    if $forceupdateoracle; then
        echo "Forcing update oracle for ${file_path}, prover $1"
        mv "$f.out" "${oracle_file}"
    fi
}

for file in $files; do
    filedir=`dirname $file`
    filebase=`basename $file .mlw`
    printf "Running provers on $filedir/$filebase.mlw\n";
    run CVC4,1.7 $filedir $filebase true
    run CVC4,1.7 $filedir $filebase false
    run Z3,4.8.4 $filedir $filebase true
    run Z3,4.8.4 $filedir $filebase false
done
if $success; then
    echo "Check-ce bench: success"
    exit 0
else
    printf "\nCheck-ce bench: failed\n$failed\n"
    exit 1
fi
