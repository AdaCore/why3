
module Test
	use array.Array
	use ref.Ref
	use ref.Refint
	use int.Int

	let b [@bddinfer] [@infer](x:int): unit
	=
		let k = ref 0 in
		while (!k < x) do
		variant { x - !k }
		invariant { !k = 0 \/ 0 <= !k <= x}
		incr k;
		()
		done; ()

	let b3 [@bddinfer] [@infer:box](x:int): unit
	=
		let k = ref 0 in
		while (!k < x) do
		variant { x - !k }
		invariant { !k = 0 \/ 0 <= !k <= x}
		incr k;
		()
		done; ()

	let c [@bddinfer] [@infer](x:int): unit
	=
		let k = ref 0 in
		let j = ref 0 in
		while (!k < x) do
		variant { x - !k }
		invariant { !k = 0 \/ 0 <= !k <= x /\ !k *2 = !j}
		incr k;
		j := !j + 2;
		()
		done; ()

	let e [@bddinfer] [@infer](x:int) : unit
	requires { x > 0 }
	=
		let k = ref 0 in
		k := x;
		while (true) do
		variant {0}
		invariant { !k = x }
		()
		done; ()

	let e2 [@bddinfer] [@infer:oct](x:int) : unit
	requires { x > 0 }
	=
		let k = ref 0 in
		k := x;
		while (true) do
		variant {0}
		invariant { !k = x }
		()
		done; ()

	let e3 [@bddinfer] [@infer:box](x:int) : unit
	requires { x > 0 }
	=
		let k = ref 0 in
		k := x;
		while (true) do
		variant {0}
		invariant { !k = x }
		()
		done; ()

end
