

=== Long-term Roadmap (see below for roadmap to next release) ===========

* Logic language
** support for higher-order logic
** rename andb, orb, xorb and notb into and, or, xor and not

* more libraries (theories and modules)

* WhyML
  ** regions : strong update
  ** clone module
  ** ghost code
  ** extraction of Ocaml code
  ** logic symbols used in programs

* Jessie3

* traceability: Partially done
  (Claude)
  TODO: traceability des hyp comme path dans le prog (depuis
  Frama-C en particulier)
  afficher les explications dans les outils en ligne de
  commande why3 et why3bench + le path

* Coq plugin

* Coq realization of theories
  (Andrei)

* IDE:
** edition, navigation (partially done)
** restore provers detection in the middle of a session.
  + todo: run detection immediately at start up if conf file absent or
    outdated
** reimplement "hide proved goals" feature
  + suggested solution: replace model + filter_model by a custom model
  (JC + ?)
** saving session
   * add a "cancel" choice in the "ask" window
   * add "ctrl-S" to save the session explicitly
     (partially done, but no shortcut)

* Add more examples in the regression tests and in the proval gallery

* Papers to write

  * DONE Encodings and transformations (Andrei+Francois)
  * DONE Why presentation at the IVL workshop of CADE:
    (http://research.microsoft.com/en-us/um/people/moskal/boogie2011/)
    deadline: May 1st
  * Caml code ?
  * logic language for talking to provers
  ** FOL + poly + alg + ind + rec ? + theories
  * VACID-0
  * system description (e.g. at CAD, TACAS)
  * rapports recherche ?

* choose a logo -> done ?

* complete doc/api.tex: explain how to build theories, apply
  transformations, write new functions on terms (A)


=== Roadmap for third release 0.70, july 2011 ========================

* Final preparation: put on the web page
** why3-0.70.tar.gz
** manual in PDF: TODO: check that macro \todo can be commented out 
   from ./macros.tex
** API doc in HTML (suggestion: http://why3.lri.fr/api/)
   Note: check that URL of API doc is correct in doc/api.tex line 9.
** What to put in the annoucement
   - WhyML VC generator to prove programs
   - new tool why3replayer
   - incompatible changes in syntax: function, predicate, and, or
   - session database in XML format instead of sqlite3
   - threads problem in IDE solved (by not using threads anymore)
   - IDE: not necessary to exit to change the input file: just use "reload"
** as soon as possible: update why3 output of Why2, release Why 2.30

* increment the magic number in config (A)

* distribute bench files (A + F)

* document new IDE features (C)

* document "Make obsolete" (A)

* Distribution of examples: we should distribute those who have an xml file
  under git, and distribute the XML and Coq proofs
    (JC)

* (done) update doc for why3replayer
 - not done: parler des examples distribues ci dessus

* update IDE section of starting.tex (C)

* DONE doc: citer l'article Boogie 2011 quelque part

* DONE deplacer le bouton "Cancel" dans le menu "tools",
  le renommer en "make obsolete"

* DONE Check if remark in doc/api.tex line 80 is still valid (A)

* DONE put an up-to-date use_api.ml in the manual (C)

* DONE enlever les caracteres de tab des sources
  et les caracteres latin1 (A)

* DONE faire tourner headache pour refabriquer les headers (A)
  ** dans gappa.ml : ajouter Guillaume en dessous de l'entete

* DONE Rendre optionnel la question "would you like to save the session ?"
   (C) -> 3-state options (Yes/No/ask) dans la config
  + DONE dans le menu "file" : "save session" sans raccourci clavier

* DONE desactiver "Save" (et editable=false dans la fenetre)

* DONE mettre "Quit" en dernier (C)

* DONE checkout frais, compilation (local ou non) et make bench chaque nuit sur moloch
  (?)

* DONE IDE: reload
  (claude)

* DONE BD : se passer de sqlite3
  (Claude)
  Solution: un unique fichier XML, qui est ecrit mais pas
  tres souvent (pas plus d'une fois par seconde)
  ne pas oublier neanmoins de mettre une action dans Timeout
  qui enregistre au bout d'un moment
  pb: n'est pas independant de l'IDE, peut-on faire un module
  independant de l'IDE ? qui serait utilisé par why3bench ?

* DONE IDE: avoir des transformations non codees en dur
  (Claude d'abord)

* DONE Bug des md5
  (Claude. pas reproductible ? Pb de duplication des buts ?)

* DONE IDE: no more threads

* DONE proof replay
  ** DONE IDE: replay all obsolete but previously successful proofs
  ** DONE in why3replay in whybench
  ** DONE add replay of existing proofs in "make bench" to detect regression
  ** DONE add automatic recompilation, install and bench every night on moloch

* DONE IDE: implement "inline" (use transformation inline_goal)
  ** problem 1: detect that transformation did nothing
  ** DONE problem 2: reimport from db does apply inline correctly

* DONE IDE: debug "remove" et "clean" qui provoquent des segfaults !!

* IDE: ajouter "invalid" comme cas de resultats de preuve
  (utiliser call_provers.proof_result dans gmain)
  DONE


=== Roadmap for second release 0.64 ========================================

* fix local installation
  ** fix local executables names (DONE)

* fix problems with .why.conf (DONE)
  ** if we distribute the current state, users who already have a ~/.why.conf
     will get a error message because of missing loadpath to modules
     Done? - the magic number will force to not use the old ~/.why.conf of
             the user
  ** generally speaking, we should rethink the design of that .why.conf: avoid
     absolute paths,
     Partially done - libdir, datadir, loadpath, ... are not written in
     why.conf if they correspond to the default value.


* IDE, file names in DB: use only file names relative to the db file
  DONE

=== Roadmap for December 2010 ================================================

== Documentation ==

1 Introduction (done: suppressed)
2 getting started (Claude: done, to be read by others)
3 Syntax, tutorial (done: Andrei)
4 tutorial for API:
** build a task (Claude: done, to be read by others)
** call a prover (Claude: done, to be read by others)
** apply a transformation (a completer plus tard)
** develop a new transformation (a completer plus tard)
5 syntax reference (a completer plus tard par typage et semantique)
6 Standard lib of theories:
  (Claude: done, although quite sparse, to be read by others)
7 Manpages
7.1 Compilation, Installation (done)
7.2 external provers (done)
7.3 why3config (done)
7.4 why3 (done)
7.5 whyml (done)
7.6 IDE (done)
7.7 whybench (done, to be read by others)
7.8 why.conf (done)
7.9 drivers (to be done later)
7.10 transformations (done)
8 API: Andrei + Francois
  (should we really add that in the doc ?)
** on remplace par la version HTML a mettre sur la forge INRIA (Francois)
** TODO: mettre un titre au HTML engendré

== IDE ==

(Claude)

* database, session save and restore (done)
* Coq output (done)
* Gappa output (done)
* debug hide goals (TODO)
* add "context" options (partially done)
** semantics not clear, should be clarified, documented and
   implemented accordingly
* add transf "inline goal" (to be done later)
* add button "remove"
** removing goals: done
** removing transformation: done, but subgoals stay in db (not critical)
* add button "replay" (to be done later)
** semantics: replay obsolete proofs

== Misc ==

* README (done)
* INSTALL (done)
* LICENSE (done)
* OCAML-LICENSE (done)
* TODO: licence pour les boomy icons

* debuguer cpulimit pour gappa (pb de return code)

* option --version a tous les executables (done, except IDE: bug 11604)
** + affichage dans l'IDE (done)
* Builtin arrays in provers (done)
* make install (done)
* make distrib (done)
* "make -j" (done)
* META for ocamlfind (done)
* headers (done)

== Mails announcement ==

----------------------- Why-discuss list ---------------------------

We are happy to announce the first public release of Why3, also known
as the Why platform next generation. It is a new project, independent
from Why versions 2.xx.

The home web page of Why3 is http://why3.gforge.inria.fr, where you
can find the source distribution and the manual. See the manual for
installation instructions and contact information.

The main new features with respect to Why 2.xx are the following.

1) Completely redesigned input syntax for logic declarations

* new syntax for terms and formulas
* enumerated and algebraic data types, pattern matching
* recursive definitions of logic functions and predicates,
  with termination checking
* inductive definitions of predicates
* declarations are structured in components called "theories",
  which can be reused and instantiated

2) More generic handling of goals and lemmas to prove

* concept of proof task
* generic concept of task transformation
* generic approach for communicating with external provers

3) Source code organized as a library with a documented API,
to allow access to Why3 features programmatically.

4) GUI with new features w.r.t. the former GWhy

* session save and restore
* prover calls in parallel
* splitting, and more generally applying task transformations, on demand
* ability to edit proofs for interactive provers (Coq only for the moment)
  on any subtask

5) Extensible architecture via plugins

* users can define new transformations
* users can add connections to additional provers


Beware that some Why features are not yet available in Why3:

* There is a VC generator distributed in Why3 in an experimental stage
  and intentionally undocumented in the current documentation (the input
  syntax for programs may change a lot in the future).

* There is no front-end for other languages like C or Java. However,
  the last release Why 2.28 is able to use Why3 as a back-end

Notice that Why3 is expected to replace Why2 in the future. As such,
it is the project where improvements and new features will be
implemented. As this is the first public release of Why3, it is likely
that missing features, and possibly bugs, will raise soon. Please
report those in the bug tracker, we will do our best to fix them and
provide new releases in a short time.





--------------------- Frama-C list ----------------------------


The first release of Why3, also known as the Why platform next
generation, is publicly available. Why3 is a new project, independent
from Why. The detailed announcement is attached below.

The Jessie plugin of the Why release 2.28 has the ability to use Why3
as back-end. You must install both Why 2.28 and Why3 for this to work.

Using the Why3 GUI on a C file is done as follows
  frama-c -jessie -jessie-atp why3ide <file>.c
(You can also run it in batch mode using
  frama-c -jessie -jessie-atp why3 <file>.c
and process the generated Why3 file "<file>.jessie/why/<file>_why3.why"
with Why3 batch tools).

The main new features of interest in the GUI are

* new provers available
* calling provers in parallel
* splitting on demand
* ability to call Coq on a given VC to provide a proof script. Incidentally,
  this feature can be used to analyse the VC to understand why it is
  not proved automatically.
* proof session saved and restored at startup

Any question, remark or bug report concerning only Why3 should be done
using the Why3 public discussion list and bug tracker.





