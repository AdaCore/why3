stages:
  - docker
  - build
  - test
  - nightly
  - deploy

variables:
  BUILD_IMAGE: "$CI_REGISTRY_IMAGE:ci-master-2022-05-31"
  SPHINX_IMAGE: "$CI_REGISTRY_IMAGE:ci-sphinx"
  GIT_CLEAN_FLAGS: "-ffdxq"

build-image:
  stage: docker
  image: docker
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - if docker pull "$BUILD_IMAGE"; then echo "Image already exists!"; exit 1; fi
    - docker build --force-rm -t "$BUILD_IMAGE" - < misc/Dockerfile.build
    - docker push "$BUILD_IMAGE"
    - docker rmi "$BUILD_IMAGE"
  only:
    variables:
      - $NEW_BUILD_IMAGE
  tags:
    - large

sphinx-image:
  stage: docker
  image: docker
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - if docker pull "$SPHINX_IMAGE"; then echo "Image already exists!"; exit 1; fi
    - docker build --force-rm -t "$SPHINX_IMAGE" - < misc/Dockerfile.sphinx
    - docker push "$SPHINX_IMAGE"
    - docker rmi "$SPHINX_IMAGE"
  only:
    variables:
      - $NEW_SPHINX_IMAGE
  tags:
    - medium

.docker_template:
  image: "$BUILD_IMAGE"
  dependencies: []
  tags:
    - medium

build-system:
  stage: build
  variables:
    COMPILER: system
  script:
    - misc/ci-local.sh
  extends: .docker_template

build-latest:
  stage: build
  variables:
    COMPILER: latest
  script:
    - misc/ci-local.sh doc
  artifacts:
    paths:
      - doc/generated
    expire_in: 1 day
  extends: .docker_template

bench-system:
  variables:
    COMPILER: system
  stage: test
  script:
    - misc/ci-local.sh bench doc
  extends: .docker_template

bench-latest:
  variables:
    COMPILER: latest
  stage: test
  script:
    - misc/ci-local.sh ide bench
  extends: .docker_template

full:
  stage: test
  variables:
    COMPILER: full
  script:
    - misc/ci-local.sh ide doc web_ide bench
  extends: .docker_template

nightly-bench:
  stage: nightly
  variables:
    COMPILER: bench
  script:
    - misc/ci-local.sh nightly-bench-reduced
  extends: .docker_template

ce-bench:
  stage: nightly
  variables:
    COMPILER: bench
  script:
    - misc/ci-local.sh ce-bench
  extends: .docker_template

opam:
  stage: build
  script:
    - opam switch bench
    - misc/ci-opam.sh why3 why3-ide
  extends: .docker_template

opam-latest:
  stage: test
  script:
    - opam switch latest
    - misc/ci-opam.sh why3 why3-ide
  extends: .docker_template

opam-full:
  stage: test
  script:
    - opam switch full
    - misc/ci-opam.sh why3 why3-ide why3-coq
    - opam exec -- ocamlfind ocamlopt -package why3 -o test -linkpkg misc/test_lib.ml
  extends: .docker_template

deploy:
  stage: deploy
  image: docker
  script:
    - BRANCH=$(echo $CI_COMMIT_REF_NAME | tr -cs "[:alnum:].\n" "-")
    - CACHE=$CI_REGISTRY_IMAGE:cache-$BRANCH
    - IMAGE=$CI_REGISTRY_IMAGE:$BRANCH
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker pull "$CACHE" || true
    - docker pull "$IMAGE" || true
    - docker build --force-rm --cache-from="$CACHE" --target=builder -t "$CACHE" -f misc/Dockerfile.deploy .
    - docker build --force-rm --cache-from="$CACHE" --cache-from="$IMAGE" -t "$IMAGE" -f misc/Dockerfile.deploy .
    - test -n "$CI_COMMIT_TAG" || docker push "$CACHE"
    - docker push "$IMAGE"
    - docker rmi "$CACHE"
    - docker rmi "$IMAGE"
    - docker image prune -f
  only:
    - master
    - /^bugfix[/]v[0-9.]*$/
    - tags
  tags:
    - medium

doc:
  stage: test
  image: "$SPHINX_IMAGE"
  dependencies:
    - build-latest
  script:
    - sphinx-build -W --keep-going -b html doc public
  artifacts:
    paths:
      - public
    expire_in: 1 day
  tags:
    - medium

pages:
  stage: deploy
  image: busybox
  dependencies:
    - doc
  script:
    - echo "Already in public/"
  artifacts:
    paths:
      - public
    expire_in: 1 day
  only:
    - master
  tags:
    - small
