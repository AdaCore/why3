stages:
  - docker
  - build
  - test
  - nightly
  - deploy

variables:
  BUILD_IMAGE: "$CI_REGISTRY_IMAGE:ci-master-2020-09-14"
  SPHINX_IMAGE: "$CI_REGISTRY_IMAGE:ci-sphinx"
  GIT_CLEAN_FLAGS: "-ffdxq"

build-image:
  stage: docker
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - if docker pull "$BUILD_IMAGE"; then echo "Image already exists!"; exit 1; fi
    - docker build --force-rm -t "$BUILD_IMAGE" - < misc/Dockerfile.build
    - docker push "$BUILD_IMAGE"
    - docker rmi "$BUILD_IMAGE"
  only:
    variables:
      - $NEW_BUILD_IMAGE
  tags:
    - shell

sphinx-image:
  stage: docker
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - if docker pull "$SPHINX_IMAGE"; then echo "Image already exists!"; exit 1; fi
    - docker build --force-rm -t "$SPHINX_IMAGE" - < misc/Dockerfile.sphinx
    - docker push "$SPHINX_IMAGE"
    - docker rmi "$SPHINX_IMAGE"
  only:
    variables:
      - $NEW_SPHINX_IMAGE
  tags:
    - shell

.docker_template: &docker_definition
  image: "$BUILD_IMAGE"
  tags:
    - docker

.build_template: &build_definition
  stage: build
  script:
    - misc/ci-local.sh
  <<: *docker_definition

build-system:
  variables:
    COMPILER: system
  <<: *build_definition

build-latest:
  variables:
    COMPILER: latest
  <<: *build_definition

bench-system:
  variables:
    COMPILER: system
  stage: test
  script:
    - misc/ci-local.sh bench ide doc
  <<: *docker_definition

bench-latest:
  variables:
    COMPILER: latest
  stage: test
  script:
    - misc/ci-local.sh ide bench
  <<: *docker_definition

full:
  stage: test
  variables:
    COMPILER: full
  script:
    - misc/ci-local.sh ide doc web_ide bench
  <<: *docker_definition

nightly-bench:
  stage: nightly
  variables:
    COMPILER: bench
  script:
    - misc/ci-local.sh nightly-bench-reduced
  <<: *docker_definition

ce-bench:
  stage: nightly
  variables:
    COMPILER: bench
  script:
    - misc/ci-local.sh ce-bench
  <<: *docker_definition

opam:
  stage: build
  script:
    - opam switch bench
    - opam pin -n add why3 .
    - opam pin -n add why3-ide .
    - opam install -v why3
    - opam install -v why3-ide
    - opam exec -- ocamlfind ocamlopt -package why3 -o test -linkpkg misc/test_lib.ml
  <<: *docker_definition

opam-latest:
  stage: test
  script:
    - opam switch latest
    - opam pin -n add why3 .
    - opam pin -n add why3-ide .
    - opam install -v why3
    - opam install -v why3-ide
    - opam exec -- ocamlfind ocamlopt -package why3 -o test -linkpkg misc/test_lib.ml
  <<: *docker_definition

opam-full:
  stage: test
  script:
    - opam switch full
    - opam pin -n add why3 .
    - opam pin -n add why3-ide .
    - opam pin -n add why3-coq .
    - opam install -v why3
    - opam install -v why3-ide
    - opam install -v why3-coq
    - opam exec -- ocamlfind ocamlopt -package why3 -o test -linkpkg misc/test_lib.ml
  <<: *docker_definition

deploy:
  stage: deploy
  script:
    - BRANCH=$(echo $CI_COMMIT_REF_NAME | tr -cs "[:alnum:].\n" "-")
    - CACHE=$CI_REGISTRY_IMAGE:cache-$BRANCH
    - IMAGE=$CI_REGISTRY_IMAGE:$BRANCH
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker pull "$CACHE" || true
    - docker pull "$IMAGE" || true
    - docker build --force-rm --cache-from="$CACHE" --target=builder -t "$CACHE" -f misc/Dockerfile.deploy .
    - docker build --force-rm --cache-from="$CACHE" --cache-from="$IMAGE" -t "$IMAGE" -f misc/Dockerfile.deploy .
    - test -z "$CI_COMMIT_TAG" || docker push "$CACHE"
    - docker push "$IMAGE"
    - docker rmi "$CACHE"
    - docker rmi "$IMAGE"
    - docker image prune -f
  only:
    - master
    - /^bugfix[/]v[0-9.]*$/
    - tags
  tags:
    - shell

.sphinx_template: &sphinx_definition
  image: "$SPHINX_IMAGE"
  tags:
    - docker

doc:
  stage: build
  script:
    - make -f doc.Makefile public/index.html
  <<: *sphinx_definition

pages:
  stage: deploy
  script:
    - make -f doc.Makefile public/index.html
  artifacts:
    paths:
    - public
  only:
    - master
  <<: *sphinx_definition
